OpenMCL 1.1-pre-061231
- The FASL version changed (old FASL files won't work with this
  lisp version), as did the version information which tries to
  keep the kernel in sync with heap images.
  The binary incompatibility has to do with how a few pages of
  low memory in the lisp kernel's address space are mapped and
  used.  OpenMCL was generally assuming that these pages were
  otherwise unused and could be used to map a small static data
  area from the heap image file; on some platforms, the dynamic
  linker may have already allocated data in those unused pages
  before the lisp kernel even starts to run.  Fixing this involved
  changing the address of that small static data area slightly,
  and this caused the addresses of some objects contained within
  that static data area - notably NIL - to change, as well.
- This snapshot is otherwise just a set of bug fixes/work-in-progress
  changes.
- Even though no supported filesystem actually supports versioned files,
  OpenMCL now tries to retain PATHNAME-VERSION informaton for physical
  pathnames.  (The fact that it didn't caused several ANSI test failures.)
  This change introduced/exposed a few other bugs; I think that I've
  caught at least the most obvious ones, but it's possible that some
  new pathname-related bugs have been introduced.
- The cron job that runs on clozure.com and updates the ChangeLog from
  CVS commit info stopped running as of a system upgrade in late November.
  The problem was fixed a couple of weeks ago, so it's once again meaningful
  to refer to the ChangeLog for details of bug fixes.
- FSQRT and FSQRTS instructions are "optional" on the PPC.  In practice,
  that often meant that they are implemented on chips made by IBM and
  not on chips made by Motorola/FreeScale.  This version of OpenMCL
  assumes that they're implemented and emulates them if they aren't.
- OSX 10.2 (Jaguar) and earlier versions are officially no longer
  supported.  (I honestly don't know if things have actually worked
  on Jaguar in a while, but some recent changes are known not to
  work on Jaguar and the kernel now inists on at least Panther on
  startup.
OpenMCL 1.1-pre-061205
- This release is intended to package up the bug fixes since
  the 061110 tarballs.  There aren't too many changes in 
  functionality or any deep architectural changes since 061110, 
  and it should be easy to bootstrap from current sources with 
  061110 images.
  (It'd still be a good idea to recompile your code with 
  up-to-date images, whether you download those images or
  build them yourself from CVS.)
- The one (barely) notable change in functionality has to do
  with how the lisp sets up pathname translations for the
  "ccl" logical host when the "CCL_DEFAULT_DIRECTORY" environment
  variable isn't set (e.g., when a shell script isn't used to
  invoke the lisp.)  Previous versions just used the current
  directory; this version tries to use the directory containing
  the current heap image.  The new scheme might get fooled by
  symbolic links (either following them or not following them
  could be wrong), but it's more likely to work for people
  who don't read or understand the discussion of the shell script
  in the documentation.
- All (knock wood) bugs that have been reported since the 061110
  images were released should be fixed.  Well, almost all.  The
  fixes include:

  - a typo (wrong register) in the "generic" version of the
    code which implements (SETF AREF) on 2-dimensional arrays
    on x86-64
  - incorrect bounds checking on vector references on x86-64,
    which caused some invalid indices to be treated as valid
    (usually leading to a segfault).  IIRC, the invalid indices
    that were erroneously accepted were fixnums whose absolute
    value was > (expt 2 56).  (More or less.).
  - Missing stream methods (especially involving string streams)
    affecting all platforms.
  - Several bugs involving GCD, some of which were specific to
    64-bit platforms and some of which affected all platforms.
    (These bugs sometimes affected results returned by #'/,
    LCM, and other funtions.)

  - OpenMCL has only ever supported an ELEMENT-TYPE argument of
   ([signed,unsigned]-byte 8|16|32|64) on binary file streams (with
   64-bit types supported only on 64-bit platforms.)  It has not
   previously tried to upgrade a supplied element-type to a supported
   one (it does now) and any errors that resulted from supplying an
   element-type that was not supported (and could not be upgraded) were
   either obscure side-effects or quiet misbehavior; an error (a
   SIMPLE-ERROR complaining about the unsupported element type) is now
   signaled as soon as attempts to upgrade to a supported element type
   fail.  I believe that the current behavior is both compliant and
   reasonable; it's probably better to discuss that issue on 
   openmcl-devel than to do so here.


OpenMCL 1.1-pre-061110
- The FASL version changed (old FASL files won't work with this
  lisp version), as did the version information which tries to
  keep the kernel in sync with heap images.
- Several bug fixes (see ChangeLog), and modest-to-moderate
  performance improvements.  Notably, AREF and (SETF AREF)
  of 2- and 3-dimensional arrays are open-coded in more cases
  and are usually at least 5x faster than in previous versions.
  If the compiler knows that the array in question is a
  SIMPLE-ARRAY of appropiate dimensionality and knows the
  array's element-type, the speedup can be much greater.
  There are certainly opportunities for further improvements
  here, both in breadth (handling more cases) and depth
  (eliminating some type-and-bounds checking in safe code,
  doing parts of index calculations at compile-time when
  bounds and indices are constants ...), but things are
  generally improved.
- QUIT and SAVE-APPLICATION work a little differently; in
  particular, SAVE-APPLICATION sometimes runs after #_exit
  is called (via the #_atexit mechanism).
  The motivation for this change has to do with how some
  environments (Cocoa, to name one) conflate the ideas of
  "shutting down the GUI" with "exiting the application".
  Previous versions of OpenMCL tried to work around this
  by overriding some internal Cocoa methods; that approach
  was never particularly attractive and (predictably) it'll
  break in future OSX releases.
  The new scheme (which involves letting code run after #_exit
  has been called) certainly offers other ways to lose; so
  far, I haven't seen evidence of such lossage.
- For historical reasons (forgotten historical reasons, in fact)
  the PPC versions of OpenMCL run with floating-point underflow
  exceptions disabled (the x86-64 versions enable these exceptions
  by default.)  This should change soon (as soon as I remember
  to change it ...); it's unlikely that this will affect much
  user code, but it's possible that it'll do so.
OpenMCL 1.1-pre-061024
- The FASL version changed (old FASL files won't work with this
  lisp version), as did the version information which tries to
  keep the kernel in sync with heap images.
- Linux users: it's possible (depending on the distribution that
  you use) that the lisp kernel will claim to depend on newer
  versions of some shared libraries than the versions that you
  have installed.  This is mostly just an artifact of the GNU
  linker, which adds version information to dependent library
  references even though no strong dependency exists.  If you
  run into this, you should be able to simply cd to the appropriate
  build directory under ccl/lisp-kernel and do a "make".
- There's now a port of OpenMCL to FreeBSD/amd64; it claims to be
  of beta quality.  (The problems that made it too unstable
  to release as of a few months ago have been fixed;  I stil run
  into occasional FreeBSD-specific issues, and some such issues
  may remain.)
- The Darwin X8664 port is a bit more stable (no longer generates
  obscure "Trace/BKPT trap" exits or spurious-looking FP exceptions.)
  I'd never want to pass up a chance to speak ill of Mach, but both
  of these bugs seemed to be OpenMCL problems rather than Mach kernel
  problems, as I'd previously more-or-less assumed.
- I generally don't use SLIME with OpenMCL, but limited testing
  with the 2006-04-20 verson of SLIME seems to indicate that no
  changes to SLIME are necessary to work with this version.
- CHAR-CODE-LIMIT is now #x110000, which means that all Unicode
  characters can be directly represented.  There is one CHARACTER
  type (all CHARACTERs are BASE-CHARs) and one string type (all
  STRINGs are BASE-STRINGs.)  This change (and some other changes
  in the compiler and runtime) made the heap images a few MB larger
  than in previous versions.
- As of Unicode 5.0, only about 100,000 of 1114112./#x110000 CHAR-CODEs
  are actually defined; the function CODE-CHAR knows that certain
  ranges of code values (notably #xd800-#xddff) will never be valid
  character codes and will return NIL for arguments in that range,
  but may return a non-NIL value (an undefined/non-standard CHARACTER
  object) for other unassigned code values.
- The :EXTERNAL-FORMAT argument to OPEN/LOAD/COMPILE-FILE has been
  extended to allow the stream's character encoding scheme (as well
  as line-termination conventions) to be specified; see more
  details below.  MAKE-SOCKET has been extended to allow an
  :EXTERNAL-FORMAT argument with similar semantics.
- Strings of the form "u+xxxx" - where "x" is a sequence of one
  or more hex digits- can be used as as character names to denote
  the character whose code is the value of the string of hex digits. 
  (The +  character is actually optional, so  #\u+0020, #\U0020, and
  #\U+20 all refer to the #\Space character.)  Characters with codes
  in the range #xa0-#x7ff (IIRC) also have symbolic names (the
  names from the Unicode standard with spaces replaced with underscores),
  so #\Greek_Capital_Letter_Epsilon can be used to refer to the character
  whose CHAR-CODE is #x395.
- The line-termination convention popularized with the CP/M operating
  system (and used in its descendants) - e.g., CRLF - is now supported,
  as is the use of Unicode #\Line_Separator (#\u+2028).
- About 15-20 character encoding schemes are defined (so far); these
  include UTF-8/16/32 and the big-endian/little-endian variants of
  the latter two and ISO-8859-* 8-bit encodings.  (There is not
  yet any support for traditional (non-Unicode) ways of externally
  encoding characters used in Asian languages, support for legacy
  MacOS encodings, legacy Windows/DOS/IBM encodings, ...)  It's hoped
  that the existing infrastructure will handle most (if not all) of
  what's missing; that may not be the case for "stateful" encodings
  (where the way that a given character is encoded/decoded depend
  on context, like the value of the preceding/following character.)
- There isn't yet any support for Unicode-aware collation (CHAR>
  and related CL functions just compare character codes, which
  can give meaningless results for non-STANDARD-CHARs), case-inversion,
  or normalization/denormalization.  There's generally good support
  for this sort of thing in OS-provided libraries (e.g., CoreFoundation
  on MacOSX), and it's not yet clear whether it'd be best to duplicate
  that in lisp or leverage library support.
- Unicode-aware FFI functions and macros are still in a sort of
  embryonic state if they're there at all; things like WITH-CSTRs
  continue to exist (and continue to assume an 8-bit character
  encoding.)
- Characters that can't be represented in a fixed-width 8-bit
  character encoding are replaced with #\Sub (= (code-char 26) =
  ^Z) on output, so if you do something like:

? (format t "~a" #\u+20a0)

  you might see a #\Sub character (however that's displayed on
  the terminal device/Emacs buffer) or a Euro currency sign or
  practically anything else (depending on how lisp is configured
  to encode output to *TERMINAL-IO* and on how the terminal/Emacs
  is configured to decode its input.

  On output to streams with character encodings that can encode
  the full range of Unicode - and on input from any stream -
  "unencodable characters" are represented using the Unicode
  #\Replacement_Character (= #\U+fffd); the presence of such a
  character usually indicates that something got lost in translation
  (data wasn't encoded properly or there was a bug in the decoding
  process.)
- Streams encoded in schemes which use more than one octet per code unit
  (UTF-16, UTF-32, ...) and whose endianness is not explicit will be 
  written with a leading byte-order-mark character on (new) output and
  will expect a BOM on input; if a BOM is missing from input data,
  that data will be assumed to have been serialized in big-endian order.
  Streams encoded in variants of these schemes whose endianness is
  explicit (UTF-16BE, UCS-4LE, ...) will not have byte-order-marks written
  on output or expected on input.  (UTF-8 streams might also contain
  encoded byte-order-marks; even though UTF-8 uses a single octet per
  code unit - and possibly more than one code unit per character - this
  convention is sometimes used to advertise that the stream is UTF-8-
  encoded.  The current implementation doesn't skip over/ignore leading
  BOMs on UTF8-encoded input, but it probably should.)

  If the preceding paragraph made little sense, a shorter version is
  that sometimes the endianness of encoded data matters and there
  are conventions for expressing the endianness of encoded data; I
  think that OpenMCL gets it mostly right, but (even if that's true)
  the real world may be messier.
- By default, OpenMCL uses ISO-8859-1 encoding for *TERMINAL-IO*
  and for all streams whose EXTERNAL-FORMAT isn't explicitly specified.
  (ISO-8859-1 just covers the first 256 Unicode code points, where
  the first 128 code points are equivalent to US-ASCII.)  That should
  be pretty much equivalent to what previous versions (that only
  supported 8-bit characters) did, but it may not be optimal for 
  users working in a particular locale.  The default for *TERMINAL-IO*
  can be set via a command-line argument (see below) and this setting
  persists across calls to SAVE-APPLICATION, but it's not clear that
  there's a good way of setting it automatically (e.g., by checking
  the POSIX "locale" settings on startup.)  Thing like POSIX locales
  aren't always set correctly (even if they're set correctly for
  the shell/terminal, they may not be set correctly when running
  under Emacs ...) and in general, *TERMINAL-IO*'s notion of the
  character encoding it's using and the "terminal device"/Emacs subprocess's
  notion need to agree (and fonts need to contain glyphs for the
  right set of characters) in order for everything to "work".  Using
  ISO-8859-1 as the default seemed to increase the likelyhood that
  most things would work even if things aren't quite set up ideally
  (since no character translation occurs for 8-bit characters in
  ISO-8859-1.)
- In non-Unicode-related news: the rewrite of OpenMCL's stream code
  that was started a few months ago should now be complete (no more
  "missing method for BASIC-STREAM" errors, or at least there shouldn't
  be any.)
- I haven't done anything with the Cocoa bridge/demos lately, besides
  a little bit of smoke-testing.

Some implementation/usage details:

Character encodings.

CHARACTER-ENCODINGs are objects (structures) that're named by keywords
(:ISO-8859-1, :UTF-8, etc.).  The structures contain attributes of
the encoding and functions used to encode/decode external data, but
unless you're trying to define or debug an encoding there's little
reason to know much about the CHARACTER-ENCODING objects and it's
generally desirable (and sometimes necessary) to refer to the encoding
via its name.

Most encodings have "aliases"; the encoding named :ISO-8859-1 can
also be referred to by the names :LATIN1 and :IBM819, among others.
Where possible, the keywordized name of an encoding is equivalent
to the preferred MIME charset name (and the aliases are all registered
IANA charset names.)

NIL is an alias for the :ISO-8859-1 encoding; it's treated a little
specially by the I/O system.

The function CCL:DESCRIBE-CHARACTER-ENCODINGS will write descriptions
of all defined character encodings to *terminal-io*; these descriptions
include the names of the encoding's aliases and a doc string which
briefly describes each encoding's properties and intended use.

Line-termination conventions.

As noted in the <=1.0 documentation, the keywords :UNIX, :MACOS, and
:INFERRED can be used to denote a stream's line-termination conventions.
(:INFERRED is only useful for FILE-STREAMs that're open for :INPUT or
:IO.)  In this release, the keyword :CR can also be used to indicate
that a stream uses #\Return characters for line-termination (equivalent
to :MACOS), the keyword :UNICODE denotes that the stream uses Unicode
#\Line_Separator characters to terminate lines, and the keywords :CRLF,
:CP/M, :MSDOS, :DOS, and :WINDOWS all indicate that lines are terminated
via a #\Return #\Linefeed sequence.

In some contexts (when specifying EXTERNAL-FORMATs), the keyword :DEFAULT
can also be used; in this case, it's equivalent to specifying the value
of the variable CCL:*DEFAULT-LINE-TERMINATION*.  The initial value of
this variable is :UNIX.

Note that the set of keywords used to denote CHARACTER-ENCODINGs and
the set of keywords used to denote line-termination conventions is
disjoint: a keyword denotes at most a character encoding or a line
termination convention, but never both.

External-formats.

EXTERNAL-FORMATs are also objects (structures) with two read-only
fields that can be accessed via the functions EXTERNAL-FORMAT-LINE-TERMINATION
and EXTERNAL-FORMAT-CHARACTER-ENCODING; the values of these fields are
line-termination-convention-names and character-encoding names as described
above.

An EXTERNAL-FORMAT object via the function MAKE-EXTERNAL-FORMAT:

MAKE-EXTERNAL-FORMAT &key domain character-encoding line-termination

(Despite the function's name, it doesn't necessarily create a new,
unique EXTERNAL-FORMAT object: two calls to MAKE-EXTERNAL-FORMAT
with the same arguments made in the same dynamic environment will
return the same (eq) object.)

Both the :LINE-TERMINATION and :CHARACTER-ENCODING arguments default
to :DEFAULT; if :LINE-TERMINATION is specified as or defaults to
:DEFAULT, the value of CCL:*DEFAULT-LINE-TERMINATION* is used to
provide a concrete value. 

When the :CHARACTER-ENCODING argument is specifed as/defaults to
:DEFAULT, the concrete character encoding name that's actually used
depends on the value of the :DOMAIN argument to MAKE-EXTERNAL-FORMAT.
The :DOMAIN-ARGUMENT's value can be practically anything; when it's
the keyword :FILE and the :CHARACTER-ENCODING argument's value is
:DEFAULT, the concrete character encoding name that's used will be
the value of the variable CCL:*DEFAULT-FILE-CHARACTER-ENCODING*; the
initial value of this variable is NIL (which is an alias for :ISO-8859-1).
If the value of the :DOMAIN argument is :SOCKET and the :CHARACTER-ENCODING
argument's value is :DEFAULT, the value of 
CCL:*DEFAULT-SOCKET-CHARACTER-ENCODING* is used as a concrete character
encoding name.  The initial value of CCL:*DEFAULT-SOCKET-CHARACTER-ENCODING*
is NIL, again denoting the :ISO-8859-1 encoding.
If the value of the :DOMAIN argument is anything else, :ISO-8859-1 is
also used (but there's no way to override this.)  

The result of a call to MAKE-EXTERNAL-FORMAT can be used as the value
of the :EXTERNAL-FORMAT argument to OPEN, LOAD, COMPILE-FILE, and
MAKE-SOCKET; it's also possible to use a few shorthand constructs
in these contexts:

* if ARG is unspecified or specified as :DEFAULT, the value of the
  variable CCL:*DEFAULT-EXTERNAL-FORMAT* is used.  Since the value
  of this variable has historically been used to name a default
  line-termination convention, this case effectively falls into
  the next one:
* if ARG is a keyword which names a concrete line-termination convention,
  an EXTERNAL-FORMAT equivalent to the result of calling
  (MAKE-EXTERNAL-FORMAT :line-termination ARG)
   will be used
* if ARG is a keyword which names a character encoding, an EXTERNAL-FORMAT
  equvalent to the result of calling 
  (MAKE-EXTERNAL-FORMAT :character-encoding ARG)
  will be used
* if ARG is a list, the result of (APPLY #'MAKE-EXTERNAL-FORMAT ARG)
  will be used

(When MAKE-EXTERNAL-FORMAT is called to create an EXTERNAL-FORMAT
object from one of these shorthand designators, the value of the
:DOMAIN keyword argument is :FILE for OPEN,LOAD, and COMPILE-FILE
and :SOCKET for MAKE-SOCKET.)

STREAM-EXTERNAL-FORMAT.
The CL function STREAM-EXTERNAL-FORMAT - which is portably defined
on FILE-STREAMs - can be applied to any open stream in this release
and will return an EXTERNAL-FORMAT object when applied to an open
CHARACTER-STREAM. For open CHARACTER-STREAMs (other than STRING-STREAMs),
SETF can be used with STREAM-EXTERNAL-FORMAT to change the stream's
character encoding, line-termination, or both.

If a "shorthand" external-format designator is used in a call to
(SETF STREAM-EXTERNAL-FORMAT), the "domain" used to construct an
EXTERNAL-FORMAT is derived from the class of the stream in the
obvious way (:FILE for FILE-STREAMs, :SOCKET for ... well, for
sockets ...)

Note that the effect or doing something like:

(let* ((s (open "foo" ... :external-format :utf-8)))
  ...
  (unread-char ch s)
  (eetf (stream-external-format s) :us-ascii)
  (read-char s))

might or might not be what was intended.  The current behavior is
that the call to READ-CHAR will return the previously unread character
CH, which might surprise any code which assumes that the READ-CHAR
will return something encodable in 7 or 8 bits.  Since functions
like READ may call UNREAD-CHAR "behind your back", it may or may
not be obvious that this has even occurred; the best approach to
dealing with this issue might be to avoid using READ or explicit
calls to UNREAD-CHAR when processing content encoded in multiple
external formats.

There's a similar issue with "bivalent" streams (sockets) which
can do both character and binary I/O with an :ELEMENT-TYPE of
(UNSIGNED-BYTE 8).  Historically, the sequence:

   (unread-char ch s)
   (read-byte s)

caused the READ-BYTE to return (CHAR-CODE CH); that made sense
when everything was implicitly encoded as :ISO-8859-1, but may not
make any sense anymore.  (The only thing that seems to make sense
in that case is to clear the unread character and read the next
octet; that's implemented in some cases but I don't think that
things are always handled consistently.)

Command-line argument for specifying the character encoding to
be used for *TERMINAL-IO*.

Shortly after a saved lisp image starts up, it creates the standard
CL streams (like *STANDARD-OUTPUT*, *TERMINAL-IO*, *QUERY-IO*, etc.);
most of these streams are usually SYNONYM-STREAMS which reference
the TWO-WAY-STREAM *TERMINAL-IO*, which is itself comprised of
a pair of CHARACTER-STREAMs.  The character encoding used for
any CHARACTER-STREAMs created during this process is the one
named by the value of the variable CCL:*TERMINAL-CHARACTER-ENCODING-NAME*;
this value is initially NIL.

The -K or --terminal-encoding command-line argument can be used to
set the value of this variable (the argument is processed before the
standard streams are created.)  The string which is the value of
the -K/--terminal-encoding argument is uppercased and interned in
the KEYWORD package; if an encoding named by that keyword exists,
CCL:*TERMINAL-CHARACTER-ENCODING-NAME* is set to the name of that
encoding.  For example:

shell> openmcl -K utf-8

will have the effect of making the standard CL streams use :UTF-8
as their character encoding.

(It's probably possible - but a bit awkward - to use (SETF EXTERNAL-FORMAT)
from one's init file or --eval arguments or similar to change existing
streams' character encodings; the hard/awkward parts of doing so include
the difficulty of determining which standard streams are "real" character
streams and which are aliases/composite streams.)

OpenMCL 1.1-pre-069826
- There's an (alpha-quality, maybe) port to x86-64 Darwin (e.g., the
  Mac Pro.)  Some known problems include:
  
  * infrequently (but not infrequently enough) the lisp dies on
    startup with a spurious "Trace/BKPT trap" error message.  This
    seems to be timing-dependent and (very generally) seems to
    involve the Mach exception thread not recognizing an exception
    used to effect exception return.  Sometimes, this shows up
    as a (:SIGNALED 5) error when REBUILD-CCL runs the lisp to
    create a new image.

  * some math library primitives (#_asin, for one) generate
    spurious incidental FP exceptions that have nothing to
    do with the validity of the arguments or result.  To work around
    this, the lisp ignores FP exceptions which might have occurred
    during a call into the math library; that means that it doesn't
    detect -real- FP exceptions when they're signaled.  (This bug
    only affects things that call into the system math library;
    lisp arithmetic operations that're done inline are not affected.)

  * The version of OSX/Darwin that shipped with the Mac Pro is missing
    some functionality that from OpenMCL's point of view is highly
    desirable (namely, the ability to keep application-level thread-
    specific data in a per-thread block of memory addressed by an
    otherwise unused segment register.)  To get things working (as
    well as they are), the lisp "shares" the segment register that
    the pthreads library uses to access thread data.  This scheme
    isn't intended to be long-lived (and negatively affects
    performance of things like foreign-function calls, callbacks,
    and exception handling).
 
  * The .cdb files (libc only for Tiger) in ccl:darwin-x86-headers64;
    were cross-developed on a Linux x86-64 system, since Apple
    has not yet released the sources to their x86-64 enabled gcc.

- On all platforms, stream code has been rewritten and often offers
  better (sometimes substantially better) performance.  OPEN and
  MAKE-SOCKET have each been extended to take additional keyword
  arguments.

  :SHARING, which can have the values :PRIVATE (the default), :LOCK,
  or :EXTERNAL (NIL is also accepted as synonym for :EXTERNAL)

   :PRIVATE specifies that the stream can only be accessed by
   the thread that created it.  (There was some discussion on openmcl-devel
   about the idea of "transferring ownership" of a stream; this has
   not yet been implemented.)  Attempts to do I/O on a stream with
   :PRIVATE sharing from a thread other than the stream's owner yield
   an error.

   :LOCK specifies that all access to the stream require the calling
   thread to obtain a lock; there are separate "read" and "write"
   locks for IO streams (so it's possible for one thread to read
   from such a stream while another thread writes to it, for instance.)
   :LOCK was the implicit default for all streams prior to this change.
   (See below - under the discussion of the AUTO-FLUSH mechanism -
   for a discussion of one of the implications of this change that
   affects SLIME users.)

   :EXTERNAL (or NIL) specifies that I/O primitives enforce no
   access protocol.  This may be appropriate for some types of application
   which can control stream access via application-level protocols.  Note
   that since even the act of reading from a stream changes its internal
   state (and simultaneous access from multiple threads can therefore
   lead to corruption of that state), some care must be taken in the
   design of such protocols.

  The :BASIC keyword argument influences whether or not the stream
  will be an instance of the class FUNDAMENTAL-STREAM (the superclass
  from which all Gray stream classes inherit) or a subclass of the
  built-in class CCL::BASIC-STREAM.  The default value of :BASIC
  is T and this has effect for FILE-STREAMs created via OPEN;
  SOCKETs are still always implemented as FUNDAMENTAL (Gray) streams,
  though this should change soon.

   The tradeoff between FUNDAMENTAL and BASIC streams is entirely
   between flexibility and (potential or actual) performance.  I/O
   primitives can recognize BASIC-STREAMs and exploit knowledge of
   implementation details; FUNDAMENTAL stream classes can be
   subclassed in a semi-standard way (the Gray streams protocol.)

   For existing stream classes (FILE-STREAMs, SOCKETs, and the
   internal CCL::FD-STREAM classes used to implement file streams
   and sockets), a lot of code can be shared between the
   FUNDAMENTAL and BASIC implementations.  The biggest difference
   should be that that code can be reached from I/O primitives
   like READ-CHAR without going through some steps that're there
   to support generality and extensibility, and skipping those
   steps when that support isn't needed can improve I/O performance.

   Gray stream methods (STREAM-READ-CHAR) should work on
   appropriate BASIC-STREAMs.  (There may still be cases where
   such methods are undefined; such cases should be considered
   bugs.)  It is not guaranteed that Gray stream methods would
   ever be called by I/O primitives to read a character from
   a BASIC-STREAM (though there are still cases where this happens.)

   A simple loop reading 2M characters from a text file runs about
   10X faster when the file is opened the new defaults (:SHARING :PRIVATE
   :BASIC T) than it had before these changes were made.  That sounds
   good, until one realizes that the "equivalent" C loop can be about
   10X faster still ...

 - Forcing output to interactive streams.

   OpenMCL has long had a (mostly undocumented) mechanism whereby
   a mostly idle thread wakes up a few (~3) times per second and
   calls FORCE-OUTPUT on specified OUTPUT-STREAMS; this helps to
   ensure that streams with which a user would be expected to
   interact (the output side of *TERMINAL-IO*, listener windows
   in a GUI, etc.) have all buffered output flushed without
   requiring application or I/O library code to be concerned about
   that.

   The SLIME lisp interaction mode for Emacs uses this mechanism,
   but the changes described above interfere with SLIMEs use of
   it:  in order to be safely accessed from multiple threads (the
   SLIME REPL thread and the thread which does the background
   periodic flushing of buffered output), a stream must have
   been created with :SHARING :LOCK in effect.  This is no longer
   the effective default; the code which does the periodic
   output flushing ignores streams which do not use locks as an
   access/sharing mechanism.  THIS MEANS THAT BUFFERRED OUTPUT
   TO SLIME REPLs WILL NOT BE AUTOMATICALLY FLUSHED TO THE SCREEN.
   A small change to SLIME's "swank-openmcl.lisp" is required
   to restore this functionality.  First,  a brief description of
   a couple of new primitives:

   (CCL:ADD-AUTO-FLUSH-STREAM s)

    Adds "s", which should be a "simple" OUTPUT-STREAM as returned
    by OPEN or MAKE-SOCKET, to a list of streams whose buffered
    output should be periodically flushed.  If S was not created
    with :SHARING :LOCK in effect, the stream will have its
    :SHARING mode changed to put :SHARING :LOCK into effect.

   (CCL:REMOVE-AUTO-FLUSH-STREAM s)
    
    Removes S from the internal list of automatically flushed
    streams.  Does not restore the stream's :SHARING mode, which
    may have been changed by a previous call to ADD-AUTO-FLUSH-STREAM.

 - SLIME changes
   In slime:swank-openmcl.lisp, around line 182, the method

(defmethod make-stream-interactive ((stream ccl:fundamental-output-stream))
  (push stream ccl::*auto-flush-streams*))

   should be changed to use CCL:ADD-AUTOFLUSH-STREAM if it's defined:

(defmethod make-stream-interactive ((stream ccl:fundamental-output-stream))
  (if (fboundp 'ccl::add-auto-flush-stream)
    (ccl::add-auto-flush-stream stream)
    (push stream ccl::*auto-flush-streams*)))

   That's adequate for the moment, since sockets are still 
   FUNDAMENTAL-STREAMs.  When that changes, some more extensive changes
   to swank-openmcl.lisp may become necessary.

- on x86-64, floating-point-underflow exceptions are now enabled
  by default.  (They really should be on ppc as well.)  Again,
  this affects FP operations that are done in lisp code and
  the results of FP operations that are reported in response
  to calls to reasonable (non-Darwin) math libraries.  This
  can affect whether or not some "potential number"  reader 
  tokens are representable as numbers, e.g., whether or not
  attempts to read something like "1.0f-50" signal underflow
  or are quietly mapped to 0.0f0.

- examples: Phil (from the mailing list) has added code which 
  supports some of the ffi examples from the documentation.

- Bug fixes: see ChangeLog



OpenMCL 1.1-pre-060705
- Bug fixes again.  Some internal changes to support a FreeBSD/AMD64
  port that's not quite ready.

- :MCL is back on *features*; there seem to be too many packages out
  there that expect it to be, and there hasn't been enough advance
  notice of its pending removal.
    
OpenMCL 1.1-pre-060623
- Mostly bug fixes (a CLOS bug that prevented the ObjC bridge from 
  working, FIXNUM arrays weren't quite finished on PPC)

- Use Tiger inferfaces (from XCode 10.4u SDK) on DarwinPPC32

- Add gl, gtk2, gnome2 interfaces for x86-64.  Add a tiny
  "gtk2-clock" example, tweak the opengl-ffi (GLUT) example
  so that it works on x86-64.

- Some changes to the ObjC bridge to support loading additional
  frameworks; update the WebKit example to use these new features.

- Still an outstanding issue where things like MAKE-OBJC-INSTANCE
  need access to the interfaces at runtime (and can crash if they
  aren't available.) 

- Build snapshots for LinuxPPC{32,64}.

OpenMCL 1.1-pre-060608
- The FASL version changed, as did the version number which pairs
  the lisp kernel with heap images.  Images saved with older kernels
  can't be loaded on this one; the images/kernels in the 060608
  snapshot tarballs should match.

  Most of the ABI changes that caused these version changes were
  x86-64 specific; some auxiliary stack pointers that had been
  kept in MMX registers are now kept in per-thread memory. (Signal/
  exception handlers generally need to be able to access these
  stack pointers, but at least some versions of the Linux kernel
  don't reliably pass correct values of the MMX registers in the
  signal contexts passed to signal handlers.  Moral: some kinds
  of stack-allocation and foreign-function operations may (or may not)
  be a few cycles slower, but OpenMCL should be a bit less prone
  to fatal segfault exceptions.)

  Other than that, most changes since the 060530 snapshots are
  bugfixes (see the ChangeLog for details).  The x86-64 port has been
  exercised fairly heavily (if somewhat narrowly) and its welcome
  banner now claims that it's a beta release.  I think that that's
  probably fair, and hope that anyone who may have been reluctant to
  test an alpha release will agree and be less reluctant.

- There's still much more to be done, but some preliminary 1.1 documentation
  is now online at:

<http://newsite.openmcl.clozure.com/Doc>

  Note that some relative links on "newsite" may be invalid, but the
  internal links in the Doc directory should work.

  As noted above, it still needs a lot of work; feedback, criticism,
  and help would all be appreciated.

OpenMCL 1.1-pre-060530

- These release notes have gotten woefully out of date.

- OpenMCL now runs on x86-64 (AMD64, Intel EM64T) systems under Linux.
  It announces itself as an alpha release in the Welcome banner; it should
  in fact be very nearly feature-complete (but possibly still buggy.)
  There's a chicken-and-egg issue in that it needs more testing before
  it can be formally released and some people may be waiting for a more
  stable version.

  The build process and most user-visible things should behave the same
  way as on PPC; using REBUILD-CCL (described below) is generally the
  simplest way to rebuild from sources.  A few (intentional) differences:
 
  * the lisp kernel is named "lx86cl64", the default heap image is
    named "LX86CL64" (e.g., the kernel name, case-inverted) and the
    bootstrapping image is conventionally named "x86-boot64".

  * FASL files have the extension "lx64fsl"

  * the kernel build directory is "ccl/lisp-kernel/linuxx8664"

  * the "openmcl64" shell script can be used to invoke the
    lisp, as on 64-bit PPC platforms.

Other changes tend to be a little more modest:

- there is now a specialized FIXNUM array element type on all platforms.
  (distinct from T or (SIGNED-BYTE <machine-word-size>)).  Access to
  such vectors is a little cheaper than the SIGNED-BYTE case (since
  elements are known to be fixnums) and a little easier on the GC
  than the T case (the GC can avoid looking at their contents and
  there are no associated EGC write-barrier issues.)

- "colon" commands entered into the REPL/break loops don't need to
  be parenthesized if the command and all operands are on the same
  line. E.g.

1> :f 0

  and

1> (:f 0)

  are equivalent (and have the effect of examining the raw contents of
  the 0th stack frame)

- the syntax of the :B (backtrace) break-loop has changed; rather
  than taking an optional argument which specifies whether or not
  frame details should be shown, it now accepts keyword arguments
  for specifying:
   
  :start	; unsigned integer: the index of the first frame to show
  :count	; unsigned integer: the maximum number of frames to show
  :detailed-p	; boolean: whether or not to show frame detail

- a new break-loop command :NFRAMES returns the number of stack frames
  accessible to backtrace.  (Both this change and the previous
  are intended to help deal with deep recursion/stack overflow cases.)

- any command-line arguments that follow a "--" pseudo-argument
  are not processed by the lisp startup code and are stored
  (as a list of strings) in CCL:*UNPROCESSED-COMMAND-LINE-ARGUMENTS*.
  E.g.:

shell> openmcl -- -foo 17
[...]
? ccl:*UNPROCESSED-COMMAND-LINE-ARGUMENTS*
=> ("-foo" "17")

OpenMCL 1.1-pre-060226

- The --thread-stack-size (or -Z)  command-line argument changes the values
  of the variables used to determine the sizes of the listener thread.
  The values of these variables will persist accross SAVE-APPLICATION;
  these values have no effect on the sizes of stacks in threads created
  under explicit user control.

- New functions:

  (CCL:GC-VERBOSE on-full-gc &optional (on-egc on-full-gc))

  Causes the GC to print (or stop printing ...) informational messages
  on entry and exit.  The ON-FULL-GC argument controls whether or
  not these messages are printed on ... a full GC, and the ON-EGC
  argument (which defaults to the value of the ON-FULL-GC argument)
  controls whether messages are printed on ephemeral GCs.

  (CCL:GC-VERBOSE-P)

  Returns two values (corresponding to the arguments of the last call
  to CCL:GC-VERBOSE.)

  (CCL:REBUILD-CCL &key :FULL :CLEAN :KERNEL :FORCE :RELOAD :EXIT 
                         :RELOAD-ARGUMENTS)

  Depending on the values of its arguments, recompiles lisp and/or
  kernel sources and optionallly re-generates ("reloads") a heap
  image.

  Arguments:

  clean   deletes FASL and .o files before performing other steps
  kernel  rebuilds the lisp kernel
  force   forces recompilation, even if binary is newer than source
  reload  tries to rebuild a full heap image after other build steps
  exit    quits after all other steps
  full    equivalent to :CLEAN T :KERNEL T :RELOAD T
  reload-arguments a list of strings, passed as additional arguments
                   to the reload step.  E.g. '("--thread-stack-size" "128M").

  Output from the :KERNEL and :RELOAD steps is ordinarily only displayed
  if an error occurs.
  

- Changes

  TRACE now prints an integer (corresponding to the level of indentation)
  on each line of output.

  Tracing callbacks is currently broken (it may be reimplemented; if so,
  it'd be implemented somewhat differently ...)

- Bugs

  Several bugs involving interactions between the GC and (many) active
  threads have been fixed; at least one such bug remains (the symptom
  involves a recently allocated  array somehow getting trashed or GCed
  incorrectly; the  cause has been under investigation for weeks but is 
  still not known.)

OpenMCL 1.1-pre-060125

- FASL version changed; delete old FASL (.dfsl, .pfsl, .dfsl64, .pfsl64) files
 
- "kernel ABI version" changed; build a new lisp kernel before trying to load/use
   060125 images.

-  Changes: (see also ChangeLog)

   New variable:

   CCL:*HOST-PAGE-SIZE*

   Initialized on application startup to contain the MMU/OS page size in bytes.
   This is 4K on PPC platforms (and likely on most? all? x86 platforms).

   New functions:

   CCL:DEFAULT-ALLOCATION-QUANTUM

   Returns an integer, the value of which is used by the lisp kernel when
   mapping heap memory from the OS.  Mapping requests are usually made in
   multiples of this value.  

   This value is read-only; currently, it's 64KB on 32-bit platforms and
   128KB on 64-bit platforms.


   CCL:PROCESS-ALLOCATION-QUANTUM p

   Returns the (per-thread) allocation quantum of the process P.  By default,
   this is the same value as that returned by CCL:DEFAULT-ALLOCATION-QUANTUM,
   but lower values can be specified on a per-process basis (see below.)

   This value is read-only.

   CCL:CURRENT-PROCESS-ALLOCATION-QUANTUM

   Equivalent to (CCL:PROCESS-ALLOCATION-QUANTUM *CURRENT-PROCESS*),
   but can be used with SETF to change the current processes's
   allocation quantum to a value which is between *HOST-PAGE-SIZE* and
   (DEFAULT-ALLOCATION-QUANTUM), inclusive, and which is a power of 2.


   Changes to existing functions:

   Both PROCESS-RUN-FUNCTION and MAKE-PROCESS accept an :ALLOCATION-QUANTUM
   &key argument, which defaults to the value returned by (DEFAULT-ALLOCATION-QUANTUM).
   If provided, the value of the argument should should satisfy the same
   constraints that (SETF (CURRENT-PROCESS-ALLOCATION-QUANTUM) is subject to.

Discussion

In general, larger per-thread allocation quanta are appropriate for programs
where a relatively small number of threads need to allocate memory frequently
and small per-thread quanta are appropriate for larger numbers of threads
that are expected to do small, infrequent memory allocations.

The worst-case scenarios would involve a large number of threads doing
incidental memory allocation with large quanta (that wastes memory and may
trigger the GC too frequently) or a small number of threads doing frequent
memory allocation with small quanta (since such threads could be expected
to fill up their small per-thread memory allocations quickly and frequently
and would waste time frequently allocating more small chunks.)

All of these values interact with the GC and EGC thresholds; the ability
to exercise some control over how much per-threads memory is allocated
at a time can help to ensure that those interactions are appropriate.
When these mechanisms are insufficient, applications should consider the
use of available mechanisms for adjusting GC and EGC thresholds.




OpenMCL 1.1-pre-051027

- A lot of internal changes in the way that special bindings, UNWIND-PROTECT,
  and WITHOUT-INTERRUPTS are implemented (and in how they interact with
  each other.

  One user-visible aspect of this is that UNWIND-PROTECT cleanup forms
  are run with interrupts disabled (the protected form is run with
  interrupts enabled if they were enabled on entry to the UNWIND-PROTECT.)
  This means that something like:

  (unwind-protect
      nil
    (loop))

  will loop uninterruptibly.

- CCL:WITH-INTERRUPTS-ENABLED &body body executes the body with interrupts
  enabled.  The example above could be rewritten as:

  (unwind-protect
      nil
    (with-interrupts-enabled (loop)))

  and the loop would be interruptible.

  These changes introduce binary incompatibility (the FASL version changed,
  as did an internal version number that tries to keep the kernel and
  heap image in synch.)

  Things basically work, but there may be lingering bugs (e.g., as of
  a little while ago, QUIT didn't work because the initial process
  was running with interrupts disabled.)

- PROCESS-TERMINATION-SEMAPHORE
  MAKE-PROCESS and PROCESS-RUN-FUNCTION accept a :TERMINATION-SEMAPHORE
  argument; processes have a PROCESS-TERMINATION-SEMAPHORE accessor
  method.  If the argument is specified and non-null, its value should
  of type SEMAPHORE.

  If a process dies by any means after it's been successfully enabled
  and it has a non-null termination semaphore "at the time of its death", 
  that semaphore will be signaled just before the underlying OS thread
  is destroyed.

  SETF can be used with PROCESS-TERMINATION-SEMAPHORE to change or
  clear a the termination semaphore of a process.  If the target
  process is not the current process when this happens, it's possible
  that the process could die before the SETF takes effect; this
  possibility must be addressed at the application level (i.e., the
  implementation doesn't try to synchronize the calling thread and
  the target in any way.

  A simple example:

  (let* ((s (make-semaphore)))
    (process-run-function `(:name "sleepy" :termination-semaphore ,s)
                           #'(lambda () (sleep 10)))
    (wait-on-semaphore s))

  The calling thread will wait for (roughly) 10 seconds (until the
  "sleepy" thread has had its nap and signals its termination semaphore.)

- A change that was introduced prior to 0.14.3 led to strange, usually
  fatal crashes (usually an unhandled bus error, occasionally a cryptic
  "can't find active area" message and a trip to the kernel debugger)
  under Darwin.  This was caused by an attempt to use certain Mach
  primitives to suspend and resume threads (the way that those
  primitives were used, Mach exception messages were sometimes sent
  twice if the first send was interrupted, and the second send occurred
  after the exception had already been handled (because the first send
  was recieved but not replied to ...)

  1.0 backed out of this change, and used signal handling primitives
  (instead of Mach primitives) to suspend and resume threads.  I -think-
  that I understand the issue with the Mach primitives 
  (#_thread_abort_safely isn't necessary and caused the duplicate
  exception messages to be sent) and have tried to revert to using
  the Mach thread suspension mechanisms.  (If unhandled bus errors -
  that exit to the shell - or cryptic "can't find active area" messages
  reappear, this experiment will be shown to be a failure.)

  There are some obscure but good reasons for favoring the Mach
  primiitves, so it'd be good to know if the problem with using them
  has indeed been identified.

  (The test case involves bad luck and bad timing: two or more
  threads having pending exceptions at the same time and the thread
  whose exception is handled first tries to suspend the others, typically
  on behalf of the GC.  It was possible to run stress tests for many
  hours in 0.14.3 without encountering the bug, and possible to
  encounter it under seemingly light loads.)

- INCF and DECF argument order and fixnum arithmetic.

  Bryan fixed some ANSI test failures related to the order in which INCF
  and DECF evaluate their args.  (One example is:

  (let* ((x 3))
    (incf x (setq x 5)))

  where the correct answer is 10, not 8.)  We both found that fixing
  some cases involving INCF caused some OpenMCL code to compile
  incorrectly and were nervous about introducing these changes fairly
  late in the development cycle, so we backed out of them prior to
  the 1.0 code freeze.

  The reasons for the miscompiled code have to do with how the
  compiler interprets fixnum declarations under typical optimization
  settings.  If A and B are both declared to be FIXNUMS, then
  the expression

  (setq a (+ a b))

  will usually compile to a simple ADD instruction (with no overflow
  checking); if A and B are fixnums, the result will be a fixnum,
  though if an undetected overflow occurred in the addition, the
  result might be missing a significant bit.

  There was code in OpenMCL that assumed that

  (incf a b)

  was exactly the same as

  (setq a (+ a b))

  and in fact that was true under the old (incorrect) definition of
  INCF.  The new definition introduced some temporary bindings:

  (let* ((...)
         (#:temp (+ a b))
         (...))
     (setq a #:temp))

  In this case, the addition was allowed to generate an overflow
  (no type declaration on #:temp), and the SETQ quietly violated
  a type declaration (assigning a non-FIXNUM value to A), leading
  to further problems.

  So far, I found a couple of cases of this in the OpenMCL sources.
  (FWIW, both functions were originally transliterated from C code
  and were trying to mimic C's silent overflow behavior.)

  Moral: if you have code that assumes that INCF or DECF expand
  into simple assignments and are trying to exploit the ways that
  those assignments interact with type declarations, you may
  want to review those assumptions.  If you write code that has
  side effects in the DELTA arguments of INCF or DECF rorms,
  you'll (hopefully) be pleased to see that Bryan's changes 
  allow these side-effects to be handled correctly (at the
  right time.)  If you don't fall into either of these categories,
  you probably won't notice any difference ...

- 64-bit Linux support

  There's a 64-bit LinuxPPC heap image and some rudimentary (libc-only)
  64-bit Linux interfaces in the testing directory.

  (Unlike 64-bit Darwin, 64-bit Linux distributions typically provide
  64-bit versions of "all" standard libraries; I haven't gotten around
  to building 64-bit gnome/gtk/X11/... interfaces yet, but wouldn't
  expect there to be a problem.)

  The 64-bit Linux OpenMCL seems to basically work, but ... OpenMCL
  likes to map its kernel into low addresses (around #x5000); this
  allows compiled lisp code to use conditional branches to "short"
  (16-bit) absolute addresses.  Newer Linux kernels provide a
  "vdso" shared library that's intended to simply communication
  between the OS kernel and userspace libraries and programs; when
  a program is mapped at "non-standard" addresses, the vdso gets
  mapped at address 0.

  I don't fully understand the imlications of this (beyond the fact that
  indirecting through a NULL pointer will access bits and pieces
  of the vdso instead of segfaulting.)  As far as I know, this is
  seen as a minor bug in the Linux kernel, and I -think- that I've
  seen kernel ChangeLog entries that indicate that the problem's been
  fixed in the relatively recent past (and will likely start to
  make it into Linux distributions in the near future.)

  That said - and seeing a library at address 0 certainly makes me a
  little nervous - the LinuxPPC64 port seems to work at least as
  well as the DarwinPPC64 port does (i.e., there may be word-size
  or other bugs lurking around or hiding in plain sight, but it's
  not usually easy to encounter them.)

- As documented (and as hasn't been true in a long time), EOF
  from *STANDARD-INPUT* terminates the REPL when the --batch argument
  is in effect (even if *STANDARD-INPUT* is a tty.)

- QUIT does a FRESH-LINE on and FORCE-OUTPUT to the standard output
  stream (people had reported that output wasn't always flushed
  when --batch or --eval was used; 1.0 was better about this than
  previous versions were, but it still wasn't reliable.)

OpenMCL 1.1-pre-051028
I had been doing development on G5s, and hadn't noticed that the
32-bit lisp had been using a 64-bit instruction.  (I'm a little
confused about how that could have worked; perhaps the 64-bit
instruction gets emulated by the OS, or perhaps my model of
whether 64-bit instructions can be executed in 32-bit mode
is simply incorrect.)

In any case, the 32-bit images produced yesterday don't run on
G4s (or presumably G3s or older systems.)  Ooops.  New images.

OpenMCL 1.1-pre-051029
 A function used by both SET-USER-ENVIRONMENT
and SET-DEVELOPMENT-ENVIRONMENT wasn't properly changing saved bindings
of *PACKAGE*; the last few 1.1-pre releases have come up in the CCL
package, as a result.  Ooops again; new images, again.


OpenMCL 1.1-pre-051204
Not a lot of user-visible changes, but the changes that're there
are a little hard to bootstrap.
Note that new kernel build directories (darwinppc, darwinppc64,
linuxppc, linuxppc64, ...) repace the old versions that don't
have "ppc" in their names.  CVS may not prune the old directories,
especially if they contain files (.o, random junk).
