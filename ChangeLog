2007-01-30 17:47  gb

	* library/parse-ffi.lisp: Always encode explicit structure-typed
	function return values.
	
	Note when we see one, for now.

2007-01-30 17:45  gb

	* lib/foreign-types.lisp: %EXTERNAL-CALL-EXPANDER allows/requires a
	leading argument to be paired with a structure-typed return-type.

2007-01-30 17:43  gb

	* lib/ffi-linuxppc32.lisp: linuxppc32 always returns structures via
	the first-arg hack.

2007-01-30 17:42  gb

	* lib/db-io.lisp: Bump *interface-abi-version*, but continue to
	support the old version.
	
	Don't check the :struct-by-value flag when encoding function
	args/results.  (That decision's made above our pay grade now.)
	
	When reading a :struct/:union definition, try to update an existing
	defintion rather than consing up a new one (this matters if the
	record is anonymous.)

2007-01-30 17:39  gb

	* level-1/l1-sockets.lisp: Try to ensure that the :FORMAT argument
	gets passed to MAKE-TCP-STREAM-SOCKET and MAKE-FILE-STREAM-SOCKET
	correctly.
	
	Fix c_socket for #+linuxppc.

2007-01-30 08:20  gb

	* level-1/version.lisp: Bump.

2007-01-30 08:20  gb

	* lib/compile-ccl.lisp: Use make -j to build kernel.

2007-01-30 07:02  gb

	* lisp-kernel/x86-spentry64.s: .SPcallback returns rax/rdx,
	xmm0/xmm1.

2007-01-30 07:01  gb

	* lib/macros.lisp: Use new callback interface unconditionally.	(A
	day's work turned into 2 weeks, somehow.)

2007-01-30 07:00  gb

	* compiler/X86/X8664/x8664-backend.lisp, lib/ffi-darwinx8664.lisp,
	lib/ffi-freebsdx8664.lisp, lib/ffi-linuxx8664.lisp: New callback
	stuff for x8664 (all platfroms appear to use the same ABI.)

2007-01-30 03:26  gb

	* level-0/X86/x86-misc.lisp: Don't use boxed "disp" for
	displacement in %ATOMIC-INCF-NODE.

2007-01-29 07:27  gb

	* lib/macros.lisp: Enable new callback stuff on #+ppc-target.

2007-01-29 07:27  gb

	* lib/ffi-darwinppc64.lisp: new callback stuff.

2007-01-29 07:27  gb

	* lib/ffi-darwinppc32.lisp: typos-r-us.

2007-01-29 04:37  gb

	* lib/ffi-darwinppc32.lisp: Flesh out darwinppc32 callback stuff.

2007-01-29 04:37  gb

	* lib/ffi-linuxppc64.lisp: Fix some typos/bugs; more likely remain.

2007-01-29 04:36  gb

	* lib/foreign-types.lisp: REQUIRE-FOREIGN-TYPE-BITS.

2007-01-29 04:36  gb

	* lib/macros.lisp: Use new callback scheme for darwinppc32, too.

2007-01-29 04:36  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: No more (old) callback
	stuff here.

2007-01-29 02:33  gb

	* lib/ffi-darwinppc32.lisp: Flesh out the new callback stuff.

2007-01-28 21:47  gb

	* lib/: ffi-linuxppc32.lisp, ffi-linuxppc64.lisp: Flesh things out
	a bit more, change the API, get things working ... still a moving
	target.

2007-01-28 21:46  gb

	* lib/macros.lisp: For linuxppc, use the new callback mechanism. 
	(Other platforms still need more bootstrapping.)

2007-01-28 21:44  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: Lose the old eabi-callback
	stuff; linuxppc 32/64-bit callbacks now use the new scheme.

2007-01-28 03:21  gb

	* lib/ffi-linuxppc32.lisp: Remove some typos.  Need to pass
	dynamic-extent, other decls separately.

2007-01-28 03:20  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: Fix some of this stuff;
	use the new (ftd-based) scheme.

2007-01-28 01:43  gb

	* compiler/PPC/PPC64/ppc64-backend.lisp: Fix some typos.  (This
	code's getting replaced, but fix 'em anyway.)

2007-01-28 01:42  gb

	* lib/db-io.lisp: If a .cdb file can't be opened, show the
	translated pathname and mention the fact that this might indicate a
	problem with "ccl:"'s logical translations.

2007-01-25 04:37  gb

	* lib/foreign-types.lisp: Never fully understood the concept
	"auxiliary" foreign types, but try to canonicalize intermediate
	struct/union/enum references, so that (EQ (PARSE-FOREIGN-TYPE
	'(:STRUCT :FOO))     (PARSE-FOREIGN-TYPE '(:STRUCT :FOO))) is more
	likely to return T (e.g., something registered in the FTD.
	
	It seems clear that this is the right thing when the structure
	reference is in global scope; I'm not sure what it'd mean for that
	not to be the case.

2007-01-25 04:32  gb

	* lib/ffi-linuxppc32.lisp: More plausible callback-bindings
	callback.

2007-01-24 23:41  gb

	* lib/ffi-linuxppc32.lisp: First cut at callback-bindings thing;
	may not even compile.

2007-01-24 02:39  gb

	* compiler/: PPC/PPC32/ppc32-backend.lisp,
	PPC/PPC64/ppc64-backend.lisp, X86/X8664/x8664-backend.lisp: Stubs
	for new FTD functions.

2007-01-24 02:28  gb

	* lib/foreign-types.lisp: A few more fields (for callbacks) in ftd
	defstruct.

2007-01-23 15:28  gb

	* compiler/PPC/: PPC32/ppc32-backend.lisp,
	PPC64/ppc64-backend.lisp: Get FPRs from where subprim saved them. 
	Return FPRs in the same place.	(Will need to re-work all of this
	for platform-dependent structure stuff.)

2007-01-23 15:26  gb

	* lisp-kernel/ppc-spentry.s: poweropen-callback, callbackX; save fp
	args here.  Return all (arg) GPRs and FPRs (needs cooperation from
	the lisp side.)

2007-01-23 15:21  gb

	* lisp-kernel/: ppc-constants32.s, ppc-constants64.s: Add room in
	c_reg_save for saved fp args (f1-f13).

2007-01-23 15:14  gb

	* lib/foreign-types.lisp: FF-CALL implemented in terms of the new
	ftd hook.

2007-01-23 07:19  gb

	* level-1/l1-clos-boot.lisp: ppc32, ppc64 also had trouble with
	(CLASS-OF non-simple-string).

2007-01-23 07:02  gb

	* level-1/l1-clos-boot.lisp: x8664 class-of: typo in non-simple
	array case, needed new string definition.

2007-01-23 07:01  gb

	* lib/: ffi-darwinx8664.lisp, ffi-freebsdx8664.lisp,
	ffi-linuxx8664.lisp: Define ffi stuff in terms of common things in
	compiler/X86/X8664/x8664-backend.

2007-01-23 06:59  gb

	* compiler/X86/X8664/x8664-backend.lisp: Define (common) x8664 ffi
	stuff here.

2007-01-21 08:32  gb

	* compiler/X86/x862.lisp: Name vinsn ff-call-return-registers (not
	"-returning-").
	
	Typecheck the :registers arg.

2007-01-21 08:32  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: ff-call-return-registers.

2007-01-21 08:31  gb

	* compiler/X86/X8664/x8664-arch.lisp: WITH-FFCALL-RESULTS: zero the
	stack-block.

2007-01-21 08:31  gb

	* lisp-kernel/x86-spentry64.s: Don't use save3 in
	.SPffcall_return_registers (save3 = r11); use save2 (= r13)
	instead.

2007-01-21 06:46  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: WITH-FFCALL-RESULTS needs
	space for 13 float registers, not 31.

2007-01-21 06:45  gb

	* compiler/X86/X8664/x8664-arch.lisp: WITH-FFCALL-RESULTS for
	x86-64.

2007-01-21 06:38  gb

	* compiler/X86/x862.lisp: ff-call: handle n-word struct-by-value,
	register return without typos.

2007-01-21 06:15  gb

	* compiler/X86/x862.lisp: ff-call: handle n-word struct-by-value,
	register return.

2007-01-21 06:14  gb

	* compiler/nx1.lisp: Don't assume that passing a structure by value
	in N words is Darwin-specific.	(LinuxPPC32 is probably the only
	platform that doesn't support the convention.)

2007-01-21 06:12  gb

	* compiler/X86/X8664/x8664-arch.lisp: .SPffcall-return-registers
	replaces .SPunused-4.

2007-01-21 06:10  gb

	* lisp-kernel/: x86-spentry64.s, x86-spjump64.s:
	.SPffcall_return_registers (just returns %rax/rdx, %xmm0/%xmm1). 
	(replaces .SPunused_4).

2007-01-21 00:05  gb

	* lib/: ffi-linuxppc32.lisp, ffi-linuxppc64.lisp: Use
	argument/result coercion functions in os::expand-ff-call.

2007-01-20 23:53  gb

	* lib/: ffi-darwinppc32.lisp, ffi-darwinppc64.lisp: Coerce arg,
	results when expanding an ff-call.

2007-01-20 23:52  gb

	* lib/foreign-types.lisp: Default (no-op) functions for coercing
	foreign args, results.

2007-01-20 22:31  gb

	* lib/ffi-linuxppc64.lisp: 4 down.  Whether 2 or 3 to go depends on
	your perspective (and on how close x86-64 Linux and x86-64 FreeBSD
	are to each other.  I'd guess that they're pretty close, and that
	x86-64 Darwin is random.)

2007-01-20 21:55  gb

	* lib/ffi-linuxppc32.lisp: Pretty simple.  3 down, 4 to go.

2007-01-20 19:34  gb

	* compiler/X86/X8664/x8664-backend.lisp: Package prefixes.  D'oh!

2007-01-20 19:25  gb

	* compiler/X86/X8664/x8664-backend.lisp: Add references to the
	right os::ff-call-expander.

2007-01-20 19:24  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Remove some wip code.

2007-01-20 19:24  gb

	* compiler/PPC/: PPC32/ppc32-backend.lisp,
	PPC64/ppc64-backend.lisp: Use os::expand-ff-call, for each value of
	OS.

2007-01-20 19:23  gb

	* level-1/l1-sockets.lisp: Saw an opportunity to use PAREF;
	probably several more.

2007-01-20 19:22  gb

	* lib/ffi-darwinppc64.lisp: Two down, 5 to go.

2007-01-20 19:21  gb

	* lib/ffi-darwinppc32.lisp: Looks mostly right; might need to be
	extended to handle coercions at the Cocoa level, and probably needs
	some cooperation from %EXTERNAL-CALL-EXPANDER (e.g., what's
	installed by #_).

2007-01-20 19:18  gb

	* lib/db-io.lisp: Encode, decode union types in arglists.

2007-01-20 19:17  gb

	* lib/foreign-types.lisp: ftd's :ff-call-expand-function is
	os::expand-ff-call.
	
	Canonicalize the :void type a bit better.

2007-01-20 19:16  gb

	* library/parse-ffi.lisp: Remove the debugging FORMAT call.

2007-01-18 23:15  gb

	* level-1/l1-boot-2.lisp: Load with the new ffi-backend fasls.

2007-01-18 23:15  gb

	* lib/compile-ccl.lisp: Deal with the new ffi-backend sources.

2007-01-18 23:15  gb

	* lib/systems.lisp: Add the new ffi-backend sources.

2007-01-18 23:14  gb

	* lib/: ffi-darwinppc32.lisp, ffi-darwinppc64.lisp,
	ffi-darwinx8664.lisp, ffi-freebsdx8664.lisp, ffi-linuxppc32.lisp,
	ffi-linuxppc64.lisp, ffi-linuxx8664.lisp: New (so far, empty)
	files.

2007-01-18 04:35  gb

	* level-1/version.lisp: Bump.

2007-01-18 04:17  gb

	* examples/bridge.lisp: Some word-size conditionalization.  Will
	need more work to handle struct return/asssignment correctly on all
	platforms.

2007-01-18 04:15  gb

	* examples/: cocoa-editor.lisp, cocoa-backtrace.lisp: Use CGFloat,
	type casts, etc.  Likwise for :<NSI>nteger, :<NSUI>nteger.

2007-01-18 04:13  gb

	* examples/: cocoa-prefs.lisp, cocoa-listener.lisp: Use CGFloat,
	type casts, etc.

2007-01-18 04:12  gb

	* examples/cocoa-window.lisp: Use CGFloat, type casts, etc.  Avoid
	deprecated NSFont stuff.

2007-01-18 04:11  gb

	* examples/objc-clos.lisp: Handle ivars, class
	creation/initialization differently for ObjC 2.0.

2007-01-18 04:10  gb

	* examples/objc-runtime.lisp: More ObjC 2.0, ppc64 changes.

2007-01-18 04:09  gb

	* examples/objc-support.lisp: Note which protocols are actually
	used when walking classes.  (There doesn't seem to be a good way of
	finding a Protocol object pre-objc-2.0, and we may need to test
	protocol compliance to disambiguate message sends in some cases.)

2007-01-18 04:07  gb

	* examples/opengl-ffi.lisp: Conditionalize for darwin (not
	necessarily darwinppc).

2007-01-18 04:06  gb

	* examples/addressbook.lisp: Conditionalize for darwin (not
	necessarily darwinppc).  May want to conditionalize for bundle
	executable name, as well.

2007-01-18 04:05  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: WITH-FFCALL-RESULTS.  Start
	to sketch out structure return code (structures are often
	"returned" by returning field values in registers pn DarwinPPC64.)

2007-01-18 04:04  gb

	* compiler/PPC/PPC64/ppc64-backend.lisp: New ftd stuff; new
	attributes for structure args/results.

2007-01-18 04:03  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: ffcall-returning registers.
	 (Will need this for other platforms, too.)

2007-01-18 04:01  gb

	* lib/macros.lisp: Arch-specific macro interface for
	WITH-FFCALL-RESULTS.

2007-01-18 04:00  gb

	* lib/db-io.lisp: Handle the case of an encoded structure type as a
	return value.

2007-01-18 04:00  gb

	* lisp-kernel/: ppc-spentry.s, ppc-spjump.s:
	.SPpoweropen_ffcall_return_registers.

2007-01-18 03:59  gb

	* library/parse-ffi.lisp: At least optionally, make structure
	return explicit (expecting it to be handled by higher-level code.)

2007-01-18 03:58  gb

	* lib/foreign-types.lisp: ff-call-expand-function in ftd.  Don't
	try to type-expand :registers <exp> form in EXTERNAL-CALL.

2007-01-18 03:55  gb

	* level-0/PPC/ppc-misc.lisp: Get the contents of the register that
	may hold OS thread context.

2007-01-18 03:54  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: ff-call-expander function
	in ftd.

2007-01-18 03:53  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: WITH-FFCALL-RESULTS arch
	macro.

2007-01-18 03:52  gb

	* compiler/PPC/ppc2.lisp: Poweropen ff-calls might need to return
	all possible result regs.  (Maybe poweropen syscall, too.)

2007-01-18 03:51  gb

	* compiler/PPC/ppc-arch.lisp: Replace unused subprim with
	.SPpoweropen-ff-call-return-registers.

2007-01-18 03:50  gb

	* compiler/nx1.lisp: Support :registers <exp> in %ff-call; when
	supported, backend will return all (potential) result registers in
	buffer at <exp>.

2007-01-16 02:01  gb

	* level-1/l1-streams.lisp: Make sure that STREAM-READ-IVECTOR and
	STREAM-WRITE-IVECTOR are defined on binary stream classes.  (These
	functions make less sense for character streams/strings than they
	used to.)

2007-01-16 01:39  gb

	* level-1/l1-sockets.lisp: Ensure that the :FORMAT argument
	defaults to :BIVALENT

2007-01-16 01:37  gb

	* level-0/l0-init.lisp: Put :OPENMCL-UNICODE-STRINGS on *FEATURES*.

2007-01-11 23:58  gb

	* compiler/PPC/ppc2.lisp: Transform (/ (* constant1 exp) constant2)
	into (* (/ constant1 constant2) exp).  Not very general, but makes
	some foreign address arithmetic better.

2007-01-11 23:56  gb

	* lib/macros.lisp: Simple PAREF: (paref pointer
	foreign-pointer-or-array-type index) does simple arithmetic for
	you.

2007-01-11 23:54  gb

	* lib/foreign-types.lisp: %FOREIGN-ARRAY-ACCESS-FORM.

2007-01-10 15:50  gb

	* compiler/PPC/ppc2.lisp: ppc2-vref1: lose extra arg to
	double->heap vinsn.

2007-01-09 11:33  gb

	* lisp-kernel/x86-spentry64.s: When running an unwind-protect
	cleanup and multiple values are being thrown, be sure to set
	tcr.xframe from the target catch frame.  This is necessary on
	general principles (GC safety), and especially necessary if the
	cleanup form does a non-local exit.

2007-01-08 22:12  gb

	* examples/: objc-clos.lisp, objc-runtime.lisp, objc-support.lisp:
	Revive some of the old GNUstep support; add partial ObjC 2.0
	support (for 64-bit targets only, so far.)

2007-01-08 22:11  gb

	* examples/cocoa.lisp: Conditionalize for darwin-target, not
	darwinppc-target.

2007-01-08 22:10  gb

	* examples/cocoa-listener.lisp: Disable background layout in the
	listener; the whole two-thread scheme probably isn't viable, but
	doing this seems to suppress a timing-related symptom.

2007-01-08 22:09  gb

	* examples/cocoa-editor.lisp: Document-begin-editing,
	document-end-editing: both seem to have been conditionalized
	backwards.

2007-01-05 16:22  gb

	* level-0/l0-numbers.lisp: Fix another typo ...

2007-01-05 16:16  gb

	* level-0/l0-numbers.lisp: Fix typo (ppc32::, not ppc2::).

2007-01-05 15:27  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Missing MISC-SET-C-S32 for
	PPC32.

2007-01-05 06:20  gb

	* level-0/l0-cfm-support.lisp: OPEN-SHARED-LIBRARY: freebsd version
	of #_dlopen doesn't return a link map, but calling #_dlinfo on the
	result (with the right arg) does obtain a link map.
	
	Revive shared libraries on FreeBSD, but don't do the strange
	Linux-specific re-opening there.  (It seems like it's possible to
	#_dlopen something that already has a loaded link map - like the
	FreeBSD dynamic linker - or something.)

2007-01-04 05:46  gb

	* level-1/l1-pathnames.lisp: %component-match-p: handle :WILD,
	:WILD-INFERIORS.

2007-01-04 05:45  gb

	* lisp-kernel/pmcl-kernel.c: Try to check for old libc versions
	(which may use %gs instead of %fs for tls).

2007-01-04 05:44  gb

	* lib/numbers.lisp: Explicitly require NUMBER-CASE-MACRO.

2007-01-04 05:44  gb

	* level-0/l0-numbers.lisp:
	fixnum-sfloat-compare,fixnum-dfloat-compare: if the fixnum can be
	accurately represented in float, do so.

2007-01-03 03:35  gb

	* lib/sequences.lisp: Fix a few type errors, check for explicit
	vector-type length earlier.

2007-01-03 03:31  gb

	* level-1/l1-files.lisp: %STD-NAME-COMPONENT, %STD-TYPE-COMPONENT:
	preserved :WILD, don't map it to "*".

2007-01-03 03:30  gb

	* lib/pathnames.lisp: More whack-a-mole with pathnames
	(specifically, preserving :WILD as name/type value and dealing with
	the consequences of doing so.)

2007-01-03 03:27  gb

	* lib/numbers.lisp: Small (mostly cosmetic) change to RATIONAL.

2007-01-02 09:57  gb

	* lib/macros.lisp: Keep fixing CTYPECASE.

2007-01-02 09:57  gb

	* level-1/l1-streams.lisp: DOH! STREAM-READ-LINE method on
	BASIC-CHARACTER-INPUT-STREAM returns both values.
	
	"Composite" (two-way, concatenated, etc) streams need a close
	protocol.

2007-01-02 07:00  gb

	* level-0/l0-pred.lisp: EQUAL on physical pathnames ignores the
	(new) version slot, as does practically everything else.

2007-01-02 06:59  gb

	* level-0/l0-numbers.lisp: Don't assume that fixnums can be
	accurately coerced to floats when comparing fixnums and floats; do
	the logical equvalent of calling RATIONAL on the float instead.

2007-01-01 23:41  gb

	* level-1/l1-files.lisp: ENOUGH-NAMESTRING: don't incorporate
	version into returned namestring for physical pathnames.

2006-12-31 10:15  gb

	* release-notes.txt: Update.

2006-12-31 09:13  gb

	* lisp-kernel/image.h, xdump/heap-image.lisp: Bump image/abi
	version.

2006-12-31 08:57  gb

	* xdump/faslenv.lisp: Bump fasl-min-vers.

2006-12-31 08:49  gb

	* lib/nfcomp.lisp: Bump current fasl version.

2006-12-31 08:33  gb

	* lisp-kernel/: linuxppc/elf32ppclinux.x, linuxppc64/elf64ppc.x:
	Tweak the executable start address.

2006-12-31 02:44  gb

	* lisp-kernel/x86-spjump64.s: On Darwin, use a .space directive to
	ensure that there's nothing interesting in the first few pages of
	the address space (and ensure that those pages are mapped.)

2006-12-31 02:43  gb

	* lisp-kernel/darwinx8664/Makefile: Sadly, we can't use -sectalign
	on x86-64 (ld64 does some floating-point arithmetic, fails to
	account for roundoff error, and claims that 0x1000 isn't a power of
	2.) If you can't say anything good about a linker, it's best not to
	say anything at all.
	
	We can force the first segment to be mapped at 0x1000, and can
	waste a few pages to ensure that all low-memory pages that the lisp
	wants are mapped.

2006-12-31 02:33  gb

	* level-1/l1-pathnames.lisp: %SPLIT-COMPONENT: be a little more
	defensive.

2006-12-31 02:32  gb

	* compiler/nx0.lisp: NX-FORM-TYPE: handle quoted constants.

2006-12-31 02:29  gb

	* xdump/faslenv.lisp: Bump $fasl-vers.

2006-12-31 02:28  gb

	* level-1/version.lisp: Bump; remove "Beta" designation.

2006-12-29 20:13  gb

	* compiler/X86/X8664/x8664-arch.lisp, lisp-kernel/area.h,
	lisp-kernel/lisp_globals.h, lisp-kernel/x86-constants64.h,
	lisp-kernel/x86-constants64.s, xdump/xx8664-fasload.lisp: Move NIL
	up a page on x86-64 as well.

2006-12-29 16:09  gb

	* lisp-kernel/ppc-spjump.s: Be a little clearer about where we're
	.orged.

2006-12-29 15:32  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp, lisp-kernel/area.h,
	lisp-kernel/ppc-constants32.h, lisp-kernel/ppc-constants32.s,
	lisp-kernel/darwinppc/Makefile, xdump/xppcfasload.lisp: Static area
	(including NIL) now one page higher on ppc32, as well.

2006-12-29 02:38  gb

	* level-0/PPC/ppc-float.lisp: SQRT in LAP (todo: inline it.)

2006-12-29 01:38  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Move ppc64::nil-value (and
	ppc64::reservation-discharge) up a page.

2006-12-29 01:37  gb

	* xdump/xppcfasload.lisp: xload-static-space-address for ppc64 is
	#x2000; still #x1000 for ppc32.  (need to set this for x86-64)

2006-12-29 01:36  gb

	* xdump/xfasload.lisp: *xload-static-space-address* depends on the
	backend.  ppc64 wants it one page higher than it has been, to avoid
	letting unmapped pages get claimed by the dynamic linker on Darwin.

2006-12-29 01:35  gb

	* lisp-kernel/darwinppc64/Makefile: Change seg1addr/sectalign, so
	that the image starts at #x1000 and aligned section data for the
	text section starts on the next page.

2006-12-29 01:33  gb

	* lisp-kernel/ppc-spjump.s: Org the spjump table 3 pages from where
	the aligned text section data starts.

2006-12-29 01:32  gb

	* lisp-kernel/: ppc-constants64.h, ppc-constants64.s: nil_value,
	etc a page higher.

2006-12-29 01:32  gb

	* lisp-kernel/pmcl-kernel.c: Don't remap ppc64 spjump table if it's
	already where it should be.

2006-12-29 01:32  gb

	* lisp-kernel/lisp_globals.h: Access lisp_globals/nrs_symbols a
	page higher.

2006-12-29 01:30  gb

	* lisp-kernel/area.h: Move STATIC_BASE_ADDRESS up a page for ppc64.

2006-12-22 01:40  gb

	* lisp-kernel/ppc-exceptions.c: Ensure that sqrt() is prototyped.

2006-12-22 01:39  gb

	* lisp-kernel/pmcl-kernel.c: Insist on at least Panther for
	PPC32/Darwin.
	
	Use dlopen() on 64-bit Darwin variants.  Might want to do a runtime
	test and use dlfcn functions if at least Tiger.
	
	(The old dyld functions are deprecated under Leopard, and there's
	reason to believe that they don't work correctly on at least ppc64/
	Leopard; attempting to use NSCreateObjectFileImageFromFile to open
	a 64-bit .dylib seems to lead to memory corruption rather than
	returning NSObjectFileImageInappropriateFile.
	
	The old functions work better than the dlfcn functions on pre-Tiger
	systems.)

2006-12-19 01:24  gb

	* library/parse-ffi.lisp: Just to be on the safe side (new pathname
	bugs, or old ?), append -BAK to (NAMESTRING (TRUENAME path)), not
	just (NAMESTRING path) when renaming.  (MERGE-PATHNAMES call is
	producing a pathane with a non-null VERSION component, as it
	arguably should have been all along.

2006-12-18 13:22  gb

	* lib/sequences.lisp: COERCE/MAKE-SEQUENCE try to simplify vector
	types into concrete vector types.

2006-12-18 13:04  gb

	* level-1/l1-pathnames.lisp: Try (halfheartedly) to maintain
	PATHNAME-VERSION of physical pathnames.  (Totally meaningless, but
	failing to do this leads to many test failures.)

2006-12-18 13:03  gb

	* level-1/l1-numbers.lisp: Don't call out to do sqrt.

2006-12-18 12:57  gb

	* level-1/l1-files.lisp: Try (halfheartedly) to maintain
	PATHNAME-VERSION of physical pathnames.  (Totally meaningless, but
	failing to do this leads to many test failures.)

2006-12-18 12:54  gb

	* level-0/X86/x86-float.lisp: Do single/double-float sqrt inline.

2006-12-16 05:28  gb

	* level-0/PPC/ppc-float.lisp: Recognize that fsqrt/fsqrts
	instructions have a minor opcode in frb and only have one source
	operand.

2006-12-16 05:27  gb

	* level-1/ppc-error-signal.lisp: If we get an FP exception during a
	SQRT, note that there's only one operand and that it's in frb.

2006-12-16 05:25  gb

	* lisp-kernel/ppc-exceptions.c: Handle (some) unimplemented
	instructions, notably fsqrt/fqrts, which are optional and not
	implemented on some PPC machines.

2006-12-16 05:24  gb

	* lisp-kernel/ppc-asmutils.s: Add get_fpscr().

2006-12-14 19:47  gb

	* lisp-kernel/ppc-exceptions.c: Need to handle SIGQUIT on ppc, too.

2006-12-14 16:43  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Constraints on some
	double-float arithmetic vinsns should say :double-float, not
	:single-float.	(I suspect cut-and-paste, frankly.)

2006-12-14 16:25  gb

	* level-1/l1-lisp-threads.lisp: *initial-lisp-thread*, not
	initial-thread.

2006-12-14 16:24  gb

	* level-1/x86-trap-support.lisp: Use frame pointer when signaling
	error.

2006-12-14 16:14  gb

	* library/lispequ.lisp: Add a %PHYSICAL-PATHAME-VERSION slot to
	physical pathnames. (Yes, this is kind of silly.)

2006-12-14 16:01  gb

	* level-1/x86-trap-support.lisp: Recognize the kernel's attempt to
	signal errors for (e.g.) failed memory allocation.

2006-12-14 16:00  gb

	* lisp-kernel/x86-exceptions.c: If a memory allocation request
	fails, signal a lisp error (what a concept.)

2006-12-14 15:51  gb

	* lisp-kernel/x86-exceptions.h: Define DARWIN_USE_PSEUDO_SIGRETURN.
	
	Might be worth revisiting this.

2006-12-14 15:50  gb

	* lisp-kernel/x86-exceptions.c: Go back to using the
	pseudo_sigreturn mechanism on Darwin, since doing a real sigreturn
	from a fake context may not be reliable.
	
	When handling an interrupt with a partially created temp stack
	frame, do the right thing.  (That basically means reset the frame
	before calling out and recreating it if we return from the
	callout.)
	
	Handle SIGQUIT on the altstack, to provide a way of forcibly
	terminating threads that's a bit more GC-safe than doing it via
	#_pthread_cancel.
	
	Note the tcr of the gc thread on gc entry; if an exception happens
	in that thread, print a message and sleep for 60 seconds.
	
	Note that there's still a race condition here: if thread A gets an
	exception and thread B gets the mach_exception_lock (to GC) before
	the exception thread can handle the message, we deadlock (thread A
	would be suspended in the kernel and can't respond to a suspend
	signal.)  We can tell that this has happened and make a good guess
	as to why it happened, but dealing with it will require some
	thought.  (If we've already issued a suspend signal and eventually
	raise the suspended thread's resume semaphore, it'll suspend and
	resume once the mach exception thread makes it runnable.  Who
	cleans up its exception context in that case ?	Does it matter ?)

2006-12-14 15:19  gb

	* lisp-kernel/thread_manager.c: Ensure that newly-created threads
	have all signals unmasked.
	
	If a tcr is dead, ensure that its stack areas are empty.
	
	Try to run shutdown_thread_tcr as a pthread cleanup action,
	hopefully before Mach clobbers the thread's signal mask.

2006-12-14 15:16  gb

	* lisp-kernel/pmcl-kernel.c: lazarus() runs with a lock on the
	TCR_AREA_LOCK.

2006-12-14 15:15  gb

	* lisp-kernel/memprotect.h: Don't declare do_memo_reset(), which
	hasn't existed in years.

2006-12-14 15:14  gb

	* level-1/version.lisp: Bump.

2006-12-14 15:14  gb

	* level-1/l1-readloop.lisp: PREPARE-TO-QUIT: wait for the
	termination semaphore.

2006-12-14 15:13  gb

	* level-1/l1-processes.lisp: PROCESS objects are created with a
	termination semaphore.

2006-12-14 15:12  gb

	* level-1/l1-lisp-threads.lisp: THREAD-ENABLE: second arg is
	TERMINATION-SEMAPHORE.
	
	KILL-LISP-THREAD: don't use #_pthread_cancel, which may force the
	target thread to transition from running lisp code to running
	foreign code without advertising that fact. Send a SIGQUIT instead,
	and trust the SIGQUIT handler to manage that transition.  Don't try
	to kill the initial thread.

2006-12-09 09:52  gb

	* level-1/l1-streams.lisp: STRING-OUTPUT-STREAMs need to override
	their CLEAR-OUTPUT methods.
	
	MAKE-STRING-INPUT-STREAM: handle displaced strings better (remember
	their displaced-index-offsets.)

2006-12-09 09:49  gb

	* lisp-kernel/thread_manager.c: Disable underflow traps in new
	threads on x86-64.  (The PPC never got around to enabling them.)

2006-12-09 09:47  gb

	* lib/macros.lisp: WITH-OUTPUT-TO-STRING: if string provided,
	evaluate the ELEMENT-TYPE expression (for side-effects) and ignore
	the result of its evaluation.
	
	Some fixes in CTYPECASE handling, which hopefully didn't break
	anything else.

2006-12-09 09:36  gb

	* compiler/X86/x862.lisp: In aset2/aset3, ensure that the (final,
	1d) index register is set - even if the index is a constant - if we
	think that the store needs EGC memoization.
	
	(Note that the test case that exposed this involved storing
	SINGLE-FLOATs, which don't need EGC write-barrier handling on
	64-bit platforms.)
	
	In aref2, don't worry about reserving unscaled index registers when
	targeting the 1d index; the unscaled index registers aren't live
	after, could be NULL if the index is a constant, and any overlap
	between one of them and the 1d index should be handled in the
	vinsn(s).

2006-12-09 09:30  gb

	* level-1/l1-typesys.lisp: Ensure that the (relatively new)
	built-in-classes SIMPLE-FIXNUM-VECTOR and FIXNUM-VECTOR have
	class-translations.

2006-12-09 09:27  gb

	* level-1/l1-aprims.lisp: In list case of ELT: who says that value
	returned by NTHCDR is a LIST ? (It's not necessarily a list, so
	don't segfault taking its CAR without checking.)

2006-12-06 18:48  gb

	* level-0/X86/x86-float.lisp: x86-64 version of
	SFLOAT-SIGNIFICAND-ZEROS: count zero bits in the shifted float, not
	in %imm1 (which is undefined here ...)

2006-12-06 17:05  gb

	* compiler/nx0.lisp: DEFINE-COMPILER-MACRO: if a SETF name, use the
	right symbol for the named block.
	
	COMPILER-MACRO-FUNCTION, (SETF COMPILER-MACRO-FUNCTION): deal with
	(SETF NAME).

2006-12-05 22:44  gb

	* release-notes.txt: Update for 061205.

2006-12-05 20:31  gb

	* lisp-kernel/darwinppc64/Makefile: Change LDFLAGS, to keep ld64
	from putting a linkedit segment in the wrong place and making
	32-bit memory unmappable.

2006-12-05 20:30  gb

	* level-1/version.lisp: Bump.

2006-12-05 20:29  gb

	* lisp-kernel/pmcl-kernel.c: Use _exit(), just in case.

2006-12-05 18:53  gb

	* level-1/l1-reader.lisp: *ALTERNATE-LINE-TERMINATOR* set to
	#\Return on #+darwin-target, not just #+darwinppc-target. Change
	doc string for *ALTERNATE-LINE-TERMINATOR*.

2006-12-04 15:13  gb

	* level-1/version.lisp: Append a patchlevel to the version string,
	at least until new tarballs can be built.

2006-12-04 15:12  gb

	* level-1/l1-streams.lisp: If stream element type upgrades to
	FIXNUM, upgrade it further (to largest supported SIGNED-BYTE
	element-type.)

2006-12-04 13:02  gb

	* level-0/l0-bignum32.lisp: BIGNUM-BIGNUM-GCD (whatever it's
	called): don't bother to shift by 0 bits.  Do shift the initial U
	if non-zero trailing 0 BITS (was testing for non-zero trailing
	DIGITS.)

2006-12-04 12:52  gb

	* level-1/l1-streams.lisp: Choke earlier on unsupported stream
	element-types; do some upgrading to support some more element types
	(BIT -> (UNSIGNED-BYTE 8)).
	
	Maybe support arbitrarily large integer types someday soon.  Maybe
	not.

2006-12-04 12:48  gb

	* level-1/l1-clos-boot.lisp: Make built-in classes for istruct
	types (compiler stuff, mostly).

2006-12-04 12:46  gb

	* level-0/X86/X8664/x8664-bignum.lisp: Ensure that %ASHL handles
	shift count of 32 (and returns 0 in that case.)

2006-12-04 12:46  gb

	* level-0/l0-bignum64.lisp: In BIGNUM-SHIFT-RIGHT-LOOP-1, use
	%ASHL, not %ILSL.  (Don't want nonsense in the high 32 bits, just
	in case.)

2006-12-04 12:43  gb

	* level-0/l0-numbers.lisp: Bugs in GCD-2.  Long-standing bugs in
	GCD-2 ...

2006-12-04 09:26  gb

	* level-1/l1-streams.lisp: STREAM-CLEAR-INPUT: don't inherit method
	for STRING-INPUT-STREAMs.

2006-12-04 09:24  gb

	* level-0/l0-bignum64.lisp: BIGNUM-SHIFT-RIGHT-1: handle shift by 0
	bits.  BIGNUM-BIGNUM-GCD (whatever it's called): don't bother to
	shift by 0 bits.

2006-12-04 09:21  gb

	* level-1/ppc-trap-support.lisp: Reset error-reentry count before
	doing %SLOT-UNBOUND-TRAP.

2006-12-04 09:21  gb

	* level-1/l1-streams.lisp: Default STREAM-POSITION method for
	STREAMs, returns NIL.  STREAM-POSITION method for
	STRING-INPUT-STREAMs.

2006-12-04 09:19  gb

	* level-1/l1-pathnames.lisp: Derive ccl-directory from pathname
	containing heap image.

2006-12-03 07:41  gb

	* level-1/l1-streams.lisp: FORCE-OUTPUT, FINISH-OUTPUT on
	STRING-OUTPUT-STREAMs are no-ops.
	
	Need an ioblock-based character-read-vector function for
	string-input-streams.

2006-12-03 07:37  gb

	* lib/describe.lisp: Minimal DESCRIBE support for
	CCL::BASIC-STREAM.

2006-12-03 07:36  gb

	* lib/macros.lisp: If :element-type is supplied in
	WITH-OUTPUT-TO-STRING, don't quote it.

2006-12-03 05:11  gb

	* level-1/x86-trap-support.lisp: Define RIP-REGISTER-OFFSET, which
	isn't necessarily 16.

2006-12-03 05:10  gb

	* level-1/x86-error-signal.lisp: Use RIP-REGISTER-OFFSET, which
	isn't necessarily 16.
	
	Use WITH-ERROR-REENTRY-DETECTION n %xerr-disp; dtrt for
	%slot-unbound-trap.

2006-12-03 05:09  gb

	* level-1/l1-streams.lisp: Tweak stream hierarchy a little, to
	avoid some NO-NEXT-METHODs.

2006-12-03 02:42  gb

	* compiler/nx1.lisp: Handle VALUES type specifiers in THE forms a
	bit better.

2006-12-03 02:41  gb

	* compiler/nx0.lisp: Handle VALUES type specifiers in THE forms a
	bit.

2006-12-03 02:28  gb

	* lisp-kernel/x86-spentry64.s: Do vector bounds checking by
	clearing the low byte of the header, shifting it right, and
	comparing the index to that.  (It's not reliable to shift the index
	left.)

2006-12-03 02:26  gb

	* level-1/l1-unicode.lisp: Memory/vector encode functions: don't
	write BOM, leave that up to higher-level code.
	
	Start to write some higher-level code.

2006-12-03 02:23  gb

	* level-1/l1-sysio.lisp: Fix some indentation.

2006-12-03 02:21  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: CHECK-MISC-BOUNDS: shift
	the header word right (after clearing its low byte) and compare the
	index to that.	(Shifting the index left - d'oh - obviously fails
	for indices of large magnitude.)

2006-11-29 21:07  gb

	* lib/db-io.lisp: Indentation change.
	
	Add CDB-ENUMERATE-KEYS.

2006-11-29 18:37  gb

	* lib/level-2.lisp: %DESTRUCTURE-LAMBDA-LIST: other callers of
	VERIFY-LAMBDA-LIST (hopefully) check to see if the alleged list is
	LISTP first.  (I hope ...).  Do so.

2006-11-28 18:42  gb

	* lisp-kernel/x86-spentry64.s: Wrong register typo in .SPaset2.

2006-11-28 16:14  gb

	* examples/cocoa-window.lisp: DEFAULT-FONT: retain the font.

2006-11-28 16:12  gb

	* examples/objc-runtime.lisp: Wrap a (primitive)
	WITH-AUTORELEASE-POOL around the code which detaches the dummy
	NSThread.

2006-11-28 16:09  gb

	* examples/cocoa-listener.lisp: Don't claim that a callback
	parameter is ignored; use IGNORABLE instead.

2006-11-21 01:28  gb

	* level-1/l1-sockets.lisp: Typo in PATH-FROM-UNIX-ADDRESS
	conditionalization.

2006-11-21 00:55  gb

	* level-1/l1-sockets.lisp: INIT-UNIX-SOCKADDR: don't use
	%COPY-IVECTOR-TO-PTR to copy string to foreign memory.
	
	Basic file-socket streams.

2006-11-10 05:08  gb

	* release-notes.txt: Update.

2006-11-10 04:28  gb

	* lisp-kernel/image.h: Bump min image version.

2006-11-10 04:19  gb

	* xdump/heap-image.lisp: bump current image version.

2006-11-10 04:19  gb

	* lisp-kernel/image.h: bump current, max image version.

2006-11-10 04:10  gb

	* xdump/faslenv.lisp: Bump min fasl version.

2006-11-10 03:56  gb

	* lib/nfcomp.lisp: bump current fasl version.

2006-11-10 03:47  gb

	* lisp-kernel/x86-exceptions.c: save_application: use #__exit, not
	#_exit

2006-11-10 03:46  gb

	* compiler/X86/x862.lisp: TYPE typo.

2006-11-10 03:32  gb

	* xdump/faslenv.lisp: Bump max fasl version.

2006-11-10 03:25  gb

	* level-1/version.lisp: Bump.  New snapshots today!

2006-11-09 16:26  gb

	* level-1/l1-readloop.lisp: QUIT uses #__quit.
	
	PREPARE-TO-QUIT kill stragglers without waiting as long.

2006-11-09 15:50  gb

	* lisp-kernel/pmcl-kernel.c: Use #_ _exit for fatal termination.
	
	Try to run lisp code after #_exit via lazarus(); this is for some
	cases of SAVE-APPLICATION (e.g., in the Cocoa GUI).
	
	The environment in which The Undead code runs is a little funky,
	especially on PPC.  There might be GC implications (cstack will
	contain call history as of the point when #_exit called atexit
	handlers, vstack & tstack are emptied in lazarus()).  We should
	barely run any code in this environment, but we will GC a time or
	two ...

2006-11-09 15:45  gb

	* lisp-kernel/ppc-exceptions.c: Use _exit afer save-application.

2006-11-09 15:43  gb

	* examples/: cocoa-window.lisp, cocoa.lisp: Change the quit
	protocol.

2006-11-09 15:42  gb

	* examples/cocoa-listener.lisp: :set-document-edited for listener
	"documents" is a no-op.

2006-11-09 15:39  gb

	* compiler/PPC/: ppc2.lisp, PPC32/ppc32-vinsns.lisp,
	PPC64/ppc64-vinsns.lisp: 3d-array accessor stuff for PPC as well.

2006-11-09 12:50  gb

	* compiler/X86/x862.lisp: Always check that array-ctype's
	dimensions are a list before taking their length.

2006-11-09 12:13  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: 3d-unscaled-index does the
	right thing ...

2006-11-09 10:08  gb

	* compiler/: nx1.lisp, X86/x862.lisp, X86/X8664/x8664-vinsns.lisp:
	Three-arg aref/(setf aref) for x8664.

2006-11-09 05:37  gb

	* compiler/nx0.lisp: Map array-type keywords to 3d-array type
	errors.

2006-11-09 05:37  gb

	* compiler/nxenv.lisp: Operators for 3d array access.

2006-11-09 05:36  gb

	* compiler/arch.lisp, level-1/l1-error-system.lisp,
	lisp-kernel/errors.s, lisp-kernel/lisp-errors.h: Type-errors for 3d
	array types.

2006-11-08 12:50  gb

	* level-1/x86-trap-support.lisp: In darwin Fake Structures For
	Leopard nonsense: define the stack context struct separately, make
	the ucontext stack field an instance of it.  (Not -sure- if that
	was necessary, but :poweropen-target was accidentally on *FEATURES*
	and foreign struct layout was using read-time condtionalization to
	decide whether or not to use brain-dead structure-alignment rules
	leftover from AIX/PowerOpen.

2006-11-08 12:46  gb

	* lisp-kernel/x86-spentry64.s: Fix comment ("/*", not "/%" ...).

2006-11-08 12:40  gb

	* compiler/optimizers.lisp: Try to infer/insert the array type when
	compiler-macroexpanding MAKE-ARRAY calls.

2006-11-08 12:39  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: DarwinPPC32 FTD follows
	:poweropen-alignment rules.

2006-11-08 12:38  gb

	* lib/foreign-types.lisp: parse-foreign-record-fields: conformance
	to poweropen structure layout rules should be an attribute of the
	FTD, not done via read-time conditionalization.

2006-11-08 05:15  gb

	* level-1/version.lisp: Bump.

2006-11-08 05:15  gb

	* level-1/l1-streams.lisp: Some bivalent/binary fixes.
	
	TODO: get rid of "bivalent" streams, but allow switching some
	streams (sockets) between "character mode" and "binary mode".

2006-11-08 02:39  gb

	* compiler/PPC/ppc2.lisp: Typo in misc-ref-u64 vinsn emit.

2006-11-07 21:10  gb

	* compiler/optimizers.lisp: Transform three-argument AREF->%AREF3,
	ASET->%ASET3.

2006-11-07 20:40  gb

	* compiler/X86/x862.lisp: Implement %aset2 in the x8664 backend.

2006-11-07 20:39  gb

	* level-0/X86/x86-array.lisp: %aref3, %aset3.

2006-11-07 20:38  gb

	* level-0/l0-array.lisp: Use %aref2,%aref3.

2006-11-07 20:37  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: More (often redundant)
	vector-store vinsns.

2006-11-07 20:37  gb

	* compiler/X86/X8664/x8664-arch.lisp: .SParef3, .SPaset3.

2006-11-07 10:28  gb

	* lisp-kernel/: x86-spentry64.s, x86-spjump64.s: .SParef3,
	.SPaset3.

2006-11-07 10:27  gb

	* level-0/PPC/ppc-array.lisp: %ref3, %aset3.

2006-11-07 10:26  gb

	* lisp-kernel/ppc-spentry.s, lisp-kernel/ppc-spjump.s,
	compiler/PPC/ppc-arch.lisp: .SPref3, .SPaset3.

2006-11-07 10:26  gb

	* lisp-kernel/ppc-macros.s: Define mullr, which expands into one of
	mullw/mulld.

2006-11-07 04:12  gb

	* compiler/PPC/ppc2.lisp: :signed-64-bit-vector is signed ...

2006-11-06 22:07  gb

	* compiler/nx0.lisp: nx-error-for-simple-2d-array-type: forgot the
	:fixnum-vector case.

2006-11-06 22:04  gb

	* compiler/PPC/ppc2.lisp: Handle vector assignment differently;
	handle (setf (aref ...)) of simple 2d-arrays inline if the type is
	known/declared.

2006-11-06 22:02  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	Add vinsns for misc-set-s* and variants. (Identical to the unsigned
	versions, but it helps not to have to remember which are
	implemented and which aren't.)

2006-11-06 22:01  gb

	* compiler/nxenv.lisp: general-aset2, simple-typed-aset2.

2006-11-06 22:00  gb

	* compiler/nx1.lisp: New %ASET2 handling.

2006-11-06 21:59  gb

	* compiler/nx0.lisp: ACODE-FORM-TYPE: use var-inittype if var is
	never assigned to.

2006-11-05 22:09  gb

	* level-1/x86-trap-support.lisp: Try to work around
	incompatibilites in Tiger/Leopard headers.

2006-11-05 22:08  gb

	* level-1/l1-sockets.lisp: LOOKUP-PORT: use the macro HTONS, since
	the foreign function may not exist.

2006-11-05 20:41  gb

	* compiler/X86/x862.lisp: 2d array error lookup -> nx.

2006-11-05 07:55  gb

	* level-0/X86/x86-misc.lisp: %VALID-REMAINING-TIMESPEC-TIME-P for
	x86-64, as well.

2006-11-05 07:52  gb

	* level-0/X86/x86-array.lisp: %AREF2, %ASET2 in x8664 lap.

2006-11-05 07:50  gb

	* lisp-kernel/x86-spentry64.s: pre-add displacement in .SParef2,
	.SPaset2.

2006-11-05 07:48  gb

	* lisp-kernel/ppc-spentry.s: .SParef2, .SPaset2: since we aren't
	testing simple-array-ness, add the (possibly 0) displacement from
	the header before handling the simple aref of the data vector.

2006-11-05 07:47  gb

	* lib/foreign-types.lisp: PRINT-OBJECT method for EEPS: handle
	pointers on PPC(64), print 64-bit addresses on 64-bit platforms.

2006-11-05 07:46  gb

	* level-1/version.lisp: Bump; new binaries soon.

2006-11-05 07:46  gb

	* level-1/l1-lisp-threads.lisp: %NANOSLEEP calls
	%VALID-REMAINING-TIMESPEC-TIME-P, which is better than sleeping for
	4G seconds after an EINTR on Leopard.

2006-11-05 07:44  gb

	* level-0/PPC/PPC64/ppc64-bignum.lisp: MACPTR->FIXNUM returns NIL
	if any non-fixnum bits would be set in the result.  (Should
	probably make this true on all platforms; for PPC64, it's important
	for foreign function addresses that're ... suboptimally aligned.)

2006-11-05 07:42  gb

	* level-0/PPC/ppc-misc.lisp: Try to detect the case where
	%NANOSLEEP's second (by reference) argument contains garbage after
	an EINTR.  (The L word, again.)

2006-11-05 07:41  gb

	* level-0/PPC/ppc-array.lisp: %AREF2, %ASET2: in LAP, just call
	into the kernel.

2006-11-05 07:40  gb

	* level-0/l0-cfm-support.lisp: Some platforms (the L-word) generate
	ppc64 functions whose addresses are not 0 mod 8, so (a) make
	MACPTR->FIXNUM return NIL if an address isn't representable as a
	fixnum and (b) make FOREIGN-SYMBOL-ENTRY return an address if it
	can't return a fixnum on PPC (really just affects PPC64.)

2006-11-05 07:37  gb

	* level-0/l0-array.lisp: %aref2, %aset2: call into kernel.

2006-11-05 07:36  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	2d aref support/changes.

2006-11-05 07:36  gb

	* compiler/PPC/ppc2.lisp: Get the PPC2 backend caught up with the
	x8664 wrt 2d aref.  Stll a ways to go.

2006-11-05 07:35  gb

	* compiler/nx0.lisp: NX-ERROR-FOR-SIMPLE-2D-ARRAY-TYPE.

2006-11-04 00:05  gb

	* level-1/version.lisp: Bump.

2006-11-03 23:10  gb

	* level-1/ppc-error-signal.lisp: fix parens.

2006-11-03 23:09  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp: arch
	gvector types contains :struct, not :structure.

2006-11-03 23:08  gb

	* compiler/PPC/ppc2.lisp: aref2: new operator name(s), always call
	subprim.
	
	ppc2-fixed-call-builtin: (tail-)call subprims even if they aren't
	in the builtin functions table.

2006-11-03 15:19  gb

	* compiler/PPC/ppc-arch.lisp: New .SParef2, .SPaset2 subprims.

2006-11-03 15:18  gb

	* compiler/PPC/ppc-asm.lisp: Comments/indentation.

2006-11-03 15:17  gb

	* level-1/ppc-error-signal.lisp: Change decoding/handlng of
	type-error UUOs.

2006-11-03 15:16  gb

	* lisp-kernel/: ppc-spentry.s, ppc-spjump.s: .SParef2, .SPaset2.

2006-11-03 15:16  gb

	* lisp-kernel/: ppc-constants32.s, ppc-constants64.s: Define arrayH
	(array-header) layout.

2006-11-03 13:46  gb

	* level-1/l1-clos-boot.lisp: CANONICALIZE-SPECIALIZERS optionally
	returns its argument if all members are SPECIALIZERS.
	
	Use CANONICALIZE-SPECIALIZERS to canonicalize FIND-METHOD
	arguments, for the benefit of people who haven't read the MOP spec
	or who don't realize that the MOP defines some things differently
	from CLHS.

2006-11-03 13:38  gb

	* compiler/X86/x862.lisp: Consistently use :struct (not :structure)
	to refer to primitive structure type.
	
	Fix array-ctype-dimensions check in %aref1, add it to %aset1.

2006-11-03 13:37  gb

	* compiler/X86/X8664/x8664-arch.lisp: Ensure that :STRUCT (not
	:STRUCTURE) is on target-gvector-types.

2006-11-03 12:53  gb

	* lisp-kernel/x86-uuo.s: uuo_error_array_bounds, such as it is.

2006-11-03 12:52  gb

	* lisp-kernel/: x86-spentry64.s, x86-spjump64.s: SParef2, .SPaset2.
	 More to come ...

2006-11-03 12:52  gb

	* lisp-kernel/x86-constants64.s: Define array-header layout.

2006-11-03 12:51  gb

	* lisp-kernel/: errors.s, lisp-errors.h: New type-error uuo
	encodings, new type-error constants.

2006-11-03 12:50  gb

	* level-1/x86-error-signal.lisp: New range/encoding of type-error
	traps.

2006-11-03 12:49  gb

	* level-1/l1-utils.lisp: (temporary) mechanism to avoid
	constant-redefinition CERRORs.

2006-11-03 12:48  gb

	* level-1/l1-error-system.lisp: New %type-error-typespecs%.

2006-11-03 12:47  gb

	* level-0/l0-pred.lisp: array--header -> array-header.

2006-11-03 12:47  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Fix misc-set-c-u64 braino;
	add/change some 2d array stuff.

2006-11-03 12:43  gb

	* compiler/X86/X8664/x8664-arch.lisp: Define .SParef2/.SPaset2
	subprims; seem to be much (>5x) faster than the lisp/lap versions
	(though we can generally be faster still when we know the
	element-type and/or know whether the array is simple or explicitly
	displaced.)

2006-11-03 12:41  gb

	* compiler/X86/x862.lisp: Change handling of 2d-aref; lots of
	related changes.
	
	Split the code which handles bounds/type-checking in vref out from
	the code which actually does the reference, so that the latter can
	be used in multidimensional cases.
	
	Need to do this on PPC as well; need to do more (%aset2, 3d cases,
	general case.)

2006-11-03 12:38  gb

	* compiler/nx1.lisp: Change handling of 2d-aref.

2006-11-03 12:37  gb

	* compiler/nxenv.lisp: aref2 -> simple-typed-aref2, add
	general-aref2.	More changes to come (and this may affect
	compilation on PPC until some PPC compiler changes are
	made/checked-in.)

2006-11-03 12:35  gb

	* compiler/arch.lisp: type-errors (as encoded in UUOs) are now in
	the range 128-255, rather than 64-127; more are defined.

2006-11-02 09:43  gb

	* level-1/l1-error-system.lisp: Move along, nothing to see here.

2006-11-02 09:37  gb

	* compiler/arch.lisp: New error constants; work in progress ...

2006-11-01 11:40  gb

	* lisp-kernel/errors.s: Some new constants; more to check in later.

2006-10-31 03:39  gb

	* level-0/l0-io.lisp: You must be reading the OLD rule book
	(Leopard and #$EINTR).

2006-10-31 03:21  gb

	* lisp-kernel/ppc-exceptions.c: handle_protection_violation: pass
	the tcr.  Initialize "addr" before testing it ...

2006-10-31 03:21  gb

	* lisp-kernel/lisp-exceptions.h: handle_protection_violation: pass
	the tcr.

2006-10-30 20:40  gb

	* lib/defstruct.lisp: DEFSTRUCT-REF-TRANSFORM for typed vector
	expands into something more useful.

2006-10-30 20:39  gb

	* lisp-kernel/ppc-spentry.s: Fix ppc32
	misc_ref_double_float_vector.

2006-10-30 00:24  gb

	* level-0/l0-bignum64.lisp: Enable the destructive version of
	%BIGNUM-BIGNUM-GCD; conditionalize it for 64-bit targets and
	provide/fix supporting functions.  Seems to work on ppc64; needs
	testing on x8664.

2006-10-27 17:49  gb

	* darwin-x86-headers64/libc/C/: .cvsignore, populate.sh: New file.

2006-10-25 20:36  gb

	* level-1/l1-streams.lisp: %BIVALENT-IOBLOCK-READ-U8-BYTE (and
	variants): always clear the untyi-char.
	
	%ENCODED-IOBLOCK-PEEK-CHAR: the read-char-when-locked function
	needs an argument.
	
	SETUP-IOBLOCK-OUTPUT: there are no special output functions for
	bivalent streams.
	
	%IOBLOCK-BINARY-READ-VECTOR: clear any untyi char.

2006-10-24 12:35  gb

	* level-1/version.lisp: Bump.

2006-10-24 01:29  gb

	* lisp-kernel/x86-spentry64.s: Fix :ALLOW-OTHER-KEYS check in
	_SPdestbind1 (still used in inlining, sometimes.)

2006-10-24 01:05  gb

	* release-notes.txt: Change the date, add/change some content.

2006-10-24 01:05  gb

	* lib/macros.lisp: Reference the (bound) STREAM-VAR argument - not
	STREAM - in the expansion of WITH-OUTPUT-TO-STRING.

2006-10-24 00:56  gb

	* lib/ccl-export-syms.lisp: Reference the (bound) STREAM-VAR
	argument - not STREAM - in the expansion of WITH-OUTPUT-TO-STRING.

2006-10-24 00:55  gb

	* level-1/l1-streams.lisp: When recycling
	string-output-stream-ioblocks, set the IOBLOCK-CHARPOS to 0. 
	(Failure to do this can screw up the pretty-printer, among other
	things.)

2006-10-24 00:52  gb

	* level-1/l1-sockets.lisp: DEFAULT-CHARACTER-ENCODING for :SOCKET,
	*DEFAULT-SOCKET-CHARACTER-ENCODING*.

2006-10-23 17:03  gb

	* release-notes.txt: Updated; almost ready to go (still a
	WITH-OUTPUT-TO-STRING/PPRINT (?) bug).

2006-10-23 16:43  gb

	* level-1/l1-sysio.lisp: NORMALIZE-EXTERNAL-FORMAT: use
	*DEFAULT-EXTERNAL-FORMAT* value for :DEFAULT.

2006-10-23 16:42  gb

	* level-1/l1-streams.lisp: Use NORMALIZE-EXTERNAL-FORMAT in (SETF
	STREAM-EXTERNAL-FORMAT) methods.

2006-10-23 16:41  gb

	* lib/ccl-export-syms.lisp: Export some unicode/external-format
	stuff.

2006-10-23 08:27  gb

	* level-1/version.lisp: Bump; binaries today, honest.

2006-10-23 08:27  gb

	* level-1/l1-streams.lisp: freelist string-output-stream-ioblocks.

2006-10-23 08:26  gb

	* lib/macros.lisp: Some/most/all of the WITH-IOBLOCK-OUTPUT-LOCKED
	macros were checking for the presence of an input lock ...

2006-10-23 05:40  gb

	* level-1/l1-streams.lisp: Optimize write-string on string streams
	a little.

2006-10-23 05:26  gb

	* lib/macros.lisp: WITH-OUTPUT-TO-STRING: don't expand into code
	which evaluates the string form twice; don't do whatever was being
	done to default the element type of the string stream.

2006-10-23 05:24  gb

	* compiler/optimizers.lisp: MAKE-STRING-OUTPUT-STREAM: skip some
	keyword/subtype checking if element-type not provided.	(Could also
	skip it if it's explicit and obviously OK.)

2006-10-23 05:22  gb

	* level-0/X86/x86-misc.lisp: %HEAP-BYTES-ALLOCATED: don't add
	"current" allocation if nothing's reserved.

2006-10-23 05:19  gb

	* lisp-kernel/x86-exceptions.c: In handle_alloc_trap(), fix call to
	update_bytes_allocated (sign of "disp").

2006-10-22 08:02  gb

	* compiler/PPC/ppc2.lisp: MULTIPLE-VALUE-PROG1: treat the first
	form like a PROGN if there are no other forms.

2006-10-22 08:01  gb

	* level-1/l1-streams.lisp: Don't disable interrupts when calling
	ioblock functions.
	
	New string-stream implementation.  Better ...

2006-10-22 07:59  gb

	* lib/macros.lisp: If WITH-OUTPUT-TO-STRING gets the string, do so
	before the stream closes.

2006-10-22 07:59  gb

	* lib/pprint.lisp: Don't assume that string output stream strings
	have a fill-pointer; use STREAM-POSITION instead.

2006-10-22 07:57  gb

	* lib/streams.lisp: Don't disable interrupts when calling ioblock
	functions, after all.
	
	Go through (new) ioblock-unread-char-function.

2006-10-22 07:55  gb

	* lisp-kernel/darwinppc/.gdbinit: Stop trying to print strings via
	x/s

2006-10-21 18:46  gb

	* level-1/l1-streams.lisp: Typo.

2006-10-21 18:41  gb

	* lisp-kernel/x86-exceptions.c: Initialize (zero, usually) more
	fields in pseudo sigcontexts.

2006-10-21 18:40  gb

	* level-1/l1-streams.lisp: Mostly locking changes (don't lock
	twice, etc.)

2006-10-21 18:35  gb

	* level-0/l0-array.lisp, level-0/l0-init.lisp,
	level-0/l0-pred.lisp, level-0/l0-utils.lisp,
	level-0/PPC/ppc-array.lisp, level-0/PPC/ppc-symbol.lisp,
	level-0/X86/x86-symbol.lisp, level-1/l1-aprims.lisp,
	lib/sequences.lisp: Remove vestival #+target-8-bit-chars stuff.

2006-10-21 16:45  gb

	* level-1/l1-unicode.lisp: New! Improved! Now with more iso-8859
	encodings!

2006-10-19 13:48  gb

	* level-0/PPC/ppc-misc.lisp: Reference the source argument - not
	arg_z - in %safe-get-ptr.

2006-10-19 13:22  gb

	* level-0/l0-aprims.lisp: %CSTR-POINTER: make #\Nul termination
	optional, use #\Sub char-code as replaement char.

2006-10-19 13:21  gb

	* examples/objc-runtime.lisp: Missing close paren.

2006-10-19 13:19  gb

	* examples/: cocoa-editor.lisp, cocoa-listener.lisp: Careful BLTing
	strings to/from foreign memory.

2006-10-19 13:18  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Typos in UNBOX-S8.

2006-10-18 08:04  gb

	* level-1/version.lisp: Bump.  Binaries later today ?

2006-10-18 07:38  gb

	* level-1/l1-clos-boot.lisp: The post-bootstrapping version of
	(SETF FIND-CLASS) only introduces (or removes) a type name if the
	class becomes (or ceases to be) a properly named class.
	
	The pre-bootstrapping version handles simpler cases of that; use
	ALIAS-CLASS to register some early class names as type names.

2006-10-18 07:36  gb

	* level-1/l1-clos.lisp: (SETF CLASS-NAME) can affect the type
	system, since only symbols which name properly-named classes are
	type specifiers.  Changing the name of a class can either introduce
	or remove a properly-named class.
	
	Classes that have the kernel-p attribute shouldn't have their names
	changed casually.

2006-10-18 07:33  gb

	* level-1/l1-sockets.lisp: Accept an :EXTERNAL-FORMAT argument to
	MAKE-SOCKET, pass it down to whatever function actually creates a
	stream socket.

2006-10-18 02:12  gb

	* compiler/X86/x862.lisp: Allow closed-over addresses in
	conditional-form, NOT.

2006-10-18 01:43  gb

	* lisp-kernel/x86-exceptions.c: handle_fault() checks for
	safe_ref_addres.

2006-10-18 01:43  gb

	* level-0/X86/x86-misc.lisp: %safe-get-ptr for x8664.

2006-10-18 01:41  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Compare stack
	addresses/vcells to nil.

2006-10-18 01:41  gb

	* compiler/X86/x862.lisp: Stuff for comparing memory (stack)
	addresses to NIL.
	
	Mark arg_z and rcx/nargs as being in use when restoring interrupt
	level inline.

2006-10-18 01:39  gb

	* compiler/X86/x86-disassemble.lisp: We've had UUO-ERROR-UNBOUND
	for a few months now.  The disassembler is always the last to know.

2006-10-17 19:15  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp,
	compiler/X86/X8664/x8664-arch.lisp, examples/objc-runtime.lisp,
	level-0/l0-misc.lisp, level-0/PPC/ppc-misc.lisp,
	lisp-kernel/ppc-constants32.h, lisp-kernel/ppc-constants32.s,
	lisp-kernel/ppc-constants64.h, lisp-kernel/ppc-constants64.s,
	lisp-kernel/ppc-exceptions.c, lisp-kernel/x86-constants64.h,
	lisp-kernel/x86-constants64.s: add safe-ref-address to tcr.
	
	Handle memory faults to safe-ref-addres on PPC (so far).
	
	Try using SAFE-GET-PTR in objc runtime (untested).

2006-10-17 17:34  gb

	* compiler/PPC/ppc2.lisp: ppc backend %aref1/%aset1: notice array
	type in acode.

2006-10-17 14:02  gb

	* level-1/l1-unicode.lisp: BOM-ENCODING.

2006-10-17 14:02  gb

	* level-1/l1-sysio.lisp: FILE-STRING-LENGTH actually does
	something.
	
	Clear the pending-bom flag when seeking.

2006-10-17 14:01  gb

	* level-1/l1-streams.lisp: (SETF STREAM-EXTERNAL-FORMAT) for
	ioblock-based character streams.

2006-10-17 13:45  gb

	* compiler/X86/: x862.lisp, X8664/x8664-vinsns.lisp: bind/unbind
	*interrupt-level* inline.

2006-10-17 13:44  gb

	* compiler/X86/x86-disassemble.lisp: Act like ud2a takes a one-byte
	immmediate operand (xuuo).

2006-10-17 13:39  gb

	* level-1/l1-streams.lisp, lib/streams.lisp: Disable interrupts
	when necessary.

2006-10-17 13:39  gb

	* compiler/PPC/: ppc2.lisp, PPC32/ppc32-vinsns.lisp,
	PPC64/ppc64-vinsns.lisp: bind/unbind *interrupt-level* inline.

2006-10-15 17:51  gb

	* level-1/l1-streams.lisp: Handle 32-bit character encodings.
	
	Start to extend STREAM-EXTERNAL-FORMAT, start to make it SETFable.

2006-10-15 17:51  gb

	* level-1/l1-unicode.lisp: utf-32/ucs-4 and variants.

2006-10-15 17:50  gb

	* level-1/l1-sysio.lisp: EXTERNAL-FORMATs are immutable, interned.

2006-10-14 07:41  gb

	* compiler/PPC/ppc2.lisp: Fix use of ^,<- vinsn macros inside
	ENSURING-NODE-TARGET.
	
	Inline the fixnum case of two-arg numeric comparisons.

2006-10-14 07:39  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	INLINE-SUB2 support.

2006-10-14 06:30  gb

	* lib/defstruct.lisp: Don't (DECLARE (OPTIMIZE (SAFETY 3))) in
	generated DEFSTRUCT accessors.

2006-10-14 06:27  gb

	* compiler/X86/x862.lisp: Fix many cases of ENSURING-NODE-TARGET.
	
	Do the fixnum case of two-argument subtraction inline.
	
	Inline the fixnum case of two-argument numeric comparisons.
	
	STRUCT-REF avoids typechecking when reckless.

2006-10-14 06:21  gb

	* compiler/backend.lisp: It makes no sense to use the vinsn macros
	<- and ^ inside ENSURING-NODE-TARGET, so make it check for that.

2006-10-14 06:20  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Do vector bounds-checking a
	little differently.
	
	Add xchg-registers.

2006-10-13 04:54  gb

	* compiler/nx1.lisp: Use new NUMCMP operator.

2006-10-13 04:53  gb

	* compiler/nx0.lisp: Change inline expansion: use optimize settings
	in effect at call time, not those in effect at definition time.

2006-10-13 04:50  gb

	* level-0/l0-numbers.lisp: Change >=-2, <=-2, /=-2 to avoid
	inlining issues.

2006-10-13 04:30  gb

	* compiler/nxenv.lisp: Replace unused num= with numcmp.

2006-10-12 19:46  gb

	* lisp-kernel/pmcl-kernel.c: Terminate argument processing when
	"--" is seen.

2006-10-12 19:45  gb

	* level-1/: l1-streams.lisp, l1-sysio.lisp, l1-unicode.lisp: Handle
	newline translation differenly (at the character I/O level, not the
	buffer level).
	
	All character encoding/decoding functions operate on octets, not
	necessarily code units.  (The stream encode/decode functions are an
	exception; serialization and byte ordering are handled by the
	stream.)

2006-10-09 16:34  gb

	* level-1/l1-streams.lisp: Write  #\Sub's char-code if we can't
	encode a character in (implicit) iso-8859-1.

2006-10-09 16:33  gb

	* level-0/l0-misc.lisp: %COPY-STRING-TO-U8: use #\Sub (ascii 26) as
	a replacement character.

2006-10-09 16:31  gb

	* level-1/l1-unicode.lisp: :stream-encode/decode functions always
	write/read something, even if it's a replacement character of some
	sort.

2006-10-09 15:19  gb

	* level-1/l1-streams.lisp: More stuff about line termination.  When
	will this end ?

2006-10-09 15:19  gb

	* lib/chars.lisp: Use a hashtable to map characters to their names.
	 (Maybe a sparse vector ?).

2006-10-09 15:18  gb

	* level-1/l1-reader.lisp: Use a hashtable to map characters to
	their names.  (Maybe a sparse vector ?).
	
	Define #\Sub and #\Replacement_Character.

2006-10-08 21:17  gb

	* level-1/l1-readloop-lds.lisp: SELECT-BACKTRACE: it's been all
	NEW-BACKTRACE for a while now.

2006-10-08 21:16  gb

	* lisp-kernel/lisptypes.h: Need to #include <sys/signal.h> to keep
	Panther happy.

2006-10-08 20:30  gb

	* lisp-kernel/x86_print.c: Print hex with leading #x, not #0x ...

2006-10-08 20:30  gb

	* lib/dumplisp.lisp: Do some sanity checks on SAVE-APPLICATION
	pathname, before it's too late ...

2006-10-08 20:29  gb

	* level-1/l1-unicode.lisp: ASCII, some other changes.

2006-10-08 20:29  gb

	* level-1/l1-sysio.lisp: Rearrange a few things; pass
	:line-termination option to MAKE-FD-STREAM.

2006-10-08 20:28  gb

	* level-1/l1-streams.lisp: Yet another line-termination translation
	scheme; hopefully, the last for a while. (More tedium before it's
	actually installed.)

2006-10-08 20:27  gb

	* level-1/l1-reader.lisp: Add character names for #\Line_Separator,
	#\Paragraph_separator.

2006-10-07 20:35  gb

	* level-1/l1-init.lisp: *TERMINAL-CHARACTER-ENCODING-NAME*.

2006-10-07 20:34  gb

	* level-1/l1-error-signal.lisp: In %ERROR, go straight to the
	kernel debugger if interactive streams aren't initialized yet. 
	(We'd probably get there sooner or later in that case; try to get
	there sooner.)

2006-10-07 20:33  gb

	* level-1/l1-boot-2.lisp: Don't initialize interactive streams via
	DEF-LOAD-POINTERS.  Wrap that up in a function, and set a flag when
	the function's called (from APPLICATION's TOPLEVEL-FUNCTION
	method.)

2006-10-07 20:32  gb

	* level-1/l1-application.lisp: Handle the (new)
	-K/--terminal-encoding command-line argument.

2006-10-07 11:14  gb

	* level-1/l1-streams.lisp: INPUT-STREAM-P, OUTPUT-STREAM-P are true
	of instances if INPUT-STREAM/ OUTPUT-STREAM, respectively (not just
	instances of FUNDAMENTAL-INPUT/OUTPUT-STREAM).

2006-10-07 11:13  gb

	* lisp-kernel/lisp-debug.c: Do abort() if kernel debugger is
	entered when --batch is in effect.

2006-10-07 11:12  gb

	* level-1/l1-readloop.lisp: QUIT: flush *STDOUT* in
	PROCESS-EXIT-APPLICATION.

2006-10-07 11:11  gb

	* level-1/l1-processes.lisp: PROCESS-EXIT-APPLICATION: flush
	*stdout* here.

2006-10-06 04:49  gb

	* level-1/l1-streams.lisp: CODE-UNIT, not CODE-ELEMENT.  Add a
	TRANSLATE slot to IO-BUFFER.

2006-10-06 04:40  gb

	* level-1/l1-sockets.lisp: basic (vs fundamental) socket streams.

2006-10-06 04:39  gb

	* level-1/l1-sysio.lisp: Real, live EXTERNAL-FORMAT structures.

2006-10-06 04:38  gb

	* level-1/version.lisp: Bump.

2006-10-06 04:38  gb

	* level-0/l0-misc.lisp: %COPY-STRING-TO-U8: use #\? as a
	replacement character.

2006-10-05 14:46  gb

	* lisp-kernel/lisptypes.h: More register name aliases.	FMH.

2006-10-05 14:46  gb

	* lisp-kernel/x86-asmutils64.s: get_mxcsr, set_mxcsr.

2006-10-05 14:46  gb

	* lisp-kernel/x86-exceptions.c: Save the mxcsr, load it with a
	C-like value (all exceptions masked) before doing a callback.  (Not
	doing this meant that tcr.foreign_mxcsr was often set to a "lispy"
	value, where most exceptions were unmasked, and this caused FP
	exceptions when calling out to foreign code with the "lispy"
	tcr.foreign_mxcsr in effect.)
	
	Mach exception stuff arranges to return via sigreturn.	Didn't fix
	the spurious SIGTRAPs, but might be the right idea (and might save
	a context switch or two.)
	
	Mach exception stuff initializes rflags to exception rflags when
	arranging to resume thread at handler.	Leaving them uninitialized
	was causing spurious SIGTRAPs, since the trace bit(s) may have been
	set.

2006-10-05 06:09  gb

	* lib/macros.lisp: WITH-ENCODED-CSTR(s).  (Hey, it's a start.)

2006-10-05 06:09  gb

	* lib/chars.lisp: CHAR-NAME: try to use at least 4 hex digits for
	#\U+xxxx syntax.

2006-10-05 06:08  gb

	* level-1/l1-unicode.lisp: UCS-2, some other changes.

2006-10-05 06:07  gb

	* level-1/l1-sysio.lisp: Try to get
	line-termination/external-format stuff working.

2006-10-05 05:35  gb

	* level-1/l1-streams.lisp: Assume that character data is always
	encoded as one or more 8-bit octets.

2006-10-05 04:59  gb

	* level-1/l1-boot-2.lisp: Set class-prototypes for basic-streams
	just before we make the first one.

2006-10-02 08:13  gb

	* lisp-kernel/x86-exceptions.h: Darwin uses _sigtramp glue to call
	handlers, so we need to make handlers do a sigreturn after
	switching off the signal stack, etc.

2006-10-02 08:11  gb

	* lisp-kernel/x86-exceptions.c: Don't use SIGRETURN to return from
	signal_handler() on Darwin (since we depend on pseudo_sigreturn
	handling for cleanup of tcr pending exception and since we can't
	easily restore the signal mask.)
	
	(Up until this point, SIGRETURN has been a nop on Darwin.)

2006-10-02 04:59  gb

	* lisp-kernel/lisptypes.h: Compile on ppc,ppc64 osx 10.4 and
	earlier.

2006-10-02 04:47  gb

	* lisp-kernel/: lisptypes.h, ppc-exceptions.c, ppc-exceptions.h:
	Compile on post OSX 10.4 systems, for ppc/ppc64.  (Broken on
	systems <= 10.4).

2006-10-02 02:46  gb

	* lisp-kernel/: lisptypes.h, x86-exceptions.c, x86-exceptions.h:
	Try to make x86-64 version compile under 10.4 again; see if this
	breaks post-10.4 compilation.

2006-10-02 02:33  gb

	* lisp-kernel/: lisptypes.h, pmcl-kernel.c, x86-exceptions.c,
	x86-exceptions.h: Change things so that they compile for x86-64 on
	systems later than 10.4.  Almost certainly break 10.4 compilation
	in the process.  (Thanks, Apple!  Any time I can cause you to waste
	hours on crap like this, just let me know!)

2006-09-27 20:33  gb

	* lib/misc.lisp: DOCUMENTATION works on character-encodings.

2006-09-27 20:33  gb

	* level-1/l1-unicode.lisp: Character-encodings have doc strings.

2006-09-27 05:46  gb

	* level-1/l1-sysio.lisp: More FILE-STREAM changes.  Give
	BASIC-STREAM classes a class prototype.

2006-09-27 05:45  gb

	* level-1/l1-streams.lisp: Some changes to FD-STREAM
	initialization, to make it easier to use MAKE-FD-STREAM to open
	(seekable) FILE-STREAMs.

2006-09-27 05:41  gb

	* lisp-kernel/: x86-exceptions.c, x86-exceptions.h: Decode and
	handle UUO_ERROR_DEBUG_TRAP_WITH_STRING.

2006-09-27 05:39  gb

	* lisp-kernel/x86-spentry64.s: Still get very occasional SIGFPE on
	return from (e.g.) #_asin on x86-64 Darwin.  (#_asin often does a
	division-by-zero, but that should be masked when in foreign code.) 
	Don't reload the lisp mxcsr until other registers have been popped,
	to make debugging easier in case it's the act of reloading the
	mxcsr that causes the spurious trap.)

2006-09-27 05:36  gb

	* level-0/X86/x86-misc.lisp: DEBUG-TRAP-WITH-STRING.

2006-09-27 05:35  gb

	* level-0/nfasload.lisp: Not sure when it happened, but %FASLOAD
	was parenthesized in such a way as to not return the error value on
	error.

2006-09-27 05:34  gb

	* level-0/l0-misc.lisp: On x8664, use a new UUO for BUG.  (Not
	passing context into the kernel makes it too difficult to debug/get
	backtrace, etc.)

2006-09-27 05:33  gb

	* compiler/X86/: x86-asm.lisp, x86-disassemble.lisp:
	UUO-ERROR-DEBUG-TRAP-WITH-STRING.

2006-09-27 05:05  gb

	* level-1/l1-clos-boot.lisp: CLASS-PROTOTYPE method for CLASS class
	(mostly for BUILT-IN-CLASSes).

2006-09-26 20:49  gb

	* level-1/l1-sysio.lisp: SELECT-STREAM-CLASS: should probably take
	a BASIC-P argument.

2006-09-26 20:47  gb

	* level-1/l1-streams.lisp: More changes.  Imagine that.

2006-09-26 20:46  gb

	* compiler/: X86/X8664/x8664-vinsns.lisp, X86/x862.lisp,
	optimizers.lisp: (Redundant) FIXNUM decls in LDB compiler macro.

2006-09-26 20:43  gb

	* level-1/l1-unicode.lisp: Memory/vector encode/decode functions
	take/return strings, not chars.
	
	Some bom stuff.

2006-09-24 20:14  gb

	* lib/chars.lisp: Check for assumptions about character size. 
	Remove some %i-isms (fixnum arithmetic), make assertions about type
	of char-code.

2006-09-24 20:12  gb

	* level-1/l1-aprims.lisp: Remove unused (probably ancient)
	CHKBOUNDS function.  Simpler STRING-START-END.

2006-09-24 20:11  gb

	* level-1/l1-streams.lisp: Some stuff to infer line-termination. 
	Probably belongs elsewhere; some encodings may not make it at all
	possible.

2006-09-24 20:07  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	Load-character-constant: accept :u32const on PPC32, PPC64, too.

2006-09-24 20:00  gb

	* level-1/l1-streams.lisp: A little more u16 stuff.  Remove
	line-termination slot from ioblock and corresponding arg from
	functions which initialize it.

2006-09-24 19:59  gb

	* level-1/l1-sysio.lisp: Input-filter, output-filter in
	file-ioblock.

2006-09-24 19:58  gb

	* level-1/l1-unicode.lisp: Buffer translation functions don't
	belong here; start thinking about BOM.

2006-09-24 19:57  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: LOAD-CHARACTER-CONSTANT:
	it's been a :u32const for the last few weeks ...

2006-09-24 04:29  gb

	* lib/chars.lisp: CHAR-NAME looks in the *CHARACTER-NAMES* array if
	the code is within its bounds.

2006-09-24 04:27  gb

	* level-1/l1-reader.lisp: Lots more character names.  Maintain
	mappings in a vector and a hash table, rather than in an alist.

2006-09-24 04:26  gb

	* level-0/nfasload.lisp, xdump/xfasload.lisp, lib/nfcomp.lisp: Doh!
	character constant fasl encoding ($fasl-char).

2006-09-23 05:31  gb

	* level-1/l1-unicode.lisp: Some other iso8859-n encodings.  (Not
	sure which are the most important.)

2006-09-23 05:29  gb

	* level-1/l1-sysio.lisp: Start to separate
	line-termination/external-format stuff.

2006-09-23 05:28  gb

	* level-1/l1-streams.lisp: Lots-o-changes.

2006-09-23 05:28  gb

	* level-1/l1-boot-2.lisp: Make initial interactive streams use
	UTF-8 (mostly for debugging utf-8 ...)

2006-09-21 04:07  gb

	* lisp-kernel/x86-spentry64.s: don't clobber callback index when
	doing the DARWIN_GS_HACK stuff in _SPcallback (syscall sometimes
	clobbered r11, sometimes didn't.)

2006-09-21 04:05  gb

	* lisp-kernel/pmcl-kernel.c: Require mach/port.h.

2006-09-21 04:05  gb

	* lisp-kernel/x86-exceptions.c: Save and restore errno in
	callback_for_interrupt.

2006-09-21 04:04  gb

	* lisp-kernel/lisptypes.h: Guess again about preprocessor stuff for
	x86-64 ucontext/mcontext on Darwin.

2006-09-21 04:02  gb

	* level-1/l1-lisp-threads.lisp: Use underscore prefix on all Darwin
	flavors.
	
	Add a type decl in %nanosleep.

2006-09-21 04:01  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: sign-extend/zero-extend
	vinsns.

2006-09-21 04:01  gb

	* compiler/X86/x862.lisp: sign/zero-extend ffcall, syscall return
	values.  (Probably only matters in a few cases, like the Darwin
	x86-64 version of #_nanosleep, which returns a non-sign-extended
	"int" value if the sleep is interruted.)

2006-09-20 06:34  gb

	* level-1/version.lisp: Bump.

2006-09-20 04:24  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	slight improvements in signed-byte boxing, typechecking.

2006-09-20 04:22  gb

	* lib/streams.lisp: WRITE-BYTE for BASIC-STREAMs.

2006-09-20 04:21  gb

	* lib/macros.lisp: %SWAP-U16, %SWAP-U32.

2006-09-20 04:21  gb

	* lib/level-2.lisp: %EVAL-REDEFs for new require-xx functions.

2006-09-20 04:20  gb

	* level-1/l1-unicode.lisp: UTF-16, in native and byte-swapped
	versions.  Need a "logical" UTF-16, which deals with byte-order
	marks and a means of installing a concrete encoding.  Needs
	testing.

2006-09-20 04:15  gb

	* level-1/l1-streams.lisp: Numerous changes.

2006-09-20 04:15  gb

	* level-1/l1-sockets.lisp: %bswap16: fix type declaration.

2006-09-20 04:14  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: vinsns for signed/unsigned
	byte 8,16,32,64.  Tighten up some signed-byte boxing.

2006-09-20 04:12  gb

	* compiler/X86/x862.lisp: New require ops for signed/unsigned byte
	8,16,32,64

2006-09-19 01:38  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	vinsns for REQUIRE-[US][8,16,32,64]

2006-09-19 01:37  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Need
	THREE-DIGIT-BIGNUM-HEADER to recognize some cases of (UNSIGNED-BYTE
	64).

2006-09-19 01:36  gb

	* compiler/PPC/ppc-backend.lisp: clean up an error message.

2006-09-19 01:36  gb

	* compiler/PPC/ppc2.lisp: handle require-[us][8,16,32,64]
	operators.

2006-09-19 01:34  gb

	* compiler/optimizers.lisp: REQUIRE-TYPE: transform into
	require-[us][8,16,32,64] when possible.

2006-09-19 01:34  gb

	* compiler/nx1.lisp: inline require-[us][8,16,32,64].

2006-09-19 01:33  gb

	* compiler/nxenv.lisp: New operators for require-[us][8,16,32,64].

2006-09-19 01:15  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: x8664 vinsns for
	typechecking signed/unsigned bytes of sizes 8,16,32,64.

2006-09-19 00:36  gb

	* level-1/l1-streams.lisp: More changes; hard to bootstrap.

2006-09-18 21:42  gb

	* lib/macros.lisp: Macros for locking the input/output locks of an
	ioblock, assuming that it exists.

2006-09-17 00:45  gb

	* level-1/l1-streams.lisp: more changes

2006-09-13 06:52  gb

	* level-1/l1-io.lisp: Direct BASIC-STREAM stuff for WRITE-CHAR,
	WRITE-STRING, TERPRI.

2006-09-13 06:08  gb

	* lib/streams.lisp: READ-LINE changes for BASIC-STREAMs.

2006-09-13 06:07  gb

	* level-1/l1-unicode.lisp: GET-CHARACTER-ENCODING errors if the
	named encoding isn't defined.
	
	Terse PRINT-OBJECT method for CHARACTER-ENCODING.

2006-09-13 06:06  gb

	* level-1/l1-streams.lisp: More functions in the ioblock, some
	support for 8-bit encodings (like utf-8).  Not finished, but
	getting hard to bootstrap; need to check in and build on all
	platforms before it gets even harder.

2006-09-12 05:34  gb

	* level-0/l0-misc.lisp: Use %CSTR-POINTER (not
	%copy-ivector-to-pointer) in BUG.

2006-09-12 05:31  gb

	* lisp-kernel/x86-exceptions.c: Enter the debugger if
	altstack_signal_handler is entered in foreign code.  (Maybe want to
	signal a lisp error in some cases, but this is currently fatal and
	we might as well die earlier than with a stack overflow.)

2006-09-12 05:29  gb

	* lisp-kernel/thread_manager.c: os_get_stack_bounds(): get stack
	direction right on FreeBSD.  (Much better than randomly scribbling
	on memory in the GC, as the FreeBSD port has been doing for months
	now ...)

2006-09-11 21:31  gb

	* compiler/X86/x862.lisp: x862-explicit-non-fixnum-type-p looks for
	intersection.

2006-09-11 21:21  gb

	* compiler/X86/x862.lisp: Partly inline 2-arg logior, logand.

2006-09-11 20:10  gb

	* level-1/l1-unicode.lisp: Character encodings contain a
	LITERAL-CHAR-CODE-LIMIT field.

2006-09-11 20:09  gb

	* level-1/l1-streams.lisp: extend IOBLOCK a bit.  Start to provide
	functionality for encoded streams.

2006-09-11 20:08  gb

	* compiler/PPC/ppc2.lisp: Partialy inline 2-arg logior/logand.

2006-09-09 04:39  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	REQUIRE-CHAR-CODE: compare against boxed char-code-limit.

2006-09-09 04:21  gb

	* level-1/l1-reader.lisp: NAME-CHAR: insist on something more
	reasonable for ^c syntax; don't do MOD for octal.

2006-09-09 04:21  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: require-char-code checks
	agains boxed Unicode limit

2006-09-09 03:56  gb

	* lisp-kernel/x86-gc.c: purify_range(), impurify_range(): handle
	x8664 functions, hash tables.  (PPC versions should handle hash
	table key movement.)

2006-09-08 22:47  gb

	* lib/chars.lisp: CHAR-NAME: use U+xxxx for chars with codes >=
	#x100.

2006-09-08 22:38  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	FIXNUM->CHAR: return NIL for surrogate pairs.

2006-09-08 22:33  gb

	* compiler/PPC/ppc2.lisp: Don't be overly unsafe in %CHAR-CODE.

2006-09-08 22:31  gb

	* lib/ppc-backtrace.lisp: Fix CFP-LFUN (fake stack frame case,
	sanity-check fn/lr).

2006-09-08 18:55  gb

	* compiler/X86/x862.lisp: Don't be so reckless in %CODE-CHAR (don't
	necessarily want arbitrary expressions to be compiled unsafely; do
	want to avoid a little type-checking sometimes.)

2006-09-08 18:52  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: FIXNUM->CHAR returns NIL
	for values in the surrogate-pairs range.  (There are other things
	that it could plausibly return NIL for.)

2006-09-08 18:51  gb

	* lisp-kernel/x86-gc.c: Start to get purify working on x86-64; for
	now, just purify strings.

2006-09-08 18:48  gb

	* lib/macros.lisp: %CODE-CHAR asserts that code is (UNSIGNED-BYTE
	8), which is still useful (and exactly what it used to do.)

2006-09-08 18:47  gb

	* lib/: compile-ccl.lisp, systems.lisp: Add l1-unicode.

2006-09-08 18:44  gb

	* level-1/level-1.lisp: Load l1-unicode.

2006-09-08 18:44  gb

	* level-1/l1-unicode.lisp: New file.

2006-09-07 03:50  gb

	* lisp-kernel/area.h: Larger PURESPACE_RESERVE for x8664.

2006-09-07 03:44  gb

	* xdump/: heap-image.lisp, xfasload.lisp, xppcfasload.lisp,
	xx8664-fasload.lisp: Bump abi version.	Make purespace-reserve an
	attribute of the backend (may need more pure space on x86-64.)

2006-09-07 03:43  gb

	* lisp-kernel/image.h: Bump abi version.

2006-09-07 03:43  gb

	* level-1/version.lisp: Bump.

2006-09-07 02:58  gb

	* lisp-kernel/x86-exceptions.c: FreeBSD (at least with libthr)
	seems to mask synchronous signals.  Unmask them in signal handlers.

2006-09-07 02:57  gb

	* lisp-kernel/thread_manager.c: suspend_resume_handler() : ignore
	signal mask.

2006-09-07 02:56  gb

	* lisp-kernel/: lisptypes.h, ppc-constants32.h, ppc-constants32.s,
	ppc-constants64.h, ppc-constants64.s, ppc-gc.c, x86-constants64.h,
	x86-constants64.s: Lose the CHAR_SIZE_32 bootstrapping conditional
	(char are 32 bits wide on all platforms now.)

2006-09-07 00:40  gb

	* lisp-kernel/x86-exceptions.c: SIGBUS might be
	SIGNUM_FOR_PROCESS_INTERRUPT.

2006-09-07 00:12  gb

	* lisp-kernel/x86-spentry64.s: _SPbuiltin_aref1: use
	box_fixnum_no_flags.

2006-09-07 00:12  gb

	* lisp-kernel/x86-macros.s: Define box_fixnum_no_flags (uses lea
	vice imul).

2006-09-06 21:18  gb

	* compiler/X86/X8664/x8664-arch.lisp: Need
	MIN/MAX-8-BIT-IVECTOR-SUBTAG.

2006-09-06 18:37  gb

	* lisp-kernel/x86-spentry64.s: misc_ref/misc_set: handle 32-bit
	strings.

2006-09-06 18:36  gb

	* lisp-kernel/x86-macros.s: Zero-extend early when extracting
	typecodes.

2006-09-06 18:36  gb

	* level-1/l1-streams.lisp: GET-OUTPUT-STREAM-STRING: use
	ENSURE-SIMPLE-STRING rather than horrible COERCE nonsense.

2006-09-06 18:35  gb

	* level-1/l1-aprims.lisp: x8664 *immheader-1-array-element-types*
	contains entry for 32-bit BASE-CHAR.

2006-09-06 18:35  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: zero-extend early when
	extracting typecodes.

2006-09-06 18:34  gb

	* compiler/X86/X8664/: x8664-arch.lisp, x8664-backend.lisp:
	32-bit-chars.

2006-09-06 18:33  gb

	* compiler/X86/: x86-backend.lisp, x862.lisp: Defer handling of the
	:rcontext pseudo-register name until the target backend is in
	place.

2006-09-06 16:39  gb

	* compiler/X86/: x862.lisp, X8664/x8664-vinsns.lisp: 32-bit chars
	stuff for x8664.

2006-09-06 16:39  gb

	* level-1/l1-reader.lisp: kids: bourbon and editing COPY-READTABLE
	don't mix!

2006-09-06 16:38  gb

	* lib/compile-ccl.lisp: :verbose argument to rebuild-ccl.

2006-09-06 16:38  gb

	* level-1/linux-files.lisp: process input/output: don't assume
	8-bit strings.

2006-09-06 14:42  gb

	* compiler/PPC/PPC64/ppc64-backend.lisp: PPC64 callbacks are always
	#+poweropen-target; don't conditionalize the fp-arg-ptr argument
	(since that creates confustion when cross-compiling from a
	non-poweropen host.)

2006-09-06 00:08  gb

	* compiler/PPC/PPC64/: ppc64-arch.lisp, ppc64-backend.lisp: remove
	8-bit char stuff.

2006-09-06 00:08  gb

	* compiler/X86/X8664/x8664-arch.lisp: Forgot to set char-code-limit
	here.

2006-09-05 22:49  gb

	* lib/macros.lisp: In DO-GC-AREAS, don't use comma before call to
	AREA-SUCC.  (Cross-compilation/ word-size issue.)

2006-09-05 22:42  gb

	* level-0/l0-utils.lisp: If ENSURE-SIMPLE-STRING has to make a copy
	of a non-simple string, understand char width issues.

2006-09-05 22:41  gb

	* level-0/nfasload.lisp: Some fixnum decls in %FIND-PKG.

2006-09-05 22:40  gb

	* level-1/l1-aprims.lisp: ppc64 ARRAY-ELEMENT-SUBTYPES includes new
	string type.

2006-09-05 22:39  gb

	* level-0/PPC/ppc-array.lisp: cr3, nor c33, in ppc64 %init-misc.

2006-09-05 22:38  gb

	* compiler/nx0.lisp: NX-FORM-TYPEP uses NX-TARGET-TYPE.

2006-09-05 09:13  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: darwinppc32 backend uses
	32-bit chars, too.

2006-09-05 09:01  gb

	* compiler/PPC/PPC32/: ppc32-arch.lisp, ppc32-backend.lisp: ppc32
	defaults to 32-bit chars.

2006-09-05 05:18  gb

	* xdump/xfasload.lisp: Deal with 32-bit lisp strings.

2006-09-05 05:18  gb

	* lisp-kernel/linuxppc/.gdbinit: Start to depend on calling
	print_lisp_object, since x/s doesn't deal with 32-bit lisp strings.

2006-09-05 05:17  gb

	* lisp-kernel/ppc-gc.c: conditionalize purify_displaced_object()
	for char size.

2006-09-05 05:16  gb

	* lisp-kernel/plsym.c: find_symbol(): don't assume 8-bir lisp
	strings.

2006-09-05 05:15  gb

	* lisp-kernel/lisptypes.h: Try using "u8_t" and "u32_t" for
	lisp_char_code; this may be more portable.

2006-09-05 05:14  gb

	* lib/sequences.lisp: SIMPLE-1D-ARRAY-SUBSEQ: handle new strings.

2006-09-05 05:13  gb

	* level-1/linux-files.lisp: CALL-WITH-STRING-VECTOR: don't assume
	8-bit char/strings.

2006-09-05 05:13  gb

	* level-1/l1-streams.lisp: Use heap-ivectors of element-type
	(UNSIGNED-BYTE 8) for character streams.  (Should really depend on
	the coding system in use.)

2006-09-05 05:09  gb

	* level-1/l1-aprims.lisp: Various archaic string functions: don't
	assume 8-bit strings.

2006-09-05 05:08  gb

	* level-0/l0-array.lisp: Handle 32-bit strings in %UVECTOR-REPLACE.

2006-09-05 05:07  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: No "x" in simple-base-string,
	when #-target-8-bit-chars.

2006-09-05 05:06  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	REQUIRE-CHAR-CODE: comparison of OBJECT with TAG is not a CMPI.

2006-09-05 05:05  gb

	* compiler/PPC/ppc2.lisp: PPC2-VREF: handle the 32-bit
	:SIMPLE-STRING case with constant index.

2006-09-04 17:44  gb

	* lisp-kernel/lisptypes.h: Linux doesn't define uint8_t.  Try
	"unsigned char", and cross fingers.

2006-09-04 17:38  gb

	* lisp-kernel/: lisptypes.h, ppc_print.c, x86_print.c: Define
	lisp_char_code type, use it when printing lisp string in the kernel
	debugger.

2006-09-04 17:28  gb

	* level-1/version.lisp: Bump.

2006-09-04 17:18  gb

	* level-0/PPC/ppc-array.lisp: Sigh.  Test for 8-bit-char case was
	conditionalized backwards in PPC64 %INIT-MISC.

2006-09-04 17:05  gb

	* level-1/l1-init.lisp: Initial value of CHAR-CODE-LIMIT derived
	from the target arch (for bootstrapping.)

2006-09-04 17:04  gb

	* level-1/l1-reader.lisp: Use (UNSIGNED-BYTE 8) for array element
	type of rdtab.ttab.
	
	Don't treat (code-char #xca) as whitespace; do treat (code-char
	#xa0) as whitespace.  (The former happens to be how the latter was
	encoded in MacRoman.)
	
	Handle U+<hex> syntax in NAME-CHAR.

2006-09-04 16:16  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: LOAD-CHARACTER-CONSTANT:
	and the char code with #xff to get the low byte.

2006-09-04 16:15  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: LOAD-CHARACTER-CONSTANT:
	and the char code with #xff or 255., not with #x255.  (Cause lots
	of wackiness, mostly in readtable initialization.)

2006-09-04 16:12  gb

	* compiler/PPC/ppc2.lisp: Use u32->char (which is defined) vice
	u8->char (which is no more) in %CHAR-CODE.

2006-09-04 06:04  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	Gak.  Get guard/predicate syntax right in LOAD-CHARACTER-CONSTANT.

2006-09-04 06:03  gb

	* level-0/PPC/ppc-array.lisp: New constants in ppc32 typecode range
	assertion.

2006-09-04 03:44  gb

	* level-0/PPC/ppc-array.lisp: ppc32/ppc64 %init-misc tweaks.

2006-09-04 03:43  gb

	* compiler/PPC/ppc-lapmacros.lisp: Typo in the (unused) 64-bit/no
	crf case of UNBOX-BASE-CHAR.

2006-09-04 02:30  gb

	* level-1/l1-error-system.lisp: Object-not- (mod #x110000) type
	error.

2006-09-04 02:29  gb

	* level-0/PPC/ppc-symbol.lisp: conditionalize %pname-hash for char
	size.

2006-09-04 02:26  gb

	* lisp-kernel/: ppc-constants32.h, ppc-constants32.s,
	ppc-constants64.h, ppc-constants64.s: Conditionalize for
	CHAR_SIZE_32.

2006-09-04 02:24  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC32/ppc32-vinsns.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp,
	compiler/PPC/PPC64/ppc64-vinsns.lisp, level-0/l0-array.lisp,
	level-0/l0-pred.lisp: Conditionalize for #-target-8-bit-chars.

2006-09-04 02:23  gb

	* compiler/PPC/ppc2.lisp: Deal - sometimes conditionally - with
	32-bit characters.

2006-09-04 02:22  gb

	* compiler/arch.lisp: ERROR-OBJECT-NOT-MOD-CHAR-CODE-LIMIT.

2006-09-03 16:03  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s:
	conditionalize new string types.

2006-09-03 16:03  gb

	* level-0/X86/x86-symbol.lisp: %pname-hash: conditionalize for
	string element size.

2006-09-03 16:02  gb

	* compiler/X86/X8664/x8664-arch.lisp, level-0/l0-array.lisp,
	level-0/l0-pred.lisp: Sketch out new string types (read-time
	conditionalized.)

2006-09-03 15:02  gb

	* level-0/l0-init.lisp: Put :target-8-bit-chars on *features*, for
	bootstrapping.

2006-09-03 14:20  gb

	* level-1/l1-streams.lisp: More missing BASIC-STREAM methods.

2006-09-03 13:22  gb

	* compiler/: X86/X8664/x8664-backend.lisp,
	PPC/PPC32/ppc32-backend.lisp, PPC/PPC64/ppc64-backend.lisp:
	:target-8-bit-chars on target features.

2006-09-03 13:21  gb

	* level-0/l0-int.lisp: Some comments/indentation.

2006-09-03 13:01  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp: Make
	CHAR-CODE-LIMIT an attribute of the target arch, for bootstrapping.

2006-09-02 11:24  gb

	* level-1/x86-error-signal.lisp, lib/db-io.lisp: Fix typo.

2006-09-02 11:15  gb

	* lisp-kernel/x86_print.c: hex/decimal integer printers: 3 is also
	a hex digit.

2006-09-02 11:11  gb

	* lisp-kernel/x86-exceptions.c: Install a "bogus signal handler" on
	Darwin, to deal with apparent race conditions/Mach kernel lossage.
	
	Don't do the whole msg_server here; just do the exc_server thing.
	
	Fix a couple of Mach exception-handling bugs; at least one more may
	remain.

2006-09-02 11:07  gb

	* lisp-kernel/x86-asmutils64.s: Use a hlt instruction to trap in
	pseudo_sigreturn.
	
	Still get spurious SIGTRAPs.

2006-09-02 11:06  gb

	* lisp-kernel/thread_manager.c: Define some things in terms of
	USE_MACH_SEMAPHORES or USE_POSIX_SEMAPHORES.
	
	sem_wait_forever() does repeated timed waits, since I thought that
	Darwin was having trouble interrpting things that waited
	indefinitely.  (That might just be a GDB bug.  Who can tell ?)

2006-09-02 11:03  gb

	* lisp-kernel/Threads.h: Define some things in terms of
	USE_MACH_SEMAPHORES or USE_POSIX_SEMAPHORES.  Note that as of Q3
	2006, Darwin still doesn't implement enough POSIX semaphore
	functionality to make it possible to avoid the use of Mach
	semaphores.

2006-09-02 11:01  gb

	* lib/db-io.lisp: 
	Try to avoid things like %COPY-IVECTOR-TO-IVECTOR when strings are
	involved.

2006-09-02 11:01  gb

	* level-1/x86-threads-utils.lisp: Things that're %HEAP-IVECTOR-P
	aren't bogus objects.

2006-09-02 11:00  gb

	* level-1/l1-streams.lisp: Try to avoid things like
	%COPY-IVECTOR-TO-IVECTOR when strings are involved.

2006-09-02 10:59  gb

	* level-1/l1-events.lisp: AUTO-FLUSH-INTERACTIVE-STREAMS: use
	FORCE-OUTPUT.

2006-09-02 10:57  gb

	* level-0/l0-misc.lisp: %COPY-U8-TO-STRING, %COPY-STRING-TO-U8:
	new, to avoid %COPY-IVECTOR-TO-IVECTOR when strings are involved.
	
	%STR-FROM-PTR: take dest string as optional arg, don't assume 8-bit
	chars.
	
	%GET-CSTRING: change type decl, use %GET-UNSIGNED-BYTE.

2006-09-02 10:55  gb

	* level-0/l0-aprims.lisp: %CSTR-POINTER and %CSTR-SEGMENT-POINTER:
	don't assume 8-bit chars.

2006-08-28 17:35  gb

	* lisp-kernel/ppc-spentry.s: Fix tag check in 32-bit
	misc_set_single_float_vector.

2006-08-28 17:01  gb

	* xdump/faslenv.lisp: Bump max fasl version.

2006-08-28 16:48  gb

	* lib/nfcomp.lisp: Use new string ops.	Bump current fasl version.

2006-08-28 16:33  gb

	* xdump/faslenv.lisp: Bump (max) fasl version.

2006-08-28 16:30  gb

	* xdump/xfasload.lisp: xloader was missing a few new ops.

2006-08-28 05:34  gb

	* xdump/xfasload.lisp: New string stuff here, too.

2006-08-28 05:28  gb

	* level-0/nfasload.lisp: New string stuff.

2006-08-28 04:57  gb

	* level-1/l1-streams.lisp: More missing BASIC-STREAM methods
	(STREAM-LINE-COLUMN, STREAM-LISTEN, STREAM-EOFP.)

2006-08-28 04:57  gb

	* level-1/l1-reader.lisp: Use READ-CHAR instead of
	STREAM-READ-CHAR, since it may be faster in some cases.

2006-08-28 04:56  gb

	* level-1/l1-events.lisp: Unscramble auto-flush-streams stuff
	(don't assume ioblock-based stream.)

2006-08-28 04:55  gb

	* level-1/l1-boot-2.lisp: Initial FD-STREAMs are BASIC-STREAMs.

2006-08-28 04:55  gb

	* level-0/PPC/ppc-symbol.lisp: Change some REQUIRE forms; cosmetic.
	 (Maybe not even cosmetic.)

2006-08-28 04:54  gb

	* compiler/PPC/: ppc2.lisp, PPC32/ppc32-vinsns.lisp,
	PPC64/ppc64-vinsns.lisp: %unbox-u8, u8-vref stuff.

2006-08-28 04:53  gb

	* xdump/faslenv.lisp: New fasl ops for new string encodings.

2006-08-28 04:52  gb

	* lib/macros.lisp: %CHAR-CODE: for how long has limit not been 2^16
	?  For how long will limit be 2^8 ?

2006-08-28 04:51  gb

	* level-0/nfasload.lisp: More fasl ops.

2006-08-28 04:51  gb

	* compiler/X86/: x862.lisp, X8664/x8664-vinsns.lisp: %UNBOX-U8,
	u8-vref stuff.

2006-08-28 04:50  gb

	* compiler/arch.lisp: Add CHAR-CODE-LIMIT slot to TARGET-ARCH; may
	not be the best way to do this.

2006-08-26 13:58  gb

	* release-notes.txt: Updated.

2006-08-26 13:50  gb

	* release-notes.txt: Updated.

2006-08-26 13:50  gb

	* darwin-x86-headers64/libc/.cvsignore: Added.

2006-08-26 03:17  gb

	* level-1/version.lisp: Bump.  New snapshots soon, I hope.

2006-08-26 03:12  gb

	* lisp-kernel/darwinx8664/Makefile: Pass -g in ASFLAGS; same
	problems as always, but avoids problems with Darwin x86-64 ld64
	segfaulting for unknown reasons.

2006-08-26 03:11  gb

	* lisp-kernel/x86-exceptions.h: Need to do an explicit sigreturn on
	Darwin (because of the sigaltstack hacks; Darwin uses sigtramp glue
	that we can't just return to after switching off of the alt stack.)

2006-08-26 03:08  gb

	* lib/numbers.lisp: Check fpu overflow bit (not underflow) when
	deciding whether or not to signal overflow.

2006-08-26 03:08  gb

	* level-1/x86-trap-support.lisp: Need an indirection to access
	mcontext from ucontext on Darwin; invent xp-gp-regs to get at
	mcontext64.ss.

2006-08-26 03:06  gb

	* level-1/x86-error-signal.lisp: Add a declaration, to make this
	easier to step through.

2006-08-26 03:05  gb

	* level-0/l0-float.lisp: SINGLE-FLOAT-HALF-PI: use f0 not e0, just
	in case.

2006-08-25 20:35  gb

	* level-1/l1-boot-lds.lisp, level-1/l1-events.lisp,
	lib/ccl-export-syms.lisp: Hyphenate ADD-AUTO-FLUSH-STREAM and
	REMOVE-AUTO-FLUSH-STREAM.
	
	Export them, too.

2006-08-25 20:22  gb

	* lib/streams.lisp: READ-LINE on BASIC-INPUT-STREAM w/o
	STREAM-READ-LINE.

2006-08-25 20:22  gb

	* lib/macros.lisp: HANDLER-CASE: the :NO-ERROR clause can appear at
	most once but doesn't have to be the last clause.

2006-08-25 20:21  gb

	* level-1/l1-streams.lisp: BASIC-OUTPUT-STREAM isn't an
	INPUT-STREAM.
	
	Some STREAM-READ-LINE support for BASIC-CHARACTER-INPUT-STREAM.

2006-08-25 20:19  gb

	* level-1/l1-readloop.lisp: PREPARE-TO-QUIT: other threads should
	be dead by the time that streams on *OPEN-FILE-STREAMS* are closed,
	so unlock those streams with extreme prejudice before closing them.

2006-08-25 20:18  gb

	* level-1/l1-pathnames.lisp: FULL-PATHNAME: remove some weird old
	code that assumed that interfered with handling of relative logical
	pathnames.

2006-08-25 20:17  gb

	* level-1/l1-events.lisp: Rename EVENT-POLL to
	AUTO-FLUSH-INTERACTIVE-STREAMS.
	
	Make AUTO-FLUSH-INTERACTIVE-STREAMS do conditional locking on each
	stream (doing nothing if it's not :SHARING :LOCK; unconditional
	locking on the *AUTO-FLUSH-STREAMS-LOCK*.
	
	ADD-AUTOFLUSH-STREAM ensures that the stream is :SHARING :LOCK.
	
	REMOVE-AUTOFLUSH-STREAM.

2006-08-25 20:13  gb

	* level-1/l1-boot-lds.lisp: MAKE-MCL-LISTENER-STREAM uses
	ADD-AUTOFLUSH-STREAM, REMOVE-AUTOFLUSH-STREAM.

2006-08-23 22:59  gb

	* lisp-kernel/x86-exceptions.c: Darwin needs to decode the mxcsr on
	SIGFPE.
	
	DARWIN_GS_HACK changes in altstack handlers for interrupt/suspend.

2006-08-23 22:58  gb

	* lisp-kernel/x86-spentry64.s: x86-64 Darwin's math library is
	pretty casual about causing spurious exceptions, so ignore them.

2006-08-23 22:57  gb

	* lisp-kernel/darwinx8664/.gdbinit: New file; like the linuxx8664
	version, with different signals to be ignored by gdb.

2006-08-23 22:56  gb

	* lisp-kernel/x86-asmutils64.s: Using ud2b to force an exception in
	pseudo_sigreturn() seems to cause/be related to spurious SIGTRAPs. 
	Use int $0 instead.

2006-08-23 22:55  gb

	* level-1/x86-trap-support.lisp: First attempt at Darwinx8664
	support; may need more work.

2006-08-22 02:08  gb

	* lisp-kernel/x86_print.c: Try not to use sprintf() (at least not
	for printing integers), since it seems to need access to pthread
	data (and calling print_lisp_object() from GDB might fail if %gs is
	pointing at the lisp TCR.)

2006-08-22 02:06  gb

	* lisp-kernel/x86-spentry64.s: Unbox %arg_z (boxed entrypoint)
	earlier in _SPffcall, before entering foreign context.	(Need to
	check PPC version(s) as well.)
	
	Use DARWIN_GS_HACK to swap %gs memory around when transitioning
	between foreign code and lisp.

2006-08-22 02:04  gb

	* lisp-kernel/x86-macros.s: Fix a typo.

2006-08-22 02:04  gb

	* lisp-kernel/x86-exceptions.h: Define a few more things ...

2006-08-22 02:03  gb

	* lisp-kernel/x86-exceptions.c: Lots of changes, especially to Mach
	exception handling code.
	
	Do the DARWIN_GS_HACK things to overload %gs.

2006-08-22 02:02  gb

	* lisp-kernel/x86-asmutils64.s: atomic_and(), pseudo_sigreturn()
	for DarwinX8664.

2006-08-22 02:01  gb

	* lisp-kernel/thread_manager.c: Some PPC64 conditionalizations
	should really have tested WORD_SIZE.
	
	DARWIN_GS_HACK stuff around suspend/resume signal handlers.  (May
	not be necessary.)
	
	Ensure that tcr.linear gets set on x86, even if not HAVE_TLS.

2006-08-22 01:59  gb

	* lisp-kernel/pmcl-kernel.c: Don't really flush cache lines on
	x8664.
	
	Some PPC64 conditionalizations should really have tested WORD_SIZE.

2006-08-22 01:58  gb

	* lisp-kernel/m4macros.m4: Define SYSCALL_SETS_CARRY_ON_ERROR for
	FreeBSDX664, DarwinX8664.

2006-08-22 01:57  gb

	* lisp-kernel/darwinx8664/Makefile: Much smaller pagezero, much
	lower seg1addr.
	
	Something in the (m4-generated) symbolic info in some .s files is
	screwy and causes ld64 to segfault; it's currently necesssary to
	use "strip -S" on the assembler-generated .o files.

2006-08-22 01:55  gb

	* scripts/openmcl64: Untested changes for Darwinx8664.

2006-08-22 01:54  gb

	* xdump/xx8664-fasload.lisp: Fix typo in darwinx8664
	xload-backend-info (compiler target is :darwinx8664, not
	:linuxx8664).

2006-08-22 01:53  gb

	* lib/nfcomp.lisp: Dump concatenated functions from xfunctions when
	cross-compiling to x86 from x86.

2006-08-22 01:52  gb

	* lib/misc.lisp: MACHINE-VERSION:  conditionalize on :DARWIN-TARGET
	(not :DARWINPPC-TARGET).

2006-08-22 01:50  gb

	* lib/foreign-types.lisp: :DARWIN-TARGET (not :DARWINPPC-TARGET).

2006-08-22 01:50  gb

	* lib/compile-ccl.lisp: :DARWINX8664 stuff.

2006-08-22 01:49  gb

	* level-1/version.lisp: Bump.

2006-08-22 01:49  gb

	* level-1/l1-sysio.lisp: FILE-STREAM-EXTERNAL-FORMAT stuff for
	BASIC-STREAMs.

2006-08-22 01:48  gb

	* level-1/: l1-sockets.lisp, linux-files.lisp: Conditionalize on
	DARWIN-TARGET, not DARWINPPC-TARGET.

2006-08-22 01:47  gb

	* level-0/l0-init.lisp: DarwinX8664 *features*.

2006-08-22 01:47  gb

	* level-0/l0-cfm-support.lisp: Some DARWINPPC-TARGET conditionals
	really want to be DARWIN-TARGET.

2006-08-22 01:46  gb

	* compiler/X86/X8664/x8664-arch.lisp: YIELD-SYSCALL for
	DarwinX8664.

2006-08-22 01:45  gb

	* compiler/X86/x862.lisp: Use CROSS-CREATE-X86-FUNCTION if not
	compiling natively.
	
	Fix X862-FIXUP-FWD-REFS if not native function on x86.

2006-08-22 01:44  gb

	* compiler/X86/x86-lap.lisp: Ensure that CROSS-CREATE-X86-FUNCTION
	is defined, even on x86.  Use it if not compiling natively on x86.

2006-08-20 23:59  gb

	* lisp-kernel/darwinx8664/Makefile: Define DARWIN_GS_HACK.

2006-08-20 23:58  gb

	* lisp-kernel/x86-exceptions.c: Still needs lots of work.

2006-08-20 23:58  gb

	* lisp-kernel/x86-exceptions.h: Include Mach stuff on Darwin;
	prototypes for DARWIN_GS_HACK %gs segment switching.

2006-08-20 23:57  gb

	* lisp-kernel/x86-subprims64.s: Manipulate the %gs register when a
	lisp thread starts, exits and DARWIN_GS_HACK is defined.
	
	This isn't so bad, but doing it around every ff-call might be.

2006-08-20 23:56  gb

	* lisp-kernel/x86-macros.s: DARWIN_GS_HACK macros.

2006-08-20 23:53  gb

	* lisp-kernel/thread_manager.c: Note the need for DARWIN_GS_HACK.

2006-08-20 23:51  gb

	* lisp-kernel/x86-asmutils64.s: DARWIN_GS_HACK hacks.

2006-08-20 23:51  gb

	* lisp-kernel/m4macros.m4: Hope that the need for DARWIN_GS_HACK is
	also temporary.

2006-08-20 23:50  gb

	* lisp-kernel/lisptypes.h: Hope that the workaround for missing
	mcontext64 in x8664 Darwin is temporary.

2006-08-20 20:35  gb

	* library/darwinx664-syscalls.lisp: typo

2006-08-20 20:35  gb

	* library/darwinx8664-syscalls.lisp: spell name right

2006-08-20 17:10  gb

	* xdump/xx8664-fasload.lisp: :darwinx8664 stuff.

2006-08-20 17:10  gb

	* lib/db-io.lisp: :struct-by-value: don't read-time conditionalize
	(do other things still use read-time conditionals ?)

2006-08-20 17:09  gb

	* compiler/X86/X8664/x8664-backend.lisp: Darwinx8664: overload %gs,
	setup syscall mask.

2006-08-20 17:08  gb

	* compiler/nx1.lisp: Handle syscall, ff-call for :darwinx8664 as
	well.

2006-08-20 17:06  gb

	* library/darwinx664-syscalls.lisp: New file; or's in the bit for
	Unix syscalls on Darwinx8664.  (Screw: should (carefully) review
	word-size issues.)

2006-08-20 17:03  gb

	* library/darwinppc-syscalls.lisp: Mask for PPC.

2006-08-20 17:02  gb

	* level-0/l0-io.lisp, level-1/l1-sockets.lisp,
	level-1/linux-files.lisp: Syscall conditionalization.

2006-08-20 17:01  gb

	* level-1/l1-streams.lisp: Syscall conditionalization.
	
	SELECTION-INPUT-STREAM created with :sharing :lock.

2006-08-20 17:00  gb

	* examples/objc-runtime.lisp: Fencepost in
	POINTER-IN-CFSTRING-SECTION-P.

2006-08-20 16:16  gb

	* library/: darwinppc-syscalls.lisp, darwin-syscalls.lisp: rename

2006-08-18 09:50  gb

	* lisp-kernel/thread_manager.c: Enable FP underflow detection on
	x8664.	Should do this on PPC as well, and should probably offer
	some backward-compatible behavior for reader.

2006-08-18 09:47  gb

	* compiler/X86/X8664/x8664-backend.lisp: Dress up the Darwin x86-64
	backend a little.
	
	Explicily define lisp-context-register slot in each backend (%gs
	for those imolementations that follow the standard ABI, %fs for
	Darwin.)

2006-08-18 09:44  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Use :rcontext when
	necessary.

2006-08-18 09:43  gb

	* compiler/X86/: x86-backend.lisp, x86-lap.lisp: Recognize
	:rcontext as a reference to the backend's LISP-CONTEXT-REGISTER
	slot.

2006-08-18 09:42  gb

	* compiler/backend.lisp: Backend now has a lisp-context-register
	slot.

2006-08-18 09:42  gb

	* compiler/X86/X8664/x8664-arch.lisp: No more (constant) rcontext.

2006-08-18 09:40  gb

	* level-0/X86/: x86-def.lisp, x86-float.lisp, x86-io.lisp,
	x86-misc.lisp, x86-symbol.lisp, x86-utils.lisp: Refer to rcontext
	segment register as :rcontext, since x86-64 Darwin doesn't laugh
	and play like the other children.

2006-08-18 09:29  gb

	* lisp-kernel/x86-exceptions.c: Copy some of the Mach exception
	code from the PPC version and tweak it a little; needs more work.

2006-08-18 09:27  gb

	* lisp-kernel/x86-exceptions.h: Provide some interim Darwin
	conditionalization.

2006-08-18 09:25  gb

	* lisp-kernel/m4macros.m4: Spell FREEBSD correctly.
	
	Generate an equate for HAVE_TLS.

2006-08-18 09:23  gb

	* lisp-kernel/x86-gc.c: Changes in purify_xp().

2006-08-18 09:19  gb

	* lisp-kernel/x86-spentry64.s: Darwin x86-64 assembler doesn't like
	absolute jumps, prefers slower ones.
	
	Move lock prefixes to their own lines, to satisfy you-know-who.
	
	If we don't have thread-local-storage (TLS), it's hard to avoid the
	get_tcr() call on each calback.

2006-08-18 09:13  gb

	* lisp-kernel/: freebsdx8664/Makefile, linuxx8664/Makefile: Tell m4
	that we HAVE_TLS.

2006-08-17 10:41  phil

	* examples/FFI/:
	Allocating-foreign-data-on-the-lisp-heap/ptrtest-compile.sh,
	Allocating-foreign-data-on-the-lisp-heap/ptrtest.c,
	Allocating-foreign-data-on-the-lisp-heap/ptrtest.lisp,
	Using-basic-calls-and-types/Readme.rtf,
	Using-basic-calls-and-types/typetest-compile.sh,
	Using-basic-calls-and-types/typetest.c,
	Using-basic-calls-and-types/typetest.lisp: Initial version

2006-08-17 10:40  phil

	* examples/FFI/Allocating-foreign-data-on-the-lisp-heap/Readme.rtf:
	[no log message]

2006-08-08 13:07  gb

	* lisp-kernel/darwinx8664/Makefile: New file.

2006-08-08 13:07  gb

	* lisp-kernel/x86-exceptions.h: xp accessors for Darwinx8664.

2006-08-08 13:06  gb

	* lisp-kernel/x86-constants64.h: REG_* constants for Darwin.

2006-08-08 13:05  gb

	* lisp-kernel/x86-asmutils64.s: Darwin assembler doesn't like lock
	instructions on the same line as the locked instruction.  (Maybe
	there's a better way to do this, than just pretending that lock is
	a standalone instruction, but that lock instruction does seem to be
	treated as a prefix.)

2006-08-08 13:03  gb

	* lisp-kernel/pmcl-kernel.c: Treat X8664 like PPC64 (e.g., use
	dlfcn) on Darwin.

2006-08-08 13:02  gb

	* lisp-kernel/lisptypes.h: xcode 2.4 headers: <i386/ucontext.h>
	doesn't define mcontext64, but lots of other things reference it. 
	#define it here for now, but that'll likely break when the headers
	are fixed.

2006-08-08 12:58  gb

	* lisp-kernel/lisp-debug.c: Define Iregnames for darwinx8664.

2006-08-08 12:58  gb

	* lisp-kernel/area.h: Define an IMAGE_BASE_ADDRESS for
	x8664/Darwin.

2006-07-29 08:41  gb

	* level-1/l1-streams.lisp: STREAM-WRITE-BYTE, STREAM-WRITE-IVECTOR.
	 :BASIC defaults to T in OPEN; BASIC-FILE-STREAM probably still
	needs READ/WRITE- SEQUENCE support.

2006-07-29 07:39  gb

	* level-1/l1-aprims.lisp: ALLOCATE-RESOURCE, FREE-RESOURCE: use
	lock.  TODO: evaluate whether resources are worthwhile;  used for
	string-output-stream allocation and DELETE-DUPLICATES.

2006-07-29 06:27  gb

	* library/lispequ.lisp: Resources aren't thread-private, need
	locks.

2006-07-29 06:26  gb

	* level-1/l1-sysio.lisp: MAKE-FILE-STREAM: support for
	BASIC-STREAMs.

2006-07-29 06:26  gb

	* level-1/l1-streams.lisp: OPEN handles BASIC-STREAMs; not yet the
	default.

2006-07-29 06:25  gb

	* level-1/l1-reader.lisp: *PARSE-STRING-RESOURCE* probably hasn't
	been used in 10 or 12 years.

2006-07-29 03:40  gb

	* level-1/l1-sysio.lisp: Most BASIC-FILE-STREAM stuff.

2006-07-29 03:40  gb

	* library/lispequ.lisp: BASIC-FILE-STREAM.EXTERNAL-FORMAT, at least
	for now.

2006-07-29 03:39  gb

	* level-1/l1-streams.lisp: BASIC-IO-STREAM; ALLOCATE-BASIC-STREAM
	makes one more slot in BASIC-FILE-STREAM.

2006-07-28 04:17  gb

	* level-1/version.lisp: Bump.

2006-07-28 04:15  gb

	* level-1/l1-streams.lisp: A couple of more (soon-to-be-used) slots
	in IOBLOCK.

2006-07-28 01:17  gb

	* level-1/l1-streams.lisp: Lots of changes; lots more to go.

2006-07-28 01:16  gb

	* level-1/l1-sockets.lisp: Pass :CHARACTER-P T to MAKE-FD-STREAM.

2006-07-28 00:58  gb

	* examples/cocoa-listener.lisp: Want :SHARING :LOCK on listener
	output.
	
	(SLIME probably faces the same issue; should probably do something
	in the auto-flush case.  Of course, it's hard to know just what to
	do in that case. or at least what to do safely in that case.)

2006-07-28 00:49  gb

	* level-1/l1-sysio.lisp: Define SELECT-STREAM-CLASS on
	FUNDAMENTAL-FILE-STREAM.

2006-07-28 00:49  gb

	* lib/streams.lisp: READ-BYTE for BASIC-STREAMs.

2006-07-28 00:48  gb

	* library/lispequ.lisp: Need an explicit
	BASIC-STREAM-FLAG.OPEN-CHARACTER bit, due to bivalence.

2006-07-28 00:47  gb

	* lib/macros.lisp: BASIC-STREAM-IOBLOCK.

2006-07-25 03:48  gb

	* compiler/optimizers.lisp: Compiler-macro for BASIC-STREAM-P.

2006-07-24 04:55  gb

	* lib/streams.lisp: READ-CHAR bypasses STREAM-READ-CHAR for
	BASIC-STREAMs.

2006-07-24 04:55  gb

	* level-1/l1-streams.lisp: Some BASIC-STREAM stuff starts to
	appear.

2006-07-24 04:51  gb

	* library/lispequ.lisp: Add a plist to basic-/basic-file-stream.

2006-07-24 02:43  gb

	* level-1/l1-sysio.lisp: FILE-STREAM is now abstract (and some
	sublasses may get that way); FUNDAMENTAL-FILE-STREAM is an
	implementation of it (and BASIC-FILE-STREAM soon will be.)

2006-07-23 03:05  gb

	* level-1/l1-clos-boot.lisp: *class-table* entry for BASIC-STREAM.

2006-07-23 03:03  gb

	* level-1/l1-streams.lisp: STREAM-IOBLOCK now takes 2 required args
	and is inlined.
	
	Some bug fixes; STREAM class no longer has slots.
	
	IOBLOCK-READ-CHAR-FUNCTION used by READ-CHAR.  %ioblock-read-byte
	variants; fix read-byte botch (should vector according to
	element-type.)

2006-07-23 02:54  gb

	* level-1/: linux-files.lisp, l1-sysio.lisp, l1-sockets.lisp:
	STREAM-IOBLOCK now takes 2 required args.

2006-07-23 02:54  gb

	* level-1/version.lisp: Bump.

2006-07-23 02:53  gb

	* library/lispequ.lisp: Start to define what a BASIC-STREAM looks
	like.

2006-07-23 02:53  gb

	* lib/macros.lisp: Move stream-ioblock access/locking macros here.
	
	Likewise WITH-EAGAIN.

2006-07-23 01:12  gb

	* level-1/: l1-sysio.lisp, l1-streams.lisp, l1-boot-2.lisp,
	l1-sockets.lisp: Fix a few botches.
	
	:private arg to stream creation primitives replaced with :sharing,
	which can have values:
	
	 :private (the default; stream can only be accessed by the creating
	thread)
	 :lock	(the old, often slow, default); most accesses to stream
	involve locking
	 :nil or :external (stream code doesn't enforce exclusion).

2006-07-22 23:57  gb

	* level-1/l1-streams.lisp: Bootstrapping stuff.
	
	Move along, nothing to see here.

2006-07-20 03:43  gb

	* level-1/: l1-boot-2.lisp, l1-sockets.lisp, l1-streams.lisp,
	l1-sysio.lisp: First (rough) cut at making streams "private"
	(effectively always locked by the "owning" thread) to reduce some
	locking overhead.  More to come, some of which will be a little
	tricky to bootstrap.

2006-07-20 01:09  gb

	* lisp-kernel/: ppc-constants32.h, ppc-constants32.s,
	ppc-constants64.h, ppc-constants64.s, x86-constants64.h,
	x86-constants64.s: subtag_lisp_thread -> subtag_basic_stream.

2006-07-20 01:09  gb

	* library/lispequ.lisp: new (istruct-based) LISP-THREAD accessors.

2006-07-20 01:08  gb

	* level-1/version.lisp: Bump.

2006-07-20 01:07  gb

	* level-1/l1-streams.lisp: Introduce "owner" slot in basic ioblock.
	 A little tricky to bootstrap.

2006-07-20 01:05  gb

	* level-0/l0-misc.lisp, level-1/l1-processes.lisp,
	level-1/l1-clos-boot.lisp, level-1/l1-lisp-threads.lisp: Use new
	(istruct-based) lisp-thread accessors.

2006-07-20 01:02  gb

	* compiler/: PPC/PPC32/ppc32-arch.lisp, PPC/PPC64/ppc64-arch.lisp,
	X86/X8664/x8664-arch.lisp: Get rid of the lisp-thread subtag
	(lisp-thread's are ISTRUCTs now); re-use it for (to-be-introduced)
	BASIC-STREAM.

2006-07-15 15:02  gb

	* level-1/l1-error-system.lisp: Insert some fresh lines in the
	IMPOSSIBLE-NUMBER condition :REPORT method.

2006-07-15 15:00  gb

	* compiler/X86/x862.lisp: x862-%aref1,x862-%aset1: don't try to do
	simple vector operations unless we're sure that the vector is a
	(SIMPLE-ARRAY * (*)) and we know the element-type (these were
	leaping into the simple-typed-vector case when the element-type was
	known but the vector wasn't known to be SIMPLE.

2006-07-14 05:57  gb

	* compiler/nx0.lisp: NX-FORM-TYPEP: unqoute constants.

2006-07-13 16:01  gb

	* level-1/l1-typesys.lisp: SPECIALIZED-ARRAY-ELEMENT-TYPES needs to
	know about FIXNUM arrays.

2006-07-11 14:23  gb

	* compiler/X86/x862.lisp: Destination and 1st source arg overlap
	(2-address instructions) in natural logical, arithmetic operations.

2006-07-05 02:38  gb

	* release-notes.txt: Update.

2006-07-05 02:22  gb

	* level-0/l0-init.lisp: Reluctantly put :MCL back on *features*;
	its removal needs to be better publicized.

2006-07-04 22:24  gb

	* level-1/linux-files.lisp: Use NATIVE-TRANSLATED-NAMESTRING on the
	PROGRAM arg to RUN-PROGRAM.

2006-07-04 22:23  gb

	* level-1/version.lisp: Bump.

2006-06-29 02:11  gb

	* lisp-kernel/image.h, xdump/heap-image.lisp: Bump
	image-abi-version.

2006-06-28 05:24  gb

	* level-0/l0-cfm-support.lisp: *rtld-default* wants to be a null
	pointer on DarwinPPC32 (at the very least, that platform's
	xFindSymbol gets confused by anything but a null pointer/global
	lookup.)

2006-06-28 05:09  gb

	* level-1/version.lisp: Bump.  Call the FreeBSD/AMD64 version
	"Alpha", which may be a bit generous (pretty regular deadlock,
	random thread creation errors, other bugs.)

2006-06-28 05:07  gb

	* lisp-kernel/freebsdx8664/.gdbinit: new; awfully similar to linux
	x86-64 version.

2006-06-28 04:04  gb

	* lisp-kernel/x86-exceptions.c: FreeBSD doesn't do a good job of
	identifying the cause of XMM FP exceptions.  Try to do that by
	looking at MXCSR bits.

2006-06-28 04:03  gb

	* lisp-kernel/x86-spentry64.s: FreeBSD syscalls set carry flag to
	indicate error return.

2006-06-28 04:03  gb

	* level-1/: l1-sockets.lisp, linux-files.lisp,
	x86-trap-support.lisp: Some FreeBSD changes/fixes.

2006-06-28 04:02  gb

	* level-0/l0-cfm-support.lisp: Remove a #+freebsd-target
	breakpoint.

2006-06-27 18:08  gb

	* level-0/l0-cfm-support.lisp: fix (?) nested #+/#-.  Maybe.

2006-06-27 17:30  gb

	* lisp-kernel/x86-exceptions.h: Fix Linux def of IS_MAYBE_INT_TRAP.

2006-06-27 17:27  gb

	* lisp-kernel/pmcl-kernel.c: (possibly) make get_r_debug more
	portable; possibly break it completely ...

2006-06-27 08:55  gb

	* lisp-kernel/x86-exceptions.c: map the altstack
	read/write/execute.

2006-06-27 08:54  gb

	* lisp-kernel/thread_manager.c: Fix os_get_stack_bounds() for
	FreeBSD.

2006-06-27 08:54  gb

	* lisp-kernel/Threads.h: FreeBSD needs prototypes from
	<pthread_np.h>

2006-06-27 08:53  gb

	* lib/compile-ccl.lisp: New (renamed) kernel-build-direcory for
	:freebsdx8664.

2006-06-27 08:53  gb

	* level-1/x86-trap-support.lisp: freebsd x8664 GPR indices.  (Needs
	testing.)
	
	Don't conditionalize as much code. Indices/offsets are
	platform-specific, but accessors defiend in terms of them needn't
	be.

2006-06-27 08:51  gb

	* level-1/x86-callback-support.lisp: Remove 1st line (bogus
	comment.)

2006-06-27 08:50  gb

	* level-0/l0-init.lisp: More freebsd x8664 features.

2006-06-27 08:50  gb

	* scripts/openmcl64: Update for FreeBSD/amd64.

2006-06-27 08:47  gb

	* compiler/X86/X8664/x8664-backend.lisp: FreeBSD backend has
	:freebsdx8664-target as a target-specific-feature.

2006-06-27 05:05  gb

	* lisp-kernel/: freebsdx8664/Makefile, freebsd8664/Makefile,
	freebsd8664/elf_x86_64.x: directory rename

2006-06-27 04:59  gb

	* xdump/xx8664-fasload.lisp: FreeBSD xload-backend.

2006-06-27 04:47  gb

	* lisp-kernel/x86-exceptions.h: Some macros for FreeBSD changes.

2006-06-27 04:46  gb

	* lisp-kernel/x86-exceptions.c: FreeBSD changes (at least enough to
	recognize UUOs, which generate SIGBUS vice SIGSEGV.)

2006-06-27 04:45  gb

	* lisp-kernel/x86-asmutils64.s: Define freebsd_sigreturn.
	
	TODO (maybe): copy the sigtramp code when evacuating the altstack.

2006-06-27 04:44  gb

	* lisp-kernel/thread_manager.c: FreeBSD sigreturn from
	suspend_resume_handler.

2006-06-27 04:44  gb

	* lisp-kernel/pmcl-kernel.c: Some FreeBSD conditionalization;
	get_r_debug() for ELF platforms.  (Needs testing under Linux.)

2006-06-27 04:43  gb

	* lisp-kernel/imports.s: Don't import metering-control; do import
	get_r_debug().

2006-06-27 04:42  gb

	* library/x8664-freebsd-syscalls.lisp: New file.  Should check
	word-size stuff (here and in other versions.)

2006-06-27 04:42  gb

	* lib/misc.lisp: Find MACHINE-VERSION string via #_sysctl on
	FreeBSD.

2006-06-27 04:39  gb

	* lib/foreign-types.lisp: Signed char nonsense (should use target
	ftd, not reader macros here.)

2006-06-27 04:38  gb

	* lib/compile-ccl.lisp: Some FreeBSD support.

2006-06-27 04:36  gb

	* level-1/: l1-sockets.lisp, l1-streams.lisp, linux-files.lisp:
	Some FreeBSD changes/conditionalization. Maybe not enough.

2006-06-27 04:35  gb

	* level-1/l1-boot-1.lisp: Recognize FREEBSD platform-os-name.

2006-06-27 04:34  gb

	* level-0/X86/: .cvsignore, X8664/.cvsignore: Ignore *fsl.

2006-06-27 04:34  gb

	* level-0/l0-io.lisp: FreeBSD syscalls.

2006-06-27 04:33  gb

	* level-0/l0-init.lisp: Some FreeBSD features.

2006-06-27 04:33  gb

	* level-0/l0-cfm-support.lisp: Lots of FreeBSD conditionalization,
	changes.
	
	MAY HAVE BROKEN LINUX PORTS; need to recompile on those platforms
	and test.
	
	Now depends on an imported lisp-kernel function on ELF platforms
	(Linux/FreeBSD), and therefore depends on recent kernel changes.

2006-06-27 04:30  gb

	* level-0/.cvsignore: Ignore *fsl.

2006-06-27 04:29  gb

	* compiler/X86/X8664/x8664-backend.lisp: Fix platform-syscall-mask
	in freebsd backend.

2006-06-27 04:27  gb

	* compiler/X86/X8664/x8664-arch.lisp: Don't import
	metering-control; do import get-r-debug (for Elf shared libraries.)
	
	A yield-syscall constant for FreeBSD. (This is all a bad idea ...)

2006-06-27 04:26  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp:
	Don't import metering-control; do import get-r-debug (for Elf
	shared libraries.)

2006-06-27 04:26  gb

	* compiler/nx1.lisp: Use the non-eabi syscall on freebsd as well.

2006-06-26 16:38  gb

	* compiler/X86/X8664/x8664-vinsns.lisp:
	SET-BIGITS-AND-HEADER-FOR-FIXNUM-OVERFLOW: need to change the
	(wrong) sign of the top 3 (fixnumshift) bits only.  Where did the
	constant #xffff000000000000 come from ?

2006-06-26 16:35  gb

	* compiler/X86/x862.lisp: Fix some indentation.

2006-06-25 20:32  gb

	* compiler/X86/X8664/x8664-backend.lisp: FreeBSD x8664 backend;
	change initialiation of x8664 foreign-type stuff.

2006-06-25 20:31  gb

	* compiler/backend.lisp: PLATFORM-OS-FREEBSD.

2006-06-23 19:52  gb

	* darwin-headers/: gl/C/.cvsignore, libc/C/.cvsignore,
	quicktime/C/.cvsignore: Ignore Developer subdirectory.	c

2006-06-23 19:28  gb

	* release-notes.txt: Update some.

2006-06-23 19:11  gb

	* examples/gtk2-clock.lisp: New file.

2006-06-23 18:56  gb

	* level-1/version.lisp: Bump.

2006-06-23 18:52  gb

	* lib/ccl-export-syms.lisp: Export DEFLOADVAR.

2006-06-22 13:39  gb

	* x86-headers64/gnome2/C/.cvsignore: new

2006-06-22 13:36  gb

	* x86-headers64/: gl/C/.cvsignore, gnome2/C/populate.sh: new

2006-06-22 13:33  gb

	* x86-headers64/: gl/.cvsignore, gl/C/populate.sh,
	gnome2/.cvsignore: new

2006-06-22 13:30  gb

	* examples/opengl-ffi.lisp: #+linuxppc-target -> #+linux-target.

2006-06-22 13:28  gb

	* level-1/version.lisp: Bump.

2006-06-21 15:15  gb

	* lisp-kernel/: ppc-constants64.h, ppc-constants64.s,
	ppc-spentry.s: Define new string subtags; handle them in ppc64
	misc_ref/misc_set.

2006-06-21 15:14  gb

	* level-0/PPC/ppc-array.lisp: Fix %INIT-MISC (both ppc2 and ppc64
	versions) to handle FIXNUM vectors, new UCS4 strings.

2006-06-21 15:14  gb

	* level-0/l0-array.lisp: Fix %INIT-MISC (bot ppc2 and ppc64
	versions) to handle FIXNUM vectors, new UCS4 strings.

2006-06-21 15:12  gb

	* darwin-headers/: carbon/C/populate.sh, cocoa/C/populate.sh,
	gl/C/populate.sh, libc/C/populate.sh, quicktime/C/populate.sh,
	webkit/C/populate.sh: Use 10.4u headers from XCode SDK.

2006-06-21 15:11  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Add SUBTAG-NEW-STRING.

2006-06-21 15:11  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: MAX-32-BIT-IVECTOR-SUBTAG
	wasn't updated with the introduction of fixnum vectors, (unused)
	UCS4 "new"strings.

2006-06-16 03:50  gb

	* examples/objc-support.lisp: Re-compute static NSString info after
	opening an extension framework.

2006-06-16 03:45  gb

	* examples/webkit.lisp: Use new functions for augmenting
	interfaces, loading framework.

2006-06-16 03:43  gb

	* examples/objc-runtime.lisp: Juggle things around so that add-on
	framework bundles get loaded on appication re-launch.
	
	REVIVE-OBJC-CLASSES tells MAP-OBJC-CLASSES not to hit the database,
	since (a) it may not be there, or may not be where we can find it
	yet and (b) it's probably more reasonable to do that than it would
	be to teach CLOS about classes that're "discovered" when the
	appication's launched on a newer OS release than it was saved on.

2006-06-16 03:39  gb

	* examples/cocoa-application.lisp: Touch tha application bundle
	before saving an image into it.  That -may- convincve
	LaunchServices to do the right thing.

2006-06-16 03:38  gb

	* examples/objc-support.lisp: Reload any addon/framework bundles
	that had been loaded before the image was saved when starting a
	bundled application.
	
	Juggle things around, so that that works (need to be able to use
	low-level bridge features early.)

2006-06-16 03:36  gb

	* lib/db-io.lisp: Disable the #? reader macro.

2006-06-14 15:42  gb

	* level-0/: PPC/ppc-def.lisp, X86/x86-def.lisp: Fix #+APPLY+
	lfun-bits.

2006-06-12 20:24  gb

	* lib/ppc-backtrace.lisp: PPC version of
	%find-register-argument-value had the same sort of fencepost as the
	x86-64 version had a few days ago.

2006-06-10 23:52  gb

	* lib/arglist.lisp: %ARGLIST-INTERNAL: if generic-function, return
	its GENERIC-FUNCTION-LAMBDA-LIST.

2006-06-10 23:51  gb

	* level-1/l1-clos.lisp: Give reader/writer method args more
	descriptive names. (Barely more descriptive ...)

2006-06-10 19:25  gb

	* level-1/l1-clos-boot.lisp: Arrgh.  In
	%MAYBE-STD-SETF-SLOT-VALUE-USING-CLASS, we know nothing about the
	type of the instance, so don't use INSTANCE.SLOTS (instead, let
	INSTANCE-SLOTS do a TYPECASE; it's inlined at this point.)
	
	This was keeping non-standard instances - like ObjC classes and
	metaclasses - from having some of their slots initialized
	correctly.

2006-06-10 19:22  gb

	* examples/objc-clos.lisp: PRINT-OBJECT methods for objc-class,
	objc-metaclass: don't die if the class is unnamed (makes it easier
	to print classes for debugging during initialization.)

2006-06-10 13:05  gb

	* level-1/ppc-trap-support.lisp: Fix LinuxPPC64 versions of
	XP-FPSCR-INFO and XP-DOUBLE-FLOAT.

2006-06-08 05:01  gb

	* release-notes.txt: Update a bit.

2006-06-08 03:56  gb

	* lisp-kernel/image.h, xdump/heap-image.lisp: Bump
	image-abi-version.

2006-06-08 03:46  gb

	* xdump/faslenv.lisp: Bump (min) fasl version.

2006-06-08 03:35  gb

	* lib/nfcomp.lisp: Bump (current) fasl-version.

2006-06-08 03:28  gb

	* lisp-kernel/linuxx8664/Makefile: -O2.

2006-06-08 03:26  gb

	* xdump/faslenv.lisp: Bump (max) fasl version.

2006-06-08 03:18  gb

	* level-1/version.lisp: Bump; give x86-64 port the benefit of the
	doubt and claim that it's a beta.

2006-06-08 03:18  gb

	* lisp-kernel/darwinppc64/Makefile: Enable -O2.

2006-06-08 03:17  gb

	* lisp-kernel/darwinppc/Makefile: Some commented-out debugging
	options; enable -O2.

2006-06-08 02:55  gb

	* lisp-kernel/x86-exceptions.c: thread_signal_setup() moved here.
	Handle suspend (and maybe someday resume, again) signals on the
	altstack, since we don't really want a signal context in the middle
	of the tagged lisp stack ...

2006-06-08 02:52  gb

	* lisp-kernel/thread_manager.c: thread_signal_setup() moved to
	PLATFORM-exceptions.c; some constants/prototypes moved to
	Threads.h.

2006-06-08 02:51  gb

	* lisp-kernel/ppc-exceptions.c: suspend_resume_handler() installed
	via install_signal_handler(); thread_signal_setup() moved here, to
	do that installation.

2006-06-08 02:50  gb

	* lisp-kernel/pmcl-kernel.c: Don't enable_fp_exceptions() twice.
	
	Don't call (or define) prepare_for_the_worst(), which is kind of
	too bad ...

2006-06-08 02:49  gb

	* lisp-kernel/Threads.h: suspend/resume constants, prototypes.

2006-06-08 01:11  gb

	* level-1/l1-files.lisp: Back out of ill-advised changed to %LOAD;
	let OPTIMIZE proclamations persist beyond the LOAD.

2006-06-07 21:45  gb

	* lisp-kernel/x86-subprims64.s: No nore %tsp/%Rnext_tsp.

2006-06-07 21:38  gb

	* lisp-kernel/x86-spentry64.s: Don't maintain current/next tsp in
	MMX regs.  Do maintain them in TCR.

2006-06-07 21:37  gb

	* lisp-kernel/x86-macros.s: Don't maintain %tsp when stack-consing;
	update (decrement) tcr.next_tsp atomically, use %stack_temp as a
	temporary (old tsp), finish frame by storing into tcr.save_tsp.

2006-06-07 21:34  gb

	* lisp-kernel/x86-exceptions.c: tsp is in the TCR now.

2006-06-07 21:33  gb

	* lisp-kernel/x86-constants64.s: No more %tsp, %Rnext_tsp.  Define
	%stack_temp.

2006-06-07 21:32  gb

	* lisp-kernel/x86-constants64.h: No more Itsp, Inext_tsp.

2006-06-07 21:30  gb

	* level-0/X86/x86-def.lisp: %CURRENT-TSP: the tsp is in the TCR
	now.

2006-06-07 21:30  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Don't try to maintain %tsp
	(since it no longer exists ...).  Use %stack-temp in some cases.

2006-06-07 21:29  gb

	* compiler/X86/X8664/x8664-arch.lisp: No more %tsp or %next-tsp. 
	%stack-temp is a symbolic name for an MMX register that can be used
	for (e.g.) linking frames on the temp/foreign stacks (or for any
	other purpose ...)

2006-06-07 15:29  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: No more %Rforeign_sp.  Keep
	tcr.next_tsp in sync with %next_tsp Check to ensure that
	%tsp,tcr.save_tsp,and tcr.next_tsp all have the same value when
	allocating on the temp stack.  (This will soon change, so that %tsp
	and %next_tsp will not be canonical and the tcr fields are, then
	will change so that %tsp and %next_tsp will cease to exist.)

2006-06-07 15:25  gb

	* lisp-kernel/x86-subprims64.s: No more %Rforeign_sp.

2006-06-07 15:25  gb

	* lisp-kernel/: x86-macros.s, x86-spentry64.s: Keep tcr.next_tsp in
	sync with %Rnext_tsp.  No more %Rforeign_sp, but we can use %mm5 as
	a temporary.

2006-06-07 15:23  gb

	* lisp-kernel/x86-exceptions.c: Find the foreign RSP from the TCR;
	don't need FP regs for this.  (They're sometimes invalid and
	sometimes missing, which is the point of recent changes.)

2006-06-07 15:21  gb

	* lisp-kernel/x86-constants64.s: No foreign_sp.  Rename %next_tsp
	to %Rnext_tsp to avoid potential m4 lossage.

2006-06-07 15:20  gb

	* lisp-kernel/x86-constants64.h: No Iforeign_sp.

2006-06-07 15:20  gb

	* lisp-kernel/thread_manager.c: Initialize tcr->next_tsp on X86.

2006-06-07 15:19  gb

	* level-1/version.lisp: Bump.

2006-06-07 15:19  gb

	* level-0/X86/x86-def.lisp: Get foreign-sp from the TCR.

2006-06-07 15:18  gb

	* compiler/X86/X8664/x8664-arch.lisp: More bootstrapping: no more
	foreign-sp register (though some code still uses %mm5 as a
	temporary, the "canonical" foreign SP is maintained in the TCR.)

2006-06-07 04:52  gb

	* lisp-kernel/x86-macros.s: When making a catch/unwind-protect
	frame, get the foreign SP out of the TCR.

2006-06-07 04:52  gb

	* compiler/X86/X8664/x8664-vinsns.lisp,
	lisp-kernel/x86-spentry64.s: More bootstrapping: continue to
	maintain the foreign sp in both the TCR and the MMX register, but
	consider the TCR version to be canonical.

2006-06-07 02:46  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: More bootstrapping: if the
	%tsp MMX register doesn't match the value in the tcr, trap. 
	Likewise for %foreign-sp.

2006-06-07 01:29  gb

	* compiler/X86/X8664/x8664-vinsns.lisp, lisp-kernel/x86-macros.s,
	lisp-kernel/x86-spentry64.s: Try to keep tcr.save_tsp in synch with
	%tsp, and likewise for %Rforeign_sp/tcr.foreign_sp.
	
	(The idea is to keep the temp/foreign stack pointers in the tcr and
	only use the MMX registers as temporaries, since it seems that
	handlers for asynchronous signals can't count on the MMX register
	values in the signal context being correct.  This seems to either
	be a Linux kernel bug or ill-considered if it's intentional
	behavior, but it seems better to work around it this way.)
	
	This is just an early step in bootstrapping that change; it's being
	checked into CVS so that it doesn't get lost (and so that I can
	recover to this point if/when I hose things on a later step.)

2006-06-07 01:24  gb

	* compiler/X86/X8664/x8664-arch.lisp: Add a next-tsp slot to the
	tcr.

2006-06-07 01:22  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s: Add a
	next_tsp slot to the tcr.

2006-06-06 04:25  gb

	* lib/ppc-metering.lisp: no hope

2006-06-06 04:22  gb

	* lib/x86-backtrace.lisp: %find-register-argument-value: Current
	frame (cfp argument) could be an exception callback frame (xcf-p
	may be true of it), in which case the saved register value is in
	the xcf.xp context.  (Basically, this means look at the first frame
	if it's an xcf, otherwise skip it and start with the child.)

2006-06-06 01:48  gb

	* compiler/X86/x86-lapmacros.lisp,
	compiler/X86/X8664/x8664-vinsns.lisp, lisp-kernel/x86-macros.s:
	Using imul to box fixnums is smaller and seems to be faster than
	using lea with a scale factor.

2006-06-05 23:56  gb

	* lisp-kernel/thread_manager.c: I don't think that
	suspend_resume_handler wants to have suspend signals unmasked, does
	it ?

2006-06-05 12:43  gb

	* library/chud-metering.lisp: area-readonly is in ccl:: now.

2006-06-03 03:11  gb

	* lisp-kernel/x86-spentry64.s: In _SPnthrowvalues: don't skip the
	last catch frame, do skip others (test was backwards.  As it
	probably had been in the single-value case at one point.)

2006-06-02 03:48  gb

	* lib/encapsulate.lisp: Don't print trace indent/outdent stuff to
	*terminal-io*; do print it to *trace-output*.

2006-06-01 20:20  gb

	* level-0/l0-array.lisp: There's a T in subtag.

2006-06-01 20:17  gb

	* compiler/X86/x862.lisp: X862-MVCALL wasn't handling things like:
	
	(multiple-value-bind (...)   (multiple-value-call #'foo ...))
	
	correctly.

2006-06-01 20:16  gb

	* compiler/nx0.lisp: Defvars for global optimization quantities
	moved to level-0.

2006-06-01 20:15  gb

	* level-1/l1-files.lisp: Bind the variables which hold global
	compiler optimization quantities, since people persist in doing
	things like:
	
	(declaim (optimize
	<something-that-they-probably-think-has-local-effects>))
	
	without bothering to use EVAL-WHEN or otherwise thinking very
	clearly.
	
	Note that this means that anyone who wanted such a declamation to
	have persistent global effects is now SOL.  Blame whoever wrote
	(for instance) clx/glx.lisp.

2006-06-01 20:11  gb

	* level-0/l0-init.lisp: Move *nx-speed*, etc here, so that they can
	be referenced early in the cold load.

2006-06-01 13:13  gb

	* lib/x86-backtrace.lisp: In %FIND-REGISTER-ARGUMENT-VALUE, pass a
	pointer to ENCODED-GPR-LISP if we have to get the register value
	from an exception frame.

2006-05-30 19:27  gwking

	* tools/asdf.lisp: Updated asdf to the current CVS head (revision
	1.98)

2006-05-30 17:12  gb

	* level-1/version.lisp: bump again.

2006-05-30 16:31  gb

	* lisp-kernel/x86-spentry64.s: When unwinding the stack, try to
	ensure that tcr.xframe is updated from the catch frame (a) in all
	execution paths and (b) before RSP is updated.

2006-05-30 16:30  gb

	* level-0/l0-array.lisp, lib/sequences.lisp: Handle (simple) fixnum
	vectors.

2006-05-30 16:29  gb

	* level-1/l1-typesys.lisp: Add a DEFTYPE for fixnum vectors.

2006-05-30 16:29  gb

	* release-notes.txt: Update some more ...

2006-05-30 16:23  gb

	* lib/ccl-export-syms.lisp: There are two 'e's in UNPROCESSED.
	Apparently.

2006-05-30 16:15  gb

	* release-notes.txt: updated

2006-05-30 01:58  gb

	* level-1/version.lisp: Bump.

2006-05-30 01:48  gb

	* lisp-kernel/x86-exceptions.c: altstack_interrupt_handler: having
	made copies of the signal context and siginfo on the foreign stack,
	don't pass the originals to interrupt_handler().
	
	(altstack_interrupt_handler() looks suspiciously like
	altstack_signal_handler(), which probably had the same bug a few
	months ago ...)
	
	Since the alternate signal stack (as we use it) isn't reentrant,
	the next signal (perhaps a suspend signal) overwrote the context. 
	Which is one reason to have made a copy in the first place ...

2006-05-30 01:43  gb

	* level-1/l1-lisp-threads.lisp: In THREAD-ENABLE, use the new
	%TIMED-WAIT-ON-SEMAPHORE-PTR; regardless of whether or not a
	timeout is a good idea here, make sure that the timeout isn't
	fooled by #$EINTR.

2006-05-30 01:39  gb

	* level-1/linux-files.lisp: Rename the old
	%TIMED-WAIT-ON-SEMAPHORE-PTR to %PROCESS-WAIT-ON-SEMAPHORE-PTR,
	since it basically waits indefinitely.
	
	Split out the functionality in TIMED-WAIT-ON-SEMAPHORE into a new
	%TIMED-WAIT-ON-SEMAPHORE-PTR function, so that it's possible to do
	a "timed wait" that handles interruptions, etc. when the caller
	just has a "raw" (native) semaphore.
	
	Change callers, endure warnings.  New binaries soon.

2006-05-30 01:36  gb

	* level-0/l0-misc.lisp: When waiting for a lock, use the new
	%PROCESS-WAIT-ON-SEMAPHORE-PTR.

2006-05-29 22:34  gb

	* lisp-kernel/x86-exceptions.c: The
	clear_tcr_save_allocptr_tag_instruction opcode array was one byte
	too small ...

2006-05-29 14:03  gb

	* level-1/linux-files.lisp: In %OS-GETCWD: don't trust
	syscall-based getcwd (it doesn't work as it once did/is documented
	to on linuxx8664); use the library function on all platforms.

2006-05-29 14:02  gb

	* lisp-kernel/x86-exceptions.c: Clear interrupt_pending flag before
	processing interrupt.

2006-05-28 17:01  gb

	* lisp-kernel/ppc-exceptions.c: If we handle a
	SIGNAL_FOR_PROCESS_INTERRUPT trap, clear tcr->interrupt_pending.
	
	Back out of the hack that tried to work around a Darwin bug (FP
	exception flags were cleared in the MSR after a thread had been
	interrupted via pthread_kill()), since the fix seems not to be
	GC-safe.
	
	Add some debugging code to print when the exception lock is
	acquired/released.

2006-05-28 01:10  gb

	* level-1/solaris-files.lisp: long gone

2006-05-23 20:25  gb

	* compiler/: PPC/ppc2.lisp, X86/x862.lisp: D'oh!

2006-05-22 22:59  gb

	* darwin-headers/addressbook/: C/populate.sh, .cvsignore,
	C/.cvsignore: New file.

2006-05-22 22:57  gb

	* level-1/l1-processes.lisp: PROCESS-SUSPEND: don't allow current
	thread to suspend itself.

2006-05-22 22:57  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Use the SP red zone to load
	SINGLE-FLOAT constants.
	
	SINGLE-FLOAT foreign args are stored in the low 32 bits of each
	64-bit arg word, regardless of whether they're also passed in
	f1-f13 as well.

2006-05-22 22:55  gb

	* compiler/PPC/PPC64/ppc64-backend.lisp: Callback fixes:
	SINGLE-FLOATs passed in memory are passed in the low 32 bits of the
	64-bit word.

2006-05-22 22:54  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Use the red zone (on SP)
	for LOAD-SINGLE-FLOAT-CONSTANT, LOAD-DOUBLE-FLOAT-CONSTANT.

2006-05-22 22:53  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: "poweropen ABI" (Darwin)
	callback fixes: SINGLE-FLOATs passed in memory are passed as ...
	SINGLE-FLOATs, so don't use %GET-SINGLE-FLOAT-FROM-DOUBLE-PTR to
	access them.

2006-05-22 03:53  gb

	* level-1/version.lisp: Bump.

2006-05-22 03:32  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: fixnum->float vinsns.

2006-05-22 03:31  gb

	* compiler/X86/x862.lisp: Numeric contagion on binops,
	fixnum->float.

2006-05-22 03:29  gb

	* compiler/PPC/ppc2.lisp: Do stupid self-tail-call tricks on PPC as
	well.

2006-05-22 03:28  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Load tcr.cs-limit a little
	earlier when creating a stack frame inline.  Doesn't seem to affect
	latency much.

2006-05-22 03:27  gb

	* compiler/X86/x862.lisp: Comment formatting on the first line of
	the file.

2006-05-22 03:26  gb

	* compiler/nx0.lisp: Check argument counts on self-calls.  (AFAIK,
	this hasn't been done for at least 20 years in MCL/OpenMCL ...)

2006-05-21 07:34  gb

	* compiler/X86/x862.lisp: Long-standing X862-COPY-REGISTER bug.

2006-05-21 07:32  gb

	* compiler/PPC/ppc2.lisp: Implement (late) div2; use (simple)
	numeric-contagion stuff for arithmetic ops.

2006-05-21 07:31  gb

	* compiler/nx1.lisp: Use div2 for /-2.

2006-05-21 07:31  gb

	* compiler/nx0.lisp: Binop numeric contagion.

2006-05-21 06:49  gb

	* compiler/nx0.lisp: ACODE-REAL-CONSTANT-P.

2006-05-21 06:49  gb

	* compiler/PPC/ppc2.lisp: Weird case in ppc2-copy-register wasn't
	weird, just wrong.

2006-05-21 06:17  gb

	* level-0/l0-pred.lisp: PPC64: %typep recognizes
	SIMPLE-FIXNUM-VECTORs.

2006-05-21 06:16  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	Fixnum vector stuff.  FIXNUM->FPR uses SP red zone.

2006-05-21 06:16  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp, lisp-kernel/ppc-constants64.h,
	lisp-kernel/ppc-constants64.s, lisp-kernel/ppc-spentry.s: Fixnum
	vector stuff.

2006-05-21 06:15  gb

	* compiler/PPC/ppc2.lisp: %fixnum-to-single, %fixnum-to-double.
	
	Fixnum vector vref/vset.

2006-05-21 06:15  gb

	* compiler/: nx1.lisp, nxenv.lisp: %fixnum-to-single,
	%fixnum-to-double.

2006-05-21 06:14  gb

	* compiler/nx0.lisp: More operator result types.

2006-05-21 04:35  gb

	* level-0/l0-array.lisp, level-0/l0-pred.lisp,
	level-1/l1-aprims.lisp, level-1/l1-clos-boot.lisp: Integrate
	specialized FIXNUM array-element-type into type system, CLOS.
	(Knock wood.)

2006-05-21 04:34  gb

	* lisp-kernel/x86-spentry64.s: Support for (out-of-line)
	fixnum-vector access (.SPmisc_ref, .SPmisc_set).

2006-05-21 04:33  gb

	* compiler/X86/X8664/x8664-arch.lisp,
	lisp-kernel/x86-constants64.h, lisp-kernel/x86-constants64.s: New
	subtag for :fixnum-vector.

2006-05-21 04:32  gb

	* compiler/X86/x862.lisp: 64-bit vset wasn't handling non-constant
	indices correctly.
	
	64-bit vset, vref: handle :FIXNUM-VECTOR.

2006-05-21 00:22  gb

	* level-0/l0-aprims.lisp: Spell istruct-typep correctly.

2006-05-20 18:13  gb

	* compiler/X86/x862.lisp: Do some self-tail calls (fixed args, no
	stack args) without restoring/re-saving NVRs.

2006-05-19 15:07  gb

	* level-1/linux-files.lisp: RUN-PROGRAM: waiting for the child's
	completion semaphore (when :WAIT is true) happens inside an
	UNWIND-PROTECT cleanup and therefore needs to explicitly allow
	interrupts.

2006-05-19 15:06  gb

	* level-0/l0-aprims.lisp: Add SEMAPHOREP, make it a type-predicate
	for SEMAPHORE.

2006-05-19 12:23  gwking

	* lib/misc.lisp: Added help and redisplay to select-item-from-list.
	Also changed it so that it displays all items before trying to get
	an answer.

2006-05-19 12:00  gwking

	* .cvsignore: The *fsl wasn't cutting it for me..., take two

2006-05-19 11:57  gwking

	* .cvsignore: The *fsl wasn't cutting it for me...

2006-05-19 11:50  gb

	* level-1/version.lisp: Bump.

2006-05-19 11:49  gb

	* level-1/l1-streams.lisp: Change the EVAL-WHEN that requires
	syscall definitions so that it can be moused on.

2006-05-19 11:48  gb

	* compiler/X86/X8664/: x8664-arch.lisp, x8664-vinsns.lisp:
	.SPeabi-syscall -> .SPsyscall.

2006-05-19 11:45  gb

	* compiler/X86/x862.lisp: Inline ADD2, unless we know that at least
	one arg couldn't be a fixnum.  (Should do the same for SUB2.) This
	does indeed burn cache lines, but going out of line isn't cheap
	either.  (100 million iterations of (+ x (+ y z)) - where X Y and Z
	are in fact fixnums and no overflow is involved - seems to be about
	2X faster when inlined this way.  Not sure if that'll be the case
	on PPC.)

2006-05-19 11:40  gb

	* compiler/nx0.lisp: Use NX-TARGET-TYPE in some of the acode-type
	stuff.

2006-05-18 14:47  gb

	* lisp-kernel/ppc-spentry.s: When unwinding the stack (hopefully,
	in all places that do so ...), update tcr.xframe from
	catch_frame.xframe on all execution paths (in particular, do so
	before SP is restored from the catch_frame, since a tcr.xframe
	"beyond" SP is clearly bogus.)

2006-05-18 02:34  gb

	* level-1/version.lisp: Bump.

2006-05-17 23:12  gb

	* compiler/PPC/ppc2.lisp: "late" acode-type stuff (add2/sub2/mul2)
	for PPC, too.

2006-05-17 22:53  gb

	* level-0/X86/x86-float.lisp: %FP-ERROR-FROM-STATUS: don't cons an
	&REST arg.  Should do a quicker test (logandc2 and a shift) to see
	if any unmasked exceptions were raised before even calling this ...

2006-05-17 22:51  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: If we have to spill
	SINGLE-FLOAT registers, spill them (boxed) on the vstack.

2006-05-17 22:50  gb

	* compiler/X86/x862.lisp: Work harder to find acode types in some
	cases.

2006-05-17 22:50  gb

	* compiler/X86/x86-disassemble.lisp: Handle (new-style) byte
	registers in OP-REG.
	
	Don't want to use RET very often if at all, but disassembler should
	treat as as a :JUMP.

2006-05-17 22:48  gb

	* compiler/nxenv.lisp: MUL2, DIV2.

2006-05-17 22:48  gb

	* compiler/: nx0.lisp, nx1.lisp: A little of that there
	type-inferencing (or, more accurately, paying a little more
	attention here and there.)

2006-05-12 20:40  gwking

	* examples/addressbook.lisp: added examples/addressbook.lisp

2006-05-11 18:42  gb

	* level-1/l1-application.lisp: Stop processing command-line
	arguments when "--" is encountered; anything after that "--" is
	retained in CCL:*UNPROCESSED-COMMAND-LINE-ARGUMENTS*.

2006-05-11 18:42  gb

	* lib/ccl-export-syms.lisp: Export command-line stuff

2006-05-11 18:40  gb

	* level-1/l1-processes.lisp: Lennart Staflin's fix to PRINT-OBJECT
	method for LOCKs.

2006-05-11 18:39  gb

	* level-1/l1-files.lisp: In %DIFECTORY-LIST-NAMESTRING: all strings
	are base-strings (and always have been in OpenMCL.)

2006-05-11 18:37  gb

	* level-1/l1-sockets.lisp: CCL:BASE-CHARACTER -> CL:BASE-CHAR.

2006-05-11 08:11  gwking

	* lib/db-io.lisp: Added a check that the directory exists to
	fid-open-output in order to make it clearer what is wrong when one
	is unable to rebuild interface files because they are trying to do
	so in a place without FFI files to read!

2006-05-11 05:14  gb

	* level-1/version.lisp, lisp-kernel/image.h, xdump/heap-image.lisp:
	Bump lisp-implementation-version, image-abi-version.

2006-05-11 05:04  gb

	* xdump/faslenv.lisp: Bump (min) fasl version.

2006-05-11 04:52  gb

	* lib/nfcomp.lisp: Bump (current) FASL version.

2006-05-11 04:52  gb

	* level-1/l1-files.lisp: FASL-FILE-P looks for inital #xFF00
	(big-endian) instead of just #xff, to avoid UTF-16 BOM confusion.

2006-05-11 04:35  gb

	* xdump/faslenv.lisp: Bump (max) fasl version.

2006-05-11 04:32  gb

	* compiler/X86/X8664/x8664-backend.lisp: Little-endianness is a
	target-specific feature.

2006-05-11 03:35  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC32/ppc32-vinsns.lisp, level-0/l0-array.lisp,
	level-0/l0-pred.lisp, level-0/PPC/ppc-array.lisp,
	level-1/l1-aprims.lisp, level-1/l1-clos-boot.lisp,
	lisp-kernel/ppc-constants32.h, lisp-kernel/ppc-constants32.s,
	lisp-kernel/ppc-spentry.s, xdump/xppcfasload.lisp: Juggle PPC32
	typecodes around: get rid of the (unused) old 16-bit string; add an
	(as yet unused) UCS-4 string type.
	
	These changes generally involve cross-compilation (or some very
	tricky bootstrapping that I didn't attempt)  FASL versions and
	kernel ABI versions will need to change, and new binaries will be
	made available soon.

2006-05-10 20:20  gb

	* compiler/PPC/ppc-lapmacros.lisp,
	compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC32/ppc32-vinsns.lisp,
	lisp-kernel/ppc-constants32.h, lisp-kernel/ppc-constants32.s:
	Change CHARCODE-SHIFT constant on PPC32, so that the (currently
	8-bit) character code is stored in the #x0000xx00 byte of a
	CHARACTER, rather than in the #x00xx0000 byte,	This is hard to
	bootstrap natively (which is why I was trying to make ppc64->ppc32
	cross-compilation work.)
	
	Change related macros/visnsns as well.

2006-05-10 19:00  gb

	* xdump/xppcfasload.lisp: Reintroduce a TARGET-ARCH-CASE, but I
	think that this is just hard to do right the way that it's being
	done.

2006-05-10 18:59  gb

	* level-1/ppc-threads-utils.lisp: BOGUS-THING-P is hard to do right
	when cross-compiling (because word-size differences aren't handled
	correctly by macros.)  Until the macros are fixed, don't even try
	...

2006-05-10 18:58  gb

	* level-1/l1-clos-boot.lisp: In NEW-CLASS-WRAPPER-HASH-INDEX, user
	target::target-most-positive-fixnum (not the host's
	MOST-POSITIVE-FIXNUM).

2006-05-10 18:57  gb

	* compiler/: nx0.lisp, nx1.lisp: Use NX-TARGET-TYPE in at least a
	few places.

2006-05-10 18:56  gb

	* compiler/nx.lisp: XCOMPILE-LAMBDA binds *TARGET-BACKEND*.

2006-05-10 18:55  gb

	* compiler/nx-basic.lisp: NX-TARGET-TYPE: there may be other
	differences between host and target types, but try to turn
	references to FIXNUM to the appropriate target-specific type.

2006-05-09 21:01  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: UNBOX-BASE-CHAR just checks
	that the lowbyte is SUBTAG-CHARACTER; it used to rotate things
	around to check the high bits of the char code, but all chars have
	been base-chars for several years now ...
	
	UNBOX-CHARACTER was unused.
	
	(This is the first step of what may be several bootstrapping steps
	to change PPC32::CHARCODE-SHIFT from 16 to 8, so that we have 24
	easily-accessed char-code bits on PPC32.)

2006-05-09 11:48  gb

	* lisp-kernel/xlbt.c: No psn in cs_area.

2006-05-09 02:42  gb

	* lisp-kernel/: gc.h, ppc-gc.c: Back out of the extra Boolean arg
	to mark_simple_area_range().

2006-05-09 02:33  gb

	* compiler/PPC/: PPC32/ppc32-backend.lisp,
	PPC64/ppc64-backend.lisp: Endianness is also target-specific.

2006-05-09 02:25  gb

	* lisp-kernel/thread_manager.c: Thread stack areas are "owned by"
	the containing TCR, to make low-level debugging a bit easier.

2006-05-09 02:25  gb

	* lisp-kernel/ppc-gc.c: Mostly some added consistency/sanity checks
	and debugging printfs.

2006-05-09 02:24  gb

	* lisp-kernel/ppc-exceptions.h: Note that pc_luser_xp() needs an
	extra (signed_natural *) arg, for allocptr displacement.

2006-05-09 02:23  gb

	* lisp-kernel/ppc-exceptions.c: Lots of #ifdef DEBUG fprintfs.
	
	Change the way that pc_luser_xp() and normalize_tcr() handle alloc
	regs/ saved TCR fields.  The general idea is that the after they
	run, all threads have tcr->save_allocptr/tcr_save_allocbase set to
	VOID_ALLOCPTR; if the thread was interrupted in lisp code, the
	allocbase register will be set to VOID_ALLOCPTR and allocptr will
	be set to either VOID_ALLOCPTR or to VOID_ALLOCPTR-disp.
	
	On an interrupt, the caller needs to pass in a signed_natural * to
	pick up the allocptr displacement (if consing was interrupted at
	the alloc trap); the interrupt handler uses this value to fix up
	alloptr when it returns if consing was interrupted.
	
	This is all pretty clearly right, but something still goes wrong
	under some combination of high thread stress, frequent allocation,
	and blocking ff-calls.

2006-05-09 02:17  gb

	* lisp-kernel/plbt.c: No psn currently available.

2006-05-09 02:16  gb

	* lisp-kernel/lisp-debug.c: Bug() passes xp to lisp_Debugger(),
	where it may come in handy ...

2006-05-09 02:16  gb

	* lisp-kernel/gc.h: mark_simple_area_range() takes an added Boolean
	arg.

2006-05-09 02:13  gb

	* lisp-kernel/area.h: area struct's owner is a (TCR *).

2006-05-09 02:12  gb

	* level-1/l1-error-system.lisp: $xfunbnd was used after all. 
	Restore it.

2006-05-09 02:12  gb

	* level-0/l0-error.lisp, library/lispequ.lisp,
	lisp-kernel/errors.s: $xfunbnd was used after all.  Restore it, and
	recycle $XNOCDR.

2006-05-09 02:11  gb

	* compiler/PPC/PPC64/ppc64-backend.lisp: :64-bit-target is ...
	target-specific.

2006-05-09 02:11  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: :32-bit-target is ...
	target-specific.

2006-05-09 00:40  gb

	* level-1/l1-lisp-threads.lisp: Foreign thread callback stuff moved
	here.

2006-05-09 00:39  gb

	* level-1/x86-threads-utils.lisp: Support for BOGUS-THING-P on
	x8664.

2006-05-09 00:39  gb

	* level-1/ppc-threads-utils.lisp: Move foreign-thread callback
	stuff up to l1-lisp-threads.lisp.

2006-05-08 22:58  gb

	* lisp-kernel/ppc-spentry.s: misc_ref/misc_set jump tables on PPC64
	handle array and vector headers.

2006-05-08 22:57  gb

	* library/lispequ.lisp: Synch errors $xbadvec, $xsetbadvec (neither
	of which should ever happen) with the kernel.

2006-05-08 22:56  gb

	* level-1/l1-processes.lisp: %PROCESS-PRESET-INTERNAL doesn't need
	the TCR either.

2006-05-08 22:55  gb

	* level-1/l1-error-system.lisp: $XFUNBND is no more.

2006-05-08 22:55  gb

	* level-0/l0-error.lisp: Define the format strings for $xbadvec,
	$xsetbadvec.

2006-05-08 03:26  gb

	* lisp-kernel/x86-spentry64.s: .SPstkconslist_star: ensure that
	flags are set to the result of decrementing %nargs at the end of
	the loop.

2006-05-08 03:25  gb

	* level-1/x86-error-signal.lisp: uuo-error-udf: %err-disp-internal
	wants a list of condition args, not a single arg.

2006-05-08 03:24  gb

	* level-1/l1-processes.lisp: %PROCESS-PRESET-INTERNAL doesn't need
	CS-AREA.

2006-05-08 03:23  gb

	* level-0/X86/x86-symbol.lisp: %FUNCTION: signal error via
	uuo_error_udf, not as a type error.

2006-05-07 16:50  gb

	* lib/describe.lisp: INSPECTOR objects haven't had FORWARDED-P
	slots in a long time (they probably haven't -needed- them in even
	longer; I think that this had to do with the old partial MOP.)
	Don't define the slot for FUNCTION-INSPECTOR, and don't call the
	accessor in STANDARD-OBJECT-SETF-LINE-N.

2006-05-07 04:39  gb

	* x86-headers64/gtk2/: .cvsignore, C/.cvsignore, C/populate.sh: New
	file.

2006-05-07 04:34  gb

	* lisp-kernel/: area.h, lisp_globals.h, memory.c, pmcl-kernel.c,
	thread_manager.c: Combine the AREA_LOCK and TCR_LOCK into a single
	lock (TCR_AREA_LOCK).  (This makes it a little harder to deadlock
	if code that wants both locks isn't careful to try to obtain them
	in some canonical order.)

2006-05-07 04:29  gb

	* lib/x86-backtrace.lisp: Finally find those pesky registers.

2006-05-07 04:29  gb

	* level-1/x86-threads-utils.lisp: Stub BOGUS-THING-P moves here.

2006-05-07 04:28  gb

	* level-0/l0-cfm-support.lisp: FOREIGN-SYMBOL-ENTRY: return NIL if
	xFindSymbol/dlsym returns 0 on x8664.

2006-05-07 04:27  gb

	* compiler/X86/: x86-lapmacros.lisp, X8664/x8664-vinsns.lisp: Use
	PSRLQ/PSLLQ for single-float boxing/unboxing.  (A few months ago,
	I'd mistakenly decided that it was faster to go through memory than
	to use these instructions.  It seems to actually be substantially
	slower, as one would expect.)

2006-05-07 04:25  gb

	* compiler/X86/x86-asm.lisp: Add support for
	PSRLQ/PSRLDQ/PSLLQ/PSLLDQ (sse2 shifts.)

2006-05-07 04:21  gb

	* library/hash-cons.lisp: Fix doc in comments.

2006-05-07 04:21  gb

	* lib/ppc-backtrace.lisp: GET/SET-REGISTER-VALUE.

2006-05-07 04:20  gb

	* lib/format.lisp: YES-OR-NO-P: bell goes to *QUERY-IO*.

2006-05-07 04:19  gb

	* lib/backtrace-lds.lisp: Move GET/SET-REGISTER-VALUE to
	TARGET-backtrace.lisp.

2006-05-07 04:18  gb

	* level-1/l1-lisp-threads.lisp: Move (implementation-dependent)
	BOGUS-THING-P to TARGET-thread-utils.lisp.

2006-05-07 04:17  gb

	* level-1/ppc-threads-utils.lisp: Move (implementation-dependent)
	BOGUS-THING-P support here.

2006-05-07 04:16  gb

	* level-1/l1-processes.lisp: Don't set "owner" field of tcr.cs_area
	to psn.

2006-05-06 15:27  gb

	* compiler/nx1.lisp: Ash left by constant: prefer the fixnum case
	to the "natural" case.

2006-05-06 15:26  gb

	* compiler/X86/x862.lisp: Pass the right number of args to
	NATURAL-SHIFT-LEFT and NATURAL-SHIFT-RIGHT.

2006-05-06 15:26  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Indentation.

2006-05-06 02:09  gb

	* lisp-kernel/thread_manager.c: Let's see: if thread X holds local
	A and tries to obtain lock B, and thread Y holds lock B and tries
	to obtain lock A, what is that a classic case of ?
	
	Try to avoid that classic deadlock case in shutdown_thread_tcr()
	when HAVE_TLS is in effect.  suspend_other_threads wants to hold
	two locks at the same time, and that's always a bit dangerous; it
	might be safer to merge TCR_LOCK and AREA_LOCK into a single lock
	that must be owned in order to manipulate either the tcr or area
	queues.

2006-05-06 02:04  gb

	* level-1/linux-files.lisp: Make (%REALPATH "") behave like
	%REALPATH of the current directory namestring, as it does by
	default on some platforms (but not Linux.)

2006-05-05 20:08  gb

	* compiler/X86/x862.lisp: x862-ff-call: really implement the
	simple-foreign-args stuff.  Box u64/s64, or don't ... but don't do
	the el-bizarro <- with a (temp) node target.

2006-05-05 20:06  gb

	* lib/x86-backtrace.lisp: Get PC-FROM-XCF right (it needs to be
	relative to the tagged entrypoint, not to the start of the
	underlying function-vector.)

2006-05-05 13:24  gb

	* lisp-kernel/x86-spentry64.s: Preserve NEXT-METHOD-CONTEXT when
	heap-consing an &REST arg.  (%allocptr and %next-method-context are
	the same register, so &rest clobbbers %next-method-context.)
	
	Could make separate entry points, so that this is only done when
	%next-method-context needs to be preserved ...

2006-05-05 13:21  gb

	* level-0/X86/x86-def.lisp: Use RESERVED-FRAME-MARKER.

2006-05-05 02:23  gb

	* freebsd-headers64/libc/C/populate.sh: New file.  Needs some work.

2006-05-05 02:23  gb

	* freebsd-headers64/libc/: .cvsignore, C/.cvsignore: New file.

2006-05-05 01:37  gb

	* level-1/version.lisp: Bump du jour.

2006-05-05 01:36  gb

	* level-0/X86/x86-def.lisp: %FF-CALL: maintain the distinction
	between the first 6 words of the outgoing frame (from which GPRs
	will be loaded) and other words (which stay on the stack); after
	the first 8 FP args, floats have to be passed on the stack, even if
	there's still room in the first 6 words of the outgoing frame.
	
	Need to understand the struct-by-value rules better: can a struct
	be passed partly in registers and partly on the stack ? RTFM (or,
	in this case, TF ABI spec.)

2006-05-05 01:31  gb

	* compiler/X86/x862.lisp: In X862-FF-CALL:  - the general integer
	case should store relative to "other-offset" (rather than   
	"gpr-offset") when more than 6 (not 8) GPR args have been passed.  
	- both the single and double-float cases were incrementing
	"other-offset"	   twice when more than 8 FP args were involved. 
	This had the effect of	   storing floats into every other word and
	writing beyond the bounds of	 the outgoing stack frame, possibly
	overwriting return addresses on the	foreign stack.

2006-05-04 23:12  gb

	* level-1/l1-streams.lisp: James Bielman's fix to
	READ-TOPLEVEL-FORM (INPUT-STREAM) (EOF handling/peek-char.)

2006-05-04 18:30  gb

	* compiler/X86/X8664/x8664-backend.lisp: When binding FP args,
	decrement FPR-ARG-OFFSET by 8, not -8.
	
	(This could cause values outside of the stack frame to be read, but
	I still haven't found what's writing beyond the frame bounds.)

2006-05-04 18:27  gb

	* lib/x86-backtrace.lisp: If its argument is an exception callback
	frame, %CFP-LFUN tries to determine the relative PC associated with
	the frame's nominal function and return that as a second value
	(just as it does for a real frame.)
	
	I think that this should work a high percentage of the time, but
	callers should generally be prepared to deal with a NULL second
	return value from %CFP-LFUN.

2006-05-04 11:12  gb

	* compiler/X86/X8664/x8664-backend.lisp: More callback issues:
	since we're using the same stack pointer to return values as we are
	to find arguments, don't try to "optimize" its initialization.

2006-05-03 18:52  gb

	* compiler/X86/X8664/x8664-backend.lisp: Clean	up x8664 callbacks
	a little.  Don't coerce single float results to double; bind
	stack-ptr variable even if no args (might be a return value form
	that references it.) Failure to do the latter was creating a weird
	free variable reference that wasn't handled by the fasloader.

2006-05-03 18:50  gb

	* level-0/nfasload.lisp: $fasl-vmksym-special wasn't implemented.

2006-05-03 18:49  gb

	* lib/nfcomp.lisp: Indent a comment.

2006-05-03 18:16  gb

	* compiler/X86/x862.lisp, level-0/X86/x86-def.lisp: In an %FF-CALL
	that might involve a variable-length arglist (at this level,
	always), set %rax to the number (0-8) of FP arguments passed in xmm
	registers.

2006-05-03 13:26  gb

	* lisp-kernel/x86-exceptions.c: In find_foreign_rsp(), mask with
	~15, not ~!5.  (This was causing segfaults on return from
	interrupts sometimes.)

2006-05-03 13:24  gb

	* lib/backtrace.lisp: CLOSURE-CLOSED-OVER-VALUES, which is needed
	by SWANK/SLIME.

2006-05-03 13:23  gb

	* lib/backtrace-lds.lisp: FRAME-SUPPLIED-ARGS, hopefully in a form
	that'll work on all platforms.	(Note that FRAME-SUPPLIED-ARGS
	seems to get many things wrong.)

2006-05-03 11:37  gb

	* level-1/version.lisp: You mist have yesterday's version.

2006-05-03 11:37  gb

	* level-0/X86/x86-def.lisp: Implement #'%FF-CALL.  Not too much
	LAP.

2006-05-03 11:36  gb

	* level-0/l0-init.lisp: Put :X86-64 and :AMD64 on *FEATURES* if
	#+x8664-target.

2006-05-03 11:36  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Bad typo in UNBOX-S64, and
	it can just check for a 2-digit bignum header if it has something
	of tag TAG-MISC.

2006-05-03 11:34  gb

	* compiler/X86/x862.lisp: X862-COPY-REGISTER: handle :S64
	destinations.

2006-05-03 11:33  gb

	* compiler/X86/x86-disassemble.lisp: Recognize
	uuo-error-eep-unresolved.

2006-05-02 18:07  gb

	* level-1/version.lisp: Bump.

2006-05-02 18:07  gb

	* lib/: backtrace-lds.lisp, describe.lisp: Comment out stuff that's
	(mostly ?) unused and currently PPC-specific, if it works at all
	...

2006-05-02 10:27  gb

	* level-1/l1-streams.lisp: Don't definea STREAM-CLEAR-INPUT method
	for STRING-INPUT-STREAMs; it's not clear what such a method should
	do (and fairly clear that it shouldn't do what the previous
	definition was doing.)

2006-05-02 10:26  gb

	* lib/format.lisp: clear input from *query-io*, not from
	*terminal-io* in YES-OR-NO-P, Y-OR-N-P

2006-05-02 10:26  gb

	* library/hash-cons.lisp: x8664 lap

2006-05-02 10:26  gb

	* lisp-kernel/x86-gc.c: hons area stuff

2006-04-29 09:14  gb

	* lisp-kernel/x86-exceptions.c: Write-protect handlers for stack
	overflow (on value/temp stacks).

2006-04-29 09:13  gb

	* level-1/x86-trap-support.lisp: Handle stack overflow in cmain
	callback.

2006-04-29 09:10  gb

	* lisp-kernel/freebsd8664/Makefile: x86-gc.o.
	
	No linker script.
	
	Use -lthr, which offers 1:1 threads.

2006-04-29 09:09  gb

	* lisp-kernel/lisptypes.h: Remove the __sighandler typedef.

2006-04-29 09:01  gb

	* lisp-kernel/x86-exceptions.h: xpMMXreg for FreeBSD.

2006-04-29 09:00  gb

	* lisp-kernel/x86-exceptions.c: Don't use __sighandler_t.  (See if
	anything cares ...)

2006-04-29 08:59  gb

	* lisp-kernel/x86-constants64.h: FreeBSD register constants.

2006-04-29 08:58  gb

	* lisp-kernel/lisp-debug.c: FreeBSD regiser names.

2006-04-29 08:58  gb

	* lisp-kernel/area.h: Update IMAGE_BASE_ADDRESS for FreeBSD.

2006-04-28 21:28  gb

	* level-1/version.lisp: bump.

2006-04-28 21:27  gb

	* lib/backtrace.lisp: changes to print-call-history (and "internal"
	version).

2006-04-28 21:24  gb

	* lib/ppc-backtrace.lisp: Fix typo.

2006-04-28 21:23  gb

	* level-1/l1-readloop-lds.lisp: Add :NFRAMES break loop command.
	
	Change the command/keyword parser a little, so that :FOO is just
	:FOO and not (:FOO).
	
	Change :B break loop command (and :F) to allow focusing on a range
	of frames, and change PRINT-CALL-HISTORY to more easily support
	that.

2006-04-28 19:37  gb

	* level-0/PPC/ppc-numbers.lisp: Remove a quote from a LAP
	LOAD-CONSTANT form.

2006-04-28 19:34  gb

	* lib/: backtrace.lisp, ppc-backtrace.lisp, x86-backtrace.lisp:
	Factor out a little more.  Time to see what's broken on PPC ...

2006-04-28 19:34  gb

	* level-1/: l1-readloop-lds.lisp, l1-streams.lisp: Make parens
	around colon-commands optional.

2006-04-28 04:11  gb

	* lisp-kernel/linuxx8664/.gdbinit: 'lregs' calls the kernel
	debugger's register display code.

2006-04-28 04:11  gb

	* lisp-kernel/xlbt.c: Don't claim that the (legitimate) last frame
	on the stack is bogus.

2006-04-28 04:10  gb

	* lisp-kernel/x86-exceptions.c: Create fake stack frames (sort of
	...) when calling back for an exception.

2006-04-28 03:36  gb

	* lisp-kernel/x86-constants64.h: A few symbolic register names.
	
	xcf struct.

2006-04-28 03:36  gb

	* library/lispequ.lisp: FAKE-STACK-FRAME is #+ppc-target.

2006-04-28 03:36  gb

	* lib/x86-backtrace.lisp: Implemented some stuff.
	
	Backtrace (sort of) works on x8664 now; need to find register
	values,  hide tagged return addresses, a few other things.

2006-04-28 03:34  gb

	* lib/ppc-backtrace.lisp: Stuff moved here from elsewhere.

2006-04-28 03:34  gb

	* lib/backtrace-lds.lisp: LAST-CATCH-SINCE moved elsewhere.

2006-04-28 03:33  gb

	* level-1/x86-trap-support.lisp: Flags register accessor.
	
	New exception callback scheme.

2006-04-28 03:33  gb

	* level-1/x86-threads-utils.lisp: The lowlevel system keeps
	changing.

2006-04-28 03:32  gb

	* level-1/x86-error-signal.lisp: New exception callback stuff.

2006-04-28 03:32  gb

	* level-1/l1-readloop-lds.lisp: No fake stack frames on x86.

2006-04-28 03:32  gb

	* level-1/l1-lisp-threads.lisp: Move more stuff to arch-specific
	files.

2006-04-28 03:31  gb

	* level-1/l1-events.lisp: No fake-stack-frames on x86, but we do
	have exception callback frames ...

2006-04-28 03:30  gb

	* level-1/l1-error-system.lisp: Tweak :report method for
	wrong-number-of-args errors.

2006-04-28 03:30  gb

	* level-0/X86/x86-def.lisp: Implement APPLY+.

2006-04-28 03:29  gb

	* compiler/X86/X8664/x8664-arch.lisp: eXception Callback Frame.

2006-04-28 03:27  gb

	* compiler/X86/x86-lapmacros.lisp: Add missing IN-PACKAGE.
	
	CHECK-NARGS: don't enforce upper bound if it's null.

2006-04-28 03:17  gb

	* compiler/X86/x86-arch.lisp: x86 xFLAGS bits.

2006-04-28 03:16  gb

	* compiler/nx0.lisp: Allow (FUNCTION (SETF name)) in
	IGNORE/IGNORABLE/DYNAMIC-EXTENT declarations.

2006-04-26 14:18  gb

	* compiler/nx0.lisp: Allow (SETF NAME) in DEFINE-COMPILER-MACRO.

2006-04-26 14:17  gb

	* lib/misc.lisp: Disassemble is supposed to signal an error (or "be
	prepared" to do so) if its argument isn't a function designator, so
	don't quietly call METHOD-FUNCTION for the user.

2006-04-26 13:56  gb

	* lib/encapsulate.lisp: Use REPLACE-FUNCTION-CODE (not (SETF (UVREF
	...))) in ENCAPSULATE, REMOVE-ENCAPSULATION.

2006-04-26 03:59  gb

	* lisp-kernel/: x86-spentry64.s, x86-subprims64.s: zero out the
	exception bits whenever mxcsr is stored in tcr.foreign_mxcsr, so no
	exceptions will be pending when we start an ff-call (and the mxcsr
	is loaded from that location.)
	
	tcr.ffi_exception will then contain non-zero exception bits iff the
	most recent ff-call raised a (probably masked) FP exception.
	
	TODO: make this reentrant (PROCESS-INTERRUPT should preserve this.)

2006-04-26 03:55  gb

	* lisp-kernel/x86-constants.s: define mxcsr exception bits.

2006-04-26 03:23  gb

	* lisp-kernel/x86-constants64.s: Update comment on
	tcr.ffi_exception.

2006-04-26 03:22  gb

	* lisp-kernel/x86-spentry64.s: Maintain tcr.ffi_exception on return
	from ffcall.  (Should maybe clear exception bits on entry to
	foreign state, so we're sure that any exception bits set in the
	tcr.ffi_exception slot were caused by the most recent ff-call.)

2006-04-26 03:20  gb

	* level-0/X86/x86-float.lisp: Check MXCSR status bits from last
	ffcall, compare them to unmasked exception bits in current MXCSR,
	maybe raise FP exception.  (Note: compile this change and rebuild
	image before making corresponding kernel change.)

2006-04-26 02:31  gb

	* lisp-kernel/x86-spentry64.s: .SPbuiltin-logxor was calling out to
	LOGAND-2, not to LOGXOR-2.  Sheesh.

2006-04-26 02:01  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: %ILOGBITP treats "large"
	bit numbers as tests of the sign bit.	(This is probably best
	viewed as being "formally undefined", but it's not too expensive to
	check for that.  The case where the bit number's negative is
	definitely undefined; I think that it also gets treated as a test
	of the sign bit.)

2006-04-26 01:58  gb

	* lisp-kernel/x86-spentry64.s: Logbitp calls out if bit number
	negative.

2006-04-26 01:32  gb

	* lisp-kernel/x86-spentry64.s: If both args fixnums, handle bits >=
	61.  (Should check here for negative bit .)

2006-04-26 01:31  gb

	* lisp-kernel/x86-exceptions.c: If we get the "no FP regs in
	context" error - which typically indicates a fault during exception
	processing - pass the context in to the kernel debugger.

2006-04-26 01:30  gb

	* level-0/X86/x86-pred.lisp: Change EQL doc string.

2006-04-26 00:56  gb

	* level-0/X86/x86-pred.lisp: EQL on two bignums works much better
	if it compares all corresponding digits, rather than repeatedly
	comparing the 0th digits N times ...

2006-04-25 17:38  gb

	* lisp-kernel/x86-spentry64.s: _SPmvslide: skip the loop if nargs
	is 0, not if disp is 0.  ash: always make a signed integer out of
	the result,  since arg is always signed.

2006-04-25 17:37  gb

	* level-0/X86/x86-float.lisp: Negate floats by fliping the sign
	bit, so (for instance) (- 0.0d0) is -0.0d0.

2006-04-25 17:36  gb

	* level-0/X86/x86-hash.lisp: Hash bignums 32 bits (not 64!) at a
	time.

2006-04-25 17:35  gb

	* compiler/X86/x862.lisp: %%INEG: need to ensure that source
	operand is in target reg (2-address issue.)

2006-04-24 16:42  gb

	* lisp-kernel/x86-spentry64.s: How hard can misc_set_s32 be ? 
	Apparently, pretty hard.  It was doing a logical shift right when
	typechecking the value, so negative values were rejected.

2006-04-24 16:41  gb

	* lisp-kernel/x86-exceptions.c: Call out to handle SIGFPE.  cmain
	callback now takes a 'signo' argument.

2006-04-24 16:40  gb

	* level-1/x86-trap-support.lisp: Initial support for handling
	arithmetic errors.  Will need more work to get operation and
	operands right.

2006-04-24 16:39  gb

	* lib/compile-ccl.lisp: REBUILD-CCL: :reload arg defaults to T.

2006-04-24 13:58  gb

	* level-1/x86-error-signal.lisp: SETQ (not #'SET) in the
	uuo-error-reg-not-type case.

2006-04-24 13:57  gb

	* level-0/X86/x86-float.lisp: Generally want to use FPZERO, not
	FP0, for 0.0[d,f]0.  (One case wanted to use fp1, but that's
	another story.)

2006-04-24 13:55  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: REQUIRE-REAL,
	REQUIRE-NUMBER: mask wont fit in 32 bits.  OTOH, doesn't need to be
	boxed, either.

2006-04-24 12:02  gb

	* lisp-kernel/x86-spentry64.s: misc_set_s32: register botch. 
	_SPtcallnfngen: several bugs, which were already fixed in similar
	variants.

2006-04-24 12:01  gb

	* lisp-kernel/x86-gc.c: Use FORCE_DWS_MARK to force use of the
	Deutch/Waite/Schorr marker.

2006-04-24 12:00  gb

	* lisp-kernel/pmcl-kernel.c: Only turn on GC debug bit if
	GC_INTEGRITY_CHECKING is defined (e.g., in Makefile.)

2006-04-24 11:59  gb

	* level-1/linux-files.lisp: Remove debugging FORMAT call.

2006-04-24 11:58  gb

	* level-0/X86/x86-numbers.lisp: %ROUND-NEAREST-SHORT-FLOAT->FIXNUM:
	argument is a SINGLE/SHORT-FLOAT, so don't access as a
	DOUBLE-FLOAT.

2006-04-24 11:58  gb

	* level-0/X86/x86-float.lisp: %MAKE-FLOAT-FROM-FIXNUMS: mask the
	high and low words of the mantissa, to ensure that no hidden bits
	are set.  (Some such bits were set, causing many double-float
	constansts - like MOST-POSITVE-DOUBLE-FLOAT - to be bogus NaNs).

2006-04-24 02:21  gb

	* lisp-kernel/image.c: Expect a MANAGED_STATIC section in the
	image.
	
	(Don't expect it to have any contents yet; that'll require several
	more changes.	This is all intended to support PURIFY on x8664,
	where we'll want to ensure that any constant referenced by a
	function in readonly/pure memory has a fixed, static address.)

2006-04-24 02:14  gb

	* lisp-kernel/image.h: Bump IMAGE_ABI_VERSION.	New managed_static
	section makes NUM_IMAGE_SECTIONS 4.

2006-04-24 02:13  gb

	* lisp-kernel/area.h: Typo in the definition of
	AREA_MANAGED_STATIC.

2006-04-24 02:12  gb

	* lisp-kernel/: pmcl-kernel.c, kernel-globals.h: Global pointers to
	more areas.

2006-04-24 02:12  gb

	* lisp-kernel/ppc-exceptions.c: EGC write-barrier labels are the
	addresses of instructions (not pointers thereto ...)

2006-04-24 02:11  gb

	* lisp-kernel/ppc-gc.c: Add conditionalization to force DWS marker
	(mostly so that I could step through it to remember how it worked
	...).

2006-04-24 02:10  gb

	* lisp-kernel/ppc-spentry.s: write-barrier exported symbols: remove
	indirection.

2006-04-24 02:09  gb

	* lisp-kernel/x86-gc.c: Remove a sanity check.

2006-04-24 02:09  gb

	* xdump/xfasload.lisp: Create (empty) managed-static section
	(mostly for x8664 PURIFY, but might be useful on PPC someday.)

2006-04-24 02:08  gb

	* xdump/heap-image.lisp: New image-abi-version, for managed-static
	section.

2006-04-24 02:07  gb

	* level-1/linux-files.lisp: GET-DESCRIPTOR-FOR: try not to leak
	fds, take CLOSE-ON-ERROR more seriously.

2006-04-24 02:06  gb

	* compiler/PPC/ppc2.lisp: (eq %FOREIGN-STACK-POINTER
	%CURRENT-FRAME-PTR) on PPC32/64.

2006-04-24 00:50  gb

	* level-1/version.lisp: Bump.  Getting there ...

2006-04-24 00:50  gb

	* level-0/l0-misc.lisp: Use %GET-NATURAL where possible.
	
	Note that TCRs aren't guaranteed to be in the low 32 bits on x8664,
	so pass them as a pointer to avoid word-size issues.

2006-04-24 00:48  gb

	* compiler/X86/: x862.lisp, X8664/x8664-vinsns.lisp: Implement
	things that had been missing.

2006-04-24 00:48  gb

	* compiler/X86/x86-disassemble.lisp: Recognize recently-defined
	UUOs.

2006-04-24 00:48  gb

	* compiler/X86/x86-backend.lisp: Fix FIXUP-OPCODE-ORDINALS (again).

2006-04-24 00:47  gb

	* compiler/X86/x86-asm.lisp: UUO-ERROR-ARRAY-BOUNDS.

2006-04-24 00:47  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: A little word-size cleanup.

2006-04-24 00:47  gb

	* compiler/nxenv.lisp: %FOREIGN-STACK-POINTER.

2006-04-24 00:46  gb

	* compiler/nx1.lisp: WITH-C-FRAME, WITH-VARIABLE-C-FRAME: use (new)
	%FOREIGN-STACK-POINTER, not %CURRENT-FRAME-PTR (differ on x8664;
	need to boostrap on PPC).
	
	Parse %FOREIGN-STACK-POINTER.

2006-04-22 03:30  gb

	* lisp-kernel/thread_manager.c: If we're using thread-local-storage
	(HAVE_TLS is defined), make shutdow_thread_tcr() dequeue the tcr, 
	because (a) nothing else will and (b) the tcr will likely become
	unmapped soon, and we don't want things that walk the tcr list to
	segfault.

2006-04-22 03:27  gb

	* lisp-kernel/x86-exceptions.c: Something's clearly wrong in
	find_foreign_rsp; call Bug() and exit() if the context has no
	fpregs.  (That's a symptom, not the proble, but it's slightly
	better to do this than to double fault, which is what seems to be
	happening.)

2006-04-21 10:12  gb

	* lisp-kernel/x86-exceptions.c: implement pc_luser_xp; just has to
	worry about consing, write-barrier stuff.

2006-04-21 10:11  gb

	* lisp-kernel/x86-constants.h: Define X86 flags register bits
	(condition codes.)

2006-04-21 10:11  gb

	* lisp-kernel/x86-exceptions.h: change the signature of pc_luser_xp
	(again.)
	
	Define enumeration constants for matching the instructions that can
	occur during consing.

2006-04-21 10:09  gb

	* lisp-kernel/x86-spentry64.s: Preserve %temp0 in
	store_node_conditional, in case pc_luser_xp() needs to complete the
	memoization.

2006-04-21 02:50  gb

	* lisp-kernel/x86-spentry64.s: Use only the value of the first
	instance of :ALLOW-OTHER-KEYS to determine whether unknown keys are
	allowed.

2006-04-21 02:49  gb

	* lisp-kernel/lisp-debug.c: Tweak things so that %rip and %flags
	line up with GPRs.

2006-04-21 02:48  gb

	* lib/sequences.lisp: SIMPLE-1D-ARRAY-SUBSEQ: 64-bit vector case is
	#+64-bit-target, not #+ppc64-target.

2006-04-21 02:47  gb

	* level-0/X86/x86-array.lisp: %SIMPLE-BIT-BOOLE: shift by the right
	amount.

2006-04-21 02:46  gb

	* level-0/l0-array.lisp: %UVECTOR-REPLACE: 64-bit vectors aren't
	unique to PPC64 (but do depend on #+64-bit-target).

2006-04-21 02:46  gb

	* compiler/X86/x862.lisp: The binding(s) of *INTERRUPT-LEVEL*
	confuse PROGV; remove them, for now.

2006-04-20 23:35  gb

	* lisp-kernel/x86-spentry64.s: In the bignum case of
	.SPinteger-sign, sign-extend the bignum's sign digit instead of ...
	whatever the code was trying to do there.
	
	In the lexpr-has-two-values case of .SPspread-lexprz, load arg_y
	and arg_z from the correct offsets within the lexpr.

2006-04-20 04:48  gb

	* lisp-kernel/x86-gc.c: Get the link-inverting marker written;
	force it to always be used, for now.

2006-04-19 17:11  gb

	* lisp-kernel/pmcl-kernel.c: (Very) different
	MAXIMUM_MAPPABLE_MEMORY for Solaris.

2006-04-19 17:10  gb

	* lisp-kernel/area.h: (Very) different IMAGE_BASE_ADDRESS for
	Solaris.

2006-04-19 00:35  gb

	* lisp-kernel/x86-gc.c: Write a few paragraphs outlining how the
	reversing-pointer marker should work.  (Perhaps it's a strong
	argument for implementing "purify" soon.)

2006-04-19 00:34  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s:
	function-boundary-marker.

2006-04-19 00:33  gb

	* lisp-kernel/macros.h: Add node_aligned and indirect_node macros.

2006-04-18 19:35  gb

	* lisp-kernel/x86-spentry64.s: Comparison was backwards in
	multiple-value case of THROW: don't want to do unbind_to if tcr's
	db-link matches target catch frame's.

2006-04-18 19:33  gb

	* lisp-kernel/x86-uuo.s: Add UUO-ERROR-DEBUG-TRAP, remove
	UUO-ERROR-STACK-OVERFLOW.  Still need to get this completely in
	synch with x86-asm.

2006-04-18 19:33  gb

	* level-1/l1-readloop-lds.lisp: Say more about the availability of
	:R in break messages.
	
	Say more about :C in :R.

2006-04-18 19:32  gb

	* level-1/l1-readloop.lisp: Remove the #+x86-target debugging code
	in QUIT's PROCESS-INTERRUPT call, since the closure- trashing bug
	seems to have been fixed.

2006-04-18 19:31  gb

	* level-1/x86-error-signal.lisp: Recognize (uuo-error-not-tag %rn
	x8664::subtag-catch-tag) as CANT-THROW-ERROR.  (Yes, this is a
	horrible kludge, but it only happens once.)

2006-04-18 19:19  gb

	* level-1/l1-processes.lisp: Remove the #+x86-target debugging code
	in PROCESS-EXIT-APPLICATION, since the closure- trashing bug seems
	to have been fixed.

2006-04-18 19:18  gb

	* level-0/X86/x86-pred.lisp: EQL on bignums wasn't using
	X8664::MISC-DATA-OFFSET, so it was comparing a few bytes beyond the
	ends of its arguments and ignoring the first few bytes (as well as
	doing misaligned memory references.)

2006-04-18 19:16  gb

	* level-0/X86/x86-def.lisp: Insert the PPC version of APPLY+ here. 
	This'll require some thought, mostly because of the reserved-frame
	issue(s).

2006-04-18 06:21  gb

	* lisp-kernel/ppc-constants32.s: Comment mishaps.  These wacky
	adventures are about to end, I'm afraid.

2006-04-18 06:04  gb

	* level-1/version.lisp: Daily bump.

2006-04-18 05:59  gb

	* level-1/l1-sockets.lisp: Comment indentation.

2006-04-18 05:56  gb

	* level-0/PPC/ppc-def.lisp: Move APPLY+ here.

2006-04-18 05:55  gb

	* lib/setf-runtime.lisp: Move APPLY+ (which is defined in LAP) to
	ppc-def (that means that there will need to be an APPLY+ for
	x8664).

2006-04-18 05:38  gb

	* compiler/X86/: x862.lisp, X8664/x8664-vinsns.lisp: Try to get the
	compiler and x8664-vinsn-templates to agree on vinsn-names and
	implement some vinsns that had been missing.  (About 15 or so
	undefined vinsns remain.)

2006-04-18 05:37  gb

	* compiler/X86/x86-backend.lisp: The mechanism that tries to fixup
	opcode ordinals in vinsn templates (e.g., in case new instructions
	are defined in the assembler) wasn't checking to see if vinsn
	templates named in the hash table were defined.  (It was apparently
	getting away with this because CONSP was broken.)  So, don't try to
	fixup opcode ordinals in NIL, and optionally report templates
	that're referenced but not defined.

2006-04-18 04:38  gb

	* compiler/X86/x862.lisp: CONSP was using the EXTRACT-FULLTAG vinsn
	(which only sets the low 8 bits of its destination), then comparing
	all 64-bits of the destination to a zero-extended 32-bit constant. 
	(E.g., CONSP had little chance of being right all other things
	being equal, but may have been right more than one in 2^56 times if
	some random preceding instruction had zeroed the upper 56 bits.)
	
	(It's also shorter to do an 8-bit compare.)

2006-04-18 03:11  gb

	* level-0/X86/x86-hash.lisp: box-fixnum arg order in %DFLOAT-HASH.

2006-04-18 02:51  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Now that all assemblers are
	happy (well, as happy as they're going to be ...), back to finding
	bugs.  MULTIPLY-FIXNUMS has to unbox one arg (the source).

2006-04-18 01:26  gb

	* lisp-kernel/thread_manager.c: Some Solaris changes.

2006-04-18 00:48  gb

	* lisp-kernel/solarisx64/Makefile: The version of gm4 that Sun
	installs in /usr/sfw/bin is both newer and buggier than the version
	available on the "Solaris Companion" disk, which gets installed in
	/opt/sfw/bin.
	
	Ordinarily, I'd wonder why a "companion" disk offers to install
	software that's bundled as part of the installation (especially old
	versions of that software.)  Now I know.

2006-04-18 00:45  gb

	* lisp-kernel/x86-spentry64.s: # __line__ wasn't a comment.

2006-04-18 00:45  gb

	* lisp-kernel/m4macros.m4: Fix changecom.

2006-04-18 00:11  gb

	* lisp-kernel/x86-spentry64.s: x8664 linux as doesn't like typos,
	but is otherwise fine with single-line /* */.

2006-04-18 00:09  gb

	* lisp-kernel/: errors.s, imports.s, lisp.s, m4macros.m4,
	ppc-asmutils.s, ppc-constants.s, ppc-constants32.s,
	ppc-constants64.s, ppc-macros.s, ppc-spentry.s, ppc-spjump.s,
	ppc-subprims.s, ppc-uuo.s, x86-asmutils64.s, x86-constants.s,
	x86-constants64.s, x86-macros.s, x86-spentry64.s, x86-spjump64.s,
	x86-subprims64.s, x86-uuo.s, darwinppc/Makefile,
	darwinppc64/Makefile: Whoops.  Darwin as doesn't like #.  I dont
	like Darwin as, but we're back to single-line /* */, which is often
	pretty ugly and not well-supported by Emacs.

2006-04-17 23:23  gb

	* lisp-kernel/: errors.s, imports.s, lisp.s, m4macros.m4,
	ppc-asmutils.s, ppc-constants.s, ppc-constants32.s,
	ppc-constants64.s, ppc-uuo.s, x86-asmutils64.s, x86-constants.s,
	x86-constants64.s, x86-macros.s, x86-spjump64.s, x86-subprims64.s,
	x86-uuo.s: Use #/newline for comment delimiters, which is supported
	by Emacs and by all current GAS versions (but see ARM conventions.)
	 No more jerking around with this, knock wood.

2006-04-17 23:23  gb

	* lisp-kernel/x86-spentry64.s: _SPspread_lexprz wasn't handling the
	case where caller provided args before the lexpr, which is much
	harder than the simple case.
	
	Use #/newline for comment delimiters, which is supported by Emacs
	and by all current GAS versions (but see ARM conventions.)  No more
	jerking around with this, knock wood.

2006-04-17 23:20  gb

	* level-0/X86/x86-numbers.lisp: %FIXNUM-GCD was horrible, espcially
	when numbers differed greatly in magnitude.  Current (binary)
	algorithm is usually OK.

2006-04-17 23:17  gb

	* compiler/X86/x86-lap.lisp: Condition name should be
	UNDEFINED-X86-LAP-LABEL, since it's (a) referenced and (b) that's
	not the problem.  Name wasn't spelled correctly in code that
	signals the condition, anyway.

2006-04-17 16:34  gb

	* lisp-kernel/x86-exceptions.c: pc_luser_xp always takes a tcr
	argument, takes a new boolean to distinguish current tcr from
	others.  (The current tcr is only lusered on an interrupt; others
	are only lusered on GC entry.)

2006-04-17 16:33  gb

	* lisp-kernel/x86-exceptions.h: X86 prototype for pc_luser_xp moved
	here.  (No deep reason not to share the new x86 signature on all
	architectures.)

2006-04-17 16:32  gb

	* lisp-kernel/ppc-exceptions.h: PPC prototype for pc_luser_xp moved
	here.  (No deep reason not to share the new x86 signature on all
	architectures.)

2006-04-17 16:31  gb

	* lisp-kernel/lisp-exceptions.h: prototype for pc_luser_xp is
	platform-dependent.

2006-04-17 06:49  gb

	* level-1/l1-readloop.lisp: In the closure created in QUIT, only do
	CCL::DBG if (a) we're on X86 and (b) the inner closure is bad
	already.

2006-04-17 06:17  gb

	* lisp-kernel/lisptypes.h: Don't know if there's such a thing as
	truly portable type name.

2006-04-17 06:16  gb

	* lisp-kernel/: errors.s, lisp.s, m4macros.m4, x86-constants.s,
	x86-constants64.h, x86-constants64.s, x86-exceptions.c,
	x86-exceptions.h, x86-gc.c, x86-macros.s, x86-spentry64.s,
	x86-spjump64.s, x86-uuo.s: Well, // style comments seem to only
	work if they're at the start of a line in Linux GAS.  Try /* */
	comments, but limit them to a single line.  (May ultimately be
	better to use m4 dnl - carefully - and avoid end-of-line comments.)

2006-04-17 05:28  gb

	* lisp-kernel/: x86-macros.s, x86-spentry64.s, x86-spjump64.s,
	x86-subprims64.s, x86-uuo.s: // comments.

2006-04-17 05:28  gb

	* lisp-kernel/x86-gc.c: timeradd, timersub.  Other Solaris
	conditionalization.

2006-04-17 05:27  gb

	* lisp-kernel/x86-exceptions.h: Solaris-related changes (xp
	accessors, etc.)

2006-04-17 05:26  gb

	* lisp-kernel/x86-exceptions.c: Solaris-related changes (mostly in
	the sigstack trampoline stuff.)

2006-04-17 05:25  gb

	* lisp-kernel/x86-constants64.h: // comments, Solaris-friendly
	integer types.

2006-04-17 05:24  gb

	* lisp-kernel/: x86-asmutils64.s, x86-constants.s,
	x86-constants64.s: // comments.

2006-04-17 05:23  gb

	* lisp-kernel/pmcl-kernel.c: Some Solaris conditionalization. 
	Solaris mmap() is ... unusual.

2006-04-17 05:21  gb

	* lisp-kernel/m4macros.m4: Use C++-style single-line comments,
	since Solaris version of GAS doen't handle multi-line comments (/*
	... */).  It -seems- that other assemblers do handle them
	correctly; we'll see.
	
	Some Solaris conditionalization (ELFstabs, etc.)

2006-04-17 05:20  gb

	* lisp-kernel/lisptypes.h: Conditionalize for Solaris (type names).
	 We'll see what this breaks.

2006-04-17 05:19  gb

	* lisp-kernel/lisp.h: PLATFORM_OS is PLATFORM_OS_SOLARIS when
	SOLARIS is defined.

2006-04-17 05:18  gb

	* lisp-kernel/lisp-debug.c: Solaris conditionalization; print
	registers in predictable order.

2006-04-17 05:17  gb

	* lisp-kernel/: errors.s, imports.s, lisp.s: Use C++-style
	single-line comments, since Solaris version of GAS doen't handle
	multi-line comments (/* ... */).  It -seems- that other assemblers
	do handle them correctly; we'll see.

2006-04-17 05:15  gb

	* lisp-kernel/area.h: IMAGE_BASE_ADDRESS for SolarisX64.  Wrong.

2006-04-17 05:15  gb

	* lisp-kernel/Threads.h: Conditionalize for Solaris.
	
	TODO: drop Jaguar support, use POSIX (vice Mach) semaphores on all
	platforms ?

2006-04-17 05:01  gb

	* lisp-kernel/solarisx64/Makefile: new file

2006-04-17 04:56  gb

	* lisp-kernel/linuxx8664/Makefile: Make it a little easier to
	change the name/usage of the linker script.
	
	Stop using the linker script (since spjump is the only thing in the
	kernel that has to be at a fixed address and we can copy it there.)
	
	Don't disable the EGC.

2006-04-17 04:54  gb

	* lisp-kernel/x86-spjump64.s: Define spjump_start as the origin of
	the spjump table, exported for C (so that spjump can be mapped into
	low memory.)

2006-04-17 04:54  gb

	* lisp-kernel/x86-spentry64.s: Use reserved_frame_marker.
	
	If the tlb's too small when trying to bind a special, push the
	binding index of the symbol we're binding (for the benefit of the
	handler.)

2006-04-17 04:52  gb

	* lisp-kernel/x86-gc.c: Check for cases where a function has more
	code words than it has elements (can't happen, unless the
	function's code-words word is garbage, which seems to happen when
	closures get consed up in non-zeroed memory.)
	
	Make sure that we mark and forward Itemp2 (= %rcx = %temp2 =
	%nargs.q), which sometimes contains something tagged and
	non-immediate.

2006-04-17 04:48  gb

	* lisp-kernel/x86-exceptions.c: new_heap_segment() (slowly) checks
	to ensure that everythings's zeroed.
	
	x8664 implementation of extend_tcr_tlb().
	
	on a gc trap, use tcr->save_allocptr (not the random value in %rbx)
	in call to update_bytes_allocated().
	
	normalize_tcr() - alway set tcr->save_allocptr/tcr->save_allocbase
	to VOID_ALLOCPTR (I -think- that this explains the crash-on-quit
	bug, and possibly some other instabiliy.)
	
	handle_exception: keep trying to guess how to distinguish memory
	faults from other sources of SIGSEGV.
	
	On debug traps, advance the PC past the UUO before entering the
	debugger.
	
	Handle XUUO_TLB_TOO_SMALL.

2006-04-17 04:42  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s:
	reserved_frame_marker.

2006-04-17 04:42  gb

	* lisp-kernel/thread_manager.c: Remove implementation of
	extend_tcr_tlb().

2006-04-17 04:41  gb

	* lisp-kernel/ppc-exceptions.h: Prototype for PPC version of
	extend_tcr_tlb().

2006-04-17 04:41  gb

	* lisp-kernel/ppc-exceptions.c: PPC version of extend_tcr_tlb().

2006-04-17 04:40  gb

	* lisp-kernel/pmcl-kernel.c: Remap the spjump table on x8664, so
	that we don't need to use a linker script.

2006-04-17 04:40  gb

	* lisp-kernel/Threads.h: extend-tcr-tlb: signature defined by
	target xxx-exceptions.h now.

2006-04-17 04:39  gb

	* lib/misc.lisp: Some comment formatting/editing.

2006-04-17 04:38  gb

	* level-1/version.lisp: Bump.

2006-04-17 04:38  gb

	* level-1/l1-readloop.lisp: Some debugging code in the code which
	creates the final closure.  It seems that when it's bad, it's bad
	on creation (here.)

2006-04-17 04:37  gb

	* level-1/l1-processes.lisp: Some debugging code in
	PROCESS-EXIT-APPLICATION, to try to catch whatever's causing the
	final closure to be trashed.
	
	I don't think that other threads were getting their allocptr's
	nullified correctly by the GC/normalize_tcr(); with the current
	debugging code in place, it seems like the closure is consed on top
	of something other than free, thread-private heap memory (when it's
	bad, it fails the first check here.  I'm not sure that the latest
	round of GC/normalize-tcr() changes have fixed the problem, but I
	haven't seen it in a while now, either.)

2006-04-17 04:32  gb

	* level-0/X86/x86-def.lisp: %FUNCTION-CODE-BYTE (for partial
	disassembly, etc.).

2006-04-17 04:31  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Use RESERVED-FRAME-MARKER
	in RESERVE-OUTGOING-FRAME; don't use ENSURE-RESERVED-FRAME at all
	(anymore.)
	
	Subprims are down in low memory again; make INIT-CLOSURE skip
	setting the high byte of .SPcall-closure's address if it's zero.

2006-04-17 04:28  gb

	* compiler/X86/X8664/x8664-arch.lisp: Define RESERVED-FRAME-MARKER,
	which may help backtrace.

2006-04-17 04:26  gb

	* lib/: backtrace.lisp, ppc-backtrace.lisp: Split up RAW-FRAME-REF
	(interface/implementation.)

2006-04-15 09:20  gb

	* level-1/x86-callback-support.lisp: Ensure that callback
	trampolines are allocated in executable memory.

2006-04-15 09:12  gb

	* lib/dumplisp.lisp: Refresh external entry points before reviving
	callbacks.  Reset callback storage before reviving callbacks.

2006-04-15 09:10  gb

	* level-1/x86-error-signal.lisp: Don't prefix the unknown trap
	error message with a %.  (Where did that come from ?)

2006-04-15 09:08  gb

	* level-1/ppc-callback-support.lisp: Don't (knock wood) need to do
	anything in RESET-CALLBACK-STORAGE for PPC, since malloc()ed memory
	is executable.

2006-04-14 09:02  gb

	* lib/time.lisp: Jeez.	Save buffer, why dontcha.

2006-04-14 08:21  gb

	* lib/time.lisp: ENCODE-UNIVERSAL-TIME: treat year 0-99 as
	shorthand for the nearest matching year.

2006-04-14 08:20  gb

	* lib/format.lisp: FORMAT-PRINT-NUMBER was printing commas even
	when : was missing.

2006-04-13 23:09  gb

	* lib/ppc-backtrace.lisp: Eschew missing parens.

2006-04-13 23:08  gb

	* lib/describe.lisp: Change NTH-VALUE-IN-FRAME call.

2006-04-13 23:08  gb

	* lib/backtrace.lisp: DBG-FORM checks the second return value from
	ARGLIST-FROM-MAP.

2006-04-13 23:02  gb

	* lib/arglist.lisp: Don't pass a "conser" function around (the idea
	is leftover from 68K MCL).  ARGLIST-FROM-MAP tries to be consistent
	about returning a second value; returns values NIL, T for functions
	that take no args and don't have a symbol map.

2006-04-13 22:53  gb

	* level-1/l1-lisp-threads.lisp: Try to make args to
	NTH-VALUE-IN-FRAME et al a little saner.

2006-04-13 22:37  gb

	* lib/numbers.lisp: Conditionalize on word size, not PPC processor
	type.

2006-04-13 22:36  gb

	* level-1/version.lisp: Bump.

2006-04-13 22:35  gb

	* level-1/l1-aprims.lisp: Remove the DBG trap from #'APPLY.  Still
	trying to find the cause of the crash-on-quit bug.

2006-04-13 07:30  gb

	* lib/ppc-backtrace.lisp: Migrate some stuff here.

2006-04-13 07:29  gb

	* level-1/l1-lisp-threads.lisp, lib/backtrace.lisp: Migrate some
	stuff to target-backtrace.

2006-04-13 06:45  gb

	* lisp-kernel/x86-gc.c: mark_root: need to handle TRAs earlier.

2006-04-13 06:44  gb

	* lisp-kernel/pmcl-kernel.c: Set GC debug bits manually here on
	x8664.

2006-04-13 06:44  gb

	* level-1/x86-error-signal.lisp: XP-ARGUMENT-LIST: only the low 13
	bytes of %nargs_q contain arg count.

2006-04-13 06:43  gb

	* level-1/l1-error-system.lisp: No EVAL-PROGRAM-ERROR. Please.

2006-04-13 06:43  gb

	* level-1/l1-aprims.lisp: Trying to find what's (sometimes)
	trashing a closure during QUIT; embed a #+x86-target breakpoint in
	APPLY.

2006-04-13 06:42  gb

	* level-0/X86/x86-numbers.lisp: Bad typo in %FIXNUM-GCD.

2006-04-13 06:41  gb

	* compiler/X86/x862.lisp: Lap expression changes; recycle constant
	operands.

2006-04-13 06:41  gb

	* compiler/X86/x86-lap.lisp: Freelist a lot of things; use
	"vector-lists" instead of adjustable arrays, simplify handling of
	constant expressions.  Still conses hysterically; need to find out
	where and tone it down a bit, if possible.

2006-04-13 06:39  gb

	* compiler/X86/x86-disassemble.lisp: Maybe no lap immediate
	operands; maybe no lap constant-expressions.

2006-04-13 06:39  gb

	* compiler/X86/x86-asm.lisp: Don't need
	*lap-constant-0-expression*.

2006-04-13 00:46  gb

	* lisp-kernel/linuxx8664/Makefile: Kernel depends on Makefile,
	linker script.

2006-04-13 00:45  gb

	* lisp-kernel/linuxx8664/elf_x86_64.x: Use linker script from ld
	2.16.1 (Thanks to James Bielman).

2006-04-12 18:53  gb

	* lisp-kernel/linuxx8664/elf_x86_64.x: Try to avoid use of
	PROVIDE_HIDDEN, since some versions of GNU ld don't like it.  (Most
	of this seems to have to do with C++ static constructors, which
	aren't really relevant here.)

2006-04-12 18:28  gb

	* lisp-kernel/x86-spentry64.s: Use movd (not movq) when moving
	between %Rforeign_sp and GPRs.

2006-04-12 18:22  gb

	* lisp-kernel/linuxx8664/Makefile: egc flag

2006-04-12 18:08  gb

	* lisp-kernel/x86-gc.c: Add current/prev (temporarily) to help find
	where we're losing here.

2006-04-12 18:07  gb

	* lisp-kernel/x86-exceptions.c: pc_luser_xp: notice if we're in the
	write barrier code, crap out if so.

2006-04-12 18:06  gb

	* lisp-kernel/pmcl-kernel.c: Disable EGC if DISABLE_EGC is defined
	(presumably in a Makefile).

2006-04-12 14:50  gb

	* level-1/version.lisp: Bump.

2006-04-12 14:46  gb

	* lib/: compile-ccl.lisp, ppc-backtrace.lisp, systems.lisp,
	x86-backtrace.lisp: new target backtrace stuff.

2006-04-12 14:45  gb

	* lib/backtrace.lisp: Start splitting things up, ideally into a
	mostly abstract API and gory platform- dependent implementation
	details.

2006-04-11 21:40  gb

	* lisp-kernel/pmcl-kernel.c: Only way to stress-test EGC is to turn
	the damned thing on.  (A little painful with integrity checking
	enabled, as it still is by default.)
	
	TODO:
	
	- sleep (me) - non-recursive (link-inverting) marker - pc-lusering
	(pc_luser_xp()) - backtrace - ANSI CL tests - purify - 2d-aref - FP
	exception handling - check UUO usage in kernel, disassembler,
	exception handlers - stack overflow recovery

2006-04-11 21:24  gb

	* lisp-kernel/x86-gc.c: Skip over function code in
	check_refmap_consistency.

2006-04-11 21:23  gb

	* lisp-kernel/x86-spentry64.s: Write barrier memoization sets bits
	backwards.

2006-04-11 19:11  gb

	* compiler/X86/x862.lisp: Change LABELS for new closure format.

2006-04-11 19:11  gb

	* lisp-kernel/x86-spentry64.s: 3 words of code + inner function in
	a closure, no lfname slot in closure.

2006-04-11 16:29  gb

	* lisp-kernel/linuxx8664/.gdbinit: ada	prints active dynamic (GC)
	area.

2006-04-11 16:29  gb

	* lisp-kernel/x86-subprims64.s: Maintain the MXCSR on transitions
	between lisp/foreign code.

2006-04-11 16:29  gb

	* lisp-kernel/x86-spentry64.s: Add write barrier stuff (may have
	bit-order problems.)
	
	Maintain the MXCSR on transitions between lisp/foreign code.

2006-04-11 16:28  gb

	* lisp-kernel/x86-macros.s: Access globals in expressions.

2006-04-11 16:27  gb

	* lisp-kernel/x86-gc.c: Start to implement EGC for X8664; this'll
	need some bootstrapping stuff (function boundary markers) for a few
	reasons, as will DWS marker.

2006-04-11 16:27  gb

	* lisp-kernel/x86-exceptions.c: If we get an FP exception, report
	the siginfo error code.

2006-04-11 16:26  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s: Define MXCSR
	fields in tcr.

2006-04-11 16:25  gb

	* lisp-kernel/x86-constants.h: Define MXCSR bits.

2006-04-11 16:25  gb

	* lisp-kernel/thread_manager.c: Setup the MXCSR somewhat sanely
	when starting a lisp thread.  (It'll be saner when FP exceptions
	are handled.)

2006-04-11 16:24  gb

	* level-1/x86-error-signal.lisp: Recognize what complaints about
	non-uvectors are trying to tell us.

2006-04-11 16:23  gb

	* level-1/l1-io.lisp: PRINT-OBJECT method for TRAs, symbol/function
	vectors.

2006-04-11 16:23  gb

	* level-1/l1-clos-boot.lisp: Spell TAGGED-RETURN-ADDRESS with more
	Ses.  Define classes for function/symbol vectors.

2006-04-11 16:22  gb

	* level-0/X86/x86-def.lisp: %RETURN-ADDRESS-OFFSET.

2006-04-11 16:21  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Closure initialization
	needs to add a function boundary marker (but we can stop padding
	each closure with a null function name slot.)

2006-04-11 16:20  gb

	* compiler/X86/X8664/x8664-arch.lisp: Define
	FUNCTION-BOUNDARY-MARKER, which should never exist in the wild.

2006-04-11 16:19  gb

	* compiler/X86/x862.lisp: Emit a function boundary marker between
	code and constants. (For GC reasons.) Change closure initialization
	to account for it.

2006-04-11 16:18  gb

	* compiler/X86/x86-lap.lisp: Emit a function boundary marker
	between code and constants. (For GC reasons.)

2006-04-11 16:17  gb

	* compiler/X86/x86-disassemble.lisp: Require more stuff.

2006-04-11 16:17  gb

	* compiler/nxenv.lisp: Require X8664ENV on X8664.
	
	See if we can get by without 68K condition code ...

2006-04-11 06:53  gb

	* lisp-kernel/x86-exceptions.c: We'll need to handle FP exceptions
	soon.

2006-04-11 06:53  gb

	* lib/numbers.lisp: Infinity constants conditionalized on/off
	during MXCSR adventures.  On now.

2006-04-11 06:52  gb

	* lib/describe.lisp: Comment indentation.
	
	No such thing as an interpreted function; hasn't been for years.

2006-04-11 06:51  gb

	* level-1/x86-threads-utils.lisp: Fixup lfun bits of %FIXNUM-SET et
	al.

2006-04-11 06:51  gb

	* level-1/version.lisp: Bumped yesterday.

2006-04-11 06:50  gb

	* level-1/l1-error-signal.lisp: Comments.

2006-04-11 06:50  gb

	* level-1/l1-clos-boot.lisp: CLASS-OF handles non-simple vectors,
	at least.

2006-04-11 06:50  gb

	* level-0/X86/x86-float.lisp: MXCSR stuff.  Better, mostly because
	a fixnum constant is boxed in %SET-MXCSR.

2006-04-11 06:49  gb

	* level-0/X86/x86-def.lisp: Get info about register usage.

2006-04-11 06:49  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Natural arithmetic; start
	work on 2d aref.  Fix MISC-SET-U64 (or some flavor thereof), which
	though that it was dealing with a scaled index.

2006-04-11 06:48  gb

	* compiler/X86/x862.lisp: Natural arithmetic; start work on 2d
	aref.

2006-04-11 06:48  gb

	* compiler/X86/x86-lap.lisp: FRAGs are freelisted.  Really need to
	do something about FRAG-CODE-BUFFERs, and need to tone down
	expression overkill.

2006-04-11 06:46  gb

	* compiler/X86/x86-backend.lisp: Vinsn template fixup mechanism,
	for when opcode ordinals change.

2006-04-11 06:46  gb

	* compiler/X86/x86-asm.lisp: UUO-ERROR-STACK-OVERFLOW ->
	UUO-ERROR-ARRAY-RANK.
	
	Vinsn template fixup mechanism, for when opcode ordinals change.

2006-04-11 06:45  gb

	* compiler/X86/x86-arch.lisp: Try to unscramble MXCSR bits/masks.

2006-04-11 06:45  gb

	* compiler/nx0.lisp: NX-U31-CONSTANT-P.

2006-04-11 06:44  gb

	* compiler/dll-node.lisp: WITH-DLL-NODE-FREELIST: syntax to allow
	specialized list header initialization.

2006-04-11 06:43  gb

	* level-1/l1-error-system.lisp, compiler/arch.lisp: Type errors for
	2d float arrays.

2006-04-10 10:19  gb

	* lisp-kernel/x86-spentry64.s: _SPcallback is now called with the
	foreign SP properly obeying C alignment conventions.  In order to
	get it aligned for lisp usage during the callback, an extra word
	needs to be pushed before the backpointer to the old foreign RSP.

2006-04-10 10:18  gb

	* lisp-kernel/x86-exceptions.c: Ensure that the copied sigcontext
	is 16-byte aligned, so that the foreign stack pointer is aligned
	according to C conventions when we enter the signal handler on that
	stack.

2006-04-10 10:13  gb

	* lib/numbers.lisp: Define FP infinities, since we're running with
	FP exceptions masked. (We don't handle FP exceptions on X8664 yet,
	but this was crashing due to ldmxcsr/stmxcsr confusion, not because
	an unmasked FP exception was raised and unhandled.)

2006-04-10 10:10  gb

	* lib/level-2.lisp: Remove the WARN and the conditionalization
	around bit/bitfield accessors on X8664.

2006-04-10 10:09  gb

	* level-0/X86/x86-float.lisp: Repeat after me: to load the mxcsr
	from memory, we say "ldmxcsr".	We want to do such a load in order
	to write new values into the mxcsr.  To store it in memory, we say
	"stmxcsr".  We want to do such a store (and a subsequent load from
	memory) in order to access the value of the mxcsr.  Simple, no ?

2006-04-10 10:07  gb

	* compiler/X86/: x862.lisp, X8664/x8664-vinsns.lisp:
	%GET-BIT/%SET-BIT.

2006-04-10 08:29  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Float
	addition/multiplication: either arg can overlap result (and often
	will).	Float subtraction/division: caller should ensure that
	result and second arg are disjoint.

2006-04-10 08:27  gb

	* compiler/X86/x862.lisp: Float arithmetic is two-address; ensure
	that result doesn't overlap second argument for non-commutative
	operations.

2006-04-10 08:26  gb

	* lisp-kernel/lisp-debug.c: Show FPRs on LinuxX8664.

2006-04-10 05:12  gb

	* lisp-kernel/thread_manager.c: Don't free dead TCRs if we didn't
	malloc them.

2006-04-10 05:12  gb

	* lib/compile-ccl.lisp: REBUILD-CCL paramaters for :LINUXX8664.

2006-04-10 05:11  gb

	* level-1/l1-pathnames.lisp: No need to reference PPC package, and
	good reason not to.

2006-04-10 04:39  gb

	* xdump/xfasload.lisp: signed 32-bit, 64-bit integers in fasl files
	are always big-endian.

2006-04-10 04:38  gb

	* lisp-kernel/x86-gc.c: mark_root(): if we're marking a function
	reachable via a TRA, update the variable "dnode" so that the
	correct bits get set.

2006-04-10 04:37  gb

	* level-0/X86/X8664/x8664-bignum.lisp: Remove some breakpoints.

2006-04-10 04:37  gb

	* level-0/X86/x86-array.lisp: %SIMPLE-BIT-BOOLE.  Could stand to be
	a bit simpler.

2006-04-10 04:36  gb

	* level-0/l0-hash.lisp: Whoops: %SET-NEEDS-REHASHING is called from
	the MAKE-LOAD-FORM method for hashtables.

2006-04-09 09:17  gb

	* lisp-kernel/thread_manager.c: Inflate control stack size on
	x8664, until DWS marker works (and do so correctly this time).

2006-04-09 09:12  gb

	* lisp-kernel/thread_manager.c: Inflate control stack size on
	x8664, until DWS marker works.

2006-04-09 09:09  gb

	* level-0/l0-hash.lisp: Now that bitvectors work, remove
	#+x86-target DBG trap.

2006-04-09 08:57  gb

	* level-0/l0-hash.lisp: Set/clear rehash bits via SBIT, not AREF. 
	(Should be exactly the same code, but may not have been 15 years
	ago or whenever this was written.)

2006-04-09 08:56  gb

	* lisp-kernel/x86-spentry64.s,
	compiler/X86/X8664/x8664-vinsns.lisp: Clear bits in a bit vector
	via btrX (Bit Test and Reset), not btcX (Bit Test and Complement.)

2006-04-09 03:52  gb

	* lisp-kernel/x86-macros.s: Parens around negative displacement in
	condition_to_boolean.  Not clear why this is necessary, but it
	seems to be.

2006-04-09 03:24  gb

	* lisp-kernel/x86-macros.s: Use shorter sequence in
	condition_to_boolean.

2006-04-09 02:32  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Using cmovCC intstead of
	setCC for cr-bit->boolean is 1 instruction and 2 bytes shorter, all
	other things being equal.

2006-04-09 01:37  gb

	* compiler/X86/x86-asm.lisp: reg/reg variants of bsfX, bsrX had
	operands backwards.

2006-04-09 01:37  gb

	* compiler/optimizers.lisp: Comment formatting.

2006-04-09 01:29  gb

	* level-0/X86/X8664/x8664-bignum.lisp: %BIGNUM-SIGN-DIGITS:
	bsr/xorl != clz when (zerop n).

2006-04-08 21:25  gb

	* lisp-kernel/x86-exceptions.c: Forget about blocking SIGINT in
	current thread before entering kernel debugger.

2006-04-08 21:21  gb

	* lib/compile-ccl.lisp: early def of XLOAD-LEVEL-0: require
	(TARGET-XLOAD-MODULES).

2006-04-08 21:21  gb

	* lisp-kernel/x86-spentry64.s: misc_set_s16: forgot a lognot.

2006-04-08 21:20  gb

	* level-0/nfasload.lisp: 64-bit vectors: target::, not ppc64::.

2006-04-08 20:46  gb

	* lib/foreign-types.lisp: Add missing paren ...

2006-04-08 20:45  gb

	* lib/foreign-types.lisp: Recognize a :struct-by-value case.

2006-04-08 20:44  gb

	* compiler/X86/X8664/x8664-backend.lisp: X8664 ABI seems to pass
	structs by value, sort of.

2006-04-08 20:43  gb

	* x86-headers64/libc/C/populate.sh: Add -D_GNU_SOURCE to CFLAGS.

2006-04-08 20:42  gb

	* library/hash-cons.lisp: Port some of this to x8664; need to add
	code to maintain "used" bitmap.

2006-04-08 20:42  gb

	* lib/numbers.lisp: Conditionalize out the FP infinity stuff in the
	short term.

2006-04-08 20:41  gb

	* lib/edit-callers.lisp: %MAP-LFIMMS: lfun-vector changes.  Should
	someday fix this crap.

2006-04-08 20:40  gb

	* lib/describe.lisp: Conditionalize, a little.

2006-04-08 20:40  gb

	* lib/db-io.lisp: SAVE-DB-FUNCTION appears to be unused.

2006-04-08 20:39  gb

	* level-1/l1-io.lisp: PRINT-A-NAN not #+ppc-target.

2006-04-08 20:39  gb

	* level-1/l1-readloop-lds.lisp: Error reentry stuff here.

2006-04-08 20:39  gb

	* level-1/l1-sockets.lisp: Workaround ffi translator lossage in
	_inet_ntoa (just as Darwin has for years; why not fix this ?)

2006-04-08 20:38  gb

	* level-1/ppc-trap-support.lisp: Error-reentry stuff to
	l1-readloop-lds (nothing to do with PPC or traps ...)

2006-04-08 20:37  gb

	* .cvsignore: Ignore *CL*/*cl*, not necessarily *CCL*/*ccl*.

2006-04-08 04:46  gb

	* compiler/X86/x862.lisp: X862-MVCALL needs to always save and
	restore, even if there's only one values-producing form (that form
	might produce more values than will fit in argument registers, and
	we therefore have to reserve space for a stack frame.)

2006-04-08 04:45  gb

	* compiler/X86/x86-asm.lisp: Need to actually define INSERT-IMM64.

2006-04-08 04:43  gb

	* lib/macros.lisp: Scanning backwards for instructions depends on a
	reasonable architecture.

2006-04-08 04:43  gb

	* lib/compile-ccl.lisp: TARGET-XLOAD-MODULES for x8664.

2006-04-08 04:42  gb

	* xdump/xfasload.lisp: Hide ppc32 double-float-vector stuff in
	target arch.

2006-04-08 04:41  gb

	* xdump/.cvsignore: ignore *.*fsl

2006-04-07 22:46  gb

	* compiler/nx.lisp: XCOMPILE-LAMBDA is #+ppc-target for now.

2006-04-07 22:45  gb

	* compiler/nx1.lisp: Provide an FTYPE declaration for
	%DEFINE-PPC-LAP-FUNCTION.

2006-04-07 22:25  gb

	* level-1/version.lisp: Bump.

2006-04-07 22:19  gb

	* compiler/PPC/ppc-asm.lisp, compiler/PPC/ppc-backend.lisp,
	compiler/PPC/ppc-disassemble.lisp, compiler/PPC/ppc-lap.lisp,
	lib/backtrace-lds.lisp: ARCH::OPCODE, ARCH::OPERAND moved to CCL
	package.

2006-04-07 22:18  gb

	* compiler/risc-lap.lisp: OPCODE, OPERAND moved here and from
	arch:: to ccl::.

2006-04-07 22:17  gb

	* compiler/arch.lisp: OPERAND, OPCODE belong elsewhere (in
	RISC-LAP, for instance).  That's a different package, too.

2006-04-07 20:46  gb

	* library/lispequ.lisp: %CONS-FAKE-STACK-FRAME here.  Really.

2006-04-07 20:45  gb

	* level-0/l0-pred.lisp: *IMMHEADER-1-TYPES* was wrong, too.  Should
	I maybe look at the others, or just fix them as I stumble on them ?

2006-04-07 20:44  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: jns->jne when checking for
	a DOUBLE-FLOAT.

2006-04-07 20:41  gb

	* level-0/nfasload.lisp: Print file pos in FASL-DISPATCH debug
	message.

2006-04-07 20:40  gb

	* lib/nfcomp.lisp: #+x8664: Check for fulltag-immheader-1, not
	fulltag-immheader-0 twice in fasl-scan-dispatch
	
	FASL-DUMP-SYMBOL needs a SYMPTR->SYMVECTOR.  (Note that FASLOAD has
	never handled uninterned symbols that need a binding index.)

2006-04-07 07:55  gb

	* lib/describe.lisp: Formatting changes, mostly.

2006-04-07 07:54  gb

	* compiler/X86/x862.lisp: multiple-value-calls need to reserve an
	outgoing stack frame when more than 3 args/ values are involved.

2006-04-07 07:53  gb

	* lisp-kernel/x86-spentry64.s, lisp-kernel/x86-spjump64.s,
	compiler/X86/X8664/x8664-arch.lisp,
	compiler/X86/X8664/x8664-vinsns.lisp: _SPrecover-values-for-mvcall
	(reserves outgoing frame if necessary.)

2006-04-07 07:52  gb

	* level-1/ppc-trap-support.lisp: %CONS-FAKE-STACK-FRAME moved to
	lispequ.

2006-04-07 06:28  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: pop argument regs in the
	right order.

2006-04-07 06:27  gb

	* level-0/X86/x86-misc.lisp: VALUES accounts for reserved frame.

2006-04-07 03:59  gb

	* compiler/X86/x862.lisp: Don't push the function on the "value"
	stack when doing a MULTIPLE-VALUE-CALL, since its presence there
	can interfere with multiple-value continuations.  (Can it be popped
	before recovering multiple values ?  I didn't think of that, but I
	suspect that that'd be simpler than what I did; check this.  Maybe
	there is -or once was- an issue with _SPrecovervalues bashing a
	register.)
	
	Pushing the function on the temp stack while collecting multiple
	values avoids the issue (but it may be far better to simply vpop it
	before the call to _SPrecovervalues.)
	
	Most of the issues related to X862-MVCALL calling itself
	recursively have to do with cleaning the function off of the stack
	in non tail-call cases.  Since the function's not there anymore,
	the rationale for splitting this into a base and recursive case
	isn't very strong.
	
	Changes in X862-MVCALL exposed bugs in X862-INVOKE-FN: we don't
	want to emit or otherwise reference the mvpass label if it's null.

2006-04-07 03:51  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: TEMP-PUSH-NODE,
	TEMP-POP-NODE.

2006-04-06 21:27  gb

	* lib/db-io.lisp: CDB-HASH-MASK happens to be =
	PPC32::TARGET-MOST-POSITIVE-FIXNUM.

2006-04-06 21:26  gb

	* level-1/x86-trap-support.lisp: Bugs, not worth describing in
	detail.

2006-04-06 21:25  gb

	* level-1/x86-error-signal.lisp: Bugs, not worth describing in
	detail ...

2006-04-06 21:24  gb

	* level-1/l1-lisp-threads.lisp: Simplify CFP-LFUN.

2006-04-06 21:23  gb

	* compiler/X86/X8664/x8664-backend.lisp: Fenceposts with the last
	gpr/fpr args.

2006-04-06 21:22  gb

	* compiler/X86/X8664/x8664-arch.lisp: tcr->linear_end ->
	tcr->save_rbp.

2006-04-06 21:21  gb

	* lisp-kernel/x86-spentry64.s: Maintain tcr->save_rbp on
	ffcall/callback.

2006-04-06 21:20  gb

	* lisp-kernel/x86-exceptions.c: Setup tcr->save_rbp when doing a
	callback.
	
	Pass rpc to %ERR-DISP, as it expects.

2006-04-06 21:19  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s:
	tcr->linear_end -> tcr->save_rbp.

2006-04-06 07:03  gb

	* lisp-kernel/x86-exceptions.c: Call out to handle errors.

2006-04-06 07:03  gb

	* lisp-kernel/linuxx8664/.gdbinit: Ignore more signals.

2006-04-06 06:44  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Use new UUOs for
	slot-boundp checks, eep.address.

2006-04-06 06:43  gb

	* compiler/X86/x862.lisp: X862-FIXUP-FWD-REFS: don't assume that
	functions are uvectors or that their constants start at index 1.
	
	PROGV: don't keep interrupts off in the body.

2006-04-06 05:58  gb

	* compiler/X86/x86-asm.lisp: RESOLVE-EEP uuo needs source and dest
	registers to be recoverable.
	
	Use (int ($ #x8x)) for SLOT-UNBOUND, since it needs slot-vector,
	index, and dest reg to be recoverable.
	
	Note that the use of this range of (int N) operands may lead to
	confusion on platforms that use int #x80 for syscalls.	That (a)
	doesn't apply to x8664, since SYSCALL is present and used on x8664
	and (b) would only be a problem if the dest reg was %rax, which it
	won't be.

2006-04-06 05:53  gb

	* lib/macros.lisp: DEFSETF for INTERRUPT-LEVEL here.

2006-04-06 05:53  gb

	* level-0/l0-init.lisp: Better (useful) X8664 *FEATURES*.

2006-04-06 05:52  gb

	* level-0/l0-hash.lisp: Remove some #+x86-target DBG traps.   Add a
	few fixnum decls in and around DO-REHASH.

2006-04-06 05:51  gb

	* level-0/X86/x86-def.lisp: %RETURN-ADDRESS-FUNCTION: if argument
	is a "real" tagged return address, return the associated function.

2006-04-06 05:50  gb

	* level-1/: x86-error-signal.lisp, x86-trap-support.lisp: Flesh
	this out some.	The FAKE-STACK-FRAME stuff isn't quite the right
	idea on X8664; may need to revise it.

2006-04-06 05:49  gb

	* level-1/ppc-trap-support.lisp: Remove HANDLE-GC-HOOKS.

2006-04-06 05:49  gb

	* level-1/ppc-threads-utils.lisp: DEFSETF for INTERRUPT-LEVEL moved
	... anywhere but a platform-specific file.

2006-04-06 05:48  gb

	* level-1/l1-events.lisp: HANDLE-GC-HOOKS isn't really
	platform-specific, so move it here.

2006-04-06 05:47  gb

	* level-1/: l1-clos-boot.lisp, l1-clos.lisp: Hashing code expects
	instance.hash to be a fixnum, so violating that expectation (as was
	done a few weeks ago for debugging) fouls things up royally.  This
	may have led to instability on PPC as well.

2006-04-06 05:44  gb

	* lisp-kernel/x86-exceptions.c: Return false (for now) on unhandled
	UUO.  (Need to merge code from another machine, which will try to
	call out to lisp.)

2006-04-06 05:43  gb

	* lisp-kernel/pmcl-kernel.c: register_sigint_handler on x8664.

2006-04-05 06:57  gb

	* lisp-kernel/x86-spentry64.s: nthrow variants: set %Rforeign_sp,
	not tcr slot.
	
	_SPcallback aligns the foreign stack the way that lisp expects.

2006-04-05 06:56  gb

	* lisp-kernel/x86-exceptions.c: Handle more stuff, including
	interrupt callbacks.

2006-04-05 06:55  gb

	* library/x8664-linux-syscalls.lisp: GETUID was wrong.

2006-04-05 06:55  gb

	* level-1/x86-trap-support.lisp: VERY early callback for interrupt
	handling.

2006-04-05 06:54  gb

	* level-1/l1-callbacks.lisp: Comment format

2006-04-05 06:54  gb

	* level-0/X86/x86-utils.lisp: Arg order in lap macros.

2006-04-05 06:54  gb

	* level-0/l0-pred.lisp: Get *IMMHEADER-2-TYPES* (or whatever it's
	called) right.

2006-04-05 06:53  gb

	* compiler/X86/X8664/x8664-backend.lisp: DEFCALLBACK guts for
	X8664.

2006-04-05 05:20  gb

	* lisp-kernel/x86-exceptions.c: Do some callbacks.  Let's see if
	they work yet.

2006-04-05 05:19  gb

	* lisp-kernel/x86-spentry64.s: Use interrupt-checking macros.  Fix
	callback typos.

2006-04-05 05:19  gb

	* lisp-kernel/x86-macros.s: Check for interrupts, and do so when we
	know that they've just become enabled.

2006-04-05 05:17  gb

	* lisp-kernel/x86-exceptions.c: Set high bit of tcr->interrupt
	pending when there's ... a pending interrupt.

2006-04-05 05:17  gb

	* lisp-kernel/x86-exceptions.h: Define xuuo stuff.

2006-04-04 21:47  gb

	* lisp-kernel/x86-spentry64.s: callback changes.

2006-04-04 21:47  gb

	* lisp-kernel/lisp-debug.c: rip "=", not "-".

2006-04-04 21:46  gb

	* lisp-kernel/linuxx8664/.gdbinit: Ignore SIGPWR, until we know
	better.

2006-04-04 18:51  gb

	* lisp-kernel/pmcl-kernel.c: Wimp out, back to 128GB for
	LinuxPPC64.

2006-04-04 18:50  gb

	* level-1/linux-files.lisp: Don't use %GET-NATURAL in Linux version
	of PIPE, since file descriptors are always C ints.

2006-04-04 18:03  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp,
	compiler/PPC/PPC64/ppc64-backend.lisp, lib/macros.lisp: callback
	implementation moved to the backend.

2006-04-04 18:02  gb

	* lib/arglist.lisp: ARGLIST-FROM-MAP: get &rest name right when
	&key is also present.

2006-04-04 16:10  gb

	* lisp-kernel/pmcl-kernel.c: linuxppc64 can't mmap 512GB; try
	256GB.

2006-04-04 15:52  gb

	* level-1/version.lisp: Bump. New images soon.

2006-04-04 15:52  gb

	* compiler/backend.lisp: Add slots for callback definition.

2006-04-04 15:52  gb

	* compiler/nx0.lisp: Remove a #-bccl.

2006-04-04 15:26  gb

	* lisp-kernel/x86_print.c: print_unsigned_hex: conditionalize on
	word size.

2006-04-04 15:26  gb

	* lisp-kernel/x86-spentry64.s: First cut of _SPcallback.

2006-04-04 15:26  gb

	* lisp-kernel/x86-macros.s: Catch frames save foreign sp from
	register, not from tcr slot.

2006-04-04 15:25  gb

	* lisp-kernel/x86-exceptions.c: Uncomment the body of
	interrupt_handler.

2006-04-04 15:18  gb

	* compiler/lambda-list.lisp: %LFUN-INFO & friends: do
	(FUNCTION-TO-FUNCTION-VECTOR).

2006-04-04 15:18  gb

	* compiler/X86/x86-lapmacros.lisp: check-nargs: bad comparison on
	max when both min and max.

2006-04-04 15:18  gb

	* lib/macros.lisp: spurious checkin; no real change

2006-04-03 23:01  gb

	* lisp-kernel/x86-gc.c: Make purify() a nop, for now.

2006-04-03 22:43  gb

	* scripts/openmcl64: Maybe (check for x8664 Linux is untested).

2006-04-03 22:42  gb

	* lisp-kernel/bits.h: Constants are word-size (not CPU-variant)
	-specific.

2006-04-03 22:42  gb

	* lisp-kernel/pmcl-kernel.c: 512GB MAXIMUM_MAPPABLE_MEMORY on
	x8664/Linux as well.

2006-04-03 22:41  gb

	* lisp-kernel/ppc-gc.c: Remove X86 conditionalization.	Maybe merge
	x86-gc.c and ppc-gc.c back into a single file someday (or at least
	put truly shared code there),but for now this is simpler.

2006-04-03 22:38  gb

	* lisp-kernel/x86-exceptions.c: A little more infrastructure, so
	that we can actually call the GC.

2006-04-03 22:37  gb

	* lisp-kernel/x86-exceptions.h: Define UUO, trap opcodes.

2006-04-03 22:36  gb

	* lisp-kernel/x86-gc.c: It's ... alive.

2006-04-03 22:36  gb

	* lisp-kernel/x86-spentry64.s: Use new vector bounds traps. How
	about boundp checks ?

2006-04-03 22:35  gb

	* lisp-kernel/x86-uuo.s: New uuo definitions.

2006-04-03 22:35  gb

	* lib/macros.lisp: DO-GC-AREAS,which is one of those macro things,
	moved here. Uses archmacro AREA-SUCC (defined here) to avoid
	TARGET-ARCH-CASE lossage.

2006-04-03 22:34  gb

	* level-1/l1-lisp-threads.lisp: DO-GC-AREAS,which is one of those
	macro things, moved to macros.lisp.

2006-04-03 22:33  gb

	* level-0/X86/x86-misc.lisp: Zero out all of the write-lock's
	writer slot, not just the low half.

2006-04-03 22:32  gb

	* level-0/PPC/ppc-utils.lisp: TRUE, FALSE : cmplr vs cmplri. 
	Typical rookie PPC assembler mistake ...

2006-04-03 22:31  gb

	* level-0/l0-misc.lisp: %FREEBYTES looked like a job for
	%GET-NATURAL.

2006-04-03 22:31  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Use newfangled UUOs.

2006-04-03 22:30  gb

	* compiler/X86/x86-asm.lisp: Add UUO-ERROR-UNBOUND,
	UUO-ERROR-SLOT-UNBOUND, UUO-ERROR-EEP-UNRESOLVED.

2006-04-03 22:29  gb

	* compiler/: PPC/PPC32/ppc32-arch.lisp, PPC/PPC64/ppc64-arch.lisp,
	X86/X8664/x8664-arch.lisp: AREA-SUCC archmacro.

2006-04-01 23:36  gb

	* lisp-kernel/x86-exceptions.h: xpMMXreg, sigaltstack stuff.

2006-04-01 23:35  gb

	* lisp-kernel/x86-exceptions.c: take signals on an alternate signal
	stack, run the handler on the foreign stack (this is all intended
	to keep signal handlers from splatting sigcontexts all over the
	tagged lisp stack.)

2006-04-01 23:33  gb

	* lisp-kernel/x86-constants64.h: mmx register indices.

2006-04-01 23:33  gb

	* lisp-kernel/x86-asmutils64.s: switch_to_foreign_stack().

2006-04-01 23:32  gb

	* lisp-kernel/thread_manager.c: register_cstack_holding_area_lock()
	takes a natural stack size.

2006-04-01 23:32  gb

	* lisp-kernel/pmcl-kernel.c: register_cstack_holding_area_lock()
	takes a natural stack size, sets up alternate signal stack if
	USE_SIGALTSTACK.

2006-04-01 23:31  gb

	* lisp-kernel/lisp.h: USE_SIGALTSTACK if X8664.  (Might someday
	depend on platform.)

2006-03-31 23:15  gb

	* lisp-kernel/linuxx8664/Makefile: gc.o -> x86-gc.o

2006-03-31 23:00  gb

	* lisp-kernel/x86-gc.c: New file; currently, an exact copy of
	ppc-gc.c, but they'll diverge some soon.

2006-03-31 22:56  gb

	* lisp-kernel/: linuxppc/Makefile, linuxppc64/Makefile,
	static-linuxppc/Makefile: gc.o -> ppc-gc.o

2006-03-31 22:52  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile: gc.o ->
	ppc-gc.o

2006-03-31 22:51  gb

	* lisp-kernel/area.h: Need prototype for heap_area_containing(). 
	heap_node_area_containing(), which doesn't exist ... not so much.

2006-03-31 22:50  gb

	* lisp-kernel/memory.c: Some functions moved here from gc.c before
	it was renamed/split.

2006-03-31 22:48  gb

	* lisp-kernel/gc.c: rename/split

2006-03-31 22:46  gb

	* lisp-kernel/ppc-gc.c: renamed

2006-03-31 00:54  gb

	* lisp-kernel/x86-spentry64.s: Progvsave, progvrestore seem to
	work.
	
	Not sure about the tail end of the multiple-value case of THROW,
	but at least it's there.

2006-03-31 00:53  gb

	* library/x8664-linux-syscalls.lisp: still need work, but more
	stuff (including socket syscalls) are defined now.

2006-03-31 00:52  gb

	* level-1/version.lisp: Bump.

2006-03-31 00:52  gb

	* level-1/l1-sockets.lisp: Conditionalize lots for x8664.

2006-03-31 00:51  gb

	* level-0/X86/x86-def.lisp: No debug trap in %CFP-LFUN.

2006-03-31 00:50  gb

	* level-0/l0-init.lisp: Simplify *FEATURES* init a little.  Try to
	ensure that :linuxx8664-target is there if it should be.

2006-03-31 00:46  gb

	* compiler/X86/X8664/x8664-arch.lisp: Define
	MAX-8-BIT-IVECTOR-SUBTAG, too.

2006-03-30 03:23  gb

	* level-1/l1-aprims.lisp: ELEMENT-SUBTYPE-TYPE for x8664.

2006-03-30 03:22  gb

	* level-1/l1-boot-2.lisp: Load some x8664 files,

2006-03-30 03:21  gb

	* level-1/l1-boot-3.lisp: Comments and formatting.

2006-03-30 03:20  gb

	* level-1/l1-clos-boot.lisp: Some x8664 changes.

2006-03-30 03:20  gb

	* level-1/l1-clos.lisp: Use REPLACE-FUNCTION-CODE another time or
	two.
	
	Set class's INSTANCE.HASH slots to class name, to make classes
	easier to identify in kernel debugger.	(Might not want to keept
	this, but could set/clear a bit there.)

2006-03-30 03:18  gb

	* level-1/: l1-files.lisp, l1-dcode.lisp: Comments and formatting
	changes only.

2006-03-30 03:17  gb

	* level-1/l1-lisp-threads.lisp: Start to move some stuff into
	platform-dependent files.

2006-03-30 03:16  gb

	* level-1/: l1-pathnames.lisp, l1-numbers.lisp: Conditionalize.

2006-03-30 03:16  gb

	* level-1/l1-streams.lisp: 64-bit conditionalization, and x8664
	stuff.

2006-03-30 03:15  gb

	* level-1/l1-typesys.lisp: 64-bit array type on all (both) 64-bit
	platforms.

2006-03-30 03:13  gb

	* level-1/l1-utils.lisp: TRUE and FALSE now in LAP.

2006-03-30 03:13  gb

	* level-1/level-1.lisp: Load "new" x8664 files.

2006-03-30 03:12  gb

	* level-1/linux-files.lisp: Conditionalize some for x8664.

2006-03-30 03:12  gb

	* level-1/ppc-threads-utils.lisp: Some stuff moved here from
	l1-lisp-threads.

2006-03-30 03:11  gb

	* lib/compile-ccl.lisp: X8664-related changes.

2006-03-30 03:11  gb

	* lib/foreign-types.lisp: Setup host-ftd based on compile-time
	target.  Yow, recursion.

2006-03-30 03:10  gb

	* lib/macros.lisp: LET-GLOBALLY deals with symptr/symvector stuff.

2006-03-30 03:10  gb

	* lib/misc.lisp: Fix Linux MACHINE-INSTANCE.
	
	Move DISASSEMBLE and interface here.

2006-03-30 03:09  gb

	* lib/nfcomp.lisp: Conditionalize for x8664; dump native functions
	via fasl-clfun.

2006-03-30 03:08  gb

	* lib/prepare-mcl-environment.lisp: Needed symptr/symvector stuff.

2006-03-30 03:08  gb

	* lib/systems.lisp: Add new x86 level-1 stuff; remove some truly
	ancient MCLisms.

2006-03-30 03:06  gb

	* library/x8664-linux-syscalls.lisp: Some fixes and additions, but
	still needs lots of work.

2006-03-30 03:06  gb

	* lisp-kernel/x86_print.c: If instance.hash of an instance isn't a
	fixnum, treat it as a class name.  (Hard to otherwise recognize
	classes from the kernel.)

2006-03-30 03:04  gb

	* lisp-kernel/x86-spjump64.s: rename poweropen_callback ->callback.

2006-03-30 03:04  gb

	* lisp-kernel/x86-spentry64.s: Lots of bug fixes.
	
	Multiple-value THROW still needs work, and CALLBACK still needs to
	be written (both sides).

2006-03-30 03:02  gb

	* lisp-kernel/x86-constants64.s: No FPSCR here, but an MXCSR.

2006-03-30 03:01  gb

	* lisp-kernel/ppc-spentry.s: Error call in misc_set_invalid
	involves 4 args.

2006-03-30 03:00  gb

	* lisp-kernel/pmcl-kernel.c: Larger GC defaults if 64-bit, not just
	PPC64.
	
	Insist on Linux kernel 2.6 if x8664 linux.

2006-03-30 02:59  gb

	* lisp-kernel/plsym.c: Missing #\% in format string.

2006-03-30 02:56  gb

	* lisp-kernel/linuxx8664/.gdbinit: More stuff.

2006-03-30 02:55  gb

	* level-1/: x86-callback-support.lisp, x86-error-signal.lisp,
	x86-threads-utils.lisp, x86-trap-support.lisp: Nee files.

2006-03-30 02:54  gb

	* level-0/X86/X8664/x8664-bignum.lisp: Remove debug traps from
	things that're believed to be working.

2006-03-30 02:54  gb

	* level-0/X86/x86-utils.lisp: CLASS-OF changes/fixes.  Move
	#'TRUE/#'FALSE here.

2006-03-30 02:53  gb

	* level-0/X86/x86-symbol.lisp: %SYMPTR->SYMBOL: check for nilsym,
	not NIL.

2006-03-30 02:52  gb

	* level-0/X86/x86-numbers.lisp: %FIXNUM-TRUNCATE: return results in
	the right order.
	
	%IASL: shift the right register.

2006-03-30 02:51  gb

	* level-0/X86/x86-misc.lisp: Fix %FUDGE-HEAP-POINTER; define
	INTERRUPT-LEVEL.

2006-03-30 02:51  gb

	* level-0/X86/x86-float.lisp: %get-mxcsr stores the mxcsr in memory
	so that we can load it into a fixnum.

2006-03-30 02:50  gb

	* level-0/X86/x86-def.lisp: %CFP-LFUN: try to recognize
	multiple-value returning calls, return NIL if tra offset is 0.

2006-03-30 02:49  gb

	* level-0/X86/x86-clos.lisp: Remove debug traps; use registers
	sanely in the SETF case.

2006-03-30 02:48  gb

	* level-0/PPC/ppc-utils.lisp: Implement TRUE and FALSE in LAP.

2006-03-30 02:48  gb

	* level-0/PPC/ppc-clos.lisp: Change the name of a constant that'll
	get clobbered when this is cloned anyway.  (Is that clear ?)

2006-03-30 02:47  gb

	* level-0/l0-pred.lisp: %TYPE-OF fixes for x8664.
	
	We haven't had interpreted functions for a few years.

2006-03-30 02:46  gb

	* level-0/l0-float.lisp: %SET-DOUBLE-FLOAT-EXP: endianness, use
	symbolic constant for high word.

2006-03-30 02:45  gb

	* level-0/l0-array.lisp: SUBTAG-BYTES for X8664.

2006-03-30 02:45  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Lots of bug fixes.

2006-03-30 02:44  gb

	* compiler/X86/X8664/x8664-arch.lisp: REQUIRE what we need.
	
	Get CATCH-FRAME definition right.
	
	.SPpoweropen-callback -> .SPcallback.

2006-03-30 02:43  gb

	* compiler/X86/x862.lisp: Lots of changes and bugfixes.

2006-03-30 02:42  gb

	* compiler/X86/x86-lap.lisp: Avid path in REQUIRE; create native
	functions.

2006-03-30 02:42  gb

	* compiler/X86/x86-disassemble.lisp: Run natively: provide
	X8664-XDISASSEMBLE.

2006-03-30 02:41  gb

	* compiler/X86/x86-asm.lisp: Assemble things (uuos) with a "pseudo"
	ModRM byte, which allows encoding two 4-bit x8664 registers in a
	single byte.

2006-03-30 02:40  gb

	* compiler/X86/x86-arch.lisp: Need to explicitly (REQUIRE "ARCH").

2006-03-30 02:39  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Define high and low 32-bit
	parts of a DOUBLE-FLOAT.

2006-03-30 02:39  gb

	* compiler/PPC/ppc-disassemble.lisp: DISASSEMBLE and
	FUNCTION-FOR-DISASSEMBLY moved elsewhere.

2006-03-25 20:47  gb

	* lisp-kernel/lisp-debug.c: Fix x8664 lisp register display.

2006-03-25 20:42  gb

	* lib/ccl-export-syms.lisp: Fix export of CCL::GETENV and
	CCL::SETENV.

2006-03-25 20:37  gb

	* lisp-kernel/x86-spentry64.s: Dozens of bug fixes.
	
	Do uvref (not yet uvset) via jump table.

2006-03-25 20:36  gb

	* lisp-kernel/x86-macros.s: Do arithmetic correctly in Cons macro.
	
	Split up Misc_Alloc.

2006-03-25 20:34  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s: Tag juggling.

2006-03-25 20:34  gb

	* lisp-kernel/ppc_print.c: Identify SLOT-VECTORs in kernel
	debugger.

2006-03-25 20:33  gb

	* lisp-kernel/errors.s: Add some error numbers for uvref/uvset
	failures that should never happen.

2006-03-25 20:32  gb

	* lisp-kernel/lisp-debug.c: Change x8664 lisp register display.

2006-03-25 20:32  gb

	* lisp-kernel/gc.c: IMPURIFY: maybe grow the dynamic area, but
	don't shrink it.

2006-03-25 20:31  gb

	* lisp-kernel/plsym.c: Symbol address may be longer than 32 bits.

2006-03-25 20:31  gb

	* lisp-kernel/: ppc-constants32.h, ppc-constants32.s: sgbuf has
	been lisp_thread for the past few years.

2006-03-25 20:30  gb

	* lisp-kernel/ppc-spentry.s: Do uvref/uvset via jump tables. 
	(Fewer branches, more redundancy.)

2006-03-25 20:29  gb

	* lisp-kernel/x86_print.c: Identify SLOT-VECTORs.  Print TRAs.

2006-03-25 20:28  gb

	* lisp-kernel/xlbt.c: Skip over lexpr nonsense.

2006-03-25 20:28  gb

	* lisp-kernel/linuxx8664/.gdbinit: More GDB macros.

2006-03-25 20:27  gb

	* library/lispequ.lisp: %GF-DISPATCH-TABLE-REF uses %SVREF.

2006-03-25 20:26  gb

	* lib/misc.lisp: MACHINE-VERSION caches the result per-session;
	looks in /proc/cpuinfo for something machine-dependent on Linux,
	passes 64-bit stuff on DarwinPPC64.

2006-03-25 20:25  gb

	* lib/macros.lisp: LFUN-BITS-KNOWN-FUNCTIONS uses arch macros to
	access function vector.

2006-03-25 20:23  gb

	* level-1/version.lisp: Bump.

2006-03-25 20:23  gb

	* level-1/l1-io.lisp: No more interpreted functions.

2006-03-25 20:23  gb

	* level-1/l1-dcode.lisp: Mostly comment and formatting changes.

2006-03-25 20:22  gb

	* level-1/l1-clos.lisp: Fix typos in x86 function cloning;
	comment/formatting changs.

2006-03-25 20:21  gb

	* level-1/l1-clos-boot.lisp: Lots of formatting changes; try to use
	DEFGLOBAL, since special variable lookup is ~10 instructions or so.

2006-03-25 20:20  gb

	* level-1/l1-boot-1.lisp: HOST-PLATFORM, PLATFORM-DESCRIPTION:
	generalize, a little.

2006-03-25 20:19  gb

	* level-1/l1-aprims.lisp: LFUN-KEYVECT access function vector, if
	that's not the function.  NREVERSE checks for NIL, mostly so I
	wouldn't have to single-step through that case in GDB.

2006-03-25 20:18  gb

	* level-0/X86/X8664/x8664-bignum.lisp: Shift in the correct
	direction, sign-extend (or don't) as apropriate, etc.  Still some
	debug traps on things that haven't been called yet.

2006-03-25 20:17  gb

	* level-0/X86/x86-utils.lisp: CLASS-OF fixes.

2006-03-25 20:17  gb

	* level-0/X86/x86-pred.lisp: If the recursive list case of EQUAL
	fails, fail; don't fall into the uvector case ...

2006-03-25 20:16  gb

	* level-0/X86/x86-numbers.lisp: Fenceposts in fixnum
	integer-length.

2006-03-25 20:15  gb

	* level-0/X86/x86-hash.lisp: Strip-tag-to-fixnum without shifts.

2006-03-25 20:15  gb

	* level-0/X86/x86-def.lisp: Stuff here seems to work, so far ...

2006-03-25 20:14  gb

	* level-0/X86/x86-clos.lisp: debug traps on slot-lookup LAP
	prototypes.

2006-03-25 20:12  gb

	* level-0/l0-pred.lisp: rearrange %type-of for tag changes.

2006-03-25 20:12  gb

	* level-0/l0-numbers.lisp: No need to specify an initial value 0
	when stack-consing a bignum in %BIGNUM-RANDOM.	Add a fixnum decl
	or two.

2006-03-25 20:11  gb

	* level-0/l0-hash.lisp: Symbol aren't (necessarily) uvectors. X86
	breakpoints if we hash any symbols ...

2006-03-25 20:09  gb

	* level-0/l0-bignum64.lisp: Um, most of this is supposed to be
	#+64-bit-target, not #+ppc64-target.

2006-03-25 20:09  gb

	* compiler/X86/X8664/x8664-vinsns.lisp:
	SET-CLOSURE-FORWARD-REFERENCE: functions aren't uvectors.
	
	Lots of other changes/fixes.

2006-03-25 20:08  gb

	* compiler/X86/X8664/x8664-arch.lisp: Tag reorganization.
	
	MISC-SYMBOL-OFFSET, MISC-FUNCTION-OFFSET.
	
	FUNCTION-TO-FUNCTION-VECTOR, FUNCTION-VECTOR-TO-FUNCTION arch
	macros have something to do here.

2006-03-25 20:06  gb

	* compiler/X86/x862.lisp: Some operators can push results directly.
	
	Lots of bug fixes.

2006-03-25 20:05  gb

	* compiler/X86/x86-asm.lisp: CMPB: accept signed/unsigned
	immediate.

2006-03-25 20:04  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp: Arch
	macros for FUNCTION-TO-FUNCTION-VECTOR and
	FUNCTION-VECTOR-TO-FUNCTION.
	
	(NOPs.)

2006-03-25 20:03  gb

	* compiler/optimizers.lisp: MACPTRP.

2006-03-25 20:03  gb

	* compiler/nx.lisp: COMPILE: don't check for INTERPRETED-FUNCTION,
	unless/until we have them again (in some form.)

2006-03-20 10:05  gwking

	* lib/ccl-export-syms.lisp: Exporting getenv and setenv from CCL

2006-03-19 20:30  gb

	* lisp-kernel/x86-spentry64.s: Old-style destructuring, VALUES.

2006-03-19 20:29  gb

	* lisp-kernel/x86-constants64.s: Define %nargs_b.

2006-03-19 20:29  gb

	* lisp-kernel/x86-constants.s: Define registers/bitfields used in
	old-style destructuring subprims.

2006-03-19 20:28  gb

	* library/lispequ.lisp: $XNOFINFUNCTION.

2006-03-19 20:27  gb

	* lib/level-2.lisp: Conditionalize out bit, bitfield accessors
	until they work ...

2006-03-19 20:27  gb

	* lib/backtrace-lds.lisp: Conditionalize
	GET-REGISTER-VALUE/SET-REGISTER-VALUE catch frame access.

2006-03-19 20:26  gb

	* level-1/: l1-clos-boot.lisp, l1-clos.lisp, l1-dcode.lisp:
	Conditionalize, mostly for whether the implementation has separate
	code-vector and function objects or not. (ppc vs x86, for now.)

2006-03-19 20:25  gb

	* level-0/X86/x86-numbers.lisp: %FIXNUM-GCD.  Slower then the one
	that counts bits, but doesn't need as many registers.

2006-03-19 20:24  gb

	* level-0/X86/x86-def.lisp: Do the lexpr/methd-context apply stuff.
	 %X86-CLONE-FUNCTION, REPLACE-FUNCTION-CODE.
	
	Wouldn't hurt to do some typechecking in some of the lap code here.

2006-03-19 20:22  gb

	* level-0/X86/x86-clos.lisp: Yet.

2006-03-19 20:22  gb

	* level-0/PPC/ppc-def.lisp: REPLACE-FUNCTION-CODE abstraction.

2006-03-19 20:22  gb

	* level-0/PPC/ppc-clos.lisp: UNSET-FIN-TRAMPOLINE doesn't reference
	constants.  (This could neve  have worked.)

2006-03-19 20:21  gb

	* level-0/l0-error.lisp: Replace error format string 9.

2006-03-19 20:20  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: &lexpr fixes, old-style
	destructuring.

2006-03-19 20:20  gb

	* compiler/X86/X8664/x8664-arch.lisp: Add the xtra slot to
	lisp-frame.  yield syscall, gf-code-size.

2006-03-19 20:19  gb

	* compiler/X86/x862.lisp: Fix some lexpr confusion, mv-call
	recursive problems.

2006-03-19 20:18  gb

	* compiler/X86/x86-lapmacros.lisp: SAVE-FRAME-VARIABLE-ARG-COUNT,
	CALL-SUBPRIM.

2006-03-19 20:17  gb

	* compiler/X86/x86-lap.lisp: Support :CODE-SIZE and :ORG
	directives.  Change :CONSTANTS to :FIXED-CONSTANTS.

2006-03-19 20:16  gb

	* compiler/nx1.lisp: Can use MAKE-ARRAY rather than MAKE-SEQUENCE.

2006-03-17 23:38  gb

	* xdump/xfasload.lisp: Special case references to NIL in package
	htabs.
	
	Leave deleted markers behind for symbols that we haven't seen
	references to; leave empty (0) words empty.

2006-03-17 23:36  gb

	* lisp-kernel/linuxx8664/.gdbinit: Add a few lisp debugging things.

2006-03-17 23:36  gb

	* lisp-kernel/xlbt.c: Recognize multiple-value returning frames and
	find the real tra underneath ret1valn.

2006-03-17 23:35  gb

	* lisp-kernel/x86-spentry64.s: "gen" tcalls had the same bug as the
	known-stack-args cases did several days ago.

2006-03-17 23:34  gb

	* lisp-kernel/x86-macros.s: New do_funcall().

2006-03-17 23:33  gb

	* lisp-kernel/x86-exceptions.c: When we field an alloc trap, make
	sure that both the allocptr register and the save_allocptr slot in
	the TCR are updated and consistent with each other.

2006-03-17 23:32  gb

	* lisp-kernel/x86-constants64.h: A lisp frame may have two return
	addresses (one for the multiple-value mechanism and the real one.)

2006-03-17 23:31  gb

	* lisp-kernel/plsym.c: If there's such a thing as fulltag_symbol,
	try to use it.

2006-03-17 23:29  gb

	* level-0/X86/x86-symbol.lisp: Symptr/symvector deconflation.

2006-03-17 23:28  gb

	* level-0/X86/x86-pred.lisp: Add %LISP-LOWBYTE-REF; could be
	open-coded (and may once have been.)

2006-03-17 23:27  gb

	* level-0/nfasload.lisp: Some SYMPTR->SYMVECTOR usage.	Define
	%FASL-READ-SIGNED-LONG;  use it in a few places.  Assume that
	scalar integers are stored big-endian; construct native-endian
	integers from them.

2006-03-17 23:26  gb

	* level-0/l0-symbol.lisp: Lots of SYMPTR->SYMVECTOR usage.

2006-03-17 23:25  gb

	* level-0/l0-pred.lisp: Do %TYPE-OF for x8664.

2006-03-17 23:24  gb

	* level-0/l0-def.lisp: Use SYMPTR->SYMVECTOR where necessary, so
	that we can %SVREF around in symbols.
	
	A little light reorganization, to make it easier to add debugging
	breakpoints for things like FUNCTION-NAME.

2006-03-17 23:22  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Kinder, gentler
	CHECK-MISC-BOUND.  (What was I thinking ?)
	
	More cleanup to FUNCALL and variants.
	
	MAKE-TSP-CONS: fix braindamage, use only one register.	(Need to
	write down pc-luser-xp constraints for TSP allocation, but I think
	that this meets the current artist's conception of them.)
	
	%SYMBOL->SYMPTR does what it does on other platforms (e.g., map NIL
	to a proxy symbol and/or insist on a real symbol.) 
	%SYMPTR->SYMVECTOR maps something tagged as a symbol to the
	underlying uvector by playing with tag bits, and %SYMVECTOR->SYMPTR
	does the inverse.
	
	There were two definitions of %SCHARCODE in the file; the later one
	(that took effect) was completely wrong.

2006-03-17 23:05  gb

	* compiler/X86/X8664/x8664-arch.lisp: Add HONS fields to AREA
	definition.
	
	SYMVECTOR->SYMPTR and its inverse don't do much, but it's not worth
	spending a function call to do a little.

2006-03-17 23:03  gb

	* compiler/X86/x862.lisp: Don't sign-extend the $LFBITS-NONAME-BIT;
	doing so had to do with 29-bit fixnums on an old 68K
	implementation.
	
	Fix parenthesization in %i-, so that we branch in all cases that
	need to.
	
	Implement %SYMPTR->SYMVECTOR and %SYMVECTOR->SYMPTR, which change
	something tagged X8664::FULLTAG-SYMBOL into the underlying uvector
	and back again.

2006-03-17 22:59  gb

	* compiler/X86/x86-lap.lisp: Change the sign of TRA displacements,
	to match what the compiler expects and what some other things do.
	
	When checking to see if an ASSUMED-SHORT[-CONDITIONAL]-BRANCH can
	use a 1-byte branch displacement, get the sign of that displacment
	right.	(Doing it the wrong way was encoding a forward branch to a
	label 128 bytes away in one byte, which made it a backward branch
	128 bytes away ...)

2006-03-17 22:55  gb

	* library/lispequ.lisp: Use NTH-IMMEDIATE to access COMBINED-METHOD
	slots.

2006-03-17 22:54  gb

	* lib/nfcomp.lisp: Comments clarify that scalar integers are always
	dumped big-endian.  (They have to be read/written a byte at a time
	anyway; there's no clear advantage in writing them in native
	endianness.)

2006-03-17 22:52  gb

	* lib/macros.lisp: SYMPTR->SYMVECTOR and SYMVECTOR->SYMBOL are
	arch-specfic (NOP on PPC, inlined tag-bits stuff on x8664.)

2006-03-17 22:50  gb

	* level-1/l1-dcode.lisp: Star to conditionalize, a little.

2006-03-17 22:48  gb

	* level-1/l1-boot-2.lisp: Conditionalize.

2006-03-17 22:48  gb

	* level-1/: l1-callbacks.lisp, l1-utils.lisp: Comment formatting.

2006-03-17 22:45  gb

	* compiler/PPC/: ppc2.lisp, PPC32/ppc32-arch.lisp,
	PPC64/ppc64-arch.lisp: %SYMPTR->SYMVECTOR and %SYMVECTOR->SYMPTR
	shold never be called on PPC, but implement them as idenity
	operations, just in case.

2006-03-17 22:44  gb

	* compiler/: nx1.lisp, nxenv.lisp: Worth inlining
	%SYMPTR->SYMVECTOR on x8664 (should never happen on PPC, but treat
	it as identity function there.)

2006-03-16 02:03  gb

	* level-1/l1-sockets.lisp: Spell LINUX correctly.

2006-03-16 02:00  gb

	* lisp-kernel/x86-spentry64.s: We were inlining NTH-VALUE
	incorrectly, but were always inlining it.
	
	Use debug traps to catch some cases that're NYI.

2006-03-16 01:58  gb

	* lisp-kernel/lisp-debug.c: X8664 register-printing changes.

2006-03-16 01:58  gb

	* library/parse-ffi.lisp: Treat VEC64/VEC128 like large integers,
	for now.

2006-03-16 01:57  gb

	* library/lispequ.lisp: gf accessors use NTH-IMMEDIATE.

2006-03-16 01:56  gb

	* lib/numbers.lisp: Conditionaliz on target word size.

2006-03-16 01:56  gb

	* lib/nfcomp.lisp: Need to be aware of cases where host/target
	endianness differ.
	
	Byte-swap 16/32-bit constant ivectors; note that other cases may
	also need byte-swapping.

2006-03-16 01:54  gb

	* lib/macros.lisp: NTH-IMMEDIATE is arch-specific; so is
	SET-NTH-IMMEDIATE, which is its SETF inverse.

2006-03-16 01:53  gb

	* lib/foreign-types.lisp: So far, Darwin's the only platform that
	uses signed chars.  (For a good laugh, note that the PPC has an
	unsigned "load byte" instruction, but it takes two instructions to
	treat char as signed.  This is, of course, much less significant
	than all of the other things that are wrong about Darwin ...)

2006-03-16 01:51  gb

	* lib/compile-ccl.lisp: RISC-LAP is PPC-specific (and maybe
	specific to other RISC architectures).	X86-DISASSEMBLE should be
	built for x8664.

2006-03-16 01:49  gb

	* lib/backtrace-lds.lisp: Some conditinalization.

2006-03-16 01:48  gb

	* tools/.cvsignore, library/.cvsignore: Ignore fasl extensions yet
	to come.

2006-03-16 01:46  gb

	* level-1/version.lisp: Bump.

2006-03-16 01:46  gb

	* level-1/l1-sockets.lisp: Some conditionalization; need more, and
	need to handle wrong-endianness.

2006-03-16 01:44  gb

	* level-1/l1-lisp-threads.lisp: %KERNEL-GLOBAL-OFFSET-FORM:
	probably should lose this.  It's a function, and therefore has some
	trouble accessing the right (macroexpand-time) backend.

2006-03-16 01:43  gb

	* level-1/l1-files.lisp: Set *.FASL-PATHAME* via #.'ed reference to
	target backend.

2006-03-16 01:42  gb

	* level-1/l1-clos-boot.lisp: Conditionalize a little.

2006-03-16 01:42  gb

	* level-1/l1-aprims.lisp: Use #. to set OS package name fron
	backend/ftd.

2006-03-16 01:41  gb

	* level-0/X86/x86-symbol.lisp: %SYMPTR->SYMBOL is often called with
	real (tagged) symbols; make it a nop in that case.

2006-03-16 01:40  gb

	* level-0/X86/x86-def.lisp: %SET-NTH-IMMEDIATE.

2006-03-16 01:40  gb

	* level-0/X86/x86-clos.lisp: Start some of this. Still need to
	decide whether to use lexprs; better decide soon.

2006-03-16 01:38  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: TRAP-UNLESS-CHARACTER. 
	Float memory accessors/setters for the constant-offset case. 
	NTH-VALUE was wrong; now simpler.  MAKE-TSP-VCELL.  Binding
	subprims.
	
	Yet another FUNCALL scheme.

2006-03-16 01:36  gb

	* level-0/l0-symbol.lisp: MAKE-SYMBOL returns the symbol pointer. 
	Maybe conditionalize this for X8664.

2006-03-16 01:35  gb

	* level-0/l0-io.lisp: Hopefully, the "split" 64-bit lseek is at
	best LinuxPPC32-specific.

2006-03-16 01:34  gb

	* compiler/X86/x862.lisp: Use %ra0 for the inner function when
	making a closure, to avoid conflicts with other temps.	No need to
	reference memory on self-calls (and good reasons not to ...)
	X862-UNBOXED-INTEGER-ARG-TO-REG handles 64-bit regs.

2006-03-16 01:31  gb

	* compiler/X86/x86-lapmacros.lisp: EXTRACT-TYPECODE: use a GENSYMed
	label.

2006-03-16 01:30  gb

	* compiler/X86/x86-lap.lisp: New stuff for "pre-allocated"
	constants.

2006-03-16 01:29  gb

	* compiler/X86/x86-arch.lisp: Didn't have the relatively recent
	STACK-SIZE.

2006-03-16 01:29  gb

	* compiler/X86/X8664/x8664-arch.lisp: Change the
	%GET-KERNEL-GLOBAL[-PTR] archmacros, so that they'll work with
	cross-compilation.  Fixnum offsets aren't supported; they weren't
	used, this isn't public, and it wasn't well-defined anyway.
	
	Add %NTH-IMMEDIATE.

2006-03-16 01:28  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp:
	Change the %GET-KERNEL-GLOBAL[-PTR] archmacros, so that they'll
	work with cross-compilation.  Fixnum offsets aren't supported; they
	weren't used, this isn't public, and it wasn't well-defined anyway.

2006-03-14 14:08  gb

	* binppc/.cvsignore, l1-pfsls/.cvsignore: remove

2006-03-14 14:02  gb

	* level-1/: l1-boot-2.lisp, level-1.lisp: Always use physical bin,
	l1-fasls relative pathnames.

2006-03-14 14:02  gb

	* level-1/l1-pathnames.lisp: Simpler translations.

2006-03-14 13:51  gb

	* l1-dfsls/.cvsignore, bindarwin/.cvsignore: removed

2006-03-14 13:31  gb

	* bin/.cvsignore, l1-fasls/.cvsignore: new file.

2006-03-14 13:24  gb

	* level-1/: l1-boot-2.lisp, level-1.lisp: Step 1: don't hardwire
	the target fasl pathname in a big #+ nest, get it from the target
	backend.  (Hope that works with macrolet.)

2006-03-14 13:22  gb

	* lisp-kernel/x86-spentry64.s: _SPstack_misc_alloc fixes. 
	_SPsyscall: just return negative return values, don't negate them.

2006-03-14 13:20  gb

	* library/x8664-linux-syscalls.lisp: Hide the incomplete
	definitions.  This needs work; should use real foreign types.

2006-03-14 13:19  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: %init-gvector: pop the last
	element first.

2006-03-14 13:19  gb

	* compiler/X86/X8664/x8664-backend.lisp: :linuxx8664-target on
	features, too.

2006-03-14 13:18  gb

	* compiler/X86/x862.lisp: x862-allocate-initialized-gvector: works
	better if the gvector is actually allocated ...

2006-03-14 03:11  gb

	* compiler/X86/x862.lisp: Remove a comment that described the
	mid-1990s behavior of MacsBug.

2006-03-14 03:10  gb

	* compiler/X86/x86-lap.lisp: In X86-LAP-EQUATE-FORM, check for and
	disallow bindings that match defined X86 register names.

2006-03-14 03:09  gb

	* compiler/X86/x86-disassemble.lisp: Some UUOs shouldn't terminate
	a disassembly block.

2006-03-14 03:09  gb

	* library/syscall.lisp: Whoops.

2006-03-14 03:01  gb

	* lisp-kernel/x86-spentry64.s: Fixes in _SPcall_closure,
	_SPstkgvector.

2006-03-14 03:00  gb

	* lisp-kernel/x86-exceptions.c: Handle uuo_debug_trap.

2006-03-14 03:00  gb

	* lisp-kernel/x86-constants64.h: Iflags is REG_EFL on Linux.

2006-03-14 02:59  gb

	* lisp-kernel/lisp-debug.c: Make (R)egisters command work on x8664.

2006-03-14 02:59  gb

	* library/syscall.lisp: BACKEND-SYSCALL-DEFINITIONS uses whatever
	bits are in the backend's BACKEND-PLATFORM-SYSCALL-MASK.

2006-03-14 02:57  gb

	* library/x8664-linux-syscalls.lisp: New file. Woefully incomplete,
	and may need word-size fixes.

2006-03-14 02:57  gb

	* library/ppc-linux-syscalls.lisp: Set the mask per the new (new)
	scheme.

2006-03-14 02:56  gb

	* level-0/X86/x86-utils.lisp: Fix a few bugs in heap-walking code.

2006-03-14 02:56  gb

	* level-0/X86/x86-def.lisp: %NTH-IMMEDIATE needed to box;  both it
	and %FUNCTION-CODE-WORDS needed to avoid naming parameters FN.

2006-03-14 02:55  gb

	* level-1/: l1-sockets.lisp, l1-streams.lisp, linux-files.lisp: Use
	the right set of syscall definitions for Linux.

2006-03-14 02:54  gb

	* level-0/nfasload.lisp: Add a fixnum declaration.

2006-03-14 02:54  gb

	* level-0/l0-io.lisp: Include the right set of syscall defs for
	Linux.

2006-03-14 02:53  gb

	* level-0/l0-symbol.lisp: Need to use %symptr->symbol for x86;
	harmless on PPC.

2006-03-14 02:53  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: SETUP-VCELL-ALLOCATION
	needs to bias the size by fulltag-misc.

2006-03-14 02:52  gb

	* compiler/X86/X8664/x8664-backend.lisp: At least for Linux/X86/64,
	need to look at os/cpu/word-size to deterine applicable syscall
	defs.

2006-03-14 02:51  gb

	* compiler/PPC/: PPC32/ppc32-backend.lisp,
	PPC64/ppc64-backend.lisp: All PPC (32/64) backends can use syscall
	defs for OS/CPU, regardless of word size.

2006-03-14 02:50  gb

	* compiler/backend.lisp: Add PLATFORM-SYSCALL-MASK to backend
	struct.

2006-03-14 02:09  gb

	* library/: ppc-linux-syscalls.lisp, linux-syscalls.lisp: renamed

2006-03-13 02:33  gb

	* level-1/version.lisp: Bump.

2006-03-13 02:24  gb

	* xdump/xfasload.lisp: AREA constants now in CCL package.

2006-03-13 02:23  gb

	* lisp-kernel/x86-spentry64.s: ret1valn: no LEAVE here. 
	nthrowvalues: fix several bugs.

2006-03-13 02:22  gb

	* lisp-kernel/x86-macros.s: TSP_Alloc_Var: zero the dnode at the
	new tsp, as well.

2006-03-13 02:21  gb

	* library/lispequ.lisp: Define AREA constants here (in CCL
	package.)

2006-03-13 02:20  gb

	* lib/macros.lisp: Move DO-CONSING-AREAS here.	AREA-CODE is an
	arch macro.

2006-03-13 02:20  gb

	* level-1/l1-lisp-threads.lisp: Move DO-CONSING-AREAS to
	macros.lisp.

2006-03-13 02:19  gb

	* level-0/X86/x86-utils.lisp: Walk static, dynamic areas.

2006-03-13 02:19  gb

	* level-0/PPC/ppc-utils.lisp: Comments.

2006-03-13 02:18  gb

	* level-0/nfasload.lisp: %MAP-AREAS call might have to deal with
	symbol/symbol-vector distinction.

2006-03-13 02:18  gb

	* level-0/l0-utils.lisp: AREA constants are in CCL package, not
	PPC.  %MAP-LFUNS might have to deal with function/function-vector
	distinction.

2006-03-13 02:17  gb

	* level-0/l0-misc.lisp: AREA constants are in CCL package, not PPC.

2006-03-13 02:17  gb

	* level-0/l0-hash.lisp: %GROW-HASH-TABLE is always called inside
	WITHOUT-INTERRUPTS, so no need to do it again.

2006-03-13 02:16  gb

	* compiler/X86/x862.lisp: Push at most one stack frame on function
	entry ...

2006-03-13 02:14  gb

	* compiler/: PPC/PPC32/ppc32-arch.lisp, PPC/PPC64/ppc64-arch.lisp,
	X86/X8664/x8664-arch.lisp: AREA-CODE archmacro.

2006-03-13 02:13  gb

	* compiler/: PPC/ppc-arch.lisp, X86/x86-arch.lisp: AREA constants
	moved to CCL package.

2006-03-11 23:54  gb

	* lisp-kernel/linuxx8664/.gdbinit: Don't change handling of SIGUSR1
	or SIGUSR2; I don't think that we use them under Linux.

2006-03-11 23:52  gb

	* lisp-kernel/x86-spentry64.s: builtin_eql was extracting lisptags
	and comparing fulltags, and thus returning false when it shouldn't
	have.
	
	nthrow1value was making too small of a TSP frame around the call to
	the cleanup code, clobbering TSP links in some cases.  It was also
	failing to pop catch frames.
	
	stkgvector was unimplented.
	
	_car order-of-arguments problems in (at least) spreadargz.

2006-03-11 23:47  gb

	* lisp-kernel/x86-subprims64.s: Push a 0 and make the initial lisp
	%rbp point to it, to mark the end of the line.

2006-03-11 23:47  gb

	* lisp-kernel/xlbt.c: Sketchy kernel-debugger backtrace.

2006-03-11 23:46  gb

	* lisp-kernel/x86-constants64.h: A lisp_frame struct, for kernel
	backtrace.

2006-03-11 23:46  gb

	* lisp-kernel/pmcl-kernel.c: Try (temporily) disabling Lisp's
	SIGINT handler.   There seem to be problems using a keyboard
	interrupt to awaken GDB on the version of x96-64 Linux I'm using. 
	This didn't fix those problems completely, but we won't need to
	handle SIGINT in the lisp until more code works.

2006-03-11 23:43  gb

	* lisp-kernel/macros.h: I may have parenthesized nodeheader_tag_p
	and immheader_tag_p; several versions of  GCC generated code that
	looked wrong, but since it's C it's hard to tell.   Splitting the
	macros up (into "mask definition" and "mask testing" seems to
	generate the right code (a bit test if optimization's cranked up.)

2006-03-11 23:41  gb

	* level-0/X86/x86-misc.lisp: Fix a few typos (fixnum vs unboxed
	constants, etc.)
	
	%ATOMIC-DECF-PTR-IF-POSITIVE should return what we would have
	(might have) stored in the word accessed by the pointer (in
	particular, it should return a negative value if there are no other
	threads waiting on a recursive lock.)

2006-03-11 23:38  gb

	* level-0/PPC/ppc-misc.lisp: Fix file name in comment.

2006-03-11 23:38  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: ENSURE-RESERVED-FRAME: test
	was backwards.

2006-03-11 23:37  gb

	* compiler/X86/X8664/x8664-arch.lisp: Don't use FN as arg name in
	LFUN-VECTOR, since x8664::fn is a constant (symbolic register
	name.)
	
	Add missing close paren.

2006-03-11 23:36  gb

	* compiler/X86/x862.lisp: Ensure stack fencepost in simple
	&optional arg case.
	
	Do the variable-arg-count case if complex &optional, no &rest/&key,
	and some (possibly unsupplied) optionals may or may not have been
	pushed by the caller.

2006-03-11 04:11  gb

	* lisp-kernel/: image.c, lisp_globals.h: Fix conditionalization: we
	don't define PPC32, but it might be clearer if we did.

2006-03-11 03:28  gb

	* level-1/version.lisp: Bump.

2006-03-11 03:20  gb

	* library/: darwin-syscalls.lisp, linux-syscalls.lisp,
	syscall.lisp: New mechanism, mostly to make cross-compilation
	easier.

2006-03-11 03:20  gb

	* level-0/X86/x86-def.lisp: Extra paren; %NTH-IMMEDIATE and
	function/lfun-vector stuff, CLOSURE-FUNCTION here until that can be
	abstracted away sanely.

2006-03-11 03:18  gb

	* level-0/X86/x86-misc.lisp: %STORE-IMMEDIATE-CONDITIONAL needs to
	discard the frame that the caller reserved.

2006-03-11 03:17  gb

	* level-0/X86/x86-clos.lisp: Comment out the PPC LAP (e.g.,
	everything in the file, still).

2006-03-11 03:15  gb

	* level-0/PPC/ppc-def.lisp: CLOSURE-FUNCTION here.  (Abstract away
	NTH-IMMEDIATE ?)

2006-03-11 03:14  gb

	* level-0/l0-misc.lisp: Indentation.

2006-03-11 03:13  gb

	* level-0/l0-def.lisp: Move CLOSURE-FUNCTION to arch-specific dir. 
	Use LFUN-VECTOR, which should hopefully compile away on PPC but
	needs to be there on X8664.

2006-03-11 03:11  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Now that subprim addresses
	are higher, there's another significant byte to deal with in the
	subprim jump in %INIT-CLOSURE.
	
	Use a temporary - and a smaller instruction sequence - in
	MISC-ELEMENT-COUNT-FIXNUM, so that src and dest can overlap.  (More
	instructions, but fewer bytes.)

2006-03-11 03:08  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp,
	compiler/X86/X8664/x8664-arch.lisp, lib/macros.lisp: LFUN-VECTOR
	and LFUN-VECTOR-LFUN are arch-specific macros.

2006-03-11 03:07  gb

	* lisp-kernel/x86-spentry64.s: Reformat a comment.

2006-03-10 22:06  gb

	* xdump/xx8664-fasload.lisp: Target-specific static-space (NIL
	representation, mostly) init functions.
	
	Move image-base-address up a few terabytes.
	
	Undefined function and macro trampolines are vectors with an
	executable fixnum in the 0th word.

2006-03-10 22:05  gb

	* xdump/xppcfasload.lisp: Target-specific static-space (NIL
	representation, mostly) init functions.

2006-03-10 22:04  gb

	* xdump/xfasload.lisp: Lots of changes, to deal with
	symbol/function tagging issues, x86 clfuns, etc.

2006-03-10 22:03  gb

	* xdump/heap-image.lisp: Endianness, word-size conditionalization
	stuff.

2006-03-10 22:02  gb

	* lisp-kernel/linuxx8664/Makefile: C files depend on lisptypes.h.

2006-03-10 22:01  gb

	* lisp-kernel/linuxx8664/elf_x86_64.x: Don't try to link into low
	memory (no real reason to.) Do try to put spjump at a
	fixed/known/page-aligned address.

2006-03-10 21:59  gb

	* lisp-kernel/x86_print.c: Recognize some x8664 tags.

2006-03-10 21:59  gb

	* lisp-kernel/x86-subprims64.s: Use Rforeign_sp; get valence right
	on exit.

2006-03-10 21:58  gb

	* lisp-kernel/x86-spjump64.s: Rename ffcall/syscall.

2006-03-10 21:58  gb

	* lisp-kernel/x86-spentry64.s: Lots of fixes/changes (including
	ffcall/syscall).

2006-03-10 21:56  gb

	* lisp-kernel/x86-macros.s: TSP_Alloc_Size is an immediate operand
	in TSP_Alloc_Fixed().
	
	Fix allocptr/allocbase comparison when consing.
	
	Misc_Alloc_Fixed: m4/gas $ conflation.

2006-03-10 21:54  gb

	* lisp-kernel/x86-exceptions.h: Extra parens around xpGPR
	expansion.

2006-03-10 21:54  gb

	* lisp-kernel/x86-exceptions.c: Actually handle something
	(uuo_alloc()), since we can't do much without it.

2006-03-10 21:53  gb

	* lisp-kernel/x86-constants64.s: Call the foreign sp register
	Rforeign_sp, to avoid m4 lossage.
	
	nrs starts at #x2020, because NIL is between there and #x2000.

2006-03-10 21:52  gb

	* lisp-kernel/x86-constants64.h: Iallocptr for trap handler.
	
	tcr was missing foreign_sp definition.

2006-03-10 21:51  gb

	* lisp-kernel/thread_manager.c: get_tcr() change for HAVE_TLS case.

2006-03-10 21:51  gb

	* lisp-kernel/ppc-exceptions.c: Put a sane value in the FPSCR
	before calling back to lisp on an exception.

2006-03-10 21:50  gb

	* lisp-kernel/pmcl-kernel.c: Use address of bad_funcall, not
	"value".
	
	Disable EGC on x8664.

2006-03-10 21:49  gb

	* lisp-kernel/lisptypes.h: formatting change only.

2006-03-10 21:49  gb

	* lisp-kernel/lisp_globals.h: Layout of lisp-globals/nrs on x8664
	not identical to ppc64 (NIL representation differs.)

2006-03-10 21:48  gb

	* lisp-kernel/lisp-debug.c: Lisp register stuff for x8664.

2006-03-10 21:48  gb

	* lisp-kernel/image.c: Fix some conditionalization.

2006-03-10 21:47  gb

	* lisp-kernel/area.h: Larger IMAGE-BASE-ADDRESS for X8664 Linux.

2006-03-10 21:46  gb

	* library/: linux-syscalls.lisp, syscall.lisp: Try to make things a
	little more portable, but really need to keep things in the
	target-ftd.  Soon.

2006-03-10 21:45  gb

	* level-0/l0-numbers.lisp: Don't reference
	TARGET::LEAST-SIGNIFICANT-BIT in ASH; express limits in terms of
	TARGET::NBITS-IN-WORD.

2006-03-10 21:45  gb

	* level-0/l0-misc.lisp: Add some fixnum decls to %GET-CSTRING, so
	that single-stepping through it in GDB is faster.

2006-03-10 21:44  gb

	* level-0/l0-io.lisp: %YIELD here, so all level-0 syscalls are in
	one file.

2006-03-10 21:43  gb

	* level-0/l0-cfm-support.lisp: We generally want foreign symbol
	addresses to be boxed integers on X8664, and can't assume that
	they're fixnum-aligned.

2006-03-10 21:42  gb

	* level-0/: l0-array.lisp, l0-init.lisp: Comment indentation.

2006-03-10 21:41  gb

	* lisp-kernel/linuxx8664/.gdbinit: Well, it's a start ...

2006-03-10 21:41  gb

	* level-0/X86/x86-utils.lisp: %KERNEL-IMPORT boxes what may not
	have been a fixnum.

2006-03-10 21:40  gb

	* level-0/X86/x86-misc.lisp: Fix typo.
	
	STORE-NODE-CONDITIONAL pops stack arg, discards stack frame
	reserved by caller before jumping into kernel.

2006-03-10 21:39  gb

	* level-0/X86/x86-float.lisp: Missing SET-MXCSR-CONTROL was hidden
	in duplicate SET-MSCSR-STATUS.	May want to always set/get the
	control and rounding modes.

2006-03-10 21:37  gb

	* level-0/X86/x86-def.lisp: Comment out the missing lexpr/apply
	stuff, so that the rest of the file compiles.

2006-03-10 21:36  gb

	* level-0/X86/x86-array.lisp: %INIT-MISC wants/needs to be in LAP
	because of write-barrier issues.

2006-03-10 21:35  gb

	* lib/x8664env.lisp: It's OK (in fact necessary) to use FP0 as a
	temporary.  0.0 is in FPZERO.

2006-03-10 21:34  gb

	* lib/nfcomp.lisp: Spit out a fasl op while writing CLFUNs.

2006-03-10 21:33  gb

	* level-0/PPC/ppc-float.lisp: Don't CLEAR-FPU-EXCEPTIONS, at least
	without knowing why.

2006-03-10 21:32  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: SETcc sets the byte to 1 or
	0, so we need to negate.
	
	Other bug fixes and additions.

2006-03-10 21:31  gb

	* compiler/X86/X8664/x8664-arch.lisp: Fix a typo in
	X8664-MISC-BYTE-SIZE.
	
	Move subprims base up to #x410000, to make it easier on the linker.

2006-03-10 21:29  gb

	* compiler/X86/x862.lisp: Lots-o-fixes; FFI stuff.  When generating
	code involving a :REG8 operand, be careful to pass the 8-bit reg
	entry to LAP.

2006-03-10 21:27  gb

	* compiler/X86/x86-lapmacros.lisp: X86 CMOV instructions reference
	the source operand (possibly generating a memory fault) even if the
	destination operand isn't written to.  Who knew ?

2006-03-10 21:24  gb

	* compiler/X86/x86-disassemble.lisp: Recognize newer UUOs.

2006-03-10 21:24  gb

	* compiler/X86/x86-lap.lisp: Use the #x80 bit in an instruction's
	REX prefix to indicate when the prefix needs to be emitted (even if
	the #x7 bits are clear).

2006-03-10 21:23  gb

	* compiler/X86/x86-asm.lisp: A few UUOs; try to ensure that we'll
	generate (at least) a #x40 REX prefix if a new-style byte register
	is used as an operand.	(e.g., we generally don't want to refer to
	the traditional things like %dh, and do want to refer to the newer
	things like %sil.)

2006-03-10 21:20  gb

	* compiler/X86/x86-arch.lisp: rename *X86-NILREG-RELATIVE-SYMBOLS*
	-> *X86-NIL-RELATIVE-SYMBOLS*.

2006-03-10 21:18  gb

	* compiler/PPC/: ppc2.lisp, PPC32/ppc32-vinsns.lisp,
	PPC64/ppc64-vinsns.lisp: %SINGLE-TO-DOUBLE, %DOUBLE-TO-SINGLE, to
	avoid consing in some simple cases.

2006-03-10 21:17  gb

	* compiler/PPC/ppc-arch.lisp: Rename *PPC-NILREG-RELATIVE-SYMBOLS*
	-> *PPC-NIL-RELATIVE-SYMBOLS* (NIL hasn't been in a register in a
	few years.)

2006-03-10 21:15  gb

	* compiler/optimizers.lisp: On 64-bit targets, SINGLE-FLOATs are
	EQL iff EQ.
	
	Try to recognize a few ways of coercing SINGLE-FLOATs to
	DOUBLE-FLOATs and vice versa, so that we have some chance of
	avoiding consing in some cases.

2006-03-10 21:13  gb

	* compiler/nxenv.lisp: Add %SINGLE-TO-DOUBLE, %DOUBLE-TO-SINGLE. 
	Replace unused EMBEDDED-CALL with SYSCALL.

2006-03-10 21:12  gb

	* compiler/nx1.lisp: Just use SYSCALL operator to mark x8664
	syscalls.

2006-03-10 21:12  gb

	* .cvsignore: Change patterns.

2006-03-07 06:49  gb

	* lisp-kernel/x86-spentry64.s: Assume that fpzero (not fp0)
	contains 0.0.
	
	Get a few more things working, or at least written.

2006-03-07 06:48  gb

	* lisp-kernel/: x86-macros.s, x86-subprims64.s: Assume that fpzero
	(not fp0) contains 0.0.

2006-03-07 06:48  gb

	* lisp-kernel/x86-constants64.s: Define fpzero = xmm15.
	
	Pad the (misnamed) fpscr field in the TCR.

2006-03-06 06:37  gb

	* lib/nfcomp.lisp: Initial, crude support for cross-dumping
	"concatenated" lisp functions.

2006-03-06 06:36  gb

	* level-0/l0-numbers.lisp: Fix comment indentation in a function
	that the x8664 backend was choking on.

2006-03-06 06:36  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: use fpzero when a zero is
	needed,  not fp0.

2006-03-06 06:35  gb

	* compiler/X86/X8664/x8664-arch.lisp: xmm15 is fpzero (contains
	0.0[de]0).  (xmm0 is used for ff-call.)

2006-03-06 06:35  gb

	* compiler/X86/x862.lisp: X862-COMPILE: don't reserve quad for null
	function name, even if debug info is present.

2006-03-06 06:34  gb

	* compiler/X86/x86-lap.lisp: RELAX-FRAG-LIST: account for (possibly
	non-zero) length of :ALIGN frags.  CROSS-CREATE-X86-FUNCTION: don't
	emit function name if it's nil, even if debug-info is present.

2006-03-06 06:30  gb

	* compiler/X86/x86-asm.lisp: Add a declaration to suppress compiler
	warning on forward reference.

2006-03-06 03:27  gb

	* xdump/xfasload.lisp: Fix parens.

2006-03-06 02:59  gb

	* xdump/xfasload.lisp: Remove many uses of TARGET-ARCH-CASE (thus
	removing many uses of ppc/ppc32/ppc64 package symbols.)  Some uses
	remain.

2006-03-06 02:57  gb

	* lib/macros.lisp: Define TARGET-ARCH-CASE in terms of CASE, not
	ECASE.

2006-03-05 19:12  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: typecode, lisptag are in ccl
	package.

2006-03-05 19:01  gb

	* level-1/version.lisp: Bump; some of this is hard to bootstrap.

2006-03-05 19:00  gb

	* lib/macros.lisp: Move some %kernel-global nonsense here.

2006-03-05 19:00  gb

	* level-1/l1-lisp-threads.lisp: Define macros in ... macros.lisp,
	of all places.

2006-03-05 18:59  gb

	* level-0/X86/x86-array.lisp: write some code in lisp
	(temporarily), clean up some typos so that the file compiles.

2006-03-05 18:58  gb

	* compiler/: arch.lisp, PPC/PPC32/ppc32-arch.lisp,
	PPC/PPC64/ppc64-arch.lisp, X86/X8664/x8664-arch.lisp: More
	parameters (mostly for xloader) in target-arch struct.

2006-03-05 18:52  gb

	* xdump/xfasload.lisp: Get target parameters from
	(backend-target-arch *target-backend*)).

2006-03-05 06:17  gb

	* xdump/xx8664-fasload.lisp: Closer ...

2006-03-05 06:17  gb

	* xdump/hashenv.lisp: Arch macros for hashing macros.

2006-03-05 06:16  gb

	* level-1/l1-lisp-threads.lisp: Arch macros for kernel globals.

2006-03-05 06:16  gb

	* level-1/l1-readloop-lds.lisp: Check *interrupt-level* value, not
	(interrupt-level).

2006-03-05 06:15  gb

	* level-1/l1-clos-boot.lisp: Make *class-table* a global.

2006-03-05 06:15  gb

	* level-0/X86/X8664/x8664-bignum.lisp: use temp2.b (= cl) for
	variable shifts.

2006-03-05 06:14  gb

	* level-0/nfasload.lisp: No code-vectors on x8664.

2006-03-05 06:14  gb

	* level-0/l0-numbers.lisp: Conditionalization: 64-bit-target
	implies no (need for) destructive single-float ops.

2006-03-05 06:13  gb

	* level-0/l0-misc.lisp: Remove some unused stuff.

2006-03-05 06:13  gb

	* level-0/l0-array.lisp: array-element-type for x8664.

2006-03-05 06:12  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: More stuff.

2006-03-05 06:12  gb

	* compiler/X86/x862.lisp: (Mostly) try to fix fixnum subtraction.

2006-03-05 06:11  gb

	* compiler/X86/x86-lapmacros.lisp: TRAP-UNLESS-FIXNUM,
	PUSH-ARGREGS, some syntax fixes.

2006-03-05 06:10  gb

	* compiler/: PPC/PPC32/ppc32-arch.lisp, PPC/PPC64/ppc64-arch.lisp,
	X86/X8664/x8664-arch.lisp: More arch macros.

2006-03-05 06:10  gb

	* compiler/backend.lisp: DECLARE-ARCH-SPECIFIC-MACRO returns macro
	name.

2006-03-05 06:09  gb

	* level-0/X86/x86-utils.lisp: Warn for things that don't work yet;
	other things compile.

2006-03-05 06:08  gb

	* level-0/X86/: x86-misc.lisp, x86-float.lisp: Compiles.

2006-03-05 06:08  gb

	* level-0/X86/x86-pred.lisp: Fix typos/new syntax.

2006-03-04 19:13  gb

	* lib/nfcomp.lisp: Some conditionalization.

2006-03-04 19:12  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: More stuff.  Need to review
	float arithmetic.

2006-03-04 19:11  gb

	* level-0/l0-float.lisp: Comment indentation.

2006-03-04 19:11  gb

	* level-0/X86/x86-utils.lisp: Fix a few typos; needs more work.

2006-03-04 18:30  gb

	* lib/foreign-types.lisp: Can use TARGET-WORD-SIZE-CASE instead of
	TARGET-ARCH-CASE.

2006-03-04 18:29  gb

	* lib/macros.lisp: New arch-specific macros. (Still need to do
	something about DEFCALLBACK and related functions.)

2006-03-04 18:29  gb

	* lib/number-macros.lisp: New arch-specific macros.

2006-03-04 18:28  gb

	* compiler/X86/x862.lisp: Keep unboxed float constants in the
	function (as aligned words following "real" instructions and
	preceding boxed constants.)

2006-03-04 18:26  gb

	* compiler/: PPC/PPC32/ppc32-arch.lisp, PPC/PPC64/ppc64-arch.lisp,
	X86/X8664/x8664-arch.lisp: Remove some remaining uses of
	TARGET-ARCH-CASE by using arch-specific macro implementations.

2006-03-04 18:25  gb

	* compiler/backend.lisp: Mechanism for arch-specific macros.

2006-03-04 18:24  gb

	* compiler/arch.lisp: New constructor, so that we can keep track of
	defined target-archs.  Hash table in each arch structure, for
	arch-dependent macros.

2006-03-03 19:38  gb

	* lib/number-macros.lisp: Will need a lot more work.

2006-03-03 19:38  gb

	* lib/systems.lisp: xx8664xfasload.

2006-03-03 19:38  gb

	* lib/compile-ccl.lisp: *x8664-xload-modules*.

2006-03-03 19:37  gb

	* level-0/X86/X8664/.cvsignore: ignore lx64fsl files.

2006-03-03 19:37  gb

	* level-0/X86/x86-def.lisp: extra close paren.

2006-03-03 19:36  gb

	* level-0/X86/x86-float.lisp: package prefix on MXCSR-CONTROL-BYTE.

2006-03-03 19:36  gb

	* level-0/X86/x86-numbers.lisp: Don't call local variable "shift".

2006-03-03 19:11  gb

	* level-0/: .cvsignore, X86/.cvsignore: Ignore lx64fsl files.

2006-03-03 19:11  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: A few more things.

2006-03-03 19:11  gb

	* compiler/X86/x862.lisp: Conserve imm regs more in inc-ptr

2006-03-03 19:10  gb

	* compiler/X86/x86-lapmacros.lisp: Remove (duplicate, bad)
	definitions of int-to-double.

2006-03-03 19:09  gb

	* compiler/X86/: x86-asm.lisp, x86-disassemble.lisp: A few more
	UUOs.

2006-03-03 19:09  gb

	* compiler/nx1.lisp: Use (old, unused) ff-call operator to mark
	x8664 ff-calls.

2006-03-03 02:09  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: fix typo.

2006-03-03 02:09  gb

	* compiler/X86/X8664/x8664-arch.lisp: rcontext is %fs, and (with
	that change) tcr-bias is 0.

2006-03-03 02:08  gb

	* xdump/xppcfasload.lisp: move xcompile-level-0, etc, away from
	here.

2006-03-03 02:07  gb

	* xdump/xfasload.lisp: move xcompile-level-0, etc, here.

2006-03-03 02:06  gb

	* xdump/xx8664-fasload.lisp: New file; still needs work.

2006-03-03 01:15  gb

	* lisp-kernel/thread_manager.c: Um,function name is
	'amd64_set_gsbase'.

2006-03-03 01:05  gb

	* lisp-kernel/: freebsd8664/Makefile, linuxx8664/Makefile: Assert
	that we have thread-local storage by passing -DHAVE_TLS.

2006-03-03 01:04  gb

	* lisp-kernel/thread_manager.c: new_tcr sets up extra segment
	register if x8664 and HAVE_TLS.

2006-03-03 01:03  gb

	* lisp-kernel/x86-constants64.h: tcr.single_float_convert is a
	struct; tag in most significant word.

2006-03-03 01:03  gb

	* lisp-kernel/x86-constants64.s: tcr bias is 0.  rcontext = %gs, at
	least for Linux/FreeBSD.

2006-03-02 23:16  gb

	* compiler/arch.lisp: add big-endian field to target-arch.

2006-03-02 23:16  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp: Big
	endian.

2006-03-02 23:14  gb

	* compiler/X86/: X8664/x8664-vinsns.lisp, x862.lisp: &lexpr stuff,
	mostly.

2006-03-02 23:14  gb

	* compiler/X86/X8664/x8664-arch.lisp: We're not big-endian.

2006-03-02 23:13  gb

	* lib/macros.lisp: Comment formatting.

2006-03-02 23:12  gb

	* level-0/: l0-cfm-support.lisp, l0-hash.lisp, l0-init.lisp,
	l0-io.lisp, l0-misc.lisp, l0-numbers.lisp, l0-pred.lisp,
	l0-symbol.lisp, l0-utils.lisp, nfasload.lisp: Conditionalization
	changes.

2006-03-02 23:11  gb

	* lisp-kernel/thread_manager.c: Change thread creation/activation,
	so that new_tcr() call happens on the new thread.

2006-03-02 22:51  gb

	* lisp-kernel/Threads.h: Fix new_tcr() prototype.  Why did this
	compile in FreeBSD/x86-64 ?

2006-03-02 22:28  gb

	* lisp-kernel/freebsd8664/Makefile: Depend on the linker script. 
	Use some make variables to make changing/ ignoring that script
	easier.

2006-03-02 22:27  gb

	* lisp-kernel/thread_manager.c: Conditionalize some for FreeBSD.

2006-03-02 22:27  gb

	* lisp-kernel/pmcl-kernel.c: FreeBSD can also map (at least) 512GB.
	
	Not sure how to get real name of executable in FreeBSd, so use
	argv[0] for now.
	
	CPUID instruction returns cache block size in ebx, not eax.

2006-03-02 22:25  gb

	* lisp-kernel/freebsd8664/elf_x86_64.x: Output file wasn't
	executable if subprims were mapped to low memory; map them to a
	fixed address (0x410000).  Will need to change subprims base in
	arch definition, and things (bad_funcall) that may depend on it.

2006-03-02 19:19  gb

	* lisp-kernel/x86-spentry64.s: Try to avoid use of %temp0 (which
	may contain next_method_context); use %temp1 instead.

2006-03-02 19:18  gb

	* lisp-kernel/x86-constants64.s: next_method_context is temp0, not
	temp1 (according to lisp).

2006-03-01 12:42  gb

	* level-0/nfasload.lisp: One lousy missing #\)!  All this fuss over
	one lousy missing #\) !

2006-03-01 12:39  gb

	* xdump/faslenv.lisp: Define $fasl-clfun.

2006-03-01 12:38  gb

	* level-1/ppc-threads-utils.lisp: Rename %FIXNUM-SET-U32 ->
	%FIXNUM-SET-NATURAL.

2006-03-01 12:37  gb

	* level-0/X86/x86-def.lisp: Translate most of this, except for the
	lexpr stuff.

2006-03-01 12:37  gb

	* level-0/PPC/ppc-def.lisp: Delete a few things that seem to be
	totally unused.  Rename %FIXNUM-SET-U32 -> %FIXNUM-SET-NATURAL.

2006-03-01 12:36  gb

	* level-0/nfasload.lisp: $fasl-clfun.

2006-03-01 12:33  gb

	* compiler/X86/: x862.lisp, X8664/x8664-vinsns.lisp: %ilogbitp,
	inline multiplication.

2006-03-01 12:32  gb

	* compiler/X86/x86-lap.lisp: %define-x86-lap-function: "function
	creator" isn't a parameter, so signature matches what the compiler
	expects.

2006-03-01 12:31  gb

	* compiler/X86/x86-asm.lisp: Insert register operand correctly in
	immeditate bt/btc/btr/bts.  Some imul variants (at least the
	64/32/16-bit versions.)

2006-03-01 12:19  gb

	* compiler/nx1.lisp: Don't require SPARC-LAP in nx-x86-lap-function
	...

2006-02-28 19:46  gb

	* compiler/X86/x862.lisp: Always build/ensure that a frame exists
	before calling a subprim.  Handle &key, other/harder &optional
	cases.
	
	Todo: &lexpr, %ilogbitp, ??

2006-02-28 19:44  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: &optional defaulting and
	supplied-p handling; keywords subprims.

2006-02-28 19:43  gb

	* level-1/l1-reader.lisp: Signal IMPOSSIBLE-NUMBER conditions if
	parsing an potential number yields an ARITHMETIC-ERROR.

2006-02-28 19:43  gb

	* level-1/l1-error-system.lisp: Define IMPOSSIBLE-NUMBER as a
	subtype of READER-ERROR.

2006-02-28 19:42  gb

	* lib/numbers.lisp: If we'd get overflow or underflow when creating
	a float and the corresponding exception is enabled, generate the
	appropriate condition rather than CERRORing unconditionally.

2006-02-28 19:40  gb

	* lib/macros.lisp: Use target-word-size-case in %ilogbitp.

2006-02-28 19:37  gb

	* lisp-kernel/x86-spentry64.s: stkconslist, stkconslist_star,
	mkstackv, fix in heap_cons_rest_arg, simple_keywords, keyword_args,
	keyword_bind, fix in stack_cons_rest_arg, spreadargz, tfuncallgen,
	tfuncallslide,tfuncallvsp,tcallsymgen, tcallsymslide, tcallsymvsp,
	tcallnfngen, tcallnfnslide, tcallnfnvsp.
	
	todo: ffcall, syscall, callback, lexprs.

2006-02-28 19:33  gb

	* lisp-kernel/x86-macros.s: compare_reg_to_nil, discard_temp_frame.

2006-02-28 19:32  gb

	* lisp-kernel/x86-constants64.s: function_header_offset,
	function_data_offset

2006-02-28 19:32  gb

	* lisp-kernel/x86-constants64.h: TCR flags are a natural.

2006-02-28 19:31  gb

	* lisp-kernel/x86-constants64.h: TCR flags are unsigned.

2006-02-28 19:31  gb

	* lisp-kernel/x86-constants.h: TCR flags.

2006-02-28 19:31  gb

	* lisp-kernel/ppc-spentry.s: Fix comment (have never used temp0 for
	closure data).

2006-02-27 14:14  gb

	* compiler/PPC/ppc2.lisp: Hadn't saved the buffer; ppc2-%aset2
	changes were incomplete.

2006-02-26 23:30  gb

	* lisp-kernel/pmcl-kernel.c: Suppress compiler warning.

2006-02-26 22:51  gb

	* release-notes.txt: Update.

2006-02-26 22:51  gb

	* level-1/: l1-application.lisp, l1-boot-lds.lisp,
	l1-lisp-threads.lisp: Exercise more control over the stack sizes of
	listener threads (especially the initial listener.)
	
	(The --thread-stack-size argument affects the size of the initial
	listener's stacks only.)

2006-02-26 22:49  gb

	* lisp-kernel/pmcl-kernel.c: Fix the usage message.

2006-02-26 21:58  gb

	* lisp-kernel/pmcl-kernel.c: Split --stack-size and
	--thread-stack-size args, to avoid rlimit problems (and because
	they're really separate issues.)

2006-02-26 21:23  gb

	* lib/macros.lisp: Remove (most) support for tracing callbacks. 
	(Having the functionality isn't a bad idea, but the way that it was
	implemented made the code hard to read and maintain.  Maybe redo
	this.)

2006-02-26 21:21  gb

	* lisp-kernel/pmcl-kernel.c: Can't reserve 512GB on LinuxPPC64; try
	256GB instead.

2006-02-26 20:59  gb

	* level-1/version.lisp: Bump.

2006-02-26 20:37  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile: Restore
	COPT setting, clobbered on last (accidental) checkin.

2006-02-26 20:35  gb

	* lisp-kernel/lisp_globals.h: stack-size global

2006-02-26 20:35  gb

	* lisp-kernel/ppc-asmutils.s: atomic_and

2006-02-26 20:35  gb

	* lisp-kernel/pmcl-kernel.c: more mappable memory on 64-bit
	platforms.  Set stack-size global from command line arg

2006-02-26 20:35  gb

	* lisp-kernel/gc.c: check_range() takes a headers_allowed arg (not
	allowed on vsp).  Some debugging fprintfs.

2006-02-26 20:35  gb

	* lisp-kernel/: ppc-constants32.h, ppc-constants64.h: tcr flags are
	natural

2006-02-26 20:35  gb

	* lisp-kernel/ppc-exceptions.c: fixes in pc_luser_xp. Defer
	exceptions if we don't have the lock on Darwin

2006-02-26 20:35  gb

	* lisp-kernel/thread_manager.c: simpler suspend ack, other changes,
	heavy, unreadable conditionalization

2006-02-26 20:35  gb

	* lisp-kernel/: plbt.c, plsym.c: bug fixes

2006-02-26 20:35  gb

	* lisp-kernel/ppc-spentry.s: change defs of C write-barrier exports

2006-02-26 20:35  gb

	* lisp-kernel/: darwinppc64/Makefile, darwinppc/Makefile,
	Threads.h, bits.h: Prototype atomic_and(), atomic_ior() here.  Use
	them to set/clear TCR flag bits.

2006-02-26 20:34  gb

	* lib/encapsulate.lisp: Print trace level in trace output.

2006-02-26 20:34  gb

	* lib/compile-ccl.lisp: Add :reload-arguments arg to REBUILD-CCL.

2006-02-26 20:33  gb

	* level-1/l1-lisp-threads.lisp: Adjust default stack sizes based on
	--stack-size argument.

2006-02-26 20:32  gb

	* level-0/l0-misc.lisp: ROOM: don't report hons-space size if it's
	0.

2006-02-26 20:32  gb

	* level-0/l0-array.lisp: Use #+64-bit-target instead of
	#+ppc64-target in a few places.

2006-02-26 20:31  gb

	* examples/hons-example.lisp: Still needs work, but not quite so
	brain-dead.

2006-02-26 20:30  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: A few bug fixes.

2006-02-26 20:30  gb

	* compiler/X86/x862.lisp: Fix typos in unwind-protect; use the same
	general scheme for PROGV.

2006-02-26 20:29  gb

	* compiler/PPC/ppc2.lisp: In PPC2-%ASET2, typename is quoted in
	acode.

2006-02-26 20:28  gb

	* compiler/PPC/ppc-arch.lisp: Replace BAD-CURRENT-VS global with
	STACK-SIZE.

2006-02-16 15:49  gb

	* lisp-kernel/thread_manager.c: Wait for acknowledgement after
	suspend_tcr.  Probably needs some testing, but this may be the
	right approach.

2006-02-16 15:48  gb

	* lisp-kernel/ppc-exceptions.c: catch_exception_raise maintains
	TCR_FLAG_BIT_PENDING_EXCEPTION.  (There's also some half-finished
	Mach-based code here for doing interrupts via suspend/resume, but
	it's probably a bad idea.)

2006-02-16 15:45  gb

	* lisp-kernel/ppc-constants.h: Define a few more tcr flags.

2006-02-14 23:56  gb

	* compiler/PPC/ppc-asm.lisp: Define LWSYNC.  Less sure how to tell
	if it's available.

2006-02-14 23:51  gb

	* level-1/l1-lisp-threads.lisp: Define GET-INTERNAL-REAL-TIME here;
	define GET-TICK-COUNT in terms of it (less likely to cons.)
	
	Define %TCR-INTERRUPT, so the lisp doesn't know how the guts of
	PROCESS-INTERRUPT are implemented (and so the kernel does.)

2006-02-14 23:49  gb

	* lib/time.lisp: Define GET-INTERNAL-REAL-TIME earlier in the load
	sequence.

2006-02-14 23:48  gb

	* compiler/: PPC/PPC32/ppc32-arch.lisp, PPC/PPC64/ppc64-arch.lisp,
	X86/X8664/x8664-arch.lisp: Replace unused condemn-area kernel
	global with raise-thread-interrupt.

2006-02-14 23:47  gb

	* lisp-kernel/imports.s: Export raise_thread_interrupt.

2006-02-14 23:47  gb

	* lisp-kernel/thread_manager.c: Define raise_thread_interrupt.

2006-02-14 03:23  gb

	* lisp-kernel/thread_manager.c: Try using Mach suspend/resume
	again.

2006-02-14 03:20  gb

	* compiler/X86/: x862.lisp, X8664/x8664-vinsns.lisp: default
	&optionals, unwind-protect: push %ra0 "manually".

2006-02-14 03:17  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: New inline
	REF-SYMBOL-VALUE: don't use a 64-bit trap on ppc32.

2006-02-13 22:29  gb

	* lisp-kernel/gc.c: Conditionalize references to subtag_code_vector
	in purify(),impurify(); code_vectors don't exist on X8664, and
	purify()/impurify() will have to do something different there.

2006-02-13 21:01  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Closure & vcell stuff, some
	logical ops, tail funcall with no stack args.  Funcall inline.

2006-02-13 20:58  gb

	* compiler/X86/x862.lisp: Closure & vcell stuff, some logical ops,
	tail funcall.

2006-02-13 20:57  gb

	* compiler/X86/x86-arch.lisp: Add bad-funcall kernel global for x86
	funcall.

2006-02-13 20:53  gb

	* lisp-kernel/x86-spentry64.s: Lots-o-stuff (misc_set, etc.)

2006-02-13 20:52  gb

	* lisp-kernel/x86-spjump64.s: Pad jump table to page boundary, so
	bad_funcall() has a known address.

2006-02-13 20:51  gb

	* lisp-kernel/x86-macros.s: new do_funcall().

2006-02-13 20:51  gb

	* lisp-kernel/x86-constants64.s: Define tag_single_float.

2006-02-13 20:50  gb

	* lisp-kernel/pmcl-kernel.c: Setup BAD_FUNCALL, for x86 funcall.

2006-02-13 20:50  gb

	* lisp-kernel/: lisp_globals.h, x86-constants.s: BAD_FUNCALL, for
	x86 funcall.

2006-02-13 20:49  gb

	* compiler/X86/x86-asm.lisp: Don't generate REX prefix on
	uuo_error_vector_bound unless we need one.

2006-02-13 14:32  gb

	* lisp-kernel/gc.c: last change broke purify on ppc too, back out
	of it

2006-02-13 00:18  gb

	* compiler/X86/x862.lisp: More stuff.

2006-02-13 00:15  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: use rcmp aliases for
	comparisons when testing for testing for other than equality.

2006-02-13 00:14  gb

	* compiler/X86/x86-asm.lisp: rcmp aliases for all "cmp[bwlq]"
	instructions.

2006-02-13 00:13  gb

	* compiler/PPC/ppc2.lisp: Always open an undo-frame for
	%stack-block, even if the "zero" flag is variable.

2006-02-13 00:11  gb

	* lisp-kernel/x86-spentry64.s: More stuff.  Getting there ...

2006-02-13 00:11  gb

	* lisp-kernel/x86-macros.s: aligned_bignum_size

2006-02-13 00:10  gb

	* lisp-kernel/x86-constants64.s: target fixnum limits.

2006-02-12 23:08  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Fix
	%set-z-flag-if-u64-fits-in-fixnum.

2006-02-12 21:42  gb

	* lisp-kernel/x86-spentry64.s: Every day, more stuff.

2006-02-12 21:41  gb

	* lisp-kernel/x86-macros.s: Add a few things, work around $
	conflation.

2006-02-12 21:40  gb

	* lisp-kernel/x86-uuo.s: add uuo_error_reg_not_fixnum.

2006-02-12 21:39  gb

	* lisp-kernel/x86-constants.s: define tstack_alloc_limit.

2006-02-12 15:58  gb

	* level-1/l1-numbers.lisp: NEW-NUMTOKEN: don't allow leading sign
	on denominator when trying to parse a ratio.

2006-02-11 19:56  gb

	* lisp-kernel/x86-subprims64.s: start_lisp, toplevel_loop.

2006-02-11 19:55  gb

	* lisp-kernel/x86-spentry64.s: funcall does so.

2006-02-11 19:55  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s: Lose
	code_vector subtag; renumber things so that subtag_double_float has
	lower value.

2006-02-11 19:54  gb

	* lisp-kernel/ppc-subprims.s: Rewrite comment "clarifying" what
	toplevel_loop does.

2006-02-11 19:54  gb

	* lisp-kernel/x86-constants.s: define TCR states.

2006-02-11 19:53  gb

	* lisp-kernel/x86-macros.s: fix do_funcall().

2006-02-11 19:53  gb

	* lisp-kernel/x86_print.c: Don't reference subtag_code_vector.

2006-02-11 19:53  gb

	* lisp-kernel/gc.c: Don't reference subtag_code_vector in
	purify/etc on x8664.

2006-02-11 19:52  gb

	* lib/macros.lisp: Setf inverses for unsigned memory accessors.

2006-02-11 19:51  gb

	* lib/level-2.lisp: eval-redefs for unsigned memory setters.

2006-02-11 19:51  gb

	* level-0/l0-pred.lisp: Start to conditionalize for #+x8664-target.

2006-02-11 19:51  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: REQUIRE-type primitives,
	more stuff, bug fixes.

2006-02-11 19:50  gb

	* compiler/X86/X8664/x8664-arch.lisp: No code-vector.  Renumber
	things, so that SUBTAG-DOUBLE-FLOAT has a smaller value.

2006-02-11 19:50  gb

	* compiler/X86/x862.lisp: Use fp1 (arbitrarily), not fp0 when
	setting double-float vector elements.

2006-02-11 19:49  gb

	* compiler/X86/x86-disassemble.lisp: Tab out further when printing
	instruction address.

2006-02-11 19:48  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Fix error trap in
	REQUIRE-REAL.

2006-02-11 19:48  gb

	* compiler/nx1.lisp: Memory-setting primitives come in signed and
	unsigned flavors.

2006-02-11 03:34  gb

	* lisp-kernel/x86-spentry64.s: _SPmakes64: more svelte, less buggy.

2006-02-11 03:32  gb

	* level-1/version.lisp: Bump.

2006-02-11 03:32  gb

	* compiler/X86/: X8664/x8664-vinsns.lisp, x862.lisp: Lots-o-stuff:
	most vector access & assignment, etc.  (Some cases need more
	testing, since PPC code this is based on assumed more imm temp
	registers and it's easy to run out when there are only 2 of them.)

2006-02-11 03:30  gb

	* compiler/X86/X8664/x8664-arch.lisp: Cache the foreign SP in %mm5.

2006-02-11 03:29  gb

	* compiler/X86/x86-backend.lisp: Match use of dedicate shift-count
	register (%cl) via :%SHIFT.
	
	It's 2006.  Why do processors have dedicated shift-count registers
	?

2006-02-11 03:28  gb

	* compiler/PPC/ppc2.lisp: Don't call UVREF to access value of
	single-float vector, since single-floats are immediate on 64-bit
	platforms.

2006-02-11 03:26  gb

	* compiler/optimizers.lisp: CHAR-EQUAL.

2006-02-11 03:26  gb

	* compiler/nx0.lisp: ACODE-INTEGER-CONSTANT-P, which may have been
	a bad idea.

2006-02-10 14:07  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: More stuff, especially for
	vector reference.

2006-02-10 14:06  gb

	* compiler/X86/x862.lisp: Propagate some ppc backend fixes; get
	vref working.

2006-02-10 14:05  gb

	* compiler/X86/x86-asm.lisp: setc is an alias for setb.

2006-02-10 14:04  gb

	* compiler/X86/X8664/x8664-arch.lisp: :SINGLE-FLOAT-VECTOR is a
	32-bit ivector type. :SINGLE-FLOAT isn't.

2006-02-10 14:03  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp:
	:SINGLE-FLOAT-VECTOR is a 32-bit ivector type.

2006-02-09 23:55  gb

	* lib/compile-ccl.lisp: Add a :FULL option to REBUILD-CCL.

2006-02-09 23:50  gb

	* lisp-kernel/gc.c: Fix calculation of static_dnodes_for_area (was
	unmapping the wrong memory when dynamic area shrunk.)
	
	Maybe be verbose about GC activity.

2006-02-09 23:48  gb

	* lisp-kernel/thread_manager.c: Disable mach_suspend_tcr again. 
	Mach sucks.

2006-02-09 23:47  gb

	* library/lispequ.lisp, lisp-kernel/ppc-constants32.h,
	lisp-kernel/ppc-constants64.h, lisp-kernel/x86-constants64.h:
	Define constant bits for GC verbosity.

2006-02-09 23:46  gb

	* lib/macros.lisp: For thing that actually macroexpand %SVSET and
	%SET-SCHAR, don't evaluate the new value inside the OPTIMIZE
	declarations.  (COMPILE-FILE does this macroexpansion; COMPILE does
	its own handling of these SETF inverses.)

2006-02-09 23:44  gb

	* lib/ccl-export-syms.lisp: Export GC-VERBOSE, GC-VERBOSE-P.

2006-02-09 23:44  gb

	* level-1/l1-aprims.lisp: Add GC-VERBOSE, GC-VERBOSE-P.

2006-02-09 23:43  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	MISC-NODE-SET without EGC checks.  Open-code special reference.

2006-02-09 23:42  gb

	* compiler/PPC/ppc2.lisp: Avoid EGC write-barrier checks when
	storing some types of things in node vectors.  Try to do special
	variable lookup inline (helps a little).

2006-02-09 23:40  gb

	* compiler/nx0.lisp: vcell, fcell refs are loop-weighted.

2006-02-09 23:38  gb

	* lisp-kernel/x86-spentry64.s: Most of throw, nthrow.

2006-02-05 22:20  gb

	* lisp-kernel/thread_manager.c: suspend_other_threads() and
	resume_other_threads() take a Boolean "for_gc" arg. 
	lisp_suspend_other_threads() and lisp_resume_other_threads()
	defined here, pass false to the underlying function.

2006-02-05 22:19  gb

	* lisp-kernel/lisp-debug.c: suspend_other_threads() and
	resume_other_threads() take a Boolean "for_gc" arg.   Pass false
	here.

2006-02-05 22:18  gb

	* lisp-kernel/ppc-exceptions.c: suspend_other_threads() and
	resume_other_threads() take a Boolean "for_gc" arg.   Pass true
	here.

2006-02-05 22:18  gb

	* lisp-kernel/lisp-exceptions.h: suspend_other_threads() and
	resume_other_threads() take a Boolean "for_gc" arg.

2006-02-05 22:17  gb

	* lisp-kernel/imports.s: provide lisp_suspend_other_threads() and
	"lisp_resume_other_threads() to lisp.

2006-02-03 07:03  gb

	* lisp-kernel/thread_manager.c: Mach exception lock is a
	pthread_mutex_t *; lock it around suspend/resume.
	
	Enable Mach suspend/suspend resume code, on the assumption that it
	(finally) works reliably.

2006-02-03 07:02  gb

	* lisp-kernel/ppc-exceptions.c: Mach exception lock is a
	pthread_mutex_t *; don't lock it reentrantly.  Define a "demux"
	routine for exception messages, though this probably wasn't
	necessary.
	
	allocptr_displacement needs to be signed_natural, not just an int
	(for ppc64.)
	
	Don't call the (fake) sigcontext a "linux sigcontext struct";
	that's just confusing.	(Rename variables "lss" ->
	"pseudosigcontext".)
	
	In mach_suspend_tcr(), use thread_abort_safely(), recognizing that
	it can have transient failures (including exception messages.) Keep
	trying until pending syscalls are aborted.
	
	Not all of this is really necessary; the old Mach lock_set either
	wasn't getting created correctly, or Mach lock_sets just don't
	work.	Need to ensure that thread_suspension uses the same lock as
	the exception thread does.

2006-02-03 06:53  gb

	* lisp-kernel/ppc-exceptions.h: More Mach exception stuff here. 
	Mach exception lock is a pthread_mutex_t *.

2006-02-03 06:52  gb

	* lisp-kernel/gc.c: Casts in vm_copy call.  (Check these on ppc64
	?).

2006-02-01 05:21  gb

	* lisp-kernel/x86-macros.s: Get tra right; tsp
	allocation/dnode_align stuff.

2006-02-01 05:19  gb

	* lisp-kernel/ppc-spentry.s: comment format

2006-02-01 04:45  gb

	* lisp-kernel/ppc-spentry.s: On return from ff-call, ensure that
	allocptr/allocbase have harmless values before asserting
	TCR_STATE_LISP.

2006-01-31 17:07  gb

	* lisp-kernel/thread_manager.c: Tried a few (conditionalized)
	things to make resume_tcr more reliable; currently, using the
	tcr->resume semaphore seems more reliable than sigsuspend when
	there are lots of active threads.

2006-01-31 17:05  gb

	* lisp-kernel/ppc-macros.s: Zero_TSP_Frame and Zero_TSP_Frame_nz:
	don't zero the frame.type on PPC64.

2006-01-31 17:04  gb

	* lisp-kernel/lisptypes.h: Fix conditinal definition of
	ExceptionInformation

2006-01-31 14:39  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: remove extra blank line.

2006-01-31 14:38  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: UNBOX-S64: get error right.

2006-01-31 14:37  gb

	* compiler/PPC/ppc2.lisp: In PPC2-VREF, in the :SIGNED-BYTE-64 case
	where the index is constant, load into the temporary S64-REG, not
	RZERO!

2006-01-30 19:48  gb

	* lisp-kernel/x86-macros.s: If using "modern" GAS, quote
	expressions in recursive macro calls.

2006-01-30 19:47  gb

	* lisp-kernel/m4macros.m4: __endfn undefines __func_name

2006-01-30 06:59  gb

	* lisp-kernel/: x86-constants64.s, x86-macros.s, x86-spentry64.s:
	More stuff.

2006-01-30 06:59  gb

	* lisp-kernel/ppc-spentry.s: Move a comment.

2006-01-30 02:39  gb

	* lisp-kernel/: lisptypes.h, m4macros.m4, pmcl-kernel.c,
	thread_manager.c, x86-constants64.h, x86-exceptions.h,
	x86-macros.s, x86-spentry64.s, Threads.h, area.h, bits.h, gc.c,
	lisp.h: Conditionalize for FreeBSD/x86-64.

2006-01-30 02:39  gb

	* lisp-kernel/freebsd8664/: Makefile, elf_x86_64.x: New files.
	
	FreeBSD make (and gmake) both want to rebuild all .s files, but
	this otherwise seems to work.

2006-01-29 20:38  gb

	* lisp-kernel/: x86-spentry64.s, x86-constants64.s, x86-macros.s,
	x86-uuo.s: May not even compile at the moment, but (a) my AMD64
	laptop's disk is acting flaky and (b) a new AMD64 X2 dual-core box
	has a weird Windows-centric motherboard and I'm having trouble
	getting Linux running on it.
	
	Any questions ?

2006-01-28 15:37  gb

	* lisp-kernel/: x86-constants64.s, x86-macros.s, x86-spentry64.s:
	Check in some stuff that's not ready yet; HW problems on x86-64
	box.

2006-01-28 02:52  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Some consing,
	stack-consing, multiple-value things.  Try to limit the number of
	vinsns that actually do heap allocation, to make pc-lusering
	simpler (or possible ...).  Assume that tsp & next-tsp are in
	registers. (MMX registers, but beggars can't be choosers.)

2006-01-28 02:49  gb

	* compiler/X86/X8664/x8664-arch.lisp: Don't enumerate/give pet
	names to MMX registers.  TCR changes.

2006-01-28 02:38  gb

	* compiler/X86/x862.lisp: More stuff works; still need to do: -
	unwind-protect cleanup context stuff - hairy lambda-list stuff -
	more consing, especially stack-consing - ffi - lots of "simple"
	primitives, memory reference stuff.

2006-01-28 02:35  gb

	* compiler/X86/x86-lapmacros.lisp: No more * for indirect jmp
	(there's enough syntax already, without that.) VECTOR-LENGTH: use 2
	args, more carefully.

2006-01-28 02:34  gb

	* compiler/X86/x86-disassemble.lisp: Stop block on UUO.  Handle
	more label-arithmetic cases, new UUO.

2006-01-28 02:33  gb

	* compiler/X86/x86-backend.lisp: Simplify pseudo-op operands, too.

2006-01-28 02:33  gb

	* compiler/X86/x86-asm.lisp: Fix mmx->mmx MOVQ.  Add MOVAPD, a few
	more UUOs.

2006-01-28 02:31  gb

	* lisp-kernel/x86-spentry64.s: More binding stuff: unbinding,
	*interrupt-level* binding.

2006-01-28 02:30  gb

	* lisp-kernel/x86-macros.s: Arg order comment.

2006-01-28 02:29  gb

	* lisp-kernel/x86-constants64.s: tsp, next_tsp in MMX regs.

2006-01-28 02:29  gb

	* lisp-kernel/x86-uuo.s: interrupt_now()

2006-01-27 20:52  gb

	* lisp-kernel/: linuxppc64/Makefile, linuxppc64/elf64ppc.x,
	linuxppc/Makefile, linuxppc/elf32ppclinux.x: Only about an hour was
	wasted, but it somehow seems longer.

2006-01-27 20:39  gb

	* lisp-kernel/: ppc-macros.s, ppc-spbind.s, ppc-spbuiltin.s,
	ppc-spentry.s, ppc-spffi.s, darwinppc/Makefile,
	darwinppc64/Makefile: Splitting ppc-spentry.s into several smaller
	files files wasn't a bad idea, but the fact that Apple's 64-bit
	linker is badly broken (can't handle branches to external symbols,
	has difficulty with forward references, etc.) makes it impractical.
	
	(Yes,  bugs in Apple's 64-bit linker have been reported, many
	months ago.)

2006-01-27 20:05  gb

	* lisp-kernel/: ppc-spentry.s, ppc-spffi.s, linuxppc/Makefile,
	linuxppc/elf32ppclinux.x, linuxppc64/Makefile,
	linuxppc64/elf64ppc.x: Split out ffi subprims to ppc-spffi.s

2006-01-27 19:49  gb

	* lisp-kernel/: ppc-spbind.s, ppc-spentry.s, darwinppc/Makefile,
	darwinppc64/Makefile, linuxppc/Makefile, linuxppc/elf32ppclinux.x,
	linuxppc64/Makefile, linuxppc64/elf64ppc.x: Move binding-related
	subprims to ppc-spbind.o

2006-01-27 19:48  gb

	* lisp-kernel/ppc-spbuiltin.s: Add a comment.

2006-01-27 19:33  gb

	* lisp-kernel/: darwinppc64/Makefile, darwinppc/Makefile,
	linuxppc/Makefile, linuxppc/elf32ppclinux.x, linuxppc64/Makefile,
	linuxppc64/elf64ppc.x: ppc-spbuiltin.o

2006-01-27 19:32  gb

	* lisp-kernel/ppc-spentry.s: Oh, now I remember: there is no
	"subi.", which explains the use of "subic.".

2006-01-27 19:28  gb

	* lisp-kernel/: ppc-macros.s, ppc-spbuiltin.s, ppc-spentry.s: Start
	to split up ppc-spentry.s into several smaller files.  Will need
	makefile changes as well; won't compile cleanly for a while.

2006-01-27 19:27  gb

	* lisp-kernel/x86-uuo.s: xuuo, other small changes.

2006-01-27 19:27  gb

	* lisp-kernel/x86-spentry64.s: Binding stuff.  Will soon split up
	this file and PPC equivalent.

2006-01-27 19:26  gb

	* lisp-kernel/x86-macros.s: Cons arg order.  More
	changes/reorganization to come.

2006-01-27 19:25  gb

	* lisp-kernel/x86-constants64.s: Get registers consistent, again.

2006-01-27 04:01  gb

	* lisp-kernel/x86-spentry64.s: Compile on x8664.

2006-01-27 02:48  gb

	* lisp-kernel/x86-uuo.s: Start to define some of what's in LAP.

2006-01-27 02:47  gb

	* lisp-kernel/x86-spentry64.s: call_closure.

2006-01-27 02:47  gb

	* lisp-kernel/x86-macros.s: Flesh out some more.

2006-01-27 02:47  gb

	* lisp-kernel/x86-constants64.s: Add nargregs.

2006-01-26 23:40  gb

	* lisp-kernel/gc.c: Compile on x8664.

2006-01-26 23:40  gb

	* lisp-kernel/ppc-spentry.s: Use subi. in SPfitvals; no need for
	subic.

2006-01-26 23:39  gb

	* lisp-kernel/x86-constants64.h: Use symbolic (GNU_SOURCE) names
	for register indices.

2006-01-26 23:38  gb

	* lisp-kernel/x86-constants64.s: Lisp_frame, nargs extensions.

2006-01-26 23:37  gb

	* lisp-kernel/x86-macros.s: Change arg order in macros, to match
	LAP.  Some fixes in do_funcall; need to update UUO defs.

2006-01-26 23:36  gb

	* lisp-kernel/x86-spentry64.s: Macro arg order, some multiple-value
	stuff, stub out unused things.

2006-01-26 23:35  gb

	* lisp-kernel/x86-spjump64.s: Flesh this out.

2006-01-26 17:30  gb

	* level-0/l0-hash.lisp: Didn't I check this in already ?  Fix
	CLRHASH locking.

2006-01-25 18:53  gb

	* lib/compile-ccl.lisp: Ellipses to indicate that kernel build may
	take a little while, and delay after successful build to increase
	the chance that the message reporting success is seen before it
	scrolls off.

2006-01-25 18:51  gb

	* release-notes.txt: Update, describing (some) recent changes.

2006-01-25 18:13  gb

	* lisp-kernel/image.h, xdump/heap-image.lisp: Bump kernel abi
	version.

2006-01-25 18:13  gb

	* lib/compile-ccl.lisp: Progress messages around kernel build.

2006-01-25 18:03  gb

	* xdump/faslenv.lisp: Finish bumping fasl version.

2006-01-25 17:57  gb

	* lib/nfcomp.lisp: Next step in bumping FASL version.

2006-01-25 17:52  gb

	* xdump/faslenv.lisp: Start bumping fasl version.

2006-01-25 17:45  gb

	* lib/ccl-export-syms.lisp: export allocation-quantum stuff.

2006-01-25 17:45  gb

	* lisp-kernel/ppc-exceptions.c: new_heap_segment tries to use
	per-thread allocation quantum.

2006-01-25 17:44  gb

	* level-1/l1-processes.lisp: Some more allocation-quantum stuff.

2006-01-25 17:44  gb

	* lib/macros.lisp: %get-natural, %get-signed-natural.

2006-01-25 17:43  gb

	* level-1/version.lisp: Bump.

2006-01-25 15:16  gb

	* level-1/: l1-lisp-threads.lisp, l1-processes.lisp: Start to
	maintain per-process allocation quantum. Still more work to do
	here.

2006-01-25 15:14  gb

	* lisp-kernel/thread_manager.c: initialize tcr's
	log2_allocation_quantum from
	lisp_global(DEFAULT_ALLOCATION_QUANTUM)

2006-01-25 15:12  gb

	* lisp-kernel/pmcl-kernel.c: set
	lisp_global(DEFAULT_ALLOCATION_QUANTUM)

2006-01-25 15:11  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp,
	compiler/X86/X8664/x8664-arch.lisp, lisp-kernel/ppc-constants32.h,
	lisp-kernel/ppc-constants32.s, lisp-kernel/ppc-constants64.h,
	lisp-kernel/ppc-constants64.s, lisp-kernel/x86-constants64.h,
	lisp-kernel/x86-constants64.s: OLDinterrupt-level ->
	log2-allocation-quantum.

2006-01-25 15:10  gb

	* compiler/PPC/ppc-arch.lisp, compiler/X86/x86-arch.lisp,
	lisp-kernel/lisp_globals.h: OLDinterrupt-level ->
	default-allocation-quantum.

2006-01-25 15:09  gb

	* compiler/reg.lisp: Constants again.

2006-01-25 03:15  gb

	* lisp-kernel/linuxppc/elf32ppclinux.x: Don't use SIZEOF_HEADERS,
	since this seems to cause confusion with ld 2.16.91/gcc 4.1.0 on
	FC5.  Define _SDA_BASE_, since some versions of crt1.o reference
	it.  (We don't use a small data area, so it'd be nice if crt1.o
	stopped referencing it. Perhaps there's an option that controls the
	C runtime startup file ?)

2006-01-25 03:10  gb

	* lisp-kernel/pad.s: Add an instruction (a NOP) here.  This seems
	to be necessary to force alignment to work correctly when the
	linker script omits SIZEOF_HEADERS.

2006-01-24 17:45  gb

	* level-1/linux-files.lisp, lisp-kernel/thread_manager.c: Several
	changes, not all of them finished.   Make the primitive which does
	timed semaphore waits use milliseconds (not nanoseconds),  and do
	the multiplication in the kernel.

2006-01-24 17:43  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: A few more things.

2006-01-24 17:43  gb

	* compiler/X86/X8664/x8664-arch.lisp: Don't (canonically) call
	temp0.b "shift".

2006-01-24 13:24  gb

	* level-1/l1-lisp-threads.lisp: In %nanosleep, check if -both-
	remaining seconds/remaining nanos are 0, not -either-.

2006-01-24 13:22  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Some FP stuff.

2006-01-24 13:20  gb

	* lib/time.lisp: Kinder, gentler seconds-to-nanoseconds conversion
	in SLEEP.

2006-01-24 13:18  gb

	* compiler/X86/x862.lisp: A few float-related (and 2-address vs
	3-address -related) changes.

2006-01-24 13:17  gb

	* compiler/X86/x86-lapmacros.lisp: Go through
	tcr.single-float-convert when boxing/unboxing immediate
	SINGLE-FLOATs.

2006-01-24 13:17  gb

	* compiler/backend.lisp: AVAILABLE-FP-TEMP: don't assume 32 bits in
	"available" mask.

2006-01-24 02:32  gb

	* compiler/reg.lisp: Change the values of those parameters.

2006-01-24 02:13  gb

	* compiler/reg.lisp: Make some bitfields used in fixnums which
	(sometimes) describe physical machine registers variables.  This is
	a little tricky to bootstrap; making them variables (instead of
	constants) is a step towards making it easier to change their
	values without fouling up the running compiler.  (They'll change
	back to constants after the "value" bitfield gets wide enough to
	accomodate interesting architectures.  Not sure about the Itanium,
	but x8664 needs more bits for byte/word/long/quad reg variants and
	for mmx/xmm/x87/seg registers, and making this field wider seems
	better than other alternatives.)

2006-01-24 01:04  gb

	* compiler/X86/X8664/x8664-arch.lisp: Constants for single-float
	tags. single-float-convert in the tcr, so we don't have to push and
	pop so much.

2006-01-23 01:53  gb

	* level-1/version.lisp: bump.

2006-01-23 01:31  gb

	* compiler/X86/x86-asm.lisp: Insert :%mmx registers.  Insert them
	in the right place in MOVD/MOVQ.

2006-01-23 01:30  gb

	* compiler/X86/x86-backend.lisp: Recognize :%mmx, :%xmm registers.

2006-01-23 01:29  gb

	* compiler/X86/x86-disassemble.lisp: New (hard-wired) registers to
	recognize.  op-indire: we're 64-bit.

2006-01-23 01:28  gb

	* compiler/X86/x86-lap.lisp: Relaxation of :ALIGN frags : get diff
	right.

2006-01-23 01:27  gb

	* compiler/X86/x862.lisp: More stuff works.  Need a less-ugly way
	of dealing with the fact that x8864 save regs, x8664 arg regs
	aren't assigned contiguous identifiers.

2006-01-23 01:26  gb

	* compiler/X86/X8664/x8664-arch.lisp: Make a few symbolic register
	names more canonical.

2006-01-23 01:25  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Fixnum addition, overflow
	handling, etc.

2006-01-23 01:24  gb

	* level-1/l1-lisp-threads.lisp: Move %CONS-FAKE-STACK-FRAME
	elsewhere.

2006-01-23 01:22  gb

	* level-1/linux-files.lisp: TIMED-WAIT-ON-SEMAPHORE: use
	GET-INTERNAL-REAL-TIME, accept an optional semaphore-notification.

2006-01-23 01:21  gb

	* level-1/ppc-trap-support.lisp: Move the %CONS-FAKE-STACK-FRAME
	macro here.
	
	When consing up a fake stack from from an exception context, stick
	the context in the frame's (new) xp slot.

2006-01-23 01:20  gb

	* lib/backtrace.lisp: Warn that much of this is PPC-specific.
	
	When looking for a saved register value, look in the xp of any
	fake-stack-frame we encounter.

2006-01-23 01:18  gb

	* library/lispequ.lisp: Add %fake-stack-frame-xp.  (This causes
	some constants/accessors to be redefined; (COMPILE-CCL T) - and
	continuing through redefinitions - is suggested.)

2006-01-21 11:48  gb

	* examples/hons-example.lisp: Fix
	LARGEST-PRIME-LESS-THAN-OR-EQUAL-TO in the case where the arg is a
	prime.
	
	In HONS, don't wander around looking for new honses in old tables.

2006-01-20 18:57  gb

	* level-1/version.lisp: bump.

2006-01-20 18:56  gb

	* level-1/l1-readloop.lisp: No more ERROR-HEADER.

2006-01-20 18:50  gb

	* level-1/l1-readloop-lds.lisp: Don't use ERROR-HEADER, since error
	messages are now formatted differently.

2006-01-20 18:49  gb

	* level-1/l1-init.lisp: *MAIN-LISTENER-PROCESS-NAME* hasn't been
	correct in years, isn't used now.

2006-01-20 18:48  gb

	* level-1/l1-events.lisp: Call %break-in-frame in response to a
	keyboard interrupt.

2006-01-20 18:47  gb

	* level-1/l1-error-system.lisp: Some stack-walking changes, so
	error message contexts are often more meaningful.

2006-01-20 18:45  gb

	* level-1/l1-dcode.lisp: Define FLATTEN-METHOD-LAMBDA-LIST, which
	removes initforms from the lambda list (making it more suitable for
	use as a gf lambda list).

2006-01-20 18:43  gb

	* level-1/l1-clos-boot.lisp: Change error reporting in
	CHECK-DEFMETHOD-CONGRUENCY.

2006-01-20 18:41  gb

	* compiler/backend.lisp: Lose extra comma.

2006-01-19 13:13  gb

	* lib/numbers.lisp: Check for null expt in PARSE-FLOAT.

2006-01-18 23:31  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: More stuff works.

2006-01-18 23:30  gb

	* compiler/X86/X8664/x8664-arch.lisp: Swap arg_z and temp0, on the
	theory that references to it may be able to avoid REX prefixes
	sometimes.

2006-01-18 23:29  gb

	* compiler/X86/x862.lisp: Get some more stuff working.

2006-01-18 23:29  gb

	* compiler/X86/x86-lapmacros.lisp: Use new UUOs for type - er for
	tag checking.

2006-01-18 23:28  gb

	* compiler/X86/x86-lap.lisp: Get LAP constants in the right order. 
	Indentation fixes, other subtle changes too hard to recognize.

2006-01-18 23:27  gb

	* compiler/X86/x86-disassemble.lisp: Recognize new UUOs; print
	suffixes more often.

2006-01-18 23:26  gb

	* compiler/X86/x86-asm.lisp: Several fixes, still more uuos.

2006-01-18 23:25  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Fix a constraint.

2006-01-18 23:24  gb

	* compiler/PPC/ppc2.lisp: Use TARGET-WORD-SIZE-CASE, 'cause that's
	what we're testing for,

2006-01-18 23:23  gb

	* compiler/vinsn.lisp: Introduce a :sets-cc vinsn attribute, which
	might (or might not) help to avoid some extra testing of condition
	codes.

2006-01-18 23:22  gb

	* compiler/nx0.lisp: Recognize s32 constants.  (Note that this is
	for comparisons, and includes some non-fixnum cases.)

2006-01-18 23:20  gb

	* compiler/backend.lisp: A few horribly-named macros for register
	targeting, handling u8-targeted primitives (for tag checking.)

2006-01-18 20:29  gb

	* lisp-kernel/: x86-macros.s, x86-uuo.s: Register renumbering.	New
	consing/uuo scheme.  (Looked at other strategies, including a
	spin-lock on a global heap with yield()ing.  The per-thread memory
	pool scheme seems to win.  Big.  So we have to know how to
	interrupt it.)

2006-01-18 20:26  gb

	* lisp-kernel/x86-constants64.h: Register renumbering.

2006-01-18 13:07  gb

	* lisp-kernel/x86-asmutils64.s: Add missing colon after label.

2006-01-18 04:43  gb

	* lisp-kernel/: x86-constants64.s, x86-macros.s, x86-uuo.s: some
	changes; may not compile

2006-01-17 04:41  gb

	* level-1/version.lisp: More bumping; enough for today.  Needs
	work, but I need sleep.

2006-01-17 04:40  gb

	* compiler/optimizers.lisp: Lose target-arch-case.

2006-01-17 04:04  gb

	* compiler/: PPC/PPC32/ppc32-arch.lisp, PPC/PPC64/ppc64-arch.lisp,
	X86/X8664/x8664-arch.lisp: Use the new slots for type info.

2006-01-17 03:45  gb

	* compiler/nx1.lisp: Lose target-arch-case.

2006-01-17 03:44  gb

	* compiler/nx0.lisp: Backend vector type stuff here; lose
	target-arch-case.

2006-01-17 03:43  gb

	* compiler/arch.lisp: More slots for arch-specific type info.

2006-01-17 03:42  gb

	* compiler/backend.lisp: Can use target-word-size-case here.

2006-01-17 03:41  gb

	* compiler/: PPC/ppc2.lisp, X86/x862.lisp: Move vector typecode
	stuff to frontend and rename it.

2006-01-17 02:56  gb

	* level-1/version.lisp: Bump; new binaries soon.

2006-01-17 02:55  gb

	* compiler/: nx0.lisp, nx1.lisp: Start to use alternatives to
	TARGET-ARCH-CASE.

2006-01-17 02:54  gb

	* compiler/X86/: x862.lisp, X8664/x8664-vinsns.lisp: A little more.

2006-01-17 02:54  gb

	* compiler/: PPC/PPC32/ppc32-arch.lisp, PPC/PPC64/ppc64-arch.lisp,
	X86/X8664/x8664-arch.lisp: set the new fields (unbound/slot-unbound
	tokens)

2006-01-17 02:29  gb

	* lib/macros.lisp: target-word-size-case

2006-01-17 02:28  gb

	* compiler/arch.lisp: Add some fields to target-arch structure.

2006-01-17 00:26  gb

	* compiler/X86/x86-asm.lisp: Split things up to simplify vinsn
	expansion.

2006-01-17 00:25  gb

	* compiler/X86/x86-backend.lisp: Vinsn template parsing.

2006-01-17 00:25  gb

	* compiler/X86/x86-disassemble.lisp: Recognize more uuos, syntax
	changes.

2006-01-17 00:25  gb

	* compiler/X86/x86-lap.lisp: Split some thing up for
	vinsn-expansion.  Nuke branches to next instruction, which the
	compiler casually generates.

2006-01-17 00:22  gb

	* compiler/X86/x86-lapmacros.lisp: No "absolute" jump syntax (*
	ea).  Use :^ in label-offset expressions.

2006-01-17 00:21  gb

	* compiler/X86/x862.lisp: Still several compilation warnings, but
	some things work.

2006-01-17 00:21  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Start to flesh out.  Note
	use of (keyword) "overqualifiers" (tm).

2006-01-17 00:19  gb

	* level-0/X86/x86-pred.lisp: typo in EQL.

2006-01-17 00:18  gb

	* lib/compile-ccl.lisp: x86/x8664 compiler stuff.

2006-01-17 00:18  gb

	* lib/systems.lisp: add x8664-vinsns.  ppc-reg was renamed long
	ago.

2006-01-17 00:17  gb

	* lib/x8664env.lisp: Exactly one cr field.

2006-01-17 00:16  gb

	* level-1/ppc-trap-support.lisp: Use target::node-size (not 4!) in
	xp-argument-list.

2006-01-17 00:16  gb

	* compiler/X86/X8664/x8664-arch.lisp: node-size =
	word-size-in-bytes

2006-01-17 00:15  gb

	* compiler/vreg.lisp: rename s64-const -> s64const, since it's used
	now.

2006-01-13 09:22  gb

	* lib/x8664env.lisp: $undo-x86-c-frame.

2006-01-13 09:21  gb

	* lib/systems.lisp: Add x862.

2006-01-13 09:21  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: New syntax, where operand
	types are heavily qualified (the idea here is to make it possible
	to match opcodes exactly at %define-vinsn time.)

2006-01-13 09:19  gb

	* compiler/X86/X8664/x8664-backend.lisp: Don't use #', since the
	functions are moving targets.

2006-01-13 09:18  gb

	* compiler/X86/x862.lisp: Well, it compiles (with lots of warnings)
	and needs some work ...

2006-01-13 09:17  gb

	* compiler/X86/x86-lap.lisp: Define and use MATCH-TEMPLATE-TYPE.

2006-01-13 09:16  gb

	* compiler/X86/x86-disassemble.lisp: Don't automatically label the
	first instruction (it gets labeled on backward branch.)

2006-01-13 09:15  gb

	* compiler/X86/x86-backend.lisp: First cut at some vinsn-defining
	things.

2006-01-13 09:14  gb

	* compiler/X86/x86-asm.lisp: some alu ops want :imm8s for 8-bit
	immediates, not :imm8.

2006-01-13 09:14  gb

	* compiler/X86/x86-arch.lisp: condition-code constants.

2006-01-13 09:13  gb

	* compiler/PPC/ppc2.lisp: Use renamed operators.

2006-01-13 09:13  gb

	* compiler/PPC/ppc-backend.lisp: Fix some typos, I think ..

2006-01-13 09:12  gb

	* compiler/: nx1.lisp, nxenv.lisp: Rename some operators that had
	PPC in their names to distinguish themselves from the 68K versions,
	10-12 years ago.

2006-01-12 11:30  gb

	* compiler/PPC/ppc2.lisp: ppc2-%i+,%i-,%ineg: when oveflow checking
	out-of-line, don't use <-, but copy arg_z to the (temporary) target
	register.
	
	When targeting "natural" args in poweropen ff-calls, account for
	the possibility that the target isn't what we'd allocated for it.

2006-01-12 01:33  gb

	* compiler/PPC/ppc-backend.lisp: Fix DEFINE-PPC-VINSN.

2006-01-12 01:32  gb

	* level-1/version.lisp: Bump again.  Maybe a little difficult to
	bootstrap; new binaries soon if so.

2006-01-12 01:25  gb

	* level-1/version.lisp: Bump.  Maybe a little difficult to
	bootstrap; new binaries soon if so.

2006-01-12 01:25  gb

	* level-0/X86/: x86-float.lisp, x86-hash.lisp, x86-io.lisp,
	x86-misc.lisp, x86-numbers.lisp, x86-pred.lisp, x86-symbol.lisp,
	x86-utils.lisp, X8664/x8664-bignum.lisp: Most (if not all) things
	that have been translated to x8664 assembler assemble (and,
	according to the dissassembler, do so correctly.)
	
	Maybe about 80% coverage; still a few hard cases.

2006-01-12 01:23  gb

	* level-0/PPC/ppc-misc.lisp: VOID-ALLOCPTR looks like -16 on PPC64.

2006-01-12 01:22  gb

	* compiler/X86/X8664/x8664-backend.lisp: Reference new stub vinsn
	functions.

2006-01-12 01:21  gb

	* compiler/X86/x86-backend.lisp: Stub vinsn functions.

2006-01-12 01:21  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: DEFINE-X8664-VINSN.

2006-01-12 01:19  gb

	* compiler/X86/X8664/x8664-arch.lisp: Change the calling sequence:
	no %nfn, new %ra0.

2006-01-12 01:18  gb

	* compiler/X86/: x86-lap.lisp, x86-lapmacros.lisp,
	x86-disassemble.lisp: No explicit "@entry" label; ^-expressions
	implicitly reference it.

2006-01-12 01:16  gb

	* compiler/X86/x86-asm.lisp: More bug fixes.

2006-01-12 01:12  gb

	* compiler/PPC/: PPC32/ppc32-backend.lisp,
	PPC64/ppc64-backend.lisp: Use DEFINE-PPC-VINSN to define vinsns.

2006-01-12 01:11  gb

	* compiler/PPC/ppc-backend.lisp: Define a DEFINE-VINSN function for
	PPC backends here.

2006-01-12 01:10  gb

	* compiler/vinsn.lisp: Pass all args to the backend's define-vinsn
	function, including the backend

2006-01-12 00:55  gb

	* compiler/PPC/ppc-asm.lisp: Remove ancient commented-out code.

2006-01-12 00:55  gb

	* compiler/vinsn.lisp: %DEFINE-VINSN uses the backend's
	define-vinsn function.

2006-01-12 00:54  gb

	* compiler/backend.lisp: BACKENDs now have a DEFINE-VINSN slot.

2006-01-10 20:37  gb

	* compiler/X86/x86-asm.lisp: testq matches :reg64 not :reg32. 
	Imagine that.

2006-01-10 20:36  gb

	* compiler/X86/X8664/x8664-arch.lisp: Define (minimal) lisp-frame.

2006-01-10 20:36  gb

	* level-0/X86/x86-numbers.lisp: Moved some float stuff from
	x86-numbers to x86-float.  Get most of this translated (except for
	%FIXNUM-GCD.)

2006-01-10 20:35  gb

	* level-0/X86/x86-float.lisp: Moved some float stuff from
	x86-numbers to x86-float.

2006-01-10 20:35  gb

	* level-0/PPC/: ppc-float.lisp, ppc-numbers.lisp: Moved some float
	stuff from ppc-numbers to ppc-float.

2006-01-10 20:34  gb

	* level-0/X86/: x86-clos.lisp, x86-def.lisp: Moved some trampoline
	stuff from x86-def to x86-clos.

2006-01-10 20:33  gb

	* level-0/PPC/: ppc-clos.lisp, ppc-def.lisp: Moved some trampoline
	stuff from ppc-def to ppc-clos.

2006-01-10 20:32  gb

	* lib/systems.lisp: x86-disassemble: source needed extension.

2006-01-10 20:32  gb

	* lib/compile-ccl.lisp: Indentation in NEEDS-COMPILE-P.

2006-01-10 05:57  gb

	* compiler/X86/x86-lapmacros.lisp: more stack-frame stuff,
	%car/%cdr, constant refs, call/jump-symbol.

2006-01-10 05:50  gb

	* compiler/X86/x86-asm.lisp: Use EVAL-WHEN, reorder things so that
	it compiles (still a warning or two, maybe.)
	
	Add UUO-STACK-OVERFLOW.

2006-01-10 05:50  gb

	* level-0/X86/: x86-clos.lisp, x86-def.lisp, x86-io.lisp,
	x86-misc.lisp, x86-numbers.lisp, x86-utils.lisp: initial checkin

2006-01-10 05:46  gb

	* compiler/X86/x86-disassemble.lisp: Recognize uuo-stack-overflow.
	
	When finding pc-relative refs in operands, the constant ref is a
	memory operand, not an immediate operand.

2006-01-10 05:38  gb

	* compiler/X86/X8664/x8664-arch.lisp: Rename a few registers.

2006-01-10 05:37  gb

	* level-0/X86/x86-pred.lisp: x8664 LAP.

2006-01-10 05:37  gb

	* lisp-kernel/x86-macros.s: Add a 'q' suffix.

2006-01-09 05:46  gb

	* compiler/X86/x86-disassemble.lisp: Fixes: register-based shifts
	(#xd3 with different /n in the modrm byte) had the wrong table
	index.
	
	x8664-special (basically, movslq) table and handling of it was
	wrong.

2006-01-09 05:44  gb

	* compiler/X86/x86-asm.lisp: Fix handling of index, scale when base
	register present in INSERT-MEMORY.
	
	More fixes to opcode templates, including movslq and mul.

2006-01-09 05:41  gb

	* level-0/: l0-bignum32.lisp, l0-bignum64.lisp: Fix EVAL-WHEN
	stuff.

2006-01-09 05:29  gb

	* level-0/l0-bignum32.lisp: common for 32-bit targets

2006-01-09 05:27  gb

	* level-0/PPC/PPC32/l0-bignum-ppc32.lisp: moved and renamed

2006-01-09 05:24  gb

	* level-0/l0-bignum64.lisp: common for 64-bit targets

2006-01-09 05:22  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: renamed and moved

2006-01-09 05:01  gb

	* level-0/X86/X8664/x8664-bignum.lisp: new file

2006-01-09 04:53  gb

	* compiler/X86/x86-lapmacros.lisp: UNBOX-FIXNUM does arithmetic
	shift.

2006-01-09 04:52  gb

	* compiler/X86/X8664/x8664-arch.lisp: imm1.b is dl, not dx.

2006-01-09 00:40  gb

	* level-0/X86/x86-array.lisp: Still some PPC code here.

2006-01-09 00:37  gb

	* level-0/X86/x86-symbol.lisp: No PPC code.  No x8632 code, either.

2006-01-09 00:36  gb

	* compiler/X86/x86-lapmacros.lisp: Some conditional traps. 
	CMP-TO-NIL for x8664 (where NIL has its own tag.)

2006-01-09 00:33  gb

	* compiler/X86/x86-lap.lisp: Try to handle NIL, T in expressions. 
	Move template-matching to x86-asm (and therefore x86::).

2006-01-09 00:31  gb

	* compiler/X86/x86-disassemble.lisp: Handle UUOs.

2006-01-09 00:31  gb

	* compiler/X86/x86-asm.lisp: More bug fixes.

2006-01-08 02:46  gb

	* level-0/X86/x86-hash.lisp: New file.	No PPC or X8632 code here.

2006-01-08 02:45  gb

	* compiler/X86/: x86-lap.lisp, x86-lapmacros.lisp: Don't use ^ for
	simple label references.

2006-01-08 02:44  gb

	* compiler/X86/x86-disassemble.lisp: Use .pt and .pn for branch
	prediction.  Don't use ^ syntax for simple label references.

2006-01-08 02:42  gb

	* compiler/X86/x86-asm.lisp: Some CMOVxx templates put operands in
	the wrong places.

2006-01-08 02:41  gb

	* compiler/PPC/ppc-lap.lisp: Compulsive comment formatting.

2006-01-07 20:08  gb

	* level-0/X86/x86-float.lisp: No ppc code.  (No 32-bit x86 code,
	either; will need some, eventually.)

2006-01-07 20:07  gb

	* level-0/l0-float.lisp: conditionalize on target word size, which
	is what most/all of the #+ppc32-target/#+ppc64-target stuff was
	concerned with.  (In turn, the word size is trying to say "are
	SINGLE-FLOATs immediate ?" and "do we have to drop into lap to deal
	with 32-bit words efficiently ?")

2006-01-07 20:05  gb

	* compiler/X86/x86-lapmacros.lisp: rcmp, to prevent (or delay the
	onset of) madness.
	
	Use .pt and .pn for static branch prediction.
	
	Add int-to-single.

2006-01-07 20:03  gb

	* compiler/X86/x86-asm.lisp: Flesh out some more, fix some bugs.

2006-01-07 20:03  gb

	* compiler/X86/x86-arch.lisp: Define MXCSR stuff.

2006-01-06 08:32  gb

	* compiler/X86/x86-asm.lisp: More of the new scheme.  Still need to
	flesh out the opcode descriptions (mostly SSE* stuff and other
	newer instructions.)
	
	Should try to sanity check agains old (GAS) template data. 
	Somehow.

2006-01-06 08:30  gb

	* compiler/X86/x86-lap.lisp: Still some leftover code from the old
	scheme, but what's there of the new scheme seems to work.

2006-01-06 08:29  gb

	* compiler/X86/x86-disassemble.lisp: Some bug fixes: op-imreg
	-really- isn't op-reg, sign-extend when getting a signed-byte 32
	...

2006-01-05 07:55  gb

	* library/lispequ.lisp: Remove 68k-MCL comment.

2006-01-05 07:54  gb

	* compiler/X86/: x86-asm.lisp, x86-lap.lisp: Start moving away from
	high-level "instruction templates" and towards more detailed
	"opcode templates".  The latter are intended to make it easier to
	generate code from (e.g.) the compiler.
	
	(This is currently about half there.  The assembler doesn't work at
	the moment, and the "opcode templates" are missing some things that
	might be used in compiled/lap code and their definitions may
	contain typos. It's worth doing, in that it'll allow the compiler
	to generate machine code while bypassing much of the old
	implementation's parse- time side effects and special-cases.)

2006-01-05 07:48  gb

	* compiler/X86/x86-lapmacros.lisp: Some stuff for entering/leaving
	functions.

2006-01-05 07:47  gb

	* level-1/l1-reader.lisp: %unreadable: don't assume that STREAM is
	referenced in format-string arg.

2006-01-05 07:46  gb

	* level-0/l0-float.lisp: A little  conditionalization.

2006-01-05 07:46  gb

	* level-0/X86/x86-float.lisp: A little more code and
	conditionalization.

2006-01-01 20:23  gb

	* level-1/version.lisp: Bump.

2006-01-01 20:20  gb

	* examples/hons-example.lisp: More changes.  Enough for now.

2006-01-01 20:04  gb

	* lisp-kernel/gc.c: Init hons space to #<Unbound>, don't make this
	appear unconditional.

2006-01-01 17:28  gb

	* lisp-kernel/ppc-spentry.s: No cmpd here.

2006-01-01 16:59  gb

	* library/hash-cons.lisp: Correct last comment: real change was
	revival of HONS-FREE-MARKER; it and HONS-DELETED-MARKER are macros.

2006-01-01 16:58  gb

	* examples/hons-example.lisp: Changed, yet again.  Some
	intentionally bad hashing here.

2006-01-01 16:56  gb

	* lisp-kernel/ppc-spentry.s: _SPbuiltin_eql: as far as it goes,
	doesn't have to be conditionalized for ppc32/ppc64.  Should really
	do it all here; the only (slightly) hard cases are ratio & complex.

2006-01-01 16:54  gb

	* lisp-kernel/gc.c: bzero new static dnodes in grow_hons_area.
	
	Skip over them when counting immediate bytes before purify.  (Need
	to do more skipping in purify/impurify.)

2006-01-01 16:52  gb

	* library/hash-cons.lisp: Changed, yet again.  Some intentionally
	bad hashing here.

2005-12-31 13:34  gb

	* examples/hons-example.lisp: Don't write back "for obscure GC
	reasons".

2005-12-31 12:04  gb

	* lisp-kernel/pmcl-kernel.c: Don't touch pages when committing
	them.

2005-12-31 12:04  gb

	* lisp-kernel/gc.c: Don't write to new hons cells in
	grow_hons_area(); let application code fault pages in.

2005-12-31 12:03  gb

	* library/hash-cons.lisp: Don't use "free markers", but do lookup
	indices in the bitmap.

2005-12-31 12:02  gb

	* level-0/l0-init.lisp: add :OPENMCL-HASH-CONSING to *FEATURES*.

2005-12-31 12:01  gb

	* examples/hons-example.lisp: New file.

2005-12-31 12:01  gb

	* compiler/PPC/ppc-lapmacros.lisp: Add TEST-BIT-AT-INDEX.

2005-12-31 07:35  gb

	* lisp-kernel/ppc-exceptions.c: Handle faults in touch_page(), by
	forcing it to return false.

2005-12-31 07:34  gb

	* lisp-kernel/pmcl-kernel.c: try to touch_all_pages() after
	committing memory, to defeat overcommit.

2005-12-31 07:26  gb

	* lisp-kernel/: ppc-asmutils.s, x86-asmutils64.s: touch_page.

2005-12-31 04:12  gb

	* doc/INFO/.cvsignore: new file

2005-12-31 03:37  gb

	* lib/: ccl-export-syms.lisp, compile-ccl.lisp: Rename
	"rebuild-openmcl" to "rebuild-ccl" and export it.

2005-12-31 03:08  gb

	* lib/compile-ccl.lisp: :linuxppc64 standard-boot-image-name is
	ppc-boot64, not ppc64-boot.

2005-12-31 02:55  gb

	* lisp-kernel/pmcl-kernel.c: Lose the (old) metering_control.

2005-12-31 02:54  gb

	* lisp-kernel/imports.s: Don't reference metering_control.

2005-12-31 02:37  gb

	* lisp-kernel/gc.c: when shrinking HONS area, remember that
	delta_in_bytes is negative.

2005-12-31 02:37  gb

	* lisp-kernel/pmcl-kernel.c: Lose old metering stuff.  Don't enter
	debugger on mmap failure in grow_dynamic_area

2005-12-31 02:35  gb

	* lisp-kernel/image.c: Add a newline to an error message.  Retain
	DELETED_STATIC_PAIRS in saved images.

2005-12-31 02:34  gb

	* lib/compile-ccl.lisp: Experimental REBUILD-CCL function.

2005-12-31 02:33  gb

	* level-0/X86/x86-float.lisp: double-float-abs!.  Not sure what to
	do about NaNs, etc.

2005-12-31 02:32  gb

	* level-1/version.lisp: Keep bumping.

2005-12-31 02:32  gb

	* level-0/PPC/ppc-pred.lisp: Try to bum the 32-bit EQUAL a bit. 
	The ppc64 version needs work, too.

2005-12-31 02:30  gb

	* lisp-kernel/x86-macros.s: nargs is a 16-bit register on x86.

2005-12-31 02:30  gb

	* lisp-kernel/x86-constants64.h: define log2_nbits_in_word for
	x8664.

2005-12-31 02:29  gb

	* lisp-kernel/gc.c: AREA_CSTACK is uninteresting to GC on x86.	no
	"nukable" pointers (to HONS space) in AREA_CSTACK on ppc, either.

2005-12-31 02:28  gb

	* .cvsignore: Ignore *x86cl*.

2005-12-30 02:11  gb

	* level-0/l0-misc.lisp: hons-area-size is now in openmcl-hons.

2005-12-30 01:11  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile: CVS
	mishap.

2005-12-30 01:10  gb

	* lisp-kernel/darwinppc64/Makefile, lisp-kernel/darwinppc/Makefile,
	library/hash-cons.lisp: Missing package prefix.

2005-12-30 01:02  gb

	* library/hash-cons.lisp: Put things in their own package
	(OPENMCL-HONS:), flesh out documentation/doc strings a bit. 
	(more).

2005-12-29 19:44  gb

	* level-1/l1-readloop.lisp: Make :Q  work again.

2005-12-29 04:48  gb

	* lisp-kernel/gc.c: Deal with shrinking the hons area.

2005-12-29 04:48  gb

	* lisp-kernel/ppc-exceptions.c: Handle cleanup of each tcr's
	gc_context in gc_like_from_xp, not in the GC proper.

2005-12-29 04:47  gb

	* lisp-kernel/pmcl-kernel.c: shrink_dynamic_area by a natural, not
	just an unsigned.  When creating the tenured area, move the
	static_used bitvector there from the active dynamic area.

2005-12-29 04:45  gb

	* lisp-kernel/image.c: Deal with the hons-space bitmap (saved in
	the image, after the dynamic section contents).
	
	It's an error if we're on the wrong platform.

2005-12-29 04:36  gb

	* lisp-kernel/image.h: Bump ABI_VERSION_MIN.

2005-12-29 04:34  gb

	* level-0/l0-misc.lisp: %USEDBYTES and ROOM account for hons space.

2005-12-28 16:34  gb

	* xdump/heap-image.lisp: write (target) platform info to header. 
	TODO: endianness of host/target, page size assumptions.

2005-12-28 16:31  gb

	* xdump/: faslenv.lisp, xfasload.lisp: rename $fasl-arch to
	$fasl-platform.

2005-12-28 16:31  gb

	* lisp-kernel/: image.c, image.h: bump max/current abi version, min
	to soon follow.  store target "platform" in header.flags,
	regardless of word size.  check flags when loading; should be fatal
	error after bootstrapping.

2005-12-28 16:29  gb

	* lisp-kernel/pmcl-kernel.c: use new PLATFORM constants to set
	kernel_global(HOST_PLATFORM).

2005-12-28 16:29  gb

	* lisp-kernel/lisp.h: New PLATFORM constants.

2005-12-28 16:28  gb

	* lib/nfcomp.lisp: $fasl-arch -> $fasl-platform, get it from
	backend-target-platform.

2005-12-28 16:28  gb

	* level-1/version.lisp: Bump; new binaries soon.

2005-12-28 16:27  gb

	* level-0/nfasload.lisp: Rename $fasl-arch to $fasl-platform.

2005-12-28 16:27  gb

	* level-0/: l0-misc.lisp, l0-utils.lisp: Referring to
	area-staticlib is soooo 2005, but these constants don't need to be
	in the ppc package in 2006.

2005-12-28 16:26  gb

	* compiler/: PPC/PPC32/ppc32-backend.lisp,
	PPC/PPC64/ppc64-backend.lisp, X86/X8664/x8664-backend.lisp:
	backend-target-architecture -> backend-target-platform; use new
	constants.

2005-12-28 16:25  gb

	* compiler/PPC/ppc-arch.lisp: Fix package in attribute line.

2005-12-28 16:24  gb

	* compiler/backend.lisp: Platform constants;
	backend-target-architecture -> backend-target-platform.

2005-12-28 09:49  gb

	* xdump/heap-image.lisp: Don't set the (was disk-size, now
	static-dnodes) field of section header to non-zero value.

2005-12-27 14:19  gb

	* lib/encapsulate.lisp: ADVISE-GLOBAL-DEF: don't generate
	DYNAMIC-EXTENT declarations, since they're too easy to violate.

2005-12-27 05:29  gb

	* level-1/version.lisp: Bumped (yesterday ...).

2005-12-27 05:28  gb

	* level-0/PPC/ppc-utils.lisp: hons-size stuff moved to HASH-CONS.

2005-12-27 05:26  gb

	* compiler/X86/x862.lisp: Absolutely wrong and useless, but at
	least it's checked in.

2005-12-27 05:25  gb

	* level-0/l0-hash.lisp: Use the 32-bit ROTATE-HASH-CODE on PPC64,
	for now.

2005-12-27 05:25  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp:
	Constants for bitvector operations.

2005-12-27 05:20  gb

	* compiler/PPC/ppc-lapmacros.lisp: Bitvector stuff (used exactly
	once.)

2005-12-27 05:19  gb

	* compiler/PPC/ppc-arch.lisp: Reformat a comment.

2005-12-27 05:18  gb

	* library/hash-cons.lisp: New file.

2005-12-27 05:17  gb

	* lib/compile-ccl.lisp, lib/systems.lisp, level-1/l1-boot-2.lisp:
	Add HASH-CONS.

2005-12-27 05:17  gb

	* lisp-kernel/image.c: Don't use disk_size field of section header.

2005-12-27 05:16  gb

	* lisp-kernel/image.h: replace "disk_size" field in section header
	with "static_dnodes".

2005-12-27 05:15  gb

	* lisp-kernel/gc.c: Keep static_dnodes, static_used in tenured_area
	(never active), use static_dnodes_for_area().
	
	forward_and_resolve_static_references(): only call (paraoia) if not
	EGC.  Retain usedbits set from markbits.
	
	adjust_pointers_in_dynamic_area(): handles static dnodes if
	necessary.
	
	adjust_all_pointers: don't adjust area start/end, since
	grow_dynamic_area() does all that.  Caller adjusts active area
	active field.
	
	Add an mremap() for Darwin.

2005-12-27 04:57  gb

	* lisp-kernel/pmcl-kernel.c: hardlimit field is unused on heap
	areas.

2005-12-27 04:56  gb

	* lisp-kernel/macros.h: box_fixnum, unbox_fixnum:  signed_natural,
	not int.

2005-12-26 03:37  gb

	* lisp-kernel/: linuxppc/Makefile, linuxppc64/Makefile,
	static-linuxppc/Makefile: -D_GNU_SOURCE

2005-12-26 01:18  gb

	* lisp-kernel/gc.c: Lots of stuff of allocating hons area &
	adjusting other addresses.  Tenured_area (and aliases) may now have
	static prefix, so be careful when relocating/forwarding (and use
	new "dynamic" GC pointers.)

2005-12-26 01:16  gb

	* lisp-kernel/gc.h: More GC variables, for relocation of dynamic
	dnodes only.
	
	Extra param on some GC-like functions.
	
	Add GC_TRAP_FUNCTION_SET_HONS_AREA_SIZE

2005-12-26 01:15  gb

	* lisp-kernel/image.c: say "log2_page_size", not "12".

2005-12-26 01:14  gb

	* lisp-kernel/lisp-exceptions.h: gc_like_from_xp functions take an
	extra signed_natural parameter.

2005-12-26 01:13  gb

	* lisp-kernel/lisp.h: Declare page_size, log2_page_size.

2005-12-26 01:12  gb

	* lisp-kernel/pmcl-kernel.c: use "log2_page_size" instead of "12".
	
	Ahem.  Map lots-o-memory on linuxppc64, too.

2005-12-26 01:11  gb

	* lisp-kernel/: ppc-constants.s, lisp_globals.h: bad_go_tag_counter
	is now "deleted_static_pairs".

2005-12-26 01:09  gb

	* lisp-kernel/: ppc-constants64.h, ppc-constants32.h: define
	log2_nbits_in_word.

2005-12-26 01:09  gb

	* lisp-kernel/ppc-exceptions.c: define page_size, log2_page_size.

2005-12-26 01:08  gb

	* lisp-kernel/thread_manager.c: use "log2_page_size" instead of
	"12".

2005-12-26 01:08  gb

	* lisp-kernel/x86-constants.s: bad_go_tag_counter is now
	"deleted_static_pairs".

2005-12-26 01:07  gb

	* lisp-kernel/area.h: Use new name for "managed static" areas.	New
	static_dnodes, static_used fields in areas.

2005-12-26 01:06  gb

	* level-1/l1-lisp-threads.lisp: Use new name for "managed static"
	areas.

2005-12-26 01:05  gb

	* level-0/PPC/ppc-utils.lisp: Use symbolic constants for gc traps. 
	Defin SET-CONS-AREA-SIZE.

2005-12-26 01:05  gb

	* level-0/PPC/ppc-misc.lisp: Use symbolic constants for gc traps.

2005-12-26 01:04  gb

	* compiler/X86/x86-arch.lisp: bad-go-tag-counter ->
	deleted-static-pairs, use "managed-static" area coded instead of
	"staticlib".  (Define area codes, which were missing.)

2005-12-26 01:02  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp: area
	struct: it's been "dnodes" (not "dwords") for a while now.  Add
	static-dnodes, static-used fields.

2005-12-26 01:01  gb

	* compiler/PPC/ppc-arch.lisp: bad-go-tag-counter ->
	deleted-static-pairs, use "managed-static" area coded instead of
	"staticlib"

2005-12-26 00:54  gb

	* compiler/arch.lisp: Define GC trap function constants, including
	new GC-TRAP-FUNCTION-SET-HONS-AREA-SIZE.

2005-12-23 18:23  gb

	* level-1/l1-readloop-lds.lisp: Output of :FORM observes
	*BACKTRACE-PRINT-LEVEL* and *BACKTRACE-PRINT-LENGTH*.

2005-12-23 14:49  gb

	* lib/backtrace.lisp, level-1/l1-readloop-lds.lisp,
	lib/ccl-export-syms.lisp: Add :form and :function backtrace
	commands.

2005-12-22 16:58  gb

	* lib/backtrace.lisp: Try to show something that looks like a
	function call (with required arguments and an indication of other
	arguments) in backtrace.
	
	Use *BACKTRACE-PRINT-LEVEL* and *BACKTRACE-PRINT-LENGTH* to
	constrain printing of arguments and frame contents.

2005-12-22 10:34  gb

	* compiler/X86/x86-asm.lisp: Being compilable is good.

2005-12-22 10:13  gb

	* compiler/X86/x86-asm.lisp: Start trying to separate x86-64 from
	x86-32 stuff, a little.

2005-12-22 10:12  gb

	* compiler/X86/: X8664/x8664-arch.lisp, x86-disassemble.lisp:
	"symbolic registers" map standard reg names (not x86-reg-entrys) to
	lisp reg names.

2005-12-22 10:11  gb

	* compiler/X86/X8664/x8664-backend.lisp: Tweak target features,
	target-arch id.

2005-12-22 10:10  gb

	* lib/: compile-ccl.lisp, systems.lisp: Update a little more.

2005-12-22 10:09  gb

	* x86-headers64/libc/.cvsignore: new

2005-12-21 07:36  gb

	* x86-headers64/libc/C/: .cvsignore, populate.sh: new files

2005-12-21 07:01  gb

	* level-0/X86/x86-float.lisp: A few small changes, mostly to see if
	they'll disassemble.

2005-12-21 06:58  gb

	* compiler/X86/x86-asm.lisp: Lose UNPARSE-OPERAND methods. 
	EVAL-WHEN cleanup.

2005-12-21 06:57  gb

	* compiler/X86/x86-backend.lisp: Don't assume an x86-target.

2005-12-21 06:57  gb

	* compiler/X86/x86-lap.lisp: Lose the PRINT-OBJECT method, now that
	there's a mostly-working disassembler.

2005-12-21 06:55  gb

	* compiler/X86/X8664/: x8664-backend.lisp, x8664-arch.lisp: use
	EVAL-WHEN, so it at least compiles ...

2005-12-21 06:53  gb

	* lib/: systems.lisp, compile-ccl.lisp: Some X86 stuff.

2005-12-21 06:52  gb

	* compiler/backend.lisp: Compulsive comment formatting.

2005-12-21 06:52  gb

	* compiler/PPC/ppc-backend.lisp: *PPC-BACKEND* is nil if not on a
	PPC.

2005-12-20 03:25  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Fix a typo.

2005-12-20 03:24  gb

	* compiler/X86/X8664/x8664-arch.lisp: Maintain symbolic register
	names, for disassembler.

2005-12-20 03:24  gb

	* compiler/X86/: x86-asm.lisp, x86-disassemble.lisp, x86-lap.lisp,
	x86-lapmacros.lisp: New! Improved! Almost usable!

2005-12-17 02:50  gb

	* compiler/X86/x86-disassemble.lisp: Not quite finished, but not
	-too- far away.

2005-12-17 02:49  gb

	* compiler/X86/x86-backend.lisp: Cloned the PPC version and renamed
	a few things; needs thought/work.

2005-12-17 02:46  gb

	* compiler/X86/x86-asm.lisp: X86-SEGMENT-REGISTER.

2005-12-17 02:45  gb

	* compiler/X86/x86-lap.lisp: LOOKUP-X86-REGISTER accepts strings
	(again.)

2005-12-16 02:15  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s: Some changes
	to the TCR.

2005-12-16 01:48  gb

	* lib/x8664env.lisp: New file; might be more-or-less right.  (Might
	want to make some of the bitmasks a bit smaller.)

2005-12-16 01:39  gb

	* level-0/X86/: x86-array.lisp, x86-float.lisp: Mostly just copied
	from PPC versions; just to exercise X86 LAP/LAPMACROS for now.

2005-12-16 01:37  gb

	* compiler/X86/X8664/x8664-arch.lisp: Registers can be referenced
	via small integer as well as by name.

2005-12-16 01:37  gb

	* compiler/X86/X8664/x8664-backend.lisp: First draft, may not even
	compile yet.

2005-12-16 01:36  gb

	* compiler/X86/x86-lapmacros.lisp: More lap macros.

2005-12-16 01:35  gb

	* compiler/X86/x86-lap.lisp: Enough stuff to support cross-compiled
	DEFX86LAPFUNCTION.

2005-12-16 01:35  gb

	* compiler/X86/x86-asm.lisp: Start defining some UUOs (int n,
	n=192-255).
	
	Define more registers in *x8664-register-entries*.

2005-12-14 01:16  gb

	* level-0/l0-init.lisp: Add :clozure to features (Hey! Marketing!)
	
	Other changes to *features*.

2005-12-14 01:15  gb

	* lisp-kernel/x86-constants64.s: use _l suffix for 32-bit regs.
	
	nargs is 16 bits wide, not 32.
	
	Fix comment in tag_list definition.
	
	TCR contains linear_end field as well as linear field.

2005-12-14 01:12  gb

	* lisp-kernel/plbt.c: Try to identify the thread associated with
	each stack.

2005-12-14 01:11  gb

	* level-1/linux-files.lisp: WAIT-ON-SEMAPHORE takes WHOSTATE arg.

2005-12-14 01:10  gb

	* compiler/X86/x86-lap.lisp: Lots-o-changes.  Move to the CCL
	package.

2005-12-14 01:10  gb

	* compiler/X86/x86-asm.lisp: Lots-o-changes.

2005-12-14 01:09  gb

	* compiler/X86/x86-arch.lisp: Kernel globals and
	nil-relative-symbols.

2005-12-14 01:08  gb

	* level-1/l1-processes.lisp: Copy process PSN to CS-AREA.OWNER of
	TCR, so that kernel backtrace can identify stacks by PSN.

2005-12-14 01:06  gb

	* compiler/X86/: X8664/x8664-arch.lisp, x86-lapmacros.lisp: gotta
	start somewhere.

2005-12-14 01:04  gb

	* compiler/PPC/: ppc-arch.lisp, PPC64/ppc64-arch.lisp: Comment.

2005-12-14 01:04  gb

	* compiler/backend.lisp: Indentation.

2005-12-13 01:37  gb

	* compiler/X86/x86-lap.lisp: New scheme for dealing with
	alignment/span-dependent instructions (looks suspiciously like
	GAS's).
	
	Lots of other changes and fixes, handle :ALIGN pseudoop (and :TRA,
	for tagged return addresses), and :long/:byte etc.
	
	A simple test case:
	
	? (load "ccl:compiler;X86;x86-lap")
	
	? (x86::x86-lap '((xchg (% rdi) (% rsi)) (lea (@ (- (^ foo) #xf) (%
	rsi)) (% rsi))			 (jmp (* (% rdi))) (:tra foo)))
	
	should generate output that looks like:
	
	 frag at #x8
	04 00 00 00 00 00 00 00 48 87 FE 48 8D B6 15 00 00 00 FF E7 CC CC
	CC CC  frag at #x20 EB FF FF FF CC CC CC CC  frag at #x28
	
	which seems correct.
	
	Still need to size immediates and emit them, and need
	syntax/support for lisp constants.

2005-12-13 01:20  gb

	* compiler/X86/x86-asm.lisp: Invert the order of templates that
	used to use the :D bit, to match the order that GAS encounters
	them.  (There are multiple ways to encode instructions that take a
	(register or memory address/register) and also (register/register
	or memory address) when both args are registers.)
	
	Revert to using short branches and short conditional branches, for
	new span-dependent-instruction scheme.
	
	Vector of seg-entries, ordered by reg-num.

2005-12-10 00:49  gb

	* compiler/X86/x86-lap.lisp: Constants delimited by +.
	
	Code emission starting to work; need scheme for span-dependent
	instructions (including relative displacements in memory operands),
	forcing alignment, etc.

2005-12-09 23:51  gb

	* compiler/X86/x86-asm.lisp: Constants delimited by +.	Get rid of
	the :D modifier; define some templates redundantly (two-arg
	instructions that can take (reg, memory | reg) or (memory | reg,
	reg)).

2005-12-07 23:22  gb

	* compiler/X86/x86-lap.lisp: Start to think about code generation:
	code fragments, etc.  Some things (modrm-byte/sib-byte generation)
	still unfinished (commented out), but want to get this checked in.

2005-12-07 23:21  gb

	* compiler/X86/x86-asm.lisp: Define and use :label operand type.

2005-12-04 05:45  gb

	* release-notes.txt: Update a little.

2005-12-04 05:42  gb

	* level-1/version.lisp: Time to bump.

2005-12-04 05:28  gb

	* level-1/ppc-threads-utils.lisp: In %FOREIGN-THREAD-INITIALIZE,
	don't assume that we're entered with no bindings in effect (the
	callback trampolines now bind a few specials, mostly having to do
	with tracing.)	Likewise, any catch/unwind-protect frames that were
	made with no bindings should be fixed to point to the end of the
	phony binding chain that this function initializes.

2005-12-04 05:14  gb

	* lisp-kernel/gc.h: WORD_SIZE64 is never defined; WORD_SIZE is
	defined, and may have the value 64.  (This was screwing up the
	64-bit definition of the qnode type, and this screwing up 64-bit
	GC.)

2005-12-04 05:13  gb

	* lisp-kernel/lisp-exceptions.h: Provide ANSI-style prototype for
	install_pmcl_exception_handlers().

2005-12-04 05:12  gb

	* lisp-kernel/: x86-constants.h, ppc-constants.h: Fix definition of
	TCR_FLAG_BIT_PROPAGATE_EXCEPTION.

2005-12-04 05:12  gb

	* lisp-kernel/thread_manager.c: Don't set/test
	TCR_FLAG_BIT_ALT_SUSPEND, do set/test
	(1<<TCR_FLAG_BIT_ALT_SUSPEND).

2005-12-04 05:10  gb

	* lisp-kernel/ppc-exceptions.c: Don't set/test
	TCR_FLAG_BIT_PROPAGATE_EXCEPTION, do set/test
	(1<<TCR_FLAG_BIT_PROPAGATE_EXCEPTION).

2005-12-04 05:07  gb

	* lisp-kernel/Threads.h: Provide more complete prototypes in some
	cases.

2005-11-29 00:49  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: A little bit more, but
	still just an artist's conception.
	
	Note that we may need to do some sort of "expression" stuff with
	vinsn parameters as well.

2005-11-29 00:46  gb

	* compiler/X86/x86-lap.lisp: "expression" stuff, mostly so that we
	can do partial evaluation of expressions involving (relative) label
	addresses.
	
	Memory-operand parsing.

2005-11-29 00:44  gb

	* compiler/X86/x86-asm.lisp: PC-relative jumps that come in more
	than one size: default to the "large" (32-bit) displacement
	version, since (a) this'll always be correct, if sometimes
	inefficient and (b) it may be easier to shorten branches than to
	lengthen them.
	
	Label refs now start with circumflex.
	
	Unparse memory operands.

2005-11-28 11:00  gb

	* lisp-kernel/bits.h: Change arg order in x86 inline asm for
	count_leading_zeros.  Can't easily test this.
	
	(Note that there are all kinds of potential endianness issues in GC
	bitvector/bit-counting stuff.)

2005-11-28 10:05  gb

	* lisp-kernel/bits.h: Conditionalize count_leading_zeros for GCC
	versions < 4.0.

2005-11-21 19:59  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Noted a couple of cases
	where the destination register should be of class :u64, not :u32.
	(Not sure that this matters much in practice.

2005-11-21 19:55  gb

	* compiler/X86/: x86-asm.lisp, x86-lap.lisp: Slow progress;
	definitely need expression language.  Add a little bit of support
	for referencing registers by ordinal number and mapping between the
	64/32/16/8-bit versions of a register.

2005-11-21 11:43  gb

	* compiler/X86/X8664/x8664-vinsns.lisp: Very far away from
	usability; need to experiment to determine necessary LAP support
	for vinsns.

2005-11-21 10:20  gb

	* compiler/PPC/ppc-lap.lisp, lib/sequences.lisp: Comment
	formatting.

2005-11-20 06:42  gb

	* compiler/X86/: x86-asm.lisp, x86-lap.lisp: Getting closer; can
	parse some forms of x86 instructions and operands and do some
	amount of sanity checking.
	
	Still need to work out memory/displaced-only operands, deal with
	labels, deal with expressions (might want something like a closure/
	suspension/future, might not), code-generation, etc.

2005-11-18 04:05  gb

	* lisp-kernel/darwinppc/Makefile: Pass -arch ppc explicitly to cc
	and as, since that may not be the default.

2005-11-18 04:04  gb

	* lisp-kernel/ppc-exceptions.c: Some #if LINUX conditionalization
	changed to runtime test of the global variable
	'use_mach_exception_handling'.
	
	(On Darwin, use_mach_exception_handling is set false when
	running_under_rosetta is true.	Mach exception handling may be less
	likely to work in that case; signal handling currently doesn't work
	either ...)

2005-11-18 04:01  gb

	* lisp-kernel/pmcl-kernel.c: Static initialization of
	'running_under_rosetta' and 'use_mach_exception_handling' happens
	on both Linux and Darwin, though neither of these things should
	ever be true on Linux.
	
	Cache flushing seems to be unbelievably slow when
	running_under_rosetta is set; don't do it for now, since the first
	call to xMakeDataExecutable() tries to invalidate stuff that was
	probably never in the cache and we die before we get to a
	subsequent call.

2005-11-18 03:55  gb

	* lisp-kernel/lisp.h: Declare running_under_rosetta and
	use_mach_exception_handling globally and unconditionally.  (This
	makes it a little more convenient to check their valus at runtime,
	even though neither could be true under Linux.	(Right now, one of
	the primary reasons for checking running_under_rosetta is to be
	able to insert fprintf's that show how screwed up things are, and I
	don't want to have to surround those tests with additional
	#ifdefs.)

2005-11-17 03:15  gb

	* compiler/X86/x86-asm.lisp: Macros to encode symbolic attributes.

2005-11-17 03:15  gb

	* compiler/X86/x86-lap.lisp: Will probably overlap RISC-LAP a lot,
	but needs to be different (variable-length instructions, alignment,
	etc.)  Maybe merge later.

2005-11-17 03:13  gb

	* level-1/l1-clos-boot.lisp: CLASS-PROTOTYPE method for
	STRUCTURE-CLASS: don't try to call default constructor, since it
	may not exist ...

2005-11-15 02:48  gb

	* lisp-kernel/memory.c: #include <sys/mman.h> unconditionally.

2005-11-15 02:32  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile,
	linuxppc/Makefile, linuxppc64/Makefile, static-linuxppc/Makefile:
	Depend on memory.o

2005-11-15 02:30  gb

	* lisp-kernel/: x86-exceptions.c, x86-exceptions.h: Stubs for x86
	exception stuff.

2005-11-15 02:29  gb

	* lisp-kernel/: ppc-exceptions.c, ppc-exceptions.h: Migrate some
	stuff elsewhere; conditionalize a bit more.

2005-11-15 02:28  gb

	* lisp-kernel/pmcl-kernel.c: Use CPUID to check x86 features,
	determine cache_block_size, etc.

2005-11-15 02:27  gb

	* lisp-kernel/: ppc-asmutils.s, x86-asmutils64.s:
	get/put_vector_registers.  Probably unused; referenced from the
	kernel imports table.

2005-11-15 02:25  gb

	* lisp-kernel/gc.c: Conditionalize for x86, WORD_SIZE.

2005-11-15 02:24  gb

	* lisp-kernel/lisp-debug.c: Move some code here from the (old)
	lisp-exceptions.c.

2005-11-15 02:24  gb

	* lisp-kernel/lisptypes.h: #define WORD_SIZE as 32 or 64, depending
	on preprocessor definitions.  Stop using #ifdef WORD_SIZE64, here
	and elsewhere.	Note that there are probably still many things that
	are conditionalized on
	
	#ifdef PPC64
	
	when they're really concerned about 64/32-bit issues.  (I've caught
	a few cases, but I'm sure that many still remain.)

2005-11-15 02:23  gb

	* lisp-kernel/imports.s: Expect get/put_vector_registers (not
	necessarily AltiVec.  (I don't think that this is called from Lisp
	code anymore.)

2005-11-15 02:21  gb

	* lisp-kernel/: bits.h, image.c, image.h: Use WORD_SIZE value to
	conditionalize.

2005-11-15 02:20  gb

	* lisp-kernel/area.h: Define IMAGE_BASE_ADDRESS for x86-64 Linux.

2005-11-15 02:20  gb

	* lisp-kernel/: x86-spentry64.s, x86-subprims64.s: Define a few
	externally referenced things.  (Still a ways from being able to put
	code there, but the symbols need to be exported so that the kernel
	can link on x86-64 Linux.

2005-11-15 02:18  gb

	* lisp-kernel/linuxx8664/Makefile: Depend on xlbt.o, not plbt.o

2005-11-15 02:18  gb

	* lisp-kernel/xlbt.c: Implement the kernel debugger's backtrace
	API, such as it is.  (Still need to determine what the lisp stack
	looks like - and how it relates to the foreign stack - before any
	of this could work.)

2005-11-15 02:16  gb

	* lisp-kernel/lisp-exceptions.h: #define WORD_SIZE as 32 or 64,
	depending on preprocessor definitions.	Stop using #ifdef
	WORD_SIZE64, here and elsewhere.  Note that there are probably
	still many things that are conditionalized on
	
	#ifdef PPC64
	
	when they're really concerned about 64/32-bit issues.  (I've caught
	a few cases, but I'm sure that many still remain.)

2005-11-15 02:14  gb

	* lisp-kernel/memory.c: New file: functions related to memory
	allocation/zeroing/mapping/protecting/etc.  (Most of this came from
	the old lisp-exceptions.c, but there are fairly generic
	memory-handling functions in other files that could reasonably
	migrate here.)
	
	Note that stuff having to do with lisp memory allocation (trapping
	into the kernel when the current thread's pool is too small, etc.)
	involves a lot of platform-dependent trap decoding and probably
	doesn't belong in this file.

2005-11-14 23:15  gb

	* lisp-kernel/x86-exceptions.c: New (mostly empty) file.

2005-11-14 23:12  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile,
	linuxppc/Makefile, linuxppc64/Makefile, static-linuxppc/Makefile:
	PPC makefiles: rename lisp-exceptions.o to ppc-exceptions.o

2005-11-14 23:06  gb

	* lisp-kernel/lisp-exceptions.c: renamed

2005-11-14 23:05  gb

	* lisp-kernel/ppc-exceptions.c: rename

2005-11-14 23:04  gb

	* lisp-kernel/gc.c: More cut-and-paste mishaps.

2005-11-14 22:59  gb

	* lisp-kernel/gc.c: Fix (hopefully ...) botched PPC
	conditionalization.

2005-11-14 22:56  gb

	* lisp-kernel/: gc.c, gc.h, lisp-debug.c, x86-exceptions.h: Some
	X86 conditionalization.

2005-11-14 22:56  gb

	* lisp-kernel/linuxx8664/Makefile: Replace ppc_print.o with
	x86_print.o in DEBUGOBJ.

2005-11-14 22:55  gb

	* lisp-kernel/x86_print.c: New file.

2005-11-14 03:25  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile,
	linuxppc/Makefile, linuxppc64/Makefile, static-linuxppc/Makefile:
	CHEADERS include ppc-exceptions.h

2005-11-14 03:21  gb

	* lisp-kernel/: lisp-debug.c, lisp-exceptions.c, lisp-exceptions.h,
	ppc-exceptions.h: siginfo_t debugging stuff.  Only likely to be
	useful on Linux, or if signal-based exception handling's used.

2005-11-14 02:10  gb

	* lisp-kernel/lisp-debug.c: Start to make all debugger commands and
	lisp_Debugger() take a (possibly null) siginfo_t argument. 
	Probably won't compile cleanly (yet).

2005-11-14 02:09  gb

	* lisp-kernel/gc.c: Some X86[64] changes, mostly to the way that
	exception frames are accessed and in the ways that ivector sizes
	are determined.
	
	This compiles without warnings on X8664, but there need to be some
	(significant) semantic changes in the ways that the marker
	(especially the DWS marker) treats new types (TRAs, new
	symbol/function pointers.)

2005-11-14 02:03  gb

	* lisp-kernel/lisp-exceptions.h: Split into platform-dependent
	subfiles.

2005-11-14 02:03  gb

	* lisp-kernel/: x86-constants64.h, x86-constants64.s: Fix typos,
	design flaws ...

2005-11-14 02:01  gb

	* lisp-kernel/: ppc-exceptions.h, x86-exceptions.h: New files.

2005-11-14 02:00  gb

	* lisp-kernel/area.h: x86 variant of CS_OVERFLOW_FORCE_LIMIT

2005-11-13 20:35  gb

	* lisp-kernel/bits.h: Intrinsics are named __builtin_clz,
	__builtin_clzll.

2005-11-13 20:30  gb

	* lisp-kernel/: bits.h, gc.h, lisp-debug.c, lisp-exceptions.c,
	lisp-exceptions.h, lisp.h, lisp_globals.h, lisptypes.h, macros.h,
	memprotect.h, pmcl-kernel.c, ppc-constants32.h, ppc-constants64.h,
	thread_manager.c, x86-constants.h, x86-constants64.h,
	x86-constants64.s: Lots-o-changes, so some things are closer to
	compiling on x86-64.  MAY HAVE BROKEN PPC/PPC64 COMPILATION; need
	to check changes in to check that.

2005-11-13 17:50  gb

	* level-1/version.lisp: Bump.

2005-11-12 20:35  gb

	* lisp-kernel/sigcontext.h: nuke this

2005-11-12 18:17  gb

	* lisp-kernel/x86-constants64.s: Tagging: complete, maybe usable.

2005-11-12 18:16  gb

	* lisp-kernel/x86-macros.s: A few more things, mostly just to check
	syntax.

2005-11-12 18:14  gb

	* lisp-kernel/x86-spentry64.s: Fix typo, tighten up a bit
	(cmov...).

2005-11-12 18:13  gb

	* lisp-kernel/m4macros.m4: _structf macro takes an optional
	displacement arg (defaults to -misc_bias).

2005-11-12 18:09  gb

	* lisp-kernel/linuxppc64/Makefile: update ppc-uuo.s dependency

2005-11-12 17:44  gb

	* lisp-kernel/ppc-spentry.s: Fix (several-days-old) typo in ppc64
	code.

2005-11-12 17:09  gb

	* lib/backquote.lisp: Conditionalize-out (rather than comment-out)
	Steele's public-domain backquote implementation.  It'd probably be
	worth switching to this (it's clearer and seems to work better);
	that might require some changes in the printer/pretty-printer to
	provide equivalent support, and probably requires some testing.

2005-11-12 17:06  gb

	* level-1/l1-io.lisp, lib/numbers.lisp: Dan Corkill's patch to
	allow readable printing of NaN's and infinities.  (Bits of this
	were tweaked to require changes to GET-FPU-MODE; rebuild ppc-boot
	and build an image - or mouse on the new GET-FPU-MODE - before
	compiling these changes.

2005-11-12 17:02  gb

	* level-1/ppc-trap-support.lisp: The Darwin PPC64 versions of
	XP-DOUBLE-FLOAT and XP-FPSCR-INFO were looking at a 32-bit machine
	context (and therefore returning garbage); the operands to
	arithmetic errors were usually reported incorrectly.
	
	Not yet sure of Linux PPC64.

2005-11-12 17:00  gb

	* level-0/PPC/ppc-float.lisp: GET-FPU-MODE takes an optional
	argument; if it's provided, it returns information about that
	attribute only.
	
	SET-FPU-MODE returns an unspecified non-NIL value, rather than
	calling GET-FPU-MODE with no arguments.
	
	Bootstrapping note: some higher-level code to be checked in depends
	on this incompatible change to GET-FPU-MODE.  Do (xload-level-0)
	and create a new image before compiling those higher-level sources.

2005-11-10 00:15  gb

	* library/sharp-comma.lisp: Provide #, as a loadable extension.

2005-11-09 01:24  gb

	* lisp-kernel/: lisp-exceptions.c, pmcl-kernel.c, thread_manager.c:
	Detect (in a simple-minded, easily-fooled way ...) if the PPC
	version is running on something that doesn't appear to be a PPC.  
	Limit the amount of reserved heap memory in that case (since an
	emulator seems to be in our way ...).  Disable Mach exception
	handling (using POSIX signals instead) if we believe that we're
	running emulated.  File bugs with Apple, because emulated POSIX
	signal handling's taken a step backward in that emulated
	environment.  Not surprising.

2005-11-08 19:43  gb

	* lisp-kernel/x86-constants64.s: Flip %imm1 and %temp2: making
	%imm1 an alias for %rdx simplifies integer multiplication (which
	clobbers %rdx on this piece-o-crap.)
	
	Remove inconcistencies from tag assignments (so things assemble);
	still need to do a -real- tag assignment pass.

2005-11-08 19:41  gb

	* lisp-kernel/x86-constants.s: Add _builtin_function indices.

2005-11-08 19:40  gb

	* lisp-kernel/x86-macros.s: Try to make arg order of macros
	consistent with PPC (destination precedes source, registers precede
	memory operands, etc.)
	
	Some additions and fixes.

2005-11-08 19:38  gb

	* lisp-kernel/x86-spentry64.s: The little bit that's there
	assembles and looks reasonable.

2005-11-08 19:37  gb

	* lisp-kernel/linuxx8664/Makefile: Depend on x86-uuo.s (since
	"uuo.s" is -so- 11/07.)

2005-11-08 15:53  gb

	* lisp-kernel/ppc-spentry.s: Use aligned_bignum_size() macro when
	allocating fixed-size bignums.	(Some of the hardwired constants
	replaced by use of that macro may have been a bit too large,
	especially on PPC64.) Try to ensure that there's a one-to-one
	correspondence between the header used and the allocated size
	(e.g., in ppc32 _SPmakeu64, don't assume that 2-digit and 3-digit
	bignums have the same physical size.)

2005-11-08 15:47  gb

	* lisp-kernel/ppc-macros.s: Hey! PPC changes! Define
	aligned_bignum_size macro, which returns the size in bytes needed
	for an N-digit bignum (including header and alignment padding.)

2005-11-08 04:46  gb

	* lisp-kernel/x86-spentry64.s: Start to actually write some code;
	still need more infrastructure.  On a 1 to 10 complexity scale,
	.SPbuiltin_plus is probably a 5 or 6; will need to be careful about
	register usage when consing bignums ('cause there aren't enough
	registers.  Stop me if you've heard this one.)

2005-11-08 04:43  gb

	* lisp-kernel/: x86-constants.s, x86-constants64.s, x86-macros.s:
	Flesh out a bit.  x86_64 tagging still needs to be fixed.

2005-11-08 04:40  gb

	* lisp-kernel/lisp.s: Include x86_uuo.s on X86.

2005-11-08 04:39  gb

	* lisp-kernel/x86-uuo.s: Just getting started ...

2005-11-08 04:38  gb

	* lisp-kernel/m4macros.m4: Allow struct sizes to be implicitly
	padded.  (Should maybe check if that's negative padding.)

2005-11-08 04:28  gb

	* lisp-kernel/: lisp.s, darwinppc/Makefile, darwinppc64/Makefile,
	linuxppc/Makefile, static-linuxppc/Makefile: Rename "uuo.s" to
	"ppc-uuo.s".

2005-11-08 04:25  gb

	* lisp-kernel/: ppc-uuo.s, uuo.s: rename

2005-11-07 01:15  gb

	* lisp-kernel/x86-constants64.s: I might believe the register
	assignments here - at least provisionally - but the tagging will
	need work.  (It's mostly pasted from ppc-constants64.s; the good
	news is that x86-64 isn't as constrained as ppc64 is.) Need to fit
	tagged return addresses into the scheme in some way that doesn't
	conflict with other primary tags.  4/12 ? Hybrid function objects ?
	Etc.  Needs some thought.

2005-11-07 00:27  gb

	* lisp-kernel/lisp.s: Conditionally include x86 headers.

2005-11-07 00:24  gb

	* lisp-kernel/linuxx8664/Makefile: Hmm.  x86 executables probably
	shouldn't have "ppc" in their names.  Make up something else.

2005-11-06 20:27  gb

	* lisp-kernel/linuxx8664/: Makefile, elf_x86_64.x: 64-bit specific
	subprims files, since the 32-bit and 64-bit X86 are too dissimilar.

2005-11-06 20:26  gb

	* lisp-kernel/: x86-macros.s, x86-spentry64.s, x86-spjump64.s,
	x86-subprims64.s: More new, empty files.

2005-11-06 19:48  gb

	* lisp-kernel/linuxx8664/Makefile: x86-asmutils64.o

2005-11-06 19:47  gb

	* lisp-kernel/x86-asmutils64.s: New file.  If there's ever a 32-bit
	version, it'd likely be substantially different.  (This is
	certainly different from the PPC version.)

2005-11-06 19:46  gb

	* lisp-kernel/: x86-constants.h, x86-constants.s,
	x86-constants64.h, x86-constants64.s: New files; mostly empty, for
	now.

2005-11-06 19:39  gb

	* lisp-kernel/m4macros.m4: Tweak _emit_ELF_source_line_stab: use
	(m4 macro) __func_name instead of (as-defined) func_start; invert
	order of label and .stabn.
	
	This seems to generate good line number information on linuxx8664;
	need to check linuxppc, linuxppc64 as well.

2005-11-06 19:29  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile,
	linuxppc/Makefile, linuxppc64/Makefile, static-linuxppc/Makefile:
	Depend on ppc-macros.s, not macros.s.

2005-11-06 19:27  gb

	* lisp-kernel/lisp.s: Conditionally include for PPC, so far.

2005-11-06 19:16  gb

	* lisp-kernel/: ppc-macros.s, macros.s: renamed

2005-11-06 12:21  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile: Fix other
	reference to asmutils.o in Makefiles.

2005-11-06 12:19  gb

	* lisp-kernel/: linuxppc/Makefile, linuxppc64/Makefile,
	static-linuxppc/Makefile: Fix other reference to "asmutils.o" in
	Makefiles.

2005-11-06 12:07  gb

	* lisp-kernel/imports.s: Use .quad on X8664 as well.

2005-11-06 12:06  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile,
	linuxppc/Makefile, linuxppc64/Makefile, static-linuxppc/Makefile:
	Reference ppc-asmutils.[so] in PPC makefiles.

2005-11-06 12:01  gb

	* lisp-kernel/: ppc-asmutils.s, asmutils.s: renamed

2005-11-06 00:11  gb

	* lisp-kernel/linuxx8664/: Makefile, elf_x86_64.x: artist's
	conception; still lots of PPC-specific code, still no
	x86-64-specific code ...

2005-11-06 00:04  gb

	* lisp-kernel/: linuxppc/Makefile, linuxppc/elf32ppclinux.x,
	linuxppc64/Makefile, linuxppc64/elf64ppc.x,
	static-linuxppc/Makefile: Update for platform-dependent SPOBJ.

2005-11-05 23:59  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile: Rename
	SPOBJ in Darwin makefiles.

2005-11-05 23:48  gb

	* lisp-kernel/: ppc-subprims.s, ppc-spentry.s, ppc-spjump.s,
	spentry.s, spjump.s, subprims.s: rename

2005-11-05 21:54  gb

	* lisp-kernel/: linuxppc/Makefile, linuxppc64/Makefile,
	static-linuxppc/Makefile: Update dependencies on platform-dependent
	*-constants*.[hs] files.

2005-11-05 21:35  gb

	* lisp-kernel/: darwinppc/Makefile, darwinppc64/Makefile: Update
	dependencies on constants headers.

2005-11-05 21:32  gb

	* lisp-kernel/lisp.s: Inclde platform-dependent constants.s file.

2005-11-05 21:30  gb

	* lisp-kernel/ppc-constants.s: rename, include new files

2005-11-05 21:29  gb

	* lisp-kernel/: ppc-constants64.s, ppc-constants32.s, constants.s,
	constants32.s, constants64.s: rename

2005-11-05 21:23  gb

	* lisp-kernel/: lisp.h, memprotect.h: Inclde platform-dependent
	constants.h file.

2005-11-05 21:22  gb

	* lisp-kernel/: ppc-constants64.h, ppc-constants32.h: rename

2005-11-05 21:21  gb

	* lisp-kernel/constants.h: Removed.

2005-11-05 21:18  gb

	* lisp-kernel/: ppc-constants.h, constants32.h, constants64.h:
	rename

2005-11-05 19:34  gb

	* lib/compile-ccl.lisp: Try to get XCOMPILE-CCL back in synch.

2005-11-05 19:34  gb

	* level-1/ppc-callback-support.lisp: Subprim name not constant in
	linuxppc64 MAKE-CALLBACK-TRAMPOLINE.
	
	(Conditionalize this a little more explicitly, though #+(and
	linux-target poweropen-target) is pretty much the same as #+(and
	linuxppc-target poweropen-target), since nothing else would use
	poweropen conventions.)

2005-11-05 18:40  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp:
	Define subprimitive stuff in the backend.

2005-11-05 18:39  gb

	* compiler/PPC/ppc2.lisp: Subprim names aren't constant anymore, so
	look them up at (compiler) runtime in the backend.
	
	Map between the names of builtin functions and the subprimitives
	that implement them via the backed.

2005-11-05 18:37  gb

	* compiler/PPC/ppc-lap.lisp: *PPC-SUBPRIMS* is in the "PPC"
	package.

2005-11-05 18:33  gb

	* compiler/PPC/ppc-disassemble.lisp: *PPC-SUBPRIMS* is in the "PPC"
	package.

2005-11-05 18:33  gb

	* compiler/PPC/ppc-arch.lisp: PPC subprim defs (common to ppc32 and
	ppc64) moved here.

2005-11-05 18:32  gb

	* compiler/vinsn.lisp: Subprim names aren't constants anymore, so
	look them up when parsing vinsn templates.

2005-11-05 18:31  gb

	* compiler/subprims.lisp: Subprim defs are architecture and/or
	backend-specific.

2005-11-05 18:31  gb

	* compiler/arch.lisp: PROVIDE's been back in the CL package for the
	last decade or so.

2005-11-05 18:30  gb

	* level-1/version.lisp: Bump to 051105.

2005-11-05 18:30  gb

	* level-1/l1-boot-2.lisp: Change the load order (subprims before
	arch stuff) a little.  Load the target ppc??-arch explicitly,
	though some circular REQUIRES will load both ppc32-arch and
	ppc64-arch, currently.

2005-11-05 16:23  gb

	* compiler/: arch.lisp, subprims.lisp, PPC/ppc-disassemble.lisp,
	PPC/ppc-lap.lisp, PPC/ppc2.lisp: Start to isolate PPC subprims.

2005-11-05 16:20  gb

	* examples/objc-runtime.lisp: REVIVE-OBJC-CLASSES: don't be so dumb
	about reviving metaclass pointers (addresses may change.)

2005-11-05 09:22  gb

	* lisp-kernel/static-linuxppc/Makefile: Define PPC (via -DPPC)
	explicitly.

2005-11-05 09:18  gb

	* lisp-kernel/: darwinppc64/Makefile, linuxppc/Makefile,
	linuxppc64/Makefile: Define PPC (via -DPPC) explicitly.

2005-11-05 09:15  gb

	* lisp-kernel/darwinppc/Makefile: Define PPC (via -DPPC)
	explicitly.

2005-11-05 08:44  gb

	* lisp-kernel/: static-linuxppc/.cvsignore,
	static-linuxppc/Makefile, static-linuxppc/staticlib.c,
	static-linux/.cvsignore, static-linux/Makefile,
	static-linux/staticlib.c: directory rename

2005-11-05 08:39  gb

	* lisp-kernel/: linuxppc64/.cvsignore, linuxppc64/Makefile,
	linuxppc64/elf64ppc.x, linux64/.cvsignore, linux64/Makefile,
	linux64/elf64ppc.x: directory rename

2005-11-05 08:30  gb

	* lisp-kernel/: linuxppc/elf32ppclinux.x, linuxppc/Makefile,
	linuxppc/.gdbinit, linuxppc/.cvsignore, linux/.cvsignore,
	linux/.gdbinit, linux/Makefile, linux/elf32ppclinux.x: directory
	rename

2005-11-05 08:20  gb

	* lisp-kernel/: darwinppc64/Makefile, darwinppc64/.cvsignore,
	darwin64/.cvsignore, darwin64/Makefile: directory renaming

2005-11-05 08:14  gb

	* lisp-kernel/darwin/: .cvsignore, .gdb_history, .gdbinit: finish
	rename darwin -> darwinppc

2005-11-05 08:11  gb

	* lisp-kernel/darwinppc/: .gdbinit, .cvsignore: more directory
	renaming

2005-11-05 08:07  gb

	* lisp-kernel/darwin/: Makefile, retain: rename darwin directory to
	darwinppc

2005-11-05 08:05  gb

	* lisp-kernel/darwinppc/retain: Awkward CVS directory rename

2005-11-05 08:05  gb

	* lisp-kernel/darwinppc/Makefile: Awkward CVS directory rename.

2005-11-04 11:34  gb

	* level-0/PPC/ppc-misc.lisp: In #+ppc32 version of
	%%SET-SIGNED-LONGLONG, trap if the pointer's not a
	PPC32::SUBTAG-MACPTR (not a PPC64::SUBTAG-MACPTR).  Sheesh.

2005-10-30 17:58  gb

	* lisp-kernel/thread_manager.c: Reason to suspect that
	mach_suspend_tcr is still unreliable.

2005-10-30 00:28  gb

	* tools/defsystem.lisp: Lots of conditionalization assumed that
	:MCL implies :OPENMCL.

2005-10-29 15:58  gb

	* level-1/version.lisp: Bump to 051029b.

2005-10-29 15:57  gb

	* level-0/l0-init.lisp: Remove :CCL*, :MCL, etc from *FEATURES*.

2005-10-29 15:57  gb

	* level-0/l0-hash.lisp: Change order of tests in %HASH-PROBE, so
	that test functions other than EQUAL/EQUALP don't have to compare
	keys to missing/deleted tokens.

2005-10-29 14:40  gb

	* release-notes.txt: Confess to the day's problems ...

2005-10-29 14:39  gb

	* level-1/version.lisp: Bump.

2005-10-29 14:39  gb

	* lib/prepare-mcl-environment.lisp: Fix %RESTORE-OUTERMOST-BINDING.

2005-10-29 14:39  gb

	* compiler/optimizers.lisp: The ASH compiler macro made 32-bit
	assumptions and doesn't do anything that the compiler doesn't do by
	itself.
	
	The LSH compiler macro made those same assumptions.  LSH isn't
	really used enough to justify having a compiler macro, much less a
	buggy one ...

2005-10-28 06:33  gb

	* compiler/PPC/ppc2.lisp: PPC2-SYMBOL-VALUE-CELL calls
	ENSURE-BINDING-INDEX.

2005-10-28 05:23  gb

	* level-1/version.lisp: Bump.

2005-10-28 05:23  gb

	* release-notes.txt: Yesterday's images didn't work on ppc32 on
	non-G5s.

2005-10-28 05:17  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Don't use 64-bit
	instructions (tdgti) in a 32-bit lisp.

2005-10-27 02:22  gb

	* release-notes.txt: Say something about LinuxPPC64 and about some
	bug fixes.

2005-10-27 01:18  gb

	* level-1/version.lisp: Bump; claim to be a "pre-1.1" release.

2005-10-27 01:17  gb

	* release-notes.txt: Fix some typos.

2005-10-27 00:19  gb

	* lib/setf.lisp: DEFINE-MODIFY-MACRO: don't try to special-case
	"place" being a simple (non-symbol-macro) symbol and expand into
	SETQ, since we don't know anything about side-effects in other
	arguments in the lambda list.
	
	INCF & DECF: -do- special case simple symbols as places, if the
	delta is also either a constant or a simple symbol; do the more
	general expansion otherwise (Bryan's code.)

2005-10-26 18:40  gb

	* release-notes.txt: Some notes; hopefully, maintaining this file
	between releases will make it easier/quicker to prepare real
	release notes.

2005-10-26 17:52  gb

	* level-0/PPC/: PPC32/l0-bignum-ppc32.lisp,
	PPC64/l0-bignum-ppc64.lisp: maybe questionable INCF/fixnum stuff

2005-10-26 17:43  gb

	* lib/db-io.lisp: avoid INCF/fixnum-arithmetic-sleaze issues in
	CDB-HASH.

2005-10-26 17:35  gb

	* level-1/: l1-boot-2.lisp, level-1.lisp: Load l1-typesys &
	sysutils earlier, to make more of the type system available.

2005-10-26 17:32  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp, lib/ccl-export-syms.lisp,
	lisp-kernel/constants32.h, lisp-kernel/constants32.s,
	lisp-kernel/constants64.h, lisp-kernel/constants64.s,
	lisp-kernel/lisp-exceptions.c, lisp-kernel/thread_manager.c,
	level-1/l1-lisp-threads.lisp, level-1/l1-processes.lisp:
	PROCESS-TERMINATION-SEMAPHORE stuff.

2005-10-26 14:51  gb

	* lisp-kernel/spentry.s: Maintain tcr.unwinding during nthrow.

2005-10-26 14:50  gb

	* lisp-kernel/lisp-exceptions.c: interrupt_handler() : defer
	interrupts if tcr.unwinding is set.

2005-10-26 14:49  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp, lisp-kernel/constants32.h,
	lisp-kernel/constants32.s, lisp-kernel/constants64.h,
	lisp-kernel/constants64.s: Replace the (unused)
	tcr.suspend-total-on-exception-entry field with tcr.unwinding.

2005-10-26 13:59  gb

	* compiler/PPC/ppc2.lisp: References to *INTERRUPT-LEVEL* are
	inlined.  UNWIND-PROTECT plays with *INTERRUPT-LEVEL*, so that
	cleanup forms run with interrupts disabled.  New scheme for special
	payback, so that restration of *INTERRUPT-LEVEL* polls for deferred
	interrupts.  Remove some old (unused) interrupt handling stuff.

2005-10-26 13:51  gb

	* lib/dumplisp.lisp: Enable interrupts before calling the first
	user toplevel function (not in RESTORE-LISP-POINTERS' cleanup form,
	since that's now ineffectual.)

2005-10-26 13:50  gb

	* lib/: ccl-export-syms.lisp, macros.lisp: Define & export
	WITH-INTERRUPTS-ENABLED.

2005-10-26 13:49  gb

	* level-0/l0-symbol.lisp: Minor indentation change.

2005-10-26 13:48  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: No such thing as :ADDRESS
	in vreg specs.	Get words size right in REF-INTERRUPT-LEVEL.

2005-10-26 13:47  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: No such thing as :ADDRESS
	in vreg specs.

2005-10-26 13:46  gb

	* compiler/nx1.lisp: Remove a few old interrupt-handling things.

2005-10-26 05:51  gb

	* lib/macros.lisp: Define WITHOUT-INTERRUPTS and friends in terms
	binding CCL::*INTERRUPT-LEVEL*.

2005-10-26 04:44  gb

	* compiler/PPC/ppc2.lisp: Handling binding/unbinding of
	*interrupt-level* specially.

2005-10-26 04:43  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	*INTERRUPT-LEVEL* binding, unbinding, and reference.

2005-10-26 04:43  gb

	* compiler/nxenv.lisp: $undointerruptlevel.

2005-10-26 04:41  gb

	* lisp-kernel/macros.h: TCR_INTERRUPT_LEVEL is signed ...

2005-10-26 03:09  gb

	* lisp-kernel/spjump.s, compiler/subprims.lisp: Remove svar
	subprims; identify unused subprims; add support for binding/
	unbinding *interrupt-level* and associated polling for pending
	interrupts.

2005-10-26 03:05  gb

	* lisp-kernel/: constants32.s, constants64.h, constants64.s,
	spentry.s: Disavow all knowledge of svars.

2005-10-25 11:23  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	EVENT-POLL vinsn checks for pending interrupts.

2005-10-25 11:02  gb

	* xdump/xfasload.lisp: Arrgh.  (Duplicate binding index #1,
	sometimes.)

2005-10-25 05:03  gb

	* compiler/PPC/ppc-lapmacros.lisp,
	compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC32/ppc32-vinsns.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp,
	compiler/PPC/PPC64/ppc64-vinsns.lisp, level-0/PPC/ppc-misc.lisp:
	replace references to tcr.interrupt level with (effectively)
	thread-specific binding of CCL::*INTERRUPT-LEVEL* on the lisp side,
	as well.

2005-10-25 03:40  gb

	* lisp-kernel/: constants32.h, constants32.s, constants64.h,
	constants64.s, lisp-exceptions.c, macros.h, macros.s,
	pmcl-kernel.c, spentry.s, thread_manager.c: deprecate (and stop
	using, at least in the kernel) tcr.interrupt_level; use
	tcr->tlb_pointer[INTERRUPT_LEVEL_BINDING_INDEX] instead (which just
	happens to be the dynamic value of CCL::*INTERRUPT-LEVEL*.)

2005-10-25 03:03  gb

	* lib/nfcomp.lisp, xdump/faslenv.lisp: Finish bumping FASL version.

2005-10-25 02:44  gb

	* lisp-kernel/thread_manager.c: tlb[INTERRUPT_LEVEL_BINDING_INDEX]
	== fixnum -1 in each new tcr.

2005-10-25 02:42  gb

	* lisp-kernel/constants.h: INTERRUPT_LEVEL_BINDING_INDEX ==
	(symbol-binding-index ccl::*interrupt-level*).
	
	(This means that the end of this bootstrapping cycle is in sight;
	perhaps after some food ...)

2005-10-25 02:39  gb

	* level-1/l1-readloop.lisp: QUIT needs to force-output on
	ccl::*stdout*, as many people have mentioned.

2005-10-25 02:38  gb

	* xdump/xfasload.lisp: Reserved binding index scheme, finally.

2005-10-25 00:51  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp, level-0/l0-pred.lisp,
	level-0/l0-symbol.lisp, level-0/nfasload.lisp,
	level-1/l1-clos-boot.lisp, level-1/l1-io.lisp,
	level-1/l1-lisp-threads.lisp, lib/nfcomp.lisp, xdump/faslenv.lisp,
	xdump/xfasload.lisp: Remove SVAR type/class.  Use
	BINDING-INDEX-SYMBOL instead of INDEX-SVAR.

2005-10-24 23:49  gb

	* lib/prepare-mcl-environment.lisp: Don't use svars in
	%RESET-OUTERMOST-BINDING (which looks wrong, btw.)

2005-10-24 23:47  gb

	* compiler/PPC/: ppc2.lisp, PPC32/ppc32-vinsns.lisp,
	PPC64/ppc64-vinsns.lisp: Don't use svars in binding, special
	reference/assignment.

2005-10-24 23:04  gb

	* level-0/l0-symbol.lisp: No more SVAR-CHECK-SYMBOL-LIST.

2005-10-24 22:52  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	PROGVSAVE vinsn uses non-svar subprim.

2005-10-24 22:51  gb

	* compiler/subprims.lisp: Was out of synch with spjump.s.

2005-10-24 22:51  gb

	* compiler/nx1.lisp: Don't use svars in PROGV.

2005-10-24 22:10  gb

	* xdump/xfasload.lisp: When setting xload binding addresses, set
	symbol.binding-index cell (not svar.idx-cell ...)

2005-10-24 22:07  gb

	* level-0/PPC/ppc-symbol.lisp, level-1/l1-lisp-threads.lisp,
	level-1/ppc-threads-utils.lisp: Don't use svars at runtime.

2005-10-24 22:06  gb

	* level-0/nfasload.lisp: Keep track of binding indices assigned in
	the cold load.	(Could do this another way ...)

2005-10-24 22:05  gb

	* level-0/l0-symbol.lisp: CHECK-SYMBOL-LIST (used in PROGV) calls
	ENSURE-BINDING-INDEX.
	
	Don't use svars in %SYM-VALUE, etc.
	
	Keep binding indices and svar indices in synch.
	
	Add SYMBOL-BINDING-INDEX accessor, for debugging.

2005-10-24 07:00  gb

	* level-1/runtime.lisp: No need to clean up symbol.package-plist,
	which no longer exists.

2005-10-24 06:59  gb

	* lisp-kernel/: spjump.s, spentry.s: New (non-svar) subprims for
	special binding/access.

2005-10-24 06:58  gb

	* level-0/l0-symbol.lisp: New binding-index stuff.  May need to
	keep in synch with svar indices while weaning ourselves of svars;
	may need to do that weaning cold turkey.

2005-10-24 06:55  gb

	* xdump/faslenv.lisp, xdump/xfasload.lisp, level-0/nfasload.lisp,
	lib/nfcomp.lisp: New fasl ops: intern, create symbols and update
	their binding indices.

2005-10-24 06:54  gb

	* level-0/PPC/ppc-misc.lisp: .SPSVAR-UNBIND-TO is now just
	.SPUNBIND-TO.

2005-10-24 06:53  gb

	* compiler/PPC/ppc2.lisp: SVAR-DPAYBACK is now just DPAYBACK.

2005-10-24 06:53  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	Rename some unbinding vinsns, use new subprim names.

2005-10-24 06:52  gb

	* compiler/subprims.lisp: New subprims, to phase out svar-based
	special binding/access.  (Note that unbinding works the same way
	for svars/symbol-binding-indices; svar-based unbinding routines
	were just renamed.)

2005-10-23 04:44  gb

	* xdump/xfasload.lisp: New low-level plist stuff.

2005-10-23 04:44  gb

	* xdump/faslenv.lisp: Accept a slightly newer fasl version (not
	finished bootstrapping yet.)

2005-10-23 04:43  gb

	* lisp-kernel/linux64/Makefile: Depend on constants64.?

2005-10-23 04:42  gb

	* level-0/l0-symbol.lisp, level-0/nfasload.lisp,
	lib/source-files.lisp: Move symbol-plist to new symbol slot;
	simplify access to symbol package, type-predicate.

2005-10-23 04:41  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp:
	Remove old symbol.package-plist constants.

2005-10-23 04:40  gb

	* compiler/: nx1.lisp, nxenv.lisp, PPC/ppc2.lisp,
	PPC/PPC32/ppc32-vinsns.lisp, PPC/PPC64/ppc64-vinsns.lisp: Open-code
	%SYMBOL->SYMPTR.

2005-10-23 01:42  gb

	* lisp-kernel/: constants64.h, constants64.s: New symbol slots on
	ppc64, too.

2005-10-23 01:41  gb

	* level-0/nfasload.lisp: Remove the crude bootstrapping hack (at
	least the most recent one ...)

2005-10-22 23:49  gb

	* xdump/xfasload.lisp: Start new symbol stuff.	More to be done
	here.

2005-10-22 23:49  gb

	* xdump/heap-image.lisp: ABI version change.

2005-10-22 23:49  gb

	* lisp-kernel/linux/Makefile: Depend on constants32.?

2005-10-22 23:49  gb

	* lisp-kernel/ppc_print.c: Symbol package isn't where it used to
	be.

2005-10-22 23:48  gb

	* lisp-kernel/image.h: New "abi" version, for symbol size/format
	changes.

2005-10-22 23:47  gb

	* lisp-kernel/gc.c: Anticipate the symbol-package/plist breakup.

2005-10-22 23:46  gb

	* level-0/nfasload.lisp: Add a very ugly bootstrapping hack, and a
	warning reminding that it should be removed.

2005-10-22 23:45  gb

	* level-0/l0-symbol.lisp: Initialize new symbol slots in
	MAKE-SYMBOL.

2005-10-22 23:45  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp, lisp-kernel/constants32.h,
	lisp-kernel/constants32.s: New symbol slots.

2005-10-22 23:44  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Add a couple of new fields to
	symbols; this is intended to help get rid of svar objects for
	thread-specific special bindings, and to make accessing a symbol's
	plist a little faster/simpler.
	
	Changing the size of a symbol introduces some bootstrapping issues;
	the bleeding-edge sources may not build until that bootstrapping
	process is complete (on all platforms); there will be new binaries
	then (probably sometime on October 23.)

2005-10-22 18:58  gb

	* lisp-kernel/spentry.s: newblocktag/newgotag have been obsolete
	for a few years now.

2005-10-22 18:57  gb

	* lisp-kernel/: constants.s, lisp_globals.h: A little kernel-global
	cleanup.

2005-10-22 18:17  gb

	* lib/macros.lisp: Add
	UNWIND-PROTECT-DISABLE-INTERRUPTS-DURING-CLEANUP, at least for the
	time being ...

2005-10-22 18:15  gb

	* level-1/l1-readloop-lds.lisp: An EOF in the REPL isn't
	"transient" if --batch is in effect.

2005-10-22 18:15  gb

	* compiler/X86/x86-asm.lisp: Still a ways from reality, but a
	little closer.

2005-10-22 18:14  gb

	* compiler/PPC/ppc-arch.lisp: go-tag-counter & block-tag counter
	have been obsolete for a few years.

2005-10-18 17:03  gb

	* level-1/l1-lisp-threads.lisp: THREAD-INTERRUPT: checked in
	unsaved buffer, bad version always returned NIL.

2005-10-17 22:52  gb

	* lisp-kernel/thread_manager.c: In xNewThread, try to detect
	stack/thread initialization failures.  SEM_WAIT_FOREVER for new
	thread activation.

2005-10-17 22:51  gb

	* lisp-kernel/lisp-exceptions.c: Don't maintain
	tcr.suspend_total_on_exception_entry.

2005-10-17 22:50  gb

	* library/lispequ.lisp: SEMAPHORE-NOTIFICATION stuff.

2005-10-17 22:49  gb

	* lib/ccl-export-syms.lisp: PROCESS-KILL-ISSUED,
	SEMAPHORE-NOTIFICATION-STATUS, CLEAR-SEMAPHORE-NOTIFICATION-STATUS,
	SEMAPHORE-NOTIFICATION, MAKE-SEMAPHORE-NOTIFICATION.

2005-10-17 22:47  gb

	* level-1/version.lisp: Bump.

2005-10-17 22:46  gb

	* level-1/linux-files.lisp: WAIT-ON-SEMAPHORE can accept a
	SEMAPHORE-NOTIFICATION object and set its status atomically.

2005-10-17 22:46  gb

	* level-1/l1-processes.lisp: SEMAPHORE-NOTIFICATION stuff. 
	PROCESS-INTERRIPT returns T on success.  Add PROCESS-KILL-ISSUED
	and SETF of it; make PROCESS-KILL set PROCESS-KILL-ISSUED.

2005-10-17 22:37  gb

	* level-1/l1-lisp-threads.lisp: INIT-THREAD-FROM-TCR, NEW-TCR:
	maybe no TCR, maybe no stack areas if out of memory/ out of thread
	resources.  THREAD-INTERRUPT returns T if a thread exists and a
	signal is successfully delivered.

2005-10-17 22:35  gb

	* level-1/l1-clos-boot.lisp: SEMAPHORE-NOTIFICATION objects.

2005-10-15 16:14  gb

	* compiler/PPC/ppc2.lisp: On PPC64, 64-bit memory accesses
	(accesses to signed/unsigned 64-bit integers or to pointers) with a
	constant 16-bit offset can only use LD/STD if the low 2 bits of
	that offset are 0.  Something like:
	
	(%get-ptr p 3)
	
	would have elicited a warning from the assembler that it's clearing
	those low 2 bits for you; that's maybe better than generating the
	wrong instruction, but it doesn't lead to "the pointer 3 bytes from
	p" being returned, either ...

2005-10-06 12:53  gb

	* level-1/version.lisp: Bump: "post-051006".

2005-10-06 12:27  gb

	* lib/macros.lisp: DEFCALLBACK-BODY: ppc64 changes: store all (64
	of 'em) bits of an integer return value. Store float return values
	2 natural words (16 bytes) into the argument area.

2005-10-05 12:17  gb

	* level-1/l1-processes.lisp: Fix typo.

2005-09-30 12:51  gb

	* library/chud-metering.txt: Flesh out a bit more.

2005-09-30 03:31  gb

	* library/chud-metering.txt: new file

2005-09-27 10:20  bryan

	* tools/asdf-install/: COPYRIGHT, defpackage.lisp, installer.lisp,
	port.lisp, doc/index.html: import latest asdf-install from cclan.

2005-09-26 08:57  gb

	* lib/macros.lisp: In DEFCALLBACK-BODY, coerce SINGLE-FLOAT result
	to DOUBLE-FLOAT, store in argument area via (SETF
	(%GET-DOUBLE-FLOAT ,stack-ptr ,offset)).  (E.g., un-break what got
	broken a month or so ago.)

2005-09-24 16:05  gb

	* level-1/version.lisp: Bump.

2005-09-24 15:53  gb

	* lisp-kernel/image.h: Bump ABI_VERSION_MIN.

2005-09-24 15:52  gb

	* level-0/l0-hash.lisp, lib/hash.lisp: Thread-private hash tables
	store/check *CURRENT-PROCESS* instead of (%CURRENT-TCR), since TCRs
	get recycled.

2005-09-24 05:03  gb

	* lisp-kernel/gc.c: Clear hash-table-vector caches if the
	hash-table is weak (on key or value.)
	
	Could be smarter about this (e.g., treat them as weak references),
	but don't want things to stay around just because they're
	referenced from the cache.

2005-09-24 04:43  gb

	* lisp-kernel/plbt.c: #include <stdint.h>, so that this compiles
	under Jaguar.

2005-09-22 22:39  gb

	* level-1/version.lisp: Bump, 1.0-rc1.

2005-09-22 22:39  gb

	* lib/setf.lisp: Back out of change to DECF, 'til after 1.0.

2005-09-21 04:37  gb

	* lib/hash.lisp: START-HASH-TABLE-ITERATOR: use LOCK-HASH-TABLE
	instead of manipulating the exclusion lock directly.
	
	FINISH-HASH-TABLE-ITERATOR: use UNLOCK-HASH-TABLE.

2005-09-21 02:57  gb

	* lisp-kernel/spentry.s: In _SPset_hash_key, ensure that a local
	label "2" is defined (so that "(bne 2f)" branches to the right
	place.)

2005-09-13 22:37  gb

	* level-1/version.lisp: Bump; call it a "test" release.

2005-09-13 22:36  gb

	* xdump/heap-image.lisp: ABI-VERSION 1003.

2005-09-13 22:30  gb

	* lib/macros.lisp: %WITH-RECURSIVE-LOCK-PTR uses a
	LOCK-ACQUISITION.

2005-09-13 22:29  gb

	* level-1/l1-processes.lisp: Locking primitives accept optional
	LOCK-ACQUISITION objects.
	
	Accesors (get, clear) for LOCK-ACQUISITION objects; PRINT-OBJECT
	method.

2005-09-13 22:27  gb

	* level-0/l0-misc.lisp: Accept and update a LOCK-ACQUISITION object
	when locking (or trying to).

2005-09-13 22:26  gb

	* level-0/l0-hash.lisp: PUTHASH: don't complain about mapping
	conflicts unless we try to remove something and it's not at the
	current iteration index.

2005-09-13 22:20  gb

	* lib/ccl-export-syms.lisp: Export LOCK-ACQUISITION,
	MAKE-LOCK-ACQUISITION, LOCK-ACQUISITION-STATUS, and
	CLEAR-LOCK-ACQUISITION-STATUS.

2005-09-13 21:12  gb

	* library/lispequ.lisp: Accessor, constructor for LOCK-ACQUISITION.

2005-09-13 21:11  gb

	* level-1/l1-clos-boot.lisp: BUILT-IN-CLASS for LOCK-ACQUISITION.

2005-09-13 21:08  gb

	* release-notes.txt: Mention CPU-COUNT.

2005-09-13 19:32  gb

	* lisp-kernel/image.c: On PPC64, save_application() writes the
	image and section headers after writing the section contents,
	maintains the offset from the end of those headers to the start of
	section data in the (split) 64-bit section_data_offset field(s) of
	the header.  (This should allow very large sections to be written;
	the offset from the trailer at the end of the file to the header
	has to fit in 32 bits, and - if the header preceded the section
	data - would have constained the entire image to about 2GB.)

2005-09-13 19:28  gb

	* lisp-kernel/image.h: high half of PPC64 section_data_offset field
	is signed, low half unsigned.

2005-09-13 16:15  gb

	* lisp-kernel/: image.h, image.c: Split section_data_offset in
	half, to deal with alignment issues.

2005-09-13 16:01  gb

	* lisp-kernel/lisp-exceptions.c: If gc is inhibited on entry,
	ensure that GC_INHIBIT_COUNT looks negative.  (%UNLOCK-GC-LOCK
	should increment it in this case, and do a gc trap if it goes from
	-1 to 0.)

2005-09-13 15:59  gb

	* lisp-kernel/image.c: On ppc64, zero (for now)
	fh.section_data_offset; zeroing "pad" array only happens on ppc32.

2005-09-13 15:58  gb

	* lisp-kernel/image.h: Fix newly-introduced typo.

2005-09-13 15:53  gb

	* lisp-kernel/asmutils.s: Move the "strange reference to exp()"
	from current_stack_pointer() - which is probably inlined - to
	flush_cache_lines().  Make it a data reference, and make it
	word-size dependent.

2005-09-13 15:50  gb

	* lisp-kernel/m4macros.m4: exportfn generates and exports .foo as
	well as foo when #+(and LINUX PPC64).

2005-09-13 15:48  gb

	* lisp-kernel/linux64/elf64ppc.x: Some older toolchains don't
	recognize DATA_SEGMENT_RELPRO_END (and, frankly, neither do I.) 
	Comment out the reference, and see if it's important on platforms
	that -do- reference it.

2005-09-13 15:36  gb

	* lib/hash.lisp: If reloading a hash table from a fasl file, use
	the GENERAL-HASH-FIND[-FOR-PUT] functions instead of anonymous
	lambdas.

2005-09-13 15:33  gb

	* lisp-kernel/gc.h: No compression in SAVE-APPLICATION, so lose
	GC_TRAP_FLAG_COMPRESS.

2005-09-13 15:31  gb

	* lisp-kernel/lisp-exceptions.c, lisp-kernel/image.h,
	lisp-kernel/image.c, lib/dumplisp.lisp: No compression in
	SAVE-APPLICATION.

2005-09-12 21:14  gb

	* level-0/l0-hash.lisp: In %NEEDS-REHASHING: both (GC-COUNT) and
	(NHASH.GC-COUNT hash) are fixnums.
	
	When creating a hash table, use new GENERAL-HASH-FIND and
	GENERAL-HASH-FIND-FOR-PUT, rather than anonymous lambdas, for the
	non-EQ/non-EQL cases.
	
	PUTHASH's iteration check looks at all pending iterators, uses
	hash-table-test to compare keys.  REMHASH wasn't checking.  (Sorry,
	I thought that I'd checked this in already.)
	
	In %GROW-HASH-TABLE, remove a PROGN and a comment; remove "can't
	happen" check of nhash.lock, which should be mostly unused.  Only
	process a key from the vector if it's neither FREE-HASH-KEY-MARKER
	nor DELETED-HASH-KEY-MARKER (code was just checking for (EQ KEY
	(%UNBOUND-MARKER)), where (%UNBOUND-MARKER) ==
	FREE-HASH-KEY-MARKER.)	This *might* cause keys to become lost
	(leading to duplicate key errors), or might not.
	
	%REHASH doesn't clear cache key, since DO-REHASH always clears it.

2005-09-10 21:47  gb

	* level-1/version.lisp: Bump.

2005-09-10 21:36  gb

	* level-0/l0-symbol.lisp: Fix other typos.

2005-09-10 21:34  gb

	* level-1/l1-readloop.lisp: Fix typo.

2005-09-10 21:30  gb

	* level-1/l1-readloop.lisp: CCL::TOPLEVEL isn't too well-defined
	outside of the initial process; let it do PROCESS-RESET in that
	case.

2005-09-10 21:27  gb

	* level-0/l0-symbol.lisp: %SYM-VALUE, %SET-SYM-VALUE: don't create
	an SVAR; only call %FIND-SVAR if not constant/global.
	
	The idea of pre-allocating a reserved svar-idx for
	*INTERRUPT-LEVEL* doesn't work too well, since nothing references
	that svar (and since the hash table's weak).  Post-1.0.

2005-09-08 22:43  gb

	* level-0/l0-hash.lisp: In PUTHASH, increment (nhash.count hash)
	when overwriting a deleted entry.
	
	Clobber cached value too when starting to DO-REHASH.
	
	When DO-REHASH encounters a deleted entry, change it to free; among
	other things, this keeps it from getting counted more than once,
	and doing that could cause the nhash.vector.deleted-count to go
	negative.
	
	(This seems to be what was causing problems with the weak hash
	tables that're used to map symbols to SVAR objects used by the
	special variable binding mechanism: otherwise unreferenced keys
	(symbols) had their entries removed by the GC; DO-REHASH saw the
	deleted entries when the hash table was rehashed after GC and
	counted them multiple times, causing the deleted count to go
	negative and the hash-table's size to be miscalcuated.	It'd
	eventually become completely full, which isn't ever supposed to
	happen, and the failure involves a SEGFAULT.)
	
	I believe this was causing the problems that Bryan reported
	encountering while compiling SBCL.

2005-09-08 13:39  bryan

	* level-1/l1-typesys.lisp: 
	csubtypep: we shouldn't answer definitively about all cases when
	type1 is *wild-type* or type2 is *empty-type*.	don't special case
	and let invoke-type-method deal with them.

2005-09-08 03:46  gb

	* level-1/l1-error-system.lisp: APPLICABLE-RESTART-P: don't bother
	searching for null conditions (shouldn't have found any, in any
	case.)
	
	FIND-RESTART and COMPUTE-RESTARTS call APPLICABLE-RESTART-P to
	invoke any restart test function even when condtion is NIL.
	
	INVOKE-RESTART-INTERACTIVELY defined in terms of FIND-RESTART,
	INVOKE-RESTART (just so that there'd be less to go wrong if the
	internals of %ACTIVE-RESTART change.)

2005-09-08 02:12  bryan

	* level-1/version.lisp: bump.

2005-09-07 20:47  bryan

	* level-1/l1-typesys.lisp: 
	make-member-ctype: if doublep and not singlep, use
	*ctype-of-double-float-0*.

2005-09-07 18:38  bryan

	* level-1/l1-typesys.lisp: 
	array :simple-intersection type-method tries to be more smarter
	about element-types.  (patch ported from SBCL)
	
	specialized-element-type of (array nil) is now nil (as opposed to
	bit).

2005-09-07 14:18  bryan

	* level-1/l1-typesys.lisp: 
	number :simple-union should also check the case when a rational
	type is adjacent to an integer type.  (patch ported from SBCL)
	
	union (integer 0 0) (rational (0)) ==> (rational 0)

2005-09-07 12:33  bryan

	* level-1/l1-typesys.lisp: 
	CONS :simple-union type-method should do a little more work for
	"harder to compute" CONS types especially involving negation. 
	(patch corresponds to SBCL src/code/late-type.lisp v1.100)

2005-09-07 06:15  gb

	* release-notes.txt: First stab at enumerating new features for
	1.0.

2005-09-07 02:00  bryan

	* level-1/version.lisp: bump.

2005-09-07 01:51  bryan

	* level-1/l1-typesys.lisp: 
	type-intersection of numeric types with same numeric lower bound
	(one exclusive, one not) would return a more inclusive type.
	
	type-intersection '(short-float (0.0)) '(short-float 0.0) =>  
	'(short-float (0.0))   ;; not '(short-float 0.0)

2005-09-06 17:15  gb

	* level-1/version.lisp: Bump.

2005-09-06 06:00  gb

	* lisp-kernel/lisp-exceptions.c: Handle
	GC_TRAP_FUNCTION_IMMEDIATE_GC, by trying to invoke the GC ...
	immediately.  Should maybe try to determine if it's necessary,
	since there are race conditions.

2005-09-06 05:58  gb

	* lisp-kernel/gc.h: Define GC_TRAP_FUNCTION_IMMEDIATE_GC.

2005-09-06 05:57  gb

	* level-0/l0-hash.lisp: MAKE-HASH-TABLE ... :SHARED NIL creates a
	hash table that's effectively always locked by the calling thread;
	creation, GET/PUT/REMHASH use new locking primitives.
	
	Simplify PUTHASH a little; don't maintain NHASH.PUTHASH-COUNT,
	handle the replace/free/overwrite-deleted-entry cases separately.

2005-09-06 05:52  gb

	* level-0/PPC/ppc-misc.lisp: %LOCK-GC-LOCK either increments or
	decrements the gc inhibition lock.  %UNLOCK-GC-LOCK does the
	inverse, and tries to invoke the GC if it increments from -1 to 0.
	
	(The idea is that if the GC tries to run when the inhibition value
	is non-zero, the GC will ensure that that non-zero value is
	negative.  That doesn't work yet; it's easy, but it's another case
	where the kernel and image need to be synched.)

2005-09-06 05:48  gb

	* lib/hash.lisp: MAKE-LOAD-FORM for HASH-TABLEs handles "private"
	(thread-owned) hash-tables.  (Since we can't exactly dump a thread,
	they become owned by whatever thread loads them.)
	
	FASL locking/unlocking of hash tables handles the thread-owned
	cases.

2005-09-06 05:46  gb

	* library/lispequ.lisp: Replace unused NHASH.LOCKED-ADDITIONS cell
	with NHASH.OWNER.

2005-09-06 05:44  gb

	* level-0/l0-init.lisp: Add :OPENMCL-PRIVATE-HASH-TABLES to
	*FEATURES*.

2005-09-05 23:54  bryan

	* lib/setf.lisp: 
	decf: define as separate macro to honor order of arg evaluation per
	ansi 5.1.3.  (a similar macro is needed for incf, but it breaks
	bootstrapping.)

2005-09-05 19:45  gb

	* lib/hash.lisp: Update MAKE-LOAD-FORM, fasl-related locking for
	the new order (and/or for native threads, which happened a few
	years ago, depending on your point of view.)
	
	Try to remove outright lies from the comments.

2005-09-05 18:55  gb

	* level-1/version.lisp: "b" is for "better ..."

2005-09-05 18:46  gb

	* level-0/l0-hash.lisp: hash-find functions: FIRST-DELETED-INDEX is
	always a fixnum or NIL, never T.  Return FIRST-DELETED-INDEX if a
	secondary probe finds a free entry and FIRST-DELETED-INDEX is
	non-nil.  (Always return an index.)
	
	(In some cases, we were returning T instead of an index from a
	probe functions.   Some callers errored trying to do (1+ T), some
	callers had aggressive fixnum/optimize declarations that caused 1
	to be added to T and the result used to access the hash vector.
	
	It's OK if the declarations are aggressive, unless they're wrong,
	of course.

2005-09-05 14:02  bryan

	* level-1/l1-sysio.lisp: 
	(defclass file-stream): rename original-name slot to
	actual-filename.
	
	stream-original-name, (setf stream-original-name): renamed to
	stream-actual-filename, (setf stream-actual-filename).
	
	make-file-stream, close: use renamed functions.
	
	make-file-stream: if filename is relative, use (full-pathname
	filename).  we don't call full-pathname if the filename is absolute
	to avoid clobbering a logical-pathname with its non-logical
	counterpart.  (maybe full-pathname should do that for us?)
	
	make-file-stream, close: use ccl::unix-rename instead of
	cl:rename-file to avoid merge-pathnames issues when filename has no
	type.

2005-09-05 07:55  gb

	* level-1/version.lisp: Bump.

2005-09-05 07:55  gb

	* level-0/l0-hash.lisp: In REMHASH: if the key being removed
	happens to also be in the cache, set the vector entry to
	DELETED-HASH-KEY-MARKER.

2005-09-05 07:53  gb

	* lisp-kernel/constants64.h: Define slot_unbound for ppc64.

2005-09-05 01:34  gb

	* lisp-kernel/image.h: Bump ABI_VERSION_*, for hash-table related
	changes.

2005-09-05 01:33  gb

	* xdump/heap-image.lisp: Bump *image-abi-version*.

2005-09-05 01:10  gb

	* level-0/l0-hash.lisp: Lots of changes.
	
	This code hasn't really supported any kind of concurrent access in
	a long time, so a lot of things (nhash.lock,
	nhash.locked-additions) have been adding some combination of
	clutter/overhead here.
	
	Inline a lot more, use more aggressive OPTIMIZE declarations.
	
	Try to avoid UNWIND-PROTECT overhead associated with locking and
	unlocking, disabling interrupts, inhibiting GC: wait for/grab the
	lock early, disable interrupts while doing so, assume that
	unlocking happens (without need to use UNWIND-PROTECT) because code
	is uninterruptible.
	
	Try to enforce restrictions on (SETF GETHASH)/REMHASH behavior
	while mapping is in effect.  (Needs work.)
	
	Represent keys in deleted key/value pairs as SLOT-UNBOUND-MARKERs,
	so that we can tell whether an entry is empty or deleted with a
	single memory reference.
	
	Try to avoid excessive generality by using specialized lookup
	functions (at least for EQ/EQL tables).  Might want to define these
	via MACROLET'ed code, since there's a lot of redundancy here; see
	%HASH-PROBE (which also tries to specialize the redundancy.

2005-09-05 00:23  gb

	* lisp-kernel/gc.c: Don't invalidate cached hash_table key/value
	pairs here; let lisp code do it if/when it notices that rehashing
	is necessary.
	
	When deleting a (weak) pair, use slot_unbound (rather than unbound)
	to mark the key as having been deleted.

2005-09-05 00:21  gb

	* lisp-kernel/constants32.h: Define slot_unbound,
	slot_unbound_marker.

2005-09-05 00:20  gb

	* lib/macros.lisp: WITH-HASH-TABLE-ITERATOR: assume that locking,
	GC inhibition happen inside START-HASH-TABLE-ITERATION and
	STOP-HASH-TABLE-ITERATION; don't expand into code which does these
	things explicitly.

2005-09-05 00:19  gb

	* level-0/PPC/ppc-utils.lisp: SET-LISP-HEAP-GC-THRESHOLD does
	nothing (and returns NIL) if its argument isn't a non-negative
	fixnum.

2005-09-05 00:18  gb

	* level-0/PPC/ppc-misc.lisp: Don't do any SYNCing or ISYNCing
	before or after %LOCK-GC-LOCK and %UNLOCK-GC-LOCK.  (This needs to
	be tested on MP systems, which is one reason for checking this code
	in now.)

2005-09-05 00:16  gb

	* lib/hash.lisp: WITH-HASH-TABLE-ITERATOR: assume that locking, GC
	inhibition happen inside START-HASH-TABLE-ITERATION and
	STOP-HASH-TABLE-ITERATION; don't expand into code which does these
	things explicitly.

2005-09-05 00:15  gb

	* library/lispequ.lisp: replace unused NHASH.MAP-COUNT with
	NHASH.ITERATOR.  Add NHASH.FIND and NHASH.FIND-NEW function slots
	to NHASH accessors.

2005-09-05 00:13  gb

	* lisp-kernel/darwin/Makefile: CHEADERS includes constants32.h.

2005-09-05 00:12  gb

	* xdump/hashenv.lisp: secondary-keys-*-2 holds double values of the
	secondary-keys primes.
	
	Hash-table-iterators don't track "locked-additions", but do keep
	track of the previous iterator (for recursive calls.)

2005-09-04 23:56  gb

	* level-1/l1-aprims.lisp: Reformat some comments.

2005-09-04 23:53  gb

	* level-0/l0-symbol.lisp: Define *INTERRUPT-LEVEL* and try to
	guarantee that it's the first svar.  (This is intended to allow
	WITHOUT-INTERRUPTS to be defined as (mostly) a special binding of
	*INTERRUPT-LEVEL*, since special binding is cheaper than
	UNWIND-PROTECT, but doing that sanely may take a while.)

2005-09-04 23:50  gb

	* level-0/l0-misc.lisp: WRITE-LOCK-RWLOCK-DISABLE-INTERRUPTS: does
	WRITE-LOCK-RWLOCK and disables interrupts in one operation. 
	(Interrupts are enabled if it has to spin waiting for the lock.)

2005-09-04 23:48  gb

	* compiler/PPC/ppc2.lisp: Use ACODE-S16-CONSTANT-P to recognize
	unbound/slot-unbound markers as 16-bit constants.

2005-09-04 23:47  gb

	* compiler/nxenv.lisp: Be more careful about asserting that things
	that can have side-effects have the SIDE-EFFECT-FREE attribute.

2005-09-04 23:45  gb

	* compiler/nx0.lisp: ACODE-16-BIT-CONSTANT-P recognizes
	unbound/slot-unbound markers, as well as fixnum constants whose
	boxed representation is (SIGNED-BYTE 16).

2005-09-04 23:39  gb

	* lib/macros.lisp: Don't try to reference STACK-PTR when tracing in
	DEFCALLBACK-BODY; it may never have been bound.  (Should probably
	try to separate the traced case from the non-traced case better in
	all of this.)

2005-09-04 17:44  bryan

	* level-1/l1-typesys.lisp: (def-type-translator complex ...)
	
	ratio and bignums aren't properly handled because they are
	represented by intersection and union ctypes.  teach it just enough
	to deal with them and other simple variants.  more work (and
	understanding on my part) will be needed to handle more complex
	(har har) types.
	
	ported from sbcl 0.9.4.23.

2005-09-02 04:06  gb

	* lib/time.lisp: GET-INTERNAL-REAL-TIME basically tracks elapsed
	time since the first time it's called in a session, is more likely
	to return fixnums after that first call.

2005-09-02 04:05  gb

	* lisp-kernel/lisp-exceptions.c: pc_luser_xp(): allow catch_frame
	initialization to be interrupted, do the right thing if it is.

2005-09-02 04:04  gb

	* lisp-kernel/lisp-exceptions.h: Recognize instructions
	(str(rX,nnn(nargs))) used to initialize catch frames.

2005-09-02 04:03  gb

	* lisp-kernel/macros.s: Try to make catch/unwind-protect frames
	faster: allocate on the tstack in an unboxed frame, use NARGS as a
	base register, set each field individually and in order, then
	change the tstack frame to 'boxed'.
	
	pc_luser_xp() recognizes stores relative to nargs and zeroes out
	any partially initialized fields in the catch frame.

2005-09-02 00:49  bryan

	* level-1/version.lisp: bump.

2005-09-01 22:33  bryan

	* level-1/l1-reader.lisp: the reader gets first dibs on arithmetic
	errors.
	
	signal a reader-error when an "impossible number" is read.  also
	display the (more informative) original error.

2005-09-01 07:28  gb

	* lisp-kernel/spentry.s: be more careful about restoring saveregs
	after ff-call, syscall: set to zero, change tcr valence back to
	lisp, -then- vpop_saveregs.
	
	eabi_syscall wasn't saving/restoring NVRs at all; even though
	they're preserved across syscalls, we need to have their values
	somewhere that the GC can see them in case GC occurs while current
	thread is blocked in syscall.  (Doing GC in Slime is one way to
	trigger this, since a few threads are blocked in syscall.)  This
	doesn't seem to have been newly introduced, but NVRs may be more
	likely to contain relocatable lisp values when syscalls are entered
	because of register allocation changes.
	
	There was also a Linux-specific change that did a "stw" into
	tcr.valence; that wants to use the "str" macro for PPC64.
	
	These changes haven't yet been tested under Darwin; they -look-
	right, but beware.

2005-09-01 07:20  gb

	* lisp-kernel/gc.c: Indentation changes only.

2005-08-31 15:36  gb

	* compiler/nx1.lisp: NX1-1D-VSET, NX1-1D-VREF: only transform into
	a typed uvref if the array's declared/known to be simple.

2005-08-30 21:00  gb

	* level-1/linux-files.lisp: It shouldn't matter too much, but the
	newly documented WAIT-ON-SEMAPHORE uses an internal timeout of 1
	second (vice 0 seconds.)

2005-08-30 20:59  gb

	* lisp-kernel/thread_manager.c: On older versions of LINUX,
	sem_timedwait() may not return error status correctly (see
	<http://carcino.gen.nz/tech/linux/glibc_sem_timedwait_errors.php>);
	code here was recently changed to assume that errors were always
	returned in errno.
	
	Assume that errno is only set correctly if the return value is
	negative; this seems to fix at least some problems with SLIME,
	OpenMCL, and old Linux C libraries.

2005-08-30 14:24  bryan

	* level-0/l0-array.lisp, lib/macros.lisp, lib/streams.lisp: add doc
	strings

2005-08-30 13:59  bryan

	* level-1/l1-io.lisp, lib/macros.lisp, lib/streams.lisp: add more
	doc strings.

2005-08-30 10:26  bryan

	* compiler/PPC/ppc-lapmacros.lisp, level-1/l1-boot-2.lisp,
	level-1/l1-init.lisp, lib/prepare-mcl-environment.lisp: add doc
	strings to development-mode dictionary.

2005-08-30 09:52  bryan

	* level-0/PPC/ppc-utils.lisp, level-1/l1-aprims.lisp: add doc
	strings to garbage collection dictionary

2005-08-30 01:31  bryan

	* level-1/version.lisp: bump.

2005-08-30 01:26  bryan

	* level-1/: l1-reader.lisp, l1-sysio.lisp, linux-files.lisp: add
	doc strings for operating-system dictionary

2005-08-30 01:11  bryan

	* level-0/l0-cfm-support.lisp, level-0/PPC/ppc-def.lisp,
	level-1/l1-lisp-threads.lisp, level-1/linux-files.lisp,
	lib/foreign-types.lisp, lib/macros.lisp: add doc strings for the
	foreign-function-interface dictionary.

2005-08-30 00:20  bryan

	* level-1/linux-files.lisp: add doc strings for external-program
	dictionary.

2005-08-30 00:06  bryan

	* level-1/l1-sockets.lisp: add doc strings for sockets dictionary.

2005-08-29 23:24  bryan

	* level-0/l0-aprims.lisp, level-1/l1-processes.lisp,
	level-1/l1-streams.lisp, level-1/linux-files.lisp, lib/macros.lisp:
	add doc strings for the threads dictionary.

2005-08-28 22:19  gb

	* xdump/xfasload.lisp: Optionally suppress messages about cold-load
	functions and their addresses.

2005-08-28 22:18  gb

	* lisp-kernel/darwin/Makefile: Base the choice of -lgcc vs.
	-lSystemStubs on the GCC version, not the availability of
	-lSystemStubs.

2005-08-28 17:22  gb

	* xdump/xfasload.lisp: TARGET-XLOAD-LEVEL-0 prints a message
	reminding us of the bootstrapping image's name and location.

2005-08-28 17:13  gb

	* level-1/version.lisp: Bump.

2005-08-28 16:55  gb

	* lib/macros.lisp: WITH-HASH-TABLE-ITERATOR: get a clue, don't
	evaluate argform twice.

2005-08-28 16:45  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: ppc64::tag-misc ->
	ppc64::fulltag-misc in ISTRUCT-TYPEP vinsn.

2005-08-28 16:44  gb

	* library/lispequ.lisp: Hash-table accessors here.

2005-08-28 16:44  gb

	* lib/macros.lisp: Hash-table locking macros here.

2005-08-28 16:43  gb

	* lib/hash.lisp: Move hash-table accessors (nhash.*) to the
	more-public lispequ.lisp.

2005-08-28 16:42  gb

	* xdump/hashenv.lisp: Move WITH-EXCLUSIVE-HASH-LOCK,
	WITH-HASH-WRITE-LOCK to macros.lisp, since we want them to be used
	in more-public code (WITH-HASH-TABLE-ITERATOR).

2005-08-28 01:33  gb

	* lisp-kernel/lisp-exceptions.c: Fix typo (extra #else).

2005-08-28 01:32  gb

	* library/chud-metering.lisp: Ignore errors (CHUD state) when
	cleaning up on exit.

2005-08-28 01:29  gb

	* lisp-kernel/lisp-exceptions.c: Bigger red zone, larger stack
	alignment on ppc64.

2005-08-28 01:28  gb

	* level-1/version.lisp: Bump.

2005-08-28 01:27  gb

	* lib/macros.lisp: WITH-HASH-TABLE-ITERATOR locks table & disables
	GC.

2005-08-28 01:26  gb

	* level-0/l0-hash.lisp: If we have to obtain an exclusive lock on
	the hash table and disable GC (as is currently the case), wait for
	the lock first.

2005-08-28 01:25  gb

	* compiler/: nx1.lisp, nxenv.lisp, PPC/ppc2.lisp,
	PPC/PPC32/ppc32-vinsns.lisp, PPC/PPC64/ppc64-vinsns.lisp: Inline
	ISTRUCT-TYPEP.

2005-08-28 00:58  gb

	* lib/hash.lisp: Remove a few stale comments.

2005-08-27 21:26  gb

	* lisp-kernel/Threads.h: Conditionalize SEM_WAIT_FOREVER for Darwin
	(especially Darwin64).

2005-08-26 04:41  gb

	* lisp-kernel/lisp-exceptions.c: Something's got to reset
	tcr->interrupt_level after an interrupt trap.

2005-08-25 00:27  gb

	* lisp-kernel/lisp-exceptions.c: Don't play with interrupt level
	before callbacks; callbacks can do so themselves.

2005-08-25 00:26  gb

	* lisp-kernel/thread_manager.c: Don't loop if SEM_WAIT_WITH_TIMEOUT
	gets interrupted; return to lisp code (so that the interrupt can be
	serviced) and let lisp code decide whether or not to retry.

2005-08-25 00:25  gb

	* lisp-kernel/Threads.h: Define SEM_WAIT_FOREVER, for kernel
	routines that should just restart a SEM_WAIT() call.

2005-08-25 00:24  gb

	* lib/backtrace-lds.lisp: Format a comment better.

2005-08-25 00:23  gb

	* level-1/linux-files.lisp: Semaphore waiting functions assume that
	%wait-on-semaphore-pointer returns a second value (a POSIX-style
	error number).
	
	Handle retries because of #$EINTR in lisp code (don't loop
	uninterruptibly in the kernel.)

2005-08-25 00:22  gb

	* level-1/l1-readloop-lds.lisp: Ensure that interrups are enabled
	around a break loop.

2005-08-25 00:21  gb

	* level-1/l1-numbers.lisp: Arrgh.  INITIALIZE-RANDOM-STATE uses
	%ILSL to shift, since ASH produces an arithmetically correct
	bignum, and we don't want that.

2005-08-25 00:20  gb

	* level-0/l0-misc.lisp: Wait for lock's semaphore in one-second
	intervals.

2005-08-24 14:21  gb

	* level-0/l0-hash.lisp: Restore some of the "locked additions"
	handling in GETHASH, since I probably haven't thought about the
	implications of removing it carefully enough.

2005-08-24 14:19  gb

	* lisp-kernel/gc.c: Fix handling of populations in recursive case
	of rmark.

2005-08-24 13:58  gb

	* level-1/version.lisp: Bump.

2005-08-24 13:58  gb

	* level-0/l0-misc.lisp: Tweak ROOM output.

2005-08-24 05:47  gb

	* level-0/l0-hash.lisp: We don't actually use WITH-REHASH-LOCK, and
	don't want to allocate an nhash.rehash-lock.
	
	Remove a little (currently dead) code from the start of GETHASH.

2005-08-24 05:46  gb

	* xdump/hashenv.lisp: We don't actually use WITH-REHASH-LOCK, and
	don't want to allocate an nhash.rehash-lock.

2005-08-24 05:45  gb

	* lib/hash.lisp: Remove a newline, add a semicolon at top of file.

2005-08-24 01:41  gb

	* lisp-kernel/pmcl-kernel.c: current_stack_pointer() already
	prototyped, inlined; need to cast to BytePtr.

2005-08-24 01:40  gb

	* lisp-kernel/lisp-exceptions.c: current_stack_pointer() already
	prototyped, inlined.

2005-08-24 01:39  gb

	* lisp-kernel/gc.c: Make rmark() recursive, if there's enough stack
	space.	(Falls back to	Deutch-Waite-Schorr pointer inversion if
	there isn't enough stack space.)

2005-08-24 01:38  gb

	* lisp-kernel/bits.h: Prototype for inlined
	current_stack_pointer().  (Prototyped to return a "natural"; some
	previous uses prototyped to return a "BytePtr".)

2005-08-24 01:37  gb

	* lib/ccl-export-syms.lisp: Export *REPORT-TIME-FUNCTION*.

2005-08-24 01:36  gb

	* lib/misc.lisp: Add *REPORT-TIME-FUNCTION*, which allows
	customization of the presentation of TIME's output.

2005-08-24 01:35  gb

	* release-notes.txt: New file.

2005-08-23 20:03  gb

	* level-0/PPC/ppc-def.lisp: Still more indentation problems.

2005-08-23 19:52  gb

	* level-0/PPC/ppc-def.lisp: Some of the work that needed to be done
	on 64-bit %FF-CALL involved indenting properly.  Basic cases now
	seem to work.

2005-08-23 19:11  gb

	* level-0/PPC/ppc-def.lisp: First cut of ppc64 %FF-CALL.  Needs
	more work.

2005-08-23 19:10  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp:
	ALLOC-VARIABLE-EABI-C-FRAME.

2005-08-23 06:39  gb

	* compiler/: nx1.lisp, nxenv.lisp: WITH-VARIABLE-C-FRAME.
	
	Lose %VREFLET.

2005-08-23 06:39  gb

	* compiler/PPC/ppc2.lisp: WITH-VARIABLE-C-FRAME.
	
	PPC2-NLEXIT discards C frames.

2005-08-23 06:37  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	ALLOC-VARIABLE-C-FRAME vinsns.

2005-08-23 06:37  gb

	* level-1/l1-numbers.lisp: INITIALIZE-RANDOM-STATE uses ASH instead
	of CCL::%ILSL; note that ASH takes args in the opposite order from
	%ILSL.

2005-08-23 06:35  gb

	* level-1/l1-utils.lisp: Update the list of
	implementation-dependent special operators: drop %VREFLET and
	SPARC-LAP-FUNCTION (!), add WITH-C-FRAME and WITH-VARIABLE-C-FRAME.

2005-08-23 06:34  gb

	* level-1/version.lisp: Change major version to 1, minor version to
	0.  Change format of *OPENMCL-VERSION* format string (move version
	number before release level, ~A for platform.) "Upgrade" ppc32 to
	release level, ppc64 to beta.

2005-08-23 06:32  gb

	* lib/compile-ccl.lisp: Ensure that (COMPILE-CCL) updates NXENV
	before compiling the rest of the compiler.

2005-08-23 06:31  gb

	* lib/ppcenv.lisp: Remove some unused constants.

2005-08-22 19:07  gb

	* lib/numbers.lisp: The seed values in a RANDOM-STATE can have
	their sign bits set on PPC32, so the PRINT-OBJECT method uses LDB
	to access the signigicant parts of those values.
	
	(Next bug: rewrite this stuff completely; it's not a very good
	random number generator.)

2005-08-22 18:12  gb

	* level-1/linux-files.lisp: Tweak Linux CPU-COUNT.

2005-08-22 17:59  gb

	* level-1/linux-files.lisp: Provide a minimal definition of ED; use
	*RESIDENT-EDITOR-HOOK* to provide a real definition if/when a
	resident editor is available.
	
	Define CPU-COUNT, which returns ... the number of CPUs (1 or more)
	available.

2005-08-22 17:56  gb

	* lib/ccl-export-syms.lisp: Export *RESIDENT-EDITOR-HOOK* and
	CPU-COUNT.

2005-08-22 16:19  gb

	* level-1/l1-files.lisp: FASL-FILE-P thinks that files that start
	with a byte of #xFF are fasl files.

2005-08-22 13:40  bryan

	* lib/nfcomp.lisp: 
	%compile-file: set *compile-file-truename* to (truename src).

2005-08-22 04:13  gb

	* lib/nfcomp.lisp: Wrap a HANDLER-BIND around compile-time
	evaluation, in case either compile-time evaluation or the
	compilation which implements part of it signals a warning that
	might be considered to have been "detected by the compiler".
	
	Another reasonable interpretation would seem to be that warnings
	that occur in that situation and are not detected by the compiler
	don't affect COMPILE-FILE's return value.

2005-08-22 04:08  gb

	* level-1/l1-reader.lisp: Disable #, which was removed from ANSI CL
	a long time ago.

2005-08-22 04:07  gb

	* level-0/PPC/ppc-numbers.lisp: #+ppc64 %NEXT-RANDOM-SEED accounts
	for el-bizarro shifting.

2005-08-22 04:05  gb

	* examples/: cocoa-listener.lisp, cocoa-window.lisp,
	objc-runtime.lisp: Use #& instead of #?, which is deprecated (the
	implementation shouldn't define #?).

2005-08-22 04:05  gb

	* lib/db-io.lisp: The #? reader macro is supposed to be reserved
	for the user.  Use #& for foreign variable lookup, and make #? an
	alias to it (for backward compatibility, for a while.)

2005-08-22 04:03  gb

	* lib/numbers.lisp: RANDOM-STATE's PRINT-OBJECT method uses ASH
	instead of CCL::%ILSR.

2005-08-21 16:57  gb

	* lisp-kernel/linux/.gdbinit: Try to parameterize more for
	ppc32/ppc64.

2005-08-21 16:57  gb

	* lib/macros.lisp: Add WITH-PROCESS-WHOSTATE, to make
	saving/restoring a process's WHOSTATE a little easier.
	
	%WITH-RECURSIVE-LOCK-PTR uses the new %LOCK-RECURSIVE-LOCK to
	better ensure that the lock is unlocked if and only if it was
	successfully locked.

2005-08-21 16:54  gb

	* level-1/version.lisp: Bump.

2005-08-21 16:54  gb

	* level-1/linux-files.lisp: %TIMED-WAIT-ON-SEMAPHORE-POINTER takes
	an optional WHOSTATE argument.

2005-08-21 16:53  gb

	* level-1/l1-readloop-lds.lisp: Try harder to keep an
	(%UNBOUND-MARKER) as the primary return value to TOPLEVEL-PRINT
	from making *, **, *** unbound.

2005-08-21 16:50  gb

	* level-1/l1-processes.lisp: PROCESS-WAIT uses
	WITH-PROCESS-WHOSTATE.

2005-08-21 16:49  gb

	* level-1/l1-lisp-threads.lisp: THREAD-HANDLE-INTERRUPTS resets the
	process-whostate to "Active", using the new WITH-PROCESS-WHOSTATE
	macro.

2005-08-21 16:48  gb

	* level-0/l0-misc.lisp: Try to ensure that things that change the
	state of a recursive lock do so atomically, make
	%LOCK-RECURSIVE-LOCK take an extra CONS (optional for
	bootstrapping), which can be used to reliably indicate success.
	
	Add a %%LOCK-OWNER function for debugging.
	
	Note that there are some related changes in higher-level code;
	while bootstrapping, build ppc-boot and a new image before
	recompiling the higher-level parts of this.

2005-08-21 02:28  gb

	* lib/sparcenv.lisp: no SPARC

2005-08-20 21:07  gb

	* level-1/version.lisp: 050820b.  New binaries soon.

2005-08-20 20:47  gb

	* compiler/: backend.lisp, nx0.lisp, nxenv.lisp, risc-lap.lisp,
	PPC/ppc-lap.lisp, PPC/ppc2.lisp: Several changes to enable larger
	functions/code-vectors and to allow more labels in LAP and the
	compiler.
	
	Some of this is tricky to bootstrap; new binaries soon.

2005-08-20 19:54  bryan

	* level-0/l0-array.lisp: 
	fill-pointer: when throwing a type-error, set expected-type to
	'(and array (satisfies array-has-fill-pointer-p)).

2005-08-20 15:30  bryan

	* compiler/PPC/ppc-lap.lisp: 
	use "CCL" instead of :ccl in in-package form.

2005-08-20 15:27  bryan

	* xdump/hashenv.lisp, compiler/lambda-list.lisp,
	compiler/nx-base-app.lisp, compiler/nx.lisp, compiler/nx0.lisp,
	compiler/nxenv.lisp, compiler/optimizers.lisp: 
	add (in-package "CCL") forms.

2005-08-20 15:08  bryan

	* level-1/version.lisp: 
	bump.

2005-08-20 15:05  bryan

	* lib/pprint.lisp: 
	remove all reader-conditionalized code for non-openmcl platforms.

2005-08-20 14:06  bryan

	* library/loop.lisp: 
	remove all reader-conditionalized code for non-openmcl platforms.

2005-08-20 13:38  bryan

	* level-1/: l1-aprims.lisp, l1-boot-1.lisp, l1-boot-2.lisp,
	l1-boot-3.lisp, l1-boot-lds.lisp, l1-callbacks.lisp,
	l1-cl-package.lisp, l1-clos-boot.lisp, l1-clos.lisp, l1-dcode.lisp,
	l1-error-signal.lisp, l1-events.lisp, l1-files.lisp,
	l1-format.lisp, l1-init.lisp, l1-io.lisp, l1-numbers.lisp,
	l1-pathnames.lisp, l1-reader.lisp, l1-sort.lisp, l1-streams.lisp,
	l1-symhash.lisp, l1-sysio.lisp, l1-typesys.lisp, l1-utils.lisp,
	level-1.lisp, linux-files.lisp, ppc-callback-support.lisp,
	ppc-threads-utils.lisp, ppc-trap-support.lisp, runtime.lisp,
	sysutils.lisp, version.lisp: 
	add (in-package "CCL") forms.

2005-08-20 13:26  bryan

	* lib/: apropos.lisp, arglist.lisp, arrays-fry.lisp,
	backtrace-lds.lisp, backtrace.lisp, case-error.lisp,
	ccl-export-syms.lisp, chars.lisp, compile-ccl.lisp, db-io.lisp,
	defstruct-lds.lisp, defstruct-macros.lisp, defstruct.lisp,
	distrib-inits.lisp, dumplisp.lisp, edit-callers.lisp,
	encapsulate.lisp, format.lisp, hash.lisp, level-2.lisp,
	macros.lisp, mcl-compat.lisp, method-combination.lisp, misc.lisp,
	nfcomp.lisp, number-case-macro.lisp, number-macros.lisp,
	numbers.lisp, pathnames.lisp, ppc-init-ccl.lisp, ppcenv.lisp,
	pprint.lisp, prepare-mcl-environment.lisp, print-db.lisp,
	sequences.lisp, setf-runtime.lisp, setf.lisp, sort.lisp,
	source-files.lisp, sparcenv.lisp, streams.lisp, systems.lisp,
	time.lisp: 
	add (in-package "CCL") forms.

2005-08-20 13:08  bryan

	* library/: darwin-syscalls.lisp, linux-syscalls.lisp,
	lisp-package.lisp, lispequ.lisp, mac-file-io.lisp,
	macptr-termination.lisp, parse-ffi.lisp, pty.lisp: 
	add (in-package "CCL") forms.

2005-08-20 12:51  bryan

	* library/: extended-loop.lisp, mit-loop.lisp: 
	no longer required.  all loop code is in loop.lisp.

2005-08-20 01:08  bryan

	* level-1/version.lisp: bump.

2005-08-20 01:06  bryan

	* level-1/l1-reader.lisp: 
	read-list: make sure the first form read isn't a dot.

2005-08-19 19:17  bryan

	* level-1/version.lisp: bump.
	
	we now pass all PRINT*, PPRINT*, and FORMAT* ansi tests.

2005-08-19 19:14  bryan

	* level-1/l1-io.lisp: 
	array-readably-printable-p: new function.  T if array can be
	readably printed.
	
	write-an-array: if *print-readably*, make sure that the array is
	readably-printable.

2005-08-19 16:24  bryan

	* lib/numbers.lisp: 
	print-object (random-state t): cl:random-state was renamed to
	ccl::initialize-random-state.

2005-08-19 15:44  bryan

	* level-1/l1-io.lisp: 
	write-pname: if *print-readably*, use the readtable-case of the
	"standard readtable".
	
	write-pname: if symbol could be read as a number, don't bother
	slashify-ing.  just write it escaped in |..|.

2005-08-18 01:14  bryan

	* level-1/version.lisp: bump.

2005-08-18 01:13  bryan

	* lib/pprint.lisp: 
	specifier-fn: convert to cond.
	
	convert-body: don't call copy-tree.
	
	copy-tree breaks pprint dispatch table entries with eql type
	specifiers.  for example this form:   (let ((obj '(foo bar)))	 
	(set-pprint-dispatch (list* 'eql (list obj)) ...))

2005-08-16 13:45  bryan

	* lib/setf.lisp: 
	remf: according to 5.1.3, the indicator needs to be evaluated
	before the reading the "old value" of place.

2005-08-16 11:16  gb

	* level-1/version.lisp: bump.

2005-08-16 11:13  gb

	* compiler/: nx0.lisp, nxenv.lisp: Use (expt 4 n) instead of (ash 4
	n), which isn't the same thing ...

2005-08-16 11:11  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: ALLOC-C-FRAME: ensure
	32-byte alignment on PPC64.

2005-08-16 07:35  gb

	* lisp-kernel/spentry.s: Remove gratuitous "ldr
	r2,tcr.native_thread_info(rcontext)" from _SPeabi_callback epilog:
	on linuxppc32 (the only platform that uses _SPeabi_callback), we
	should be keeping our hands off of r2 at all times, anyway.

2005-08-16 07:18  gb

	* level-1/ppc-trap-support.lisp: In xcmain callback (both of them),
	get rid of code which gratuitously smacks a 0 into the top word of
	the value stack in the current catch frame in response to an
	interrupt trap (trgti nargs, 0).  (I -think- that this had
	something to do with reenabling interrupts in a long-forgotten
	cooperative scheduler.)
	
	It's possible that until recent changes to register allocation, the
	top word on the vstack at this point was either (a) always
	non-negative and therefore immune to getting smacked around or (b)
	something not very important.
	
	On Linux32, this was currently a pointer to a saved special
	binding, (happened to look negative because of where that stack was
	allocated) and setting it to 0 caused a crash as the binding stack
	was unwound.

2005-08-16 07:10  gb

	* level-1/l1-boot-lds.lisp: In STARTUP-CCL, use LOAD-FILE
	(establishing a restart) instead of just calling LOAD directly when
	processing a --load command-line option.

2005-08-15 20:01  bryan

	* level-1/version.lisp: 
	bump.

2005-08-15 19:59  bryan

	* lib/macros.lisp: 
	defclass: prefer MOP over ANSI behaivor.  class options are
	canonicalized and passed to ensure-class.

2005-08-15 19:15  bryan

	* level-1/version.lisp: 
	bump.

2005-08-15 19:09  bryan

	* lib/macros.lisp: 
	defclass: add new case for locally implemented class options
	(currently only 'primary-p).  throw program-error if not one of the
	ansi or locally implemented class options.
	
	this means that all future local class options will need to be
	added to the defclass macro.

2005-08-15 18:29  bryan

	* lib/level-2.lisp: 
	%destructure-lambda-lisp: don't quote the default-initial-value
	when &key is in list form.  the supplied default needs to be
	evaluated.

2005-08-15 18:14  bryan

	* lib/level-2.lisp: 
	%destructure-lambda-lisp: make sure default-initial-value is
	properly quoted in getf form.

2005-08-15 17:40  bryan

	* lib/macros.lisp: 
	defclass: revert previous commit.

2005-08-15 14:00  bryan

	* lib/macros.lisp: 
	defclass: signal a program-error if invalid class option seen.

2005-08-15 13:00  gb

	* compiler/PPC/ppc2.lisp: Reformat a comment; one down, a few
	thousand more to go ...

2005-08-15 12:58  gb

	* lisp-kernel/: darwin/Makefile, darwin64/Makefile: Enable -O2, at
	least until the next time something needs to be debugged.

2005-08-15 12:58  gb

	* lisp-kernel/spentry.s: Write barrier things check to see if bit
	is set before entering the (expensive) interlocked load/store loop.
	 (Old objects that're destructively modified are often modified
	multiple times.)

2005-08-15 12:55  gb

	* level-0/l0-symbol.lisp: Bum %PL-SEARCH a little.

2005-08-15 12:54  gb

	* compiler/: nx0.lisp, nx1.lisp, nxenv.lisp, optimizers.lisp:
	(very) approximate loop-weighting for VAR refrences.  Bad, but
	seems to win more often than it loses.

2005-08-15 06:38  gb

	* library/chud-metering.lisp: Fix typo in version check.

2005-08-13 17:25  gb

	* lib/source-files.lisp: CCL::EDIT-DEFINITION-P didn't know that
	all of a method's specializers were specializers, so it sometimes
	called CLASS-NAME on an EQL-SPECIALIZER.
	
	SLIME calls CCL::EDIT-DEFINITION-P, but I'm not really sure that
	that's a good idea.

2005-08-13 14:09  bryan

	* level-1/l1-files.lisp: 
	%load: allow loading from string-input-streams.  load-from-stream
	already supported it, but the path to get there was littered with
	file-stream traps.

2005-08-13 12:05  bryan

	* level-1/l1-error-system.lisp: 
	file-error: set initform of "<unspecified>" for pathname.

2005-08-13 10:38  bryan

	* lib/pprint.lisp: 
	pprint-indent: truncate the arg here instead of later in
	set-indentation-prefix.

2005-08-13 09:53  gb

	* library/chud-metering.lisp: Check that we've got at least CHUD
	4.1.
	
	A version of CHUD 4.2.x gets installed via XCode 2.1; that version
	doesn't seem to be usable.
	
	Versions of CHUD 4.2.x that're distributed on Apple's Performance
	Tools site seem to work better.

2005-08-13 09:51  gb

	* level-1/l1-dcode.lisp: Define and use DCODE-TOO-FEW-ARGS.
	
	%%NTH-ARG-DCODE was checking the argument count incorrectly; this
	could have something random to have been used (in the &lexpr case)
	in dispatching.
	
	Note that this detects -some- cases of missing args to a GF, but
	generic functions that use %%NTH-ARG-DCODE (at least) don't do
	rigorous number-of- arg checking on entry; cases like:
	
	(add-method 6)
	
	still generate a NO-APPLICABLE-METHOD without noticing that an
	argument's missing.
	
	(-maybe- partly fixable in the short term).

2005-08-13 09:44  gb

	* level-1/l1-error-system.lisp: Make the REPORT method for
	wrong-number-of-arguments errors mention the function (which isn't
	always the same as what's reported as "while executing ...".)

2005-08-13 09:43  gb

	* level-1/l1-clos-boot.lisp: Defvar *SIMPLE-ARRAY-CLASS* (not a
	toplevel form, so the compiler may warn the fist time this is
	compiled.)  CLASS-OF returns that class for simple multidimensional
	arrays (but see CLHS.)

2005-08-13 01:10  bryan

	* level-1/l1-io.lisp: 
	write-a-structure: change *print-length* handling.

2005-08-12 22:49  bryan

	* level-1/l1-io.lisp: 
	print-object, write-a-structure: structures with no slots are
	considered to have no components, so ignore *print-level*.

2005-08-12 05:16  gb

	* xdump/xfasload.lisp: Be a little more careful in
	XLOAD-SET-DOCUMENTATION; only call SET-DOCUMENTATION if the
	argument might be a string.

2005-08-12 05:14  gb

	* tools/asdf.lisp: Skip the second (more global) check for
	duplicate component names, per a suggestion from Christophe Rhodes
	on #lisp.  This may help to ensure that McCLIM builds.

2005-08-12 05:13  gb

	* lib/defstruct-macros.lisp: SD accessors use SVREF, not %SVREF. 
	(Not sure what the bug is, but this change may help to catch it
	earlier.)

2005-08-12 05:12  gb

	* level-1/version.lisp: bump.

2005-08-12 05:12  gb

	* level-0/l0-misc.lisp: %PUT-DOCUMENTATION: if "doc" is non-null,
	ensure that it's a string.

2005-08-11 21:20  gb

	* level-0/l0-array.lisp: Needed to say #. before 64-bit vector type
	names in %UVECTOR-REPLACE.

2005-08-11 09:12  gb

	* level-0/l0-array.lisp: handle single-float case in
	%UVECTOR-REPLACE.

2005-08-11 06:54  gb

	* darwin-headers/chud/C/populate.sh: Update for CHUD 4.1.x.

2005-08-11 06:54  gb

	* compiler/optimizers.lisp: Do 3-arg char, numeric comparisons at
	least partly inline.

2005-08-11 06:53  gb

	* compiler/PPC/ppc2.lisp: Don't do SOME/EVERY when evaluating VINSN
	predicates.

2005-08-11 06:52  gb

	* library/chud-metering.lisp: New file.  Needs some work, but
	somewhat useful.

2005-08-09 12:18  bryan

	* level-1/version.lisp: bump after fix for ~F bug.

2005-08-09 12:15  bryan

	* lib/format.lisp: 
	revert part of changes made in v1.14.
	
	format-fixed-aux: don't forget to write #\0 after decimal point and
	significant digits.

2005-08-09 05:59  gb

	* level-1/l1-sockets.lisp: Use (record-length :linger) instead of 8
	when setting the #$SO_LINGER socket option.

2005-08-09 05:27  gb

	* level-0/l0-cfm-support.lisp: On (32-and-64-bit) Linux, link_map
	entries (used to find shared libraries) may have their
	:link_map.l_addr fields set to NULL; this caused
	INIT-SHARED-LIBRARIES to think that all libraries were mapped to
	the same address (0).
	
	In %SHLIB-FROM-MAP-ENTRY, use #_dladdr to find the library base
	address that contains the library's dynamic section if the
	link_map.l_addr field is NULL.

2005-08-08 20:44  bryan

	* level-1/l1-io.lisp: 
	write-a-symbol: add #: to "apparently uninterned" symbols which are
	those having a home package of nil.

2005-08-08 18:01  bryan

	* level-1/l1-numbers.lisp: 
	new-numtoken: if token is a float, ignore *read-base* and read it
	in base 10.

2005-08-08 17:04  gb

	* examples/objc-support.lisp: Don't assume that the CTR gets saved
	in a jmp_buf (it appears not to be under Tiger, which causes the
	whole %associate-jmp-buf-with-catch-frame hack to fail.) Instead,
	set r14 in the jmp_buf to THROW-TO-CATCH-FRAME's address, and add
	an extra instruction to *SETJMP-CATCH-LR-CODE* to copy r14 to the
	CTR.

2005-08-08 05:45  gb

	* lisp-kernel/linux/.gdbinit: Ignore SIG40.

2005-08-08 05:45  gb

	* lisp-kernel/thread_manager.c: Linux thread stack size stuff wants
	parameters to be of natural word size.

2005-08-08 05:44  gb

	* lib/macros.lisp: Conditionalize on EABI/POWEROPEN ABI, not
	Linux/Darwin in DEFINE-CALLBACK, too.

2005-08-08 05:44  gb

	* lib/db-io.lisp: Conditionalize on EABI/POWEROPEN ABI, not
	Linux/Darwin.

2005-08-08 05:43  gb

	* level-1/ppc-trap-support.lisp: Fix a few LinuxPPC64 constants.
	Can do callbacks now, but may still be bugs.

2005-08-08 05:42  gb

	* level-1/ppc-callback-support.lisp: Fix type: #+LINUX-PPC-TARGET,
	not #+LINUX.

2005-08-08 05:42  gb

	* level-0/PPC/ppc-float.lisp: %GET-FP-ARG-REGS is
	#+POWEROPEN-TARGET, not #+DARWINPPC-TARGET.
	
	Add a %LOAD-FP-ARG-REGS, for runtim %FF-CALL implementation.

2005-08-08 05:40  gb

	* level-0/PPC/ppc-array.lisp: Handle part of the hard case in
	32-bit %EXTEND-VECTOR.	I think that this was causing a 32-bit
	VECTOR-PUSH-EXTEND test to fail, but VECTOR-PUSH-EXTEND can't
	always use %EXTEND-VECTOR, anyway.

2005-08-08 05:39  gb

	* level-0/l0-init.lisp: Add :POWEROPEN-TARGET to *FEATURES* if it
	was there at compile-time (e.g., if it was on
	BACKEND-TARGET-SPECIFIC-FEATURES of the target backend.)

2005-08-08 05:37  gb

	* level-0/l0-array.lisp: Define %UVECTOR-REPLACE, intended to
	handle REPLACE when both args are vectors of the same element type.
	
	Fix a few fenceposts/bugs in VECTOR-PUSH-EXTEND: if old vector size
	is 0, ensure that new vector size is non-zero (4, arbitrarily.) 
	When explicitly displaced, we may not be displaced to the entire
	vector, so using %EXTEND-VECTOR to do the copying can't work (use
	%UVECTOR-REPLACE instead.)  After extending, the vector is no
	longer explicitly displaced, so clear the bit that claims that it
	is.

2005-08-08 00:43  bryan

	* lib/pprint.lisp: 
	set-indentation-prefix: truncate new-position since fractional ems
	aren't currently supported.

2005-08-07 23:23  bryan

	* level-1/l1-io.lisp: 
	(print-object standard-object ..): add *print-level* check.

2005-08-07 17:29  bryan

	* level-1/l1-io.lisp: 
	write-perverted-string: the :capitalize case (har har) requires
	slightly different behavior if the readtable case is :downcase.

2005-08-07 11:29  gb

	* lisp-kernel/spentry.s: Say "r11" instead of just "11", since
	doing otherwise would lead to harder stuff.

2005-08-07 11:27  gb

	* lisp-kernel/m4macros.m4: Define rTOC when defining other platform
	dependencies.

2005-08-07 11:27  gb

	* lisp-kernel/constants64.s: "conditional" definition of rTOC
	didn't work; do it another way, elsewhere.

2005-08-07 11:26  gb

	* level-1/l1-sockets.lisp: Honestly intend to read the #+/#-
	section one of these days.

2005-08-07 11:25  gb

	* level-0/PPC/ppc-def.lisp: Fix reference to old subprim names.

2005-08-07 10:58  gb

	* lisp-kernel/linux/.gdbinit: Start to provide 64/32-bit versions
	of things; more work needs to be done here.

2005-08-07 10:57  gb

	* lisp-kernel/spentry.s: Subprim renaming, to better reflect
	EABI/PowerOpen-ness.
	
	Deal with the TOC if it exists.

2005-08-07 10:56  gb

	* lisp-kernel/spjump.s: Subprim renaming, to better reflect
	EABI/PowerOpen-ness.

2005-08-07 10:56  gb

	* lisp-kernel/subprims.s: Reload the TOC into rTOC when exiting
	from start_lisp on platforms that use a TOC (LinuxPPC64).

2005-08-07 10:54  gb

	* lisp-kernel/pmcl-kernel.c: Need to specify PROT_EXEC; PPC64 MMUs
	can apparently enforce execute protection, and Linux pays attention
	to the PROT_EXEC bit in mmap/ mprotect calls.

2005-08-07 10:53  gb

	* lisp-kernel/lisp-exceptions.h: Try to get LinuxPPC64 exception
	frame accessors right.	(Floating-point may still be bogus.)

2005-08-07 10:52  gb

	* lib/format.lisp: Y-OR-N-P, YES-OR-NO-P: try to ensure that output
	side of *DEBUG-IO* realizes that a #\NewLine has been read.   Don't
	beep in irritation; do beep in YES-OR-NO-P, 'cause we're supposed
	to.  (Hey, don't blame me if Emacs doesn't beep when it sees a ^G.)

2005-08-07 10:49  gb

	* level-1/version.lisp: Bump.

2005-08-07 10:49  gb

	* level-1/ppc-callback-support.lisp: Callback trampolines for
	LinuxPPC64 are two (64-bit) word "transfer vectors".

2005-08-07 10:48  gb

	* level-1/l1-streams.lisp: Impement a STREAM-READ-LINE for
	TWO-WAY-ECHOING-STREAM: after a line has been read (along with the
	terminating #\NewLine), output side should be at column 0.

2005-08-07 10:47  gb

	* level-1/l1-lisp-threads.lisp: Use 64-bit memory accessors for
	some TCR slots ("os" thread ID, "native" thread ID, etc.)

2005-08-07 10:45  gb

	* level-1/l1-io.lisp: WRITE-A-CONS: use WRITE-INTERNAL for both CAR
	and CDR, to ensure bogusity checks.

2005-08-07 10:44  gb

	* level-0/PPC/ppc-def.lisp: Don't claim to implement %FF-CALL for
	LinuxPPC64 (yet.).

2005-08-07 10:43  gb

	* level-0/l0-cfm-support.lisp: Reference 64-bit ELF structure
	fields if on a 64-bit platform.

2005-08-07 10:42  gb

	* compiler/PPC/PPC64/ppc64-backend.lisp: LinuxPPC64 has
	:poweropen-target (not :eabi-target) on its
	backend-target-specific-features.

2005-08-07 10:41  gb

	* compiler/: subprims.lisp, PPC/ppc2.lisp,
	PPC/PPC32/ppc32-vinsns.lisp, PPC/PPC64/ppc64-vinsns.lisp:
	Gratuitously rename subprimitives and vinns dealing with
	foreign-function calls, system calls, and callback to reflect
	whether they're oriented towards the (Linux 32 bit) EABI or some
	flavor of the PowerOpen ABI (derived from AIX).

2005-08-07 00:39  bryan

	* level-1/l1-aprims.lisp: 
	get-properties: use '(satisfies proper-list-p) instead of
	'(satisfies plistp).  plistp will throw a type-error if not a
	proper list.
	
	all occurrences of plistp (there aren't many) should probably use
	proper-list-p instead.

2005-08-06 23:06  bryan

	* lib/macros.lisp: 
	with-output-to-string: element-type needs to be evaluated
	regardless of use.  pull it into the let and defer which function
	to call to make the output stream until runtime.

2005-08-06 22:02  bryan

	* lib/macros.lisp: 
	expand-package-iteration-macro: pull pkg-spec into the surrounding
	let* in case its evaluation has an interesting side effect.

2005-08-06 20:14  bryan

	* level-1/l1-io.lisp: princ shouldn't rebind *print-circle*.  ~A
	format directive was calling princ which in turn was rebinding
	*print-circle*.

2005-08-06 13:10  bryan

	* lib/pprint.lisp: if *pretty-print*, (funcall (formatter ...) ...)
	wouldn't return the unused args to the caller. 
	maybe-initiate-xp-printing and xp-print were the culprits.

2005-08-06 11:01  bryan

	* level-1/l1-reader.lisp: #\Backspace and #\Rubout should have
	invalid constituent traits.

2005-08-06 00:54  bryan

	* lib/sequences.lisp: if coerce fails when dealing with vectors,
	signal a type-error with an expected-type of '(vector ,element-type
	,length) instead of '(vector ,length).

2005-08-05 22:23  bryan

	* level-1/l1-reader.lisp: correct a comment that said
	%collect-xtoken returns 3 values.. it actually returns 4.

2005-08-05 17:24  gb

	* lisp-kernel/area.h: Use the same IMAGE_BASE_ADDRESS on LinuxPPC64
	as on DarwinPPC64.

2005-08-05 17:24  gb

	* lisp-kernel/subprims.s: Replace a few tests for DARWIN with tests
	for POWEROPENABI.

2005-08-05 17:23  gb

	* lisp-kernel/m4macros.m4: LinuxPPC64 uses (yet another variant of)
	the PowerOpen ABI, so define POWEROPENABI (and not EABI) when LINUX
	and PPC64 are both defined.
	
	(Lots of assembler source uses e.g. __ifdef([DARWIN]) when it's
	really just concerned about the type of foreign stack frame to
	create; this needs to be carefully reviewed.)

2005-08-05 17:21  gb

	* lisp-kernel/constants64.s: r2 is rTOC when in C code on
	LinuxPPC64.  (it'd always be the same value for all threads, so we
	can keep it in a global.)
	
	(Could assume that LinuxPPC64 implies TLS-based libc, and make the
	TCR be a __thread variable.)

2005-08-05 17:18  gb

	* lisp-kernel/linux64/Makefile: Dont' pass in lisp version stuff
	anymore.
	
	Disable -O2, to make debugging easier.

2005-08-05 17:17  gb

	* lisp-kernel/linux64/elf64ppc.x: Change the subrpims jump table
	origin to #x5000 by moving the image base to #x4000.

2005-08-05 17:16  gb

	* level-1/ppc-trap-support.lisp: Don't error out, but the
	LinuxPPC64 execption frame stuff is likely to be very different
	from its 32-bit counterpart.

2005-08-05 17:15  gb

	* level-1/l1-sockets.lisp: Conditionalize socketcalls for #+(and
	linuxppc-target ppc64-target).	May need to also conditionalizer
	their callers in some cases.

2005-08-05 17:14  gb

	* headers64/libc/C/populate.sh: Process ifaddrs.h

2005-08-05 17:14  gb

	* binppc/.cvsignore, l1-pfsls/.cvsignore: Ignore *.p64fsl

2005-08-05 17:14  gb

	* .cvsignore: Ignore ppc-boot*

2005-08-05 17:00  bryan

	* level-1/l1-io.lisp: fix a *print-length* corner case -- printing
	(A B . C) at *print-length* 2 should print as (A B . C) and not (A
	B . ...)

2005-08-05 16:01  bryan

	* level-1/l1-io.lisp: write-an-array: no need for "..." when
	printing bit-vectors at any length.

2005-08-05 13:23  bryan

	* lib/pprint.lisp: 
	copy-pprint-dispatch: check arg, if specified, is either a
	pprint-dispatch-table or nil.

2005-08-05 12:49  bryan

	* lib/macros.lisp: 
	pprint-logical-block:	- error if both :prefix and
	:per-line-prefix specified.    - typecheck :prefix,
	:per-line-prefix, and :suffix as 'string.

2005-08-05 01:11  bryan

	* lib/pprint.lisp: 
	pprint-newline: check type of arg all the time, not just when
	pretty printing.  if not '(member :linear :miser :fill :mandatory),
	signal a type-error.

2005-08-05 00:53  gb

	* lib/macros.lisp: %GET-SINGLE-FLOAT-FROM-DOUBLE-PTR has to cons up
	a SINGLE-FLOAT object on PPC32.

2005-08-05 00:52  gb

	* level-1/l1-callbacks.lisp: (%CALLBACK-FUNCTION pointer) looks up
	and returns the function on the lisp side of the callback whose
	foreign side is "pointer".

2005-08-05 00:31  bryan

	* lib/format.lisp: 
	format-logical-block: if colon modifier, prefix and suffix default
	to open and close parentheses instead of null string.

2005-08-04 22:56  bryan

	* lib/format.lisp: last one for 22.3.5.2 compliance?
	
	logical-block directives not allowed inside justification
	directives.

2005-08-04 21:57  bryan

	* lib/format.lisp: more 22.3.5.2 cleanup..
	
	logical-block directives can not co-exist with ~<..~:;..~>.

2005-08-04 20:39  bryan

	* lib/: format.lisp, pprint.lisp: move *logical-block-p* defvar
	from format.lisp to pprint.lisp since it gets built first.

2005-08-04 18:53  bryan

	* lib/format.lisp: 
	format-justification: ignore minpad when there is only one segment.
	
	format-justification: algorithm for determining width is different
	than the one used for ~A, ~S.
	
	format-justification-round-columns: new function.

2005-08-04 15:12  bryan

	* level-1/l1-format.lisp, lib/format.lisp: ansi section 22.3.5.2
	cleanup -
	
	format-find-command: ~:T is not allowed within justification format
	directives.
	
	pprint directives (~I, ~W, ~_, ~:T) are not allowed to coexist in
	the same format control string as a justification directive
	(~<...~>) that uses ~:;.
	
	*format-pprint* will be T whenever a pprint directive has been
	seen.
	
	*format-justification-semi* will be T whenever a ~<..~:;..~> has
	been seen.

2005-08-04 05:24  gb

	* level-1/version.lisp: Bump again (mostly so that the date matches
	binaries.)

2005-08-04 05:23  gb

	* level-1/l1-clos.lisp: Make sure that (SETF GENERIC-FUNCTION-NAME)
	is implemented, and that it calls REINITIALIZE-INSTANCE to change
	the slot's value.  (This was caught by Pascal Costanza's
	mop-features tests.)

2005-08-04 02:35  bryan

	* level-1/version.lisp: bump.

2005-08-04 02:31  bryan

	* lib/: format.lisp, macros.lisp, pprint.lisp: changes to recognize
	a "pretty printing stream" and act accordingly.
	
	a pretty printing stream is created with pprint-logical-block or
	the ~<...~:> format directive.
	
	*logical-block-p* will be T if we are inside a logical block.
	
	pprint-logical-block, format-logical-block: set *logical-block-p*
	to T.
	
	~_ (conditional newline), pprint-newline, pprint-indent+,
	pprint-tab: do nothing if not *print-pretty* or not a pretty
	printing stream.
	
	pprint-tab+; do nothing only if ~:T and not *print-pretty* or not a
	pretty printing stream.
	
	~T format parameter only behaves like pprint-tab when ~:T.  change
	~T handler to skip pprint-tab and call straight to pprint-tab+.
	
	notes --
	
	to test for a pretty printing stream, it's not enough to just check
	whether we have an xp-stream or xp-structure.  the other existing
	symbols like *current-level* or *logical-block-xp* were not
	consistently non-nil with a pretty printing stream.
	
	changes to pprint-xxx+ functions affect both the cl symbol
	pprint-xxx and its corresponding format handler.
	
	pprint-newline+ had to be left alone since it is used by other code
	that handles justification.  instead i pulled changes out a level
	to pprint-newline and the ~_ handler.

2005-08-03 04:10  gb

	* level-1/l1-error-system.lisp: SIMPLE-STREAM-ERROR's :report
	method prints the result of applying FORMAT to the control string
	and arguments, rather than just printing the control string.

2005-08-03 03:05  gb

	* examples/cocoa-editor.lisp: Try to get "revert" working ...

2005-08-03 03:04  gb

	* examples/bridge.lisp: Force all things that need to have the
	class in an OBJC-METHOD-INFO structure to go through the function
	GET-OBJC-METHOD-INFO-CLASS to do so; make sure that that function
	handles metaclasses correctly (the failure to do so was causing
	(SEND x 'name) to fail.)
	
	Remove redundant subclasses when generating CASE/COND forms for
	SEND; prefer COND to use of union types.

2005-08-03 01:39  bryan

	* level-1/version.lisp: bump.

2005-08-03 01:36  bryan

	* lib/format.lisp: format-fix-aux: skip leading or trailing 0 when
	number (and sign if @F) would fit the specified width perfectly.

2005-08-02 20:40  bryan

	* lib/pprint.lisp: pprint-tab: only do something if *print-pretty*
	and we have a pretty printing stream.

2005-08-02 19:21  bryan

	* level-1/l1-reader.lisp: set-syntax-from-char: certain characters
	become invalid if from-char is a constituent.  see 2.1.4.2 and
	figure 2.8.
	
	if one of those illegal characters tries to act as a constituent
	character, signal a reader-error.

2005-08-02 14:40  bryan

	* level-1/l1-reader.lisp: read-dispatch: signal a reader-error
	instead of just calling it a reader-error in the error message.

2005-08-02 13:59  bryan

	* level-1/l1-clos-boot.lisp: find-method: canonicalize specializers
	before comparison.

2005-08-02 12:14  bryan

	* level-1/sysutils.lisp: (setf macro-function): since the spec
	explicitly notes that a symbol with a previous function definition
	will be overwritten, change the cerror to a warn.
	
	like *ignore-extra-close-parenthesis*, there should probably be
	some variables that let users change clobbering behavior.

2005-08-02 07:47  gb

	* examples/objc-runtime.lisp: Fencepost in CFSTR binary search.

2005-08-02 07:47  gb

	* hemlock/src/lispmode.lisp: Don't do MODIFYING-BUFFER around
	indentation (was an attempt to defer redisplay.)

2005-08-02 07:46  gb

	* hemlock/src/command.lisp: The "Next Line" command doesn't insert
	newlines at the end of the buffer by default; there's a global
	Hemlock variable that controls this behavior.

2005-08-02 01:53  bryan

	* level-1/l1-streams.lisp: file-length: switch to typecase and
	explicitly throw the type-error so we can specify the expected-type
	as file-stream.

2005-08-01 22:33  bryan

	* level-1/l1-reader.lisp: readtable-case, setf (readtable-case):
	arg must be a readtable.

2005-08-01 21:33  bryan

	* level-1/l1-aprims.lisp: check-sequence-bounds: report-bad-arg if
	(< end 0).  the (> start end) clause would catch this, but we want
	to report end not start in the error message.

2005-08-01 20:53  bryan

	* level-1/l1-error-system.lisp: make-condition: arg is a
	type-specifier, so allow both things like 'arithmetic-error and
	(find-class 'arithmetic-error).

2005-08-01 20:35  gb

	* level-1/version.lisp: bump.

2005-08-01 17:14  gb

	* level-1/l1-boot-2.lisp: When setting up standard fd-streams,
	recognize that FD-OPEN returns a negative (non-NULL) value on
	failure.

2005-08-01 14:01  bryan

	* level-1/l1-typesys.lisp: ctype-of-number: consider the type of
	imagpart of complex numbers when determining type.
	
	? (type-of #c(1 1/2)) (COMPLEX (RATIONAL 1/2 1))  ; not (COMPLEX
	(INTEGER 1/2 1))

2005-08-01 04:55  gb

	* hemlock/src/searchcoms.lisp: Allow redisplay when getting key
	events during search commands.

2005-08-01 04:54  gb

	* hemlock/src/package.lisp: Don't export CHECK-REGION-QUERY-SIZE.

2005-08-01 04:52  gb

	* hemlock/src/bindings.lisp: Try to ensure that Meta-Space runs
	"Just One Space".

2005-08-01 04:52  gb

	* hemlock/src/buffer.lisp: First stab at balancing
	BEGIN/END-EDITING operations around recursive edits.  May still be
	wrong.

2005-08-01 04:50  gb

	* hemlock/src/fill.lisp: Don't call CHECK-REGION-QUERY-SIZE.

2005-08-01 04:50  gb

	* hemlock/src/interp.lisp: Wrap BEGIN-EDITING/END-EDITING around
	command processing.
	
	The good news is that this suppresses display after every buffer
	modification.
	
	The bad news is that some extended/recursive commands have to do
	hairy things to allow redisplay to happen.  (The hair mostly has to
	do with closing the outer BEGIN-EDITING and re-opening it to keep
	things balanced; sometimes this needs to happen when reading
	characters from the event queue, since some types of redisplay
	happen then.)
	
	Summary: less hysterical redisplay code, but it may still be
	suppressed too much; some things that don't really modify the
	buffer may wrap a MODIFYING-BUFFER around a sequence of lower-
	level operations, and this may cause the buffer to be marked as
	modified even when nothing changes.

2005-08-01 04:44  gb

	* hemlock/src/: morecoms.lisp, lispbuf.lisp: Dont do
	CHECK-REGION-QUERY-SIZE (I think that that's actually the real name
	...).

2005-08-01 04:43  gb

	* hemlock/src/listener.lisp: Dont do CHECK-REGION-SIZE-QUERY in the
	"Filter Region" command.

2005-08-01 04:43  gb

	* hemlock/src/lispmode.lisp: Dont do CHECK-REGION-SIZE-QUERY before
	indenting a region.

2005-08-01 04:40  gb

	* examples/webkit.lisp: Has been edited with the Cocoa/Hemlock
	editor a lot; indentation differences.

2005-08-01 04:40  gb

	* examples/bridge.lisp: In BUILD-CALL (which might be currently
	unused), recognize :<BOOL> directly.

2005-08-01 04:38  gb

	* level-0/PPC/ppc-array.lisp: PPC64 %SIMPLE-BIT-BOOLE - advance by
	8 bytes (not 4) in loop.

2005-07-31 23:09  bryan

	* tools/asdf.lisp: sync latest version (1.87) from cclan.

2005-07-31 16:55  bryan

	* lib/macros.lisp: check-type: (if string string) === string

2005-07-31 16:50  bryan

	* lib/macros.lisp, level-1/l1-error-system.lisp: check-type: if
	string not specified, don't replace it with typespec in call to
	ensure-value-of-type.  ensure-value-of-type: remove init-form from
	&optional typename.

2005-07-31 16:35  bryan

	* level-1/l1-error-system.lisp: ensure-value-of-type: if typename
	is specified, create a new format string that uses it instead of
	binding it to the type-error condition's :expected-type.  the spec
	says that :expected-type must be a typespec.

2005-07-29 23:21  gb

	* lib/macros.lisp: New definition of WITH-PACKAGE-ITERATOR.

2005-07-29 23:20  gb

	* level-1/l1-symhash.lisp: New runtime support for
	WITH-PACKAGE-ITERATOR.

2005-07-29 23:20  gb

	* library/lispequ.lisp: New stuff for WITH-PACKAGE-ITERATOR.

2005-07-29 21:16  gb

	* level-1/l1-streams.lisp: PROCESS-INPUT-WAIT: don't compute tick
	count if it's not needed.  (Is it ever needed ?)

2005-07-29 19:55  gb

	* lisp-kernel/pmcl-kernel.c: In DARWIN version of
	default_image_name, use strcpy() to copy string to malloc'ed
	memory.  (strcat() only worked - had that effect - if the first
	byte of the destination was #\Nul.)

2005-07-29 19:52  gb

	* level-1/version.lisp: Start claiming to be an 0.14.4 prerelease.

2005-07-29 19:52  gb

	* level-1/l1-readloop-lds.lisp: Try to ensure that REPL functions
	use *STANDARD-INPUT* and *STANDARD-OUPUT* and/or pay attention to
	their input-stream & output-stream args (rather than doing all I/O
	to/from *TERMINAL-IO*).
	
	Don't print the listener prompt if *QUIET-FLAG* is set.  (Should
	only be set if *BATCH-FLAG* is also set, so this affects REPL and
	break loop prompts, not inspector, etc.)

2005-07-29 19:48  gb

	* level-1/l1-boot-lds.lisp: Don't print the Welcome herald if
	*quiet-flag* is set.

2005-07-29 19:47  gb

	* level-1/l1-boot-2.lisp: Declare *QUIET-FLAG*.
	
	Ensure that *STDOUT* (not necessarily *TERMINAL-OUTPUT*) gets its
	output flushed periodically.

2005-07-29 19:45  gb

	* level-1/l1-application.lisp: Add support for a -Q/--quiet
	command-line argument.

2005-07-29 03:03  gb

	* level-1/l1-utils.lisp: Define %SET-CSTRING; make it the SETF
	inverse of %GET-CSTRING.
	
	Restore %PUT-CSTRING (used by UFFI); implement it in terms of (SETF
	(%GET-CSTRING ...) ...)

2005-07-29 03:02  gb

	* lib/macros.lisp: Don't do (DEFSETF %GET-STRING %SET-STRING);
	%GET-STRING is only defined in "ccl:lib;pascal-strings.lisp", and a
	SETF function for it is defined in that file.

2005-07-28 07:48  gb

	* lib/db-io.lisp: OBJC-MESSAGE-INFO structure has "ambiguous
	methods" slot, used by bridge.

2005-07-28 07:47  gb

	* hemlock/src/: htext1.lisp, htext2.lisp, htext3.lisp, htext4.lisp,
	lispmode.lisp: Don't modify buffer if doing so would change a
	protected region.

2005-07-28 07:46  gb

	* examples/webkit.lisp: Works again (doesn't do much, but WebKit is
	pretty impressive.)
	
	Need new interfaces.

2005-07-28 07:46  gb

	* examples/bridge.lisp: Handle ambiguiuty in SEND; convert %SEND to
	use new (decl-based) scheme.  No need to parse ObjC types or
	introspect to find method/message info.

2005-07-28 07:45  gb

	* examples/process-objc-modules.lisp: Remove the commented-out call
	at the end of file; no need to update type signatures via
	introspection

2005-07-28 07:44  gb

	* examples/objc-support.lisp: No need to canonicalize class
	references in type signature table.

2005-07-28 07:43  gb

	* examples/objc-runtime.lisp: No need to declare some internal
	classes (was needed to keep %SEND happy.)
	
	No need to update old method type-signature table.

2005-07-28 07:42  gb

	* examples/objc-clos.lisp: Conditionalize out the ObjC GF
	integration stuff (until it can be adapted to the New Order.)  Note
	that we may need a way to obtain all (declared) ObjC messages - as
	well as tweak this to use the new method/message decl structures -
	to revive this.

2005-07-28 07:40  gb

	* examples/cocoa-editor.lisp: Set bold weight to 9.0 (not a factor
	of the point size).
	
	ObjC "count" message is unambiguous, so no need for type decl.

2005-07-28 07:38  gb

	* level-0/PPC/ppc-def.lisp: Make %FF-CALL stuff explicitly 32-bit
	only.  (Didn't this already happen last week ?)

2005-07-28 07:35  gb

	* darwin-headers/webkit/: C/populate.sh, .cvsignore, C/.cvsignore:
	New file.

2005-07-28 07:34  gb

	* darwin-headers/cocoa/.cvsignore: Ensure that more .cvsignore
	files exist and that files matching *~.* (e.g., Cocoa NSDocument
	backup files) are ignored.

2005-07-28 07:29  gb

	* darwin-headers64/libc/.cvsignore, level-0/PPC/PPC64/.cvsignore,
	lib/.cvsignore, library/.cvsignore, lisp-kernel/.cvsignore,
	lisp-kernel/darwin/.cvsignore, lisp-kernel/darwin64/.cvsignore,
	lisp-kernel/linux/.cvsignore, lisp-kernel/linux64/.cvsignore,
	lisp-kernel/static-linux/.cvsignore, scripts/.cvsignore,
	tools/.cvsignore, tools/asdf-install/.cvsignore,
	tools/asdf-install/doc/.cvsignore, xdump/.cvsignore: Ensure that
	more .cvsignore files exist and that files matching *~.* (e.g.,
	Cocoa NSDocument backup files) are ignored.

2005-07-28 07:23  gb

	* level-0/.cvsignore, hemlock/src/wire/.cvsignore,
	level-0/PPC/.cvsignore, level-0/PPC/PPC32/.cvsignore: Ensure that
	more .cvsignore files exist and that files matching *~.* (e.g.,
	Cocoa NSDocument backup files) are ignored.

2005-07-28 07:23  gb

	* compiler/optimizers.lisp: CCL::TRUE and CCL::FALSE.  (There are
	things that wind up calling TRUE at runtime; there's no reason to
	actually do that.)

2005-07-28 07:17  gb

	* .cvsignore, compiler/.cvsignore, compiler/PPC/.cvsignore,
	compiler/PPC/PPC32/.cvsignore, compiler/PPC/PPC64/.cvsignore,
	compiler/X86/.cvsignore, darwin-headers/.cvsignore,
	darwin-headers/carbon/.cvsignore,
	darwin-headers/carbon/C/.cvsignore, darwin-headers/chud/.cvsignore,
	darwin-headers/chud/C/.cvsignore, darwin-headers/cocoa/.cvsignore,
	darwin-headers/cocoa/C/.cvsignore, darwin-headers/gl/.cvsignore,
	darwin-headers/gl/C/.cvsignore, darwin-headers/libc/.cvsignore,
	darwin-headers/libc/C/.cvsignore,
	darwin-headers/quicktime/.cvsignore,
	darwin-headers/quicktime/C/.cvsignore, darwin-headers64/.cvsignore,
	examples/.cvsignore, examples/rubix/.cvsignore, headers/.cvsignore,
	headers/gl/.cvsignore, headers/gl/C/.cvsignore,
	headers/gnome/.cvsignore, headers/gnome/C/.cvsignore,
	headers/gnome2/.cvsignore, headers/gnome2/C/.cvsignore,
	headers/gnustep/.cvsignore, headers/gnustep/C/.cvsignore,
	headers/gtk/.cvsignore, headers/gtk/C/.cvsignore,
	headers/gtk2/.cvsignore, headers/gtk2/C/.cvsignore,
	headers/libc/.cvsignore, headers/libc/C/.cvsignore,
	headers64/.cvsignore, headers64/libc/.cvsignore,
	headers64/libc/C/.cvsignore, hemlock/.cvsignore,
	hemlock/bin/.cvsignore, hemlock/bin/openmcl/.cvsignore,
	hemlock/doc/.cvsignore, hemlock/doc/cim/.cvsignore,
	hemlock/doc/misc/.cvsignore,
	hemlock/doc/scribe-converter/.cvsignore,
	hemlock/doc/user/.cvsignore, hemlock/maint/.cvsignore,
	hemlock/resources/.cvsignore, hemlock/src/.cvsignore,
	hemlock/src/elisp/.cvsignore, hemlock/src/spell/.cvsignore,
	hemlock/src/tty/.cvsignore, hemlock/unused/.cvsignore,
	hemlock/website/.cvsignore, level-1/.cvsignore: Ensure that more
	.cvsignore files exist and that files matching *~.* (e.g., Cocoa
	NSDocument backup files) are ignored.

2005-07-23 03:38  gb

	* lib/macros.lisp: First cut at handling (lots of) FP args in
	Darwin callbacks.  (Probably needs some further testing: there are
	lots of boundary cases.)

2005-07-23 03:36  gb

	* level-0/PPC/ppc-float.lisp: %GET-FP-ARG-REGS, for Darwin
	callbacks.

2005-07-22 02:01  gb

	* examples/objc-runtime.lisp: Look for pointers in data sections
	(cfstrings) via binary search (vice linear search.)

2005-07-22 02:00  gb

	* examples/cocoa-editor.lisp: Don't bind HI::NOW-TICK per-thread.

2005-07-22 01:59  gb

	* hemlock/src/buffer.lisp: In %SET-BUFFER-MODIFIED: do
	QUEUE-BUFFER-CHANGE (e.g., update modified status in modeline)
	after status change.

2005-07-22 01:33  gb

	* lib/db-io.lisp: Remove a FORMAT (debugging) call.

2005-07-22 00:58  gb

	* level-1/version.lisp: Haven't bumped in a while.

2005-07-22 00:57  gb

	* lib/db-io.lisp: Ensure that ASCII info in trailer block is
	space-delimited.

2005-07-22 00:57  gb

	* level-0/PPC/ppc-io.lisp: %GET-ERRNO: errno value is always 32-bit
	int; pointer to errno may be 32/64 bits ...

2005-07-22 00:56  gb

	* level-1/l1-aprims.lisp: Add SETF-FUNCTION-NAME-P, use it in
	VALID-FUNCTION-NAME-P.

2005-07-22 00:52  gb

	* headers/libc/C/populate.sh: Include /usr/include/ifaddrs.h, for
	#_getifaddrs/#_freeifaddrs.

2005-07-22 00:51  gb

	* level-1/l1-sockets.lisp: Kinder, gentler %GET-IP-INTERFACES,
	based on #_getifaddrs.	 #_getifaddrs seems to be supported on
	Darwin at least as far back as Jaguar,	 and on Linux at least as
	far back as ... libc versions from 2002 or so.	 (Note that
	/usr/include/ifaddrs.h hasn't been included in the Linux interfaces
	  up until this point; note also that the interface names aren't
	returned correctly   on PPC64 Darwin as of OS release 10.4.1).

2005-07-15 18:31  gb

	* level-1/l1-aprims.lisp: Don't assume that all function names
	that're lists of 2 symbols are SETF function names in
	VALID-FUNCTION-NAME-P.	(Unless they -are- SETF function names, of
	course.)

2005-07-15 18:28  gb

	* level-0/PPC/ppc-symbol.lisp: %SVAR-BINDING-ADDRESS fixes.

2005-07-15 18:27  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp:
	PPC64::PPC64-ARRAY-TYPE-NAME-FROM-CTYPE should return a keyword or
	NIL, not ppc32::subtag-simple-vector (sic).

2005-07-15 18:27  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp:
	PPC32::PPC32-ARRAY-TYPE-NAME-FROM-CTYPE should return a keyword or
	NIL, not ppc32::subtag-simple-vector.

2005-07-15 12:29  gb

	* examples/objc-runtime.lisp: Clear the "private" class tree on
	application exit; ensure that it gets re-populated on application
	launch.

2005-07-15 06:47  gb

	* examples/rubix/rubix.lisp: Reference *CUBE*, not CUBE.  (Need to
	ask Hamilton about this, and incorporate his "ctrl-left-moust =
	right-mouse" patches.)

2005-07-15 06:45  gb

	* examples/objc-clos.lisp: Clarify that foreign direct slotds's
	"offset" is a bit offset; change the name of the slot and its
	accessor/initarg to reflect this.
	
	Foreign effective slot definitions generally treat the location as
	a byte offset (except the slot's type is a bit or bitfield.)
	
	Fix some bugs in calculating instance size of lisp-defined classes,
	which had led to general chaos/memory corruption problems.

2005-07-15 06:42  gb

	* examples/objc-runtime.lisp: Declare the class
	NSConcreteAttributedString, until SEND is converted to always use
	decl info.
	
	Recognize instances of private (i.e., undeclared) classes.
	
	When creating a foreign direct slot,  ensure that the type's bits
	have been determined; use the new :BIT-OFFSET initarg.

2005-07-15 06:38  gb

	* level-1/l1-readloop-lds.lisp: NEW-BACKTRACE-INFO records the
	(new) break level.

2005-07-15 06:38  gb

	* library/lispequ.lisp: Add a bt.break-level field to backtrace
	info.

2005-07-15 06:34  gb

	* lib/backtrace-lds.lisp: Comments.

2005-07-15 06:33  gb

	* examples/cocoa.lisp: Change some indentation; make
	UI-OBJECT-DO-OPERATION use EQL specializers on the operation name.

2005-07-15 06:32  gb

	* examples/cocoa-backtrace.lisp: Set backtrace window title to
	indicate process and its break level.

2005-07-15 06:31  gb

	* examples/bridge.lisp: SEND still punts to old SEND code
	sometimes, but formats the message differently.

2005-07-15 04:25  gb

	* level-1/ppc-trap-support.lisp: Look for an RLDICL that clears the
	left 61 (not 62) bits, preceding a (TDNEI <reg> PPC64::TAG-FIXNUM)
	trap, in XCMAIN.

2005-07-15 00:30  gb

	* examples/rubix/rubix.lisp: Hamilton's patch for the
	right-mouse-button challenged.

2005-07-14 15:11  gb

	* level-1/version.lisp: Bump.

2005-07-14 15:01  gb

	* lisp-kernel/gc.h: PPC64 VOID-ALLOCPTR is "most-positive-dnode"
	(e.g, non-negative.)

2005-07-14 15:00  gb

	* level-0/PPC/ppc-utils.lisp: In #+ppc64 walk-dynamic-area, use a
	signed alloc trap; ensure that ALLOCBASE contains the new
	(non-negative) VOID_ALLOCPTR.

2005-07-13 09:58  gb

	* lisp-kernel/: lisp-exceptions.c, lisp-exceptions.h: Only
	recognize unsigned alloc_trap on PPC32; only recognize signed
	alloc_trap on PPC64.

2005-07-13 09:57  gb

	* lisp-kernel/: darwin64/Makefile, darwin/Makefile: Don't pass
	major/minor release version to CPP.

2005-07-13 09:28  gb

	* xdump/heap-image.lisp: Write newfangled ABI-VERSION to image
	header.

2005-07-13 09:27  gb

	* lisp-kernel/image.c: Check abi version in image header;
	SAVE-APPLICATION writes current version to header.

2005-07-13 09:26  gb

	* lisp-kernel/image.h: Define min,max, current ABI version
	(arbitrarily, 1001.  I've lost count.)

2005-07-13 09:24  gb

	* lisp-kernel/linux/Makefile: Dont define version numbers in
	Makefile.

2005-07-13 08:59  gb

	* level-1/version.lisp: Bump.  Will need new binaries to bootstrap.

2005-07-13 08:58  gb

	* lib/nfcomp.lisp, xdump/faslenv.lisp: Increment FASL version.

2005-07-13 08:41  gb

	* xdump/xppcfasload.lisp: Increase heap-image-base for DarwinPPC32.

2005-07-13 08:41  gb

	* lisp-kernel/macros.s: Define platform-specific alloc_trap, use
	it.

2005-07-13 08:40  gb

	* lisp-kernel/: constants64.h, constants64.s: Redefine RATIO,
	COMPLEX subtags.

2005-07-13 08:40  gb

	* lisp-kernel/area.h: new (higher) HEAP_IMAGE_BASE for DarwinPPC32.

2005-07-13 08:38  gb

	* level-0/l0-pred.lisp: New NUMBERP/REALP for PPC64 (depends on new
	complex/ratio typecodes.) Redefine PPC64 *NODEHEADER-TYPES*.

2005-07-13 08:37  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Redefine PPC64::SUBTAG-RATIO
	and PPC64::SUBTAG-COMPLEX, so that a mask of all numeric typecodes
	fits (just barely) in a fixnum.  (This enables things like NUMBERP
	and REALP to check several typecodes via LOGBITP, rather than via a
	6-or-7 arm CASE statement.)
	
	This requires some bootstrapping and will require new binaries.

2005-07-13 08:33  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Define some missing vinsns
	(some of which were found/defined by jamesjb) for 64-bit vector
	set, SINGLE-FLOAT-BITS.

2005-07-13 08:32  gb

	* compiler/PPC/ppc2.lisp: Fix some cases of PPC2-VSET involving
	64-bit arrays.

2005-07-13 08:31  gb

	* compiler/vinsn.lisp: Define MISSING-VINSNS, which found a handful
	of them.

2005-07-13 08:30  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Revert to using "trap
	logical" alloc-traps on PPC32.
	
	Rationale: the largest object we can allocate is about 2^27 bytes
	in size (a DOUBLE-FLOAT vector with almost 2^24 elements).  If
	HEAP-IMAGE-BASE is effectively above 2^27, we can never cause
	allocptr to change sign from positive to negative (to wrap around
	0), but we -might-  cause it to change sign from negative to
	positive (to wrap around #x80000000).
	
	On PPC64, we'd have to be able to guarantee that HEAP-IMAGE-BASE
	was above 2^59 to ensure this.	That's hard to do, so we have to
	basically limit ourselves to the low 63 bits of memory ("positive"
	addresses) and do signed comparisons. (Wrapping around 0 should
	trap; wrapping around #x8000000000000000 shouldn't be possible.)

2005-07-13 08:19  gb

	* compiler/optimizers.lisp: Comment formatting.

2005-07-13 01:17  gb

	* lisp-kernel/spentry.s: destbind1 is now a local label (there was
	some PPC32 code that thought it was still global.)

2005-07-12 22:40  gb

	* lisp-kernel/spentry.s: Inline-lambda+keyword args support for
	PPC64.	(Needs more testing, but at least the PPC64 changes are
	nominally there.)

2005-07-12 22:38  gb

	* compiler/nx1.lisp: Don't inhibit %SET-SINGLE-FLOAT on PPC64; -do-
	inhibit %SETF-SINGLE-FLOAT there.

2005-07-11 17:50  gb

	* level-1/version.lisp: Bump.

2005-07-11 17:50  gb

	* level-1/l1-streams.lisp: Chritian Nybo's change to
	%%YIELD-TERMINAL-TO (handle the case where *TERMINAL-IO* is a
	SYNONYM-STREAM.)

2005-07-11 17:48  gb

	* level-1/l1-readloop-lds.lisp: Chritian Nybo's fix to :Y command.

2005-07-11 17:48  gb

	* compiler/X86/: x86-arch.lisp, x86-asm.lisp: Gotta start
	somewhere.

2005-07-11 08:45  gb

	* compiler/risc-lap.lisp: ALLOC-LAP-OPERAND-VECTOR takes an
	optional SIZE argument, only uses freelisting if the requested size
	matches the constant LAP-OPERAND-VECTOR-SIZE.

2005-07-11 03:07  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	MEM-REF-C-S16 was generating "lha dest,src(index)" instead of "lha
	dest,index(src)".

2005-07-10 02:40  gb

	* lib/misc.lisp: Try to be saner about DOCUMENTATION methods on
	SETF function names (as reported by alanr); define methods on the
	class CONS (not LIST), and only treat the CONS as a SETF function
	name if it is one.

2005-07-10 02:38  gb

	* level-1/ppc-error-signal.lisp: Use ;;; for file-level comments. 
	(A losing battle ...)
	
	Use target::  package prefix for stack-overflow fixup kernel call.

2005-07-10 02:37  gb

	* level-1/l1-error-signal.lisp: Use ;;; for file-level comments. 
	(A losing battle ...)

2005-07-09 08:13  gb

	* lib/: defstruct-lds.lisp, defstruct.lisp: ref-type shouldn't
	contain ppc32 subtag.

2005-07-09 08:11  gb

	* level-1/version.lisp: Bump.

2005-07-09 08:11  gb

	* level-1/l1-sockets.lisp: Check for 8-bit element type on ppc64,
	too.

2005-07-09 08:10  gb

	* level-1/l1-io.lisp: target:: package prefix.	Don't print
	block/go tags, 'cause we don't use them anymore.

2005-07-09 08:09  gb

	* level-1/l1-application.lisp, lib/arrays-fry.lisp,
	lib/backtrace.lisp: target:: package prefix.

2005-07-09 08:09  gb

	* compiler/PPC/ppc-asm.lisp: Change package in buffer attribute
	line.
	
	Always require PPC-ARCH.

2005-07-08 04:58  gb

	* lisp-kernel/pmcl-kernel.c: exit if initial mmap fails

2005-07-06 12:09  gb

	* level-1/version.lisp: Bump again, since I botched the checking
	comment the last time ...

2005-07-06 12:09  gb

	* lib/nfcomp.lisp: Move the #+pppc64-target 64-bit arrays later in
	the typecase (some other things - like FUNCTION - are probably more
	common.)

2005-07-06 11:59  gb

	* level-1/: version.lisp, linux-files.lisp: Fix a few word-size
	assumptions in CALL-WITH-STRING-VECTOR; do pipe via libc on Darwin
	(since the syscall interface is pretty bizarre.)

2005-07-06 11:58  gb

	* level-0/PPC/ppc-hash.lisp: Do STRIP-TAG-TO-FIXNUM in LAP (since
	I'm nervous about playing with	(LOGAND <non-fixnum> -1)).

2005-07-06 11:57  gb

	* level-0/PPC/ppc-float.lisp: Define %%SCALE-SFLOAT for PPC64.

2005-07-06 11:56  gb

	* level-0/nfasload.lisp: Early PROVIDE pushes (STRING MODULE) on
	*MODULES*.

2005-07-06 11:56  gb

	* level-0/l0-hash.lisp: Don't define key-mangling functions at
	compile-time (so that it's easier to experiment with them.)
	
	Mangle keys on PPC64, which seems to greatly improve GETHASH
	performance.

2005-07-06 11:54  gb

	* level-0/l0-float.lisp: SCALE-FLOAT calls %%SCALE-SFLOAT on PPC64.

2005-07-05 20:04  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: natural ALU ops were ...
	missing; problems with inlined boxing/unboxing of 64-bit integers. 
	64-bit aref.

2005-07-05 19:56  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: natural ALU ops take 32-bit
	args, return 32-bit results on PPC32.

2005-07-05 19:48  gb

	* compiler/PPC/ppc2.lisp: natural-vref, natural-vset for ppc64. 
	Handle 64-bit integer vectors.

2005-07-05 19:47  gb

	* compiler/nx1.lisp: Two-arg addition, subtraction on unsigned
	natural-sized integers.

2005-07-05 19:46  gb

	* compiler/nx0.lisp: NX-BINARY-NATURAL-OP-P may want to look at
	result type.

2005-07-05 19:44  gb

	* compiler/arch.lisp: Error codes for not-u64, not-s64 were
	backwards.  (continue from constant redefinition CERRORs, recompile
	everything).

2005-07-05 07:25  gb

	* level-0/PPC/PPC32/l0-bignum-ppc32.lisp: Need NUMBER-CASE-MACRO at
	compile-time.

2005-07-05 07:12  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: LOGBITP: fencepost on
	fixnum-only bound (can only access most significant bit of fixnum,
	not beyond ...).  (Was looking at ppc32 constants, so this didn't
	lead to erroneous code, but may have been very inefficient in some
	cases.)

2005-07-05 07:11  gb

	* level-0/PPC/PPC32/l0-bignum-ppc32.lisp: LOGBITP: fencepost on
	fixnum-only bound (can only access most significant bit of fixnum,
	not beyond ...).

2005-07-05 04:25  gb

	* level-1/version.lisp: Bump.

2005-07-05 04:19  gb

	* level-0/: l0-aprims.lisp, l0-array.lisp, l0-complex.lisp,
	l0-def.lisp, l0-error.lisp, l0-float.lisp, l0-hash.lisp,
	l0-init.lisp, l0-int.lisp, l0-io.lisp, l0-misc.lisp,
	l0-numbers.lisp, l0-pred.lisp, l0-symbol.lisp, l0-utils.lisp: Add
	(IN-PACKAGE "CCL").

2005-07-05 04:18  gb

	* level-0/nfasload.lisp: Add (IN-PACKAGE "CCL").
	
	Do SET-PACKAGE and FIND-PACKAGE here, so that IN-PACKAGE can be
	used in level-0 and early level-1 files.  (All of these files are
	in the CCL package; the IN-PACKAGE forms are supposed to help text
	editors set the buffer package reasonably when editing these
	files.)

2005-07-05 04:11  gb

	* level-0/PPC/: PPC32/ppc32-bignum.lisp,
	PPC32/l0-bignum-ppc32.lisp, ppc-array.lisp, ppc-clos.lisp,
	ppc-def.lisp, ppc-float.lisp, ppc-hash.lisp, ppc-io.lisp,
	ppc-misc.lisp, ppc-numbers.lisp, ppc-pred.lisp, ppc-symbol.lisp,
	ppc-utils.lisp: Add (IN-PACKAGE "CCL").

2005-07-05 02:52  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: Add (IN-PACKAGE "CCL").
	
	%LDB-FIXNUM-FROM-BIGNUM: byte may span as many as 3 digits, not
	just 2.

2005-07-05 02:51  gb

	* level-0/PPC/PPC64/ppc64-bignum.lisp: Add (IN-PACKAGE "CCL").

2005-07-05 02:50  gb

	* level-1/l1-files.lisp: REMOVE . before removing :UP in REMOVE-UP.

2005-07-05 02:50  gb

	* level-1/l1-symhash.lisp: Move SET-PACKAGE stuff into level-0.

2005-07-05 02:49  gb

	* level-1/l1-typesys.lisp: Integrate 64-bit vectors into type
	system better.

2005-07-05 02:49  gb

	* level-1/level-1.lisp: #+sparc-target ? no.

2005-07-05 02:48  gb

	* lisp-kernel/lisp-debug.c: Recognize 64-bit traps, 64-bit BOUNDP
	traps.

2005-07-05 02:47  gb

	* lisp-kernel/lisp-exceptions.h: Recognize LD instructions, for
	debugger.

2005-07-05 02:47  gb

	* lib/nfcomp.lisp: Add an IN-PACKAGE; format/layout changes.

2005-07-05 02:46  gb

	* lib/macros.lisp: Nuke CLtL1 backward-compatibility stuff in
	IN-PACKAGE.

2005-07-05 02:45  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: %ILSL : zero result if
	shift count > 63 (not 31).

2005-07-05 02:44  gb

	* compiler/PPC/ppc2.lisp: Fix vcell locations in inlined lambda
	&optional/&key processing.

2005-07-04 22:22  gb

	* level-0/l0-cfm-support.lisp: no it wasn't

2005-07-04 22:20  gb

	* level-0/l0-cfm-support.lisp: file was empty

2005-07-04 01:55  gb

	* lisp-kernel/spentry.s: _SPbuiltin_length does
	list-length/circularity check on PPC64.
	
	_SPbuiltin_seqtype was checking (random) imm1 value, rather than
	typecode in imm0; this means that sequence functions sometimes
	tried to treat non-list arguments as vectors (rather than
	complaining about non-sequences.) (This seems to have been present
	on both platforms, and may have been long-standing.)

2005-07-04 01:52  gb

	* lib/time.lisp: Use reentrant #_localtime_r.
	
	GCTIME uses (host) :timeval size, not hardwired constant.

2005-07-04 01:51  gb

	* lib/db-io.lisp: Don't override field offsets assigned by
	interface translator!
	
	Assume that DarwinPPC64 uses natural PPC struct alignment.  (AFAIK,
	Apple hasn't bothered to document the ABI yet.)

2005-07-04 01:49  gb

	* level-1/: l1-io.lisp, l1-reader.lisp: Only use character names
	for non-graphic-standard-chars (for #\Newline and for
	non-standard-chars) when writing chars with #\ syntax.
	
	*NAME-CHAR-ALIST*: reorder so that standard/semi-standard char
	names are preferred.

2005-07-04 01:47  gb

	* level-1/l1-init.lisp: Make *TOTAL-GC-MICROSECONDS* big enough.

2005-07-04 01:46  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: fix-big-logandc2:  start
	complementing at second digit, since fixnum op handled low 2
	digits.

2005-07-04 01:45  gb

	* level-0/PPC/ppc-hash.lisp: EQL hashing treats +/- 0.0 the same.

2005-07-04 01:44  gb

	* level-0/PPC/ppc-array.lisp: %EXTEND-VECTOR: handle bit-vector
	case with non-zero start offset.

2005-07-04 01:43  gb

	* compiler/PPC/ppc-lap.lisp: Functions can't (easily) overflow on
	PPC64.

2005-07-04 01:42  gb

	* compiler/nx1.lisp: NX1-ASH: (ash X 0) should typecheck X.

2005-07-04 01:41  gb

	* compiler/optimizers.lisp: TRANSFORM-LOGOP: some logical
	operations aren't commutative.

2005-07-03 02:38  gb

	* lisp-kernel/spentry.s: Try to schedule special-variable reference
	subprims a little better.  (Hard, since we can't do speculative
	execution, but at least move a test further from a dependent
	branch.)

2005-07-03 02:36  gb

	* level-0/PPC/PPC64/ppc64-bignum.lisp: Single-digit LOGANDC1,
	LOGANDC2: store value in DEST if non-nil (was clobbering source
	bignum arg.)

2005-07-03 02:35  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: Bignum LOGXOR does LOGXOR
	(not LOGIOR ...) on each digit.
	
	Bignun-X-fixnum LOGANDC1, LOGANDC2 assume that the fixnum op has
	set low 2 (32-bit) digits.

2005-07-03 02:32  gb

	* level-0/PPC/ppc-float.lisp: %DOUBLE-FLOAT-SIGN, %SHORT-FLOAT-SIGN
	back in LAP, return T iff sign bit is set.

2005-07-03 02:31  gb

	* level-0/l0-hash.lisp: Some paranoia in SXHASH-AUX; ensure that
	the "similar" -0.0 and 0.0 SXHASH to the same value on PPC64.

2005-07-03 02:30  gb

	* level-0/l0-float.lisp: Move %DOUBLE-FLOAT-SIGN,
	%SINGLE-FLOAT-SIGN back to LAP (and make them return boolean
	valures, as their callers expect.)
	
	PPC64: LOG-E: coerce X to SINGLE-FLOAT before calling
	%SHORT-FLOAT-ABS on it.  (Note: bugs like this may clobber the
	tcr's single-float convert slot, making it hard to box/unbox
	single-floats in that thread.  If user code can do this (or if
	system code keeps being buggy ...), should make it easier to fix
	the tcr slot.)

2005-07-03 02:22  gb

	* compiler/optimizers.lisp: (ASH x 0) - return X, but typecheck it

2005-07-03 02:21  gb

	* compiler/nx-basic.lisp: In default compiler policy, don't trust
	declarations or do unsafe things if SAFETY optimize quantity is 3.

2005-07-02 20:01  gb

	* xdump/hashenv.lisp: TARGET-ARCH-CASE for some hash-table macros. 
	(l0-hash.lisp functions have been a little confused about
	types/tags.)

2005-07-02 20:00  gb

	* lisp-kernel/spentry.s: Store low 32 bits, not high 32 when
	storing into a (SIMPLE-ARRAY (SIGNED-BYTE 32) (*)).

2005-07-02 19:59  gb

	* lisp-kernel/lisp-debug.c: Avoid "%08x" in printf format strings,
	when size of arg isn't known to be 32 bits.

2005-07-02 19:57  gb

	* level-1/version.lisp: Lisp image du jour.

2005-07-02 19:56  gb

	* level-1/sysutils.lisp: Make a real (SETF MACRO-FUNCTION)
	function; make the old SET-MACRO-FUNCTION call it.  (Note that this
	may be a little tricky to bootstrap: it may be necessary to do:
	
	? (remhash 'macro-function ccl::%setf-methods%)
	
	to remove the old SETF inverse established by DEFSETF.)

2005-07-02 19:54  gb

	* level-1/ppc-trap-support.lisp: So many mis-indented comments, so
	little time.

2005-07-02 19:52  gb

	* level-1/l1-error-signal.lisp: Make TYPE-ERROR objects with
	implicit EXPECTED-TYPE slots if no type info available.

2005-07-02 19:51  gb

	* level-1/l1-clos.lisp: target package in %SLOT-UNBOUND-TRAP.

2005-07-02 19:50  gb

	* level-1/l1-aprims.lisp: APPEND has something to do with the CL
	definition ...

2005-07-02 19:49  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: LOGTEST of 2 bignums
	looks at both args (rather than LOGTESTing the first with itself.)
	
	LOGTEST of fixnum and bignum looks at second 32-bit digit if it
	exists and no intersection on first digit.

2005-07-02 19:47  gb

	* level-0/PPC/ppc-def.lisp: %SET-OBJECT stores a natural-sized
	value, not a 32-bit word ...

2005-07-02 19:46  gb

	* level-0/l0-misc.lisp: PROPER-LIST-P returns false on dotted lists
	(as someone may have suggested a few months ago.)

2005-07-02 19:46  gb

	* level-0/l0-hash.lisp: Comment formatting changes only.

2005-07-02 16:52  gb

	* level-0/l0-array.lisp: PPC64-specific changes: Get upper bound of
	(UNSIGNED-BYTE 64) right.

2005-07-02 16:32  gb

	* lisp-kernel/spentry.s: PPC64-specific changes: makeu64: make a
	3-digit bignum if we need 3 digits misc_set_common: get
	type-checking right on (SIGNED-BYTE 16), (UNSIGNED-BYTE 64).

2005-07-02 16:31  gb

	* lib/backtrace.lisp: ; -> ;;; on section comments.

2005-07-02 14:42  gb

	* lib/backtrace.lisp: FIND-LOCAL-NAME: encoded stack-frame
	addresses are a function of target::word-size.

2005-07-02 05:51  gb

	* level-0/PPC/PPC64/ppc64-bignum.lisp: %MULTIPLY returns (values
	"high 32 bits of product" low 32 bits of product") in that order. 
	(%MULTIPLY is currently only used to validate the "guess" digit in
	BIGNUM-TRUNCATE's aux functions, so getting things completely
	backwards here only caused some bad guess digits to be accepted.)

2005-07-02 05:47  gb

	* level-0/PPC/PPC32/ppc32-bignum.lisp: Some comments had been
	line-wrapped (presumably causing some words to become lap labels).

2005-07-02 05:45  gb

	* level-0/PPC/ppc-numbers.lisp: 64-bit
	%ROUND-NEAREST-SHORT-FLOAT->FIXNUM stores FP0 in the right place
	...

2005-07-01 16:00  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: %ADD-WITH-CARRY and
	%SUBTRACT-WITH-BORROW operate on the low 32 bits of their arguments
	(e.g, -1 is #x00000000ffffffff)).

2005-07-01 03:55  gb

	* level-0/PPC/ppc-float.lisp: ppc64 bug fixes.

2005-07-01 03:53  gb

	* level-0/PPC/ppc-pred.lisp: use T vice (+ ppc64::nil-value
	ppc64::t-offset) in EQL.

2005-07-01 03:52  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: Bug fixes.

2005-07-01 03:50  gb

	* level-1/l1-numbers.lisp: Indentation.

2005-07-01 03:49  gb

	* level-1/linux-files.lisp: yet another way to change default
	directory (CCL::CD).

2005-07-01 03:48  gb

	* level-1/sysutils.lisp: SET-MACRO-FUNCTION accepts/ignores env
	arg.

2005-07-01 03:48  gb

	* lib/numbers.lisp: Remove some comments.

2005-07-01 03:47  gb

	* lisp-kernel/spentry.s: Check for sign-extension via arithmetic
	shift (not logical shift) in makes128.

2005-07-01 03:46  gb

	* level-0/l0-numbers.lisp: Comment indentation.

2005-07-01 03:46  gb

	* level-0/l0-float.lisp: Several bug fixes ...

2005-07-01 03:43  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: ADJUST-SP was missing.

2005-07-01 03:43  gb

	* compiler/nx1.lisp: Handle LABELS declarations differently; this
	may need more thought/work.

2005-06-30 18:36  gb

	* level-1/version.lisp: bump.

2005-06-30 17:47  gb

	* lisp-kernel/spentry.s: Zero the CTR when entering/returning from
	lisp code.
	
	Fix valence when reentering lisp with exception-handler swap.

2005-06-30 17:46  gb

	* lisp-kernel/pmcl-kernel.c: commit_pages() may fail, so it returns
	Boolean.  This needs work (overcommit, etc.)

2005-06-30 17:45  gb

	* lisp-kernel/macros.s: Use signed alloc traps.

2005-06-30 17:45  gb

	* lisp-kernel/lisp-exceptions.h: resize_dyamic_heap() may fail, so
	it returns a Boolean.
	
	Define new alloc trap instructions; contunue to define old ones,
	for bootstrapping.

2005-06-30 17:43  gb

	* lisp-kernel/lisp-exceptions.c: Recognize old (unsigned) alloc
	traps as well as new (signed) ones.
	
	Check for failure in memory allocation requests; fixup allocptr
	before signalling lisp errors in case of failure.

2005-06-30 17:41  gb

	* lisp-kernel/gc.c: What exactly is a "locatitive" ?

2005-06-30 17:40  gb

	* level-1/l1-typesys.lisp: Compute an effective slot-definition's
	type predicate based on the value of its type slot, not the
	(possibly unsupplied) :TYPE initarg.

2005-06-30 17:39  gb

	* level-1/l1-error-system.lisp: Recognize (UNSIGNED-BYTE 56) as an
	expected type in some UUO type errors.

2005-06-30 17:38  gb

	* level-1/l1-clos.lisp: Slot-definition's TYPE slots default to T,
	damn it.  Compute the intersection of all direct slots' types when
	determining an effective slot's type.  (We should probably complain
	if the intersection is empty, and there may be cases where it can't
	be computed.)

2005-06-30 17:34  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: Allow
	BIGNUM-REF/BIGNUM-SET to inline.

2005-06-30 17:34  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	Use signed alloc traps.  (This means that valid heap addresses are
	limited to the low half of the address space; this has been true
	because of OS limitations.)

2005-06-30 17:31  gb

	* compiler/PPC/ppc-disassemble.lisp: Recognize SRDI.

2005-06-30 17:30  gb

	* compiler/: nx1.lisp, PPC/ppc2.lisp: (partially) revive
	%TYPED-MISCREF and %TYPED-MISCSET.

2005-06-29 16:52  gb

	* level-1/version.lisp: bump.

2005-06-29 16:30  gb

	* compiler/PPC/ppc2.lisp: %ilogand2: use clear-left, clear-right if
	appropriate.
	
	NOTE: clear-left doesn't ensure that tag bits are cleared; code
	which says (logand (the fixnum x) mask) - and lies about the type
	of X - is unsafe, but any such code is pretty bogus to begin with.

2005-06-29 16:11  gb

	* compiler/PPC/: PPC64/ppc64-vinsns.lisp, PPC32/ppc32-vinsns.lisp:
	CLEAR-LEFT and CLEAR-RIGHT.

2005-06-29 15:06  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: Reorganize TRUNCATE and
	related functions.

2005-06-29 15:04  gb

	* level-0/PPC/ppc-def.lisp: %SUB-TIMEVALS in lisp.

2005-06-29 15:03  gb

	* level-0/l0-misc.lisp: Kinder, gentler %usedbytes.

2005-06-29 15:02  gb

	* level-0/l0-hash.lisp: Comment indentation.

2005-06-29 15:01  gb

	* level-0/l0-float.lisp: Fix typos in conditionalization.

2005-06-29 15:00  gb

	* lisp-kernel/spentry.s: Missing close-paren in comment.

2005-06-29 14:59  gb

	* lisp-kernel/pmcl-kernel.c: lisp_heap_threshold, egc thresholds
	are platform-specific (twice as large on 64-bit.)
	
	Enable EGC on PPC64.

2005-06-29 14:58  gb

	* lisp-kernel/lisp-exceptions.c: PPC64 codevector header stuff.
	
	When handling an allocation trap, ensure that displacement is a
	"signed natural" (signed int of natural word size), not an "int"
	(signed-byte 32).
	
	Don't explicitly zero pages that should already be zeroed in
	new_heap_segment; the PPC64-specific bug was elsewhere.

2005-06-29 14:54  gb

	* lisp-kernel/gc.c: If EGC memoization is missing, say "doublenode"
	instead of "doubleword".
	
	When masking out bits at the end of the "refbits" bit vector,
	ensure that C does 64-bit arithmetic.

2005-06-29 14:52  gb

	* lisp-kernel/constants64.h: heap_segment_size (and log2 of it) are
	platform-specific.  Make many constants explicitly "long", to
	discourage 32-bit arithmetic.

2005-06-29 14:50  gb

	* lisp-kernel/: constants.h, constants32.h: heap_segment_size (and
	log2 of it) are platform-specific.

2005-06-29 14:49  gb

	* level-1/linux-files.lisp: Do SUB-TIMEVALS in lisp.  (Did this
	cons or something ? Why was it in LAP ?)

2005-06-29 14:48  gb

	* level-1/l1-clos-boot.lisp: Remove stray DBG call.

2005-06-17 04:48  gb

	* lisp-kernel/spentry.s: s16 and u16 cases were backwards in
	misc_ref.

2005-06-17 04:48  gb

	* lisp-kernel/pmcl-kernel.c: EGC not ready on PPC64 yet.

2005-06-17 04:47  gb

	* lisp-kernel/constants64.s: misc_dloat_offset isn't
	misc_header_offset ...	double_float_header reflects the view of a
	double-float as two 32-bit elements.

2005-06-17 04:45  gb

	* lib/arrays-fry.lisp: Sigh.  May not be ppc32, use target package.

2005-06-17 04:44  gb

	* level-1/ppc-trap-support.lisp: Define and use
	XP-GPR-SIGNED-DOUBLEWORD.

2005-06-17 04:43  gb

	* level-1/l1-aprims.lisp: Don't do APPEND two lists at a time ...

2005-06-17 04:29  gb

	* level-0/PPC/ppc-array.lisp: Don't reuse NVRs in hard case of
	%EXTEND-VECTOR on either platform.

2005-06-16 17:13  gb

	* lisp-kernel/spentry.s: Fix ppc64 bignum case of integer-sign.
	
	Some stores and loads (FP constants, fpscr, etc.) need to be
	32-bit, not ldr/str.

2005-06-16 17:11  gb

	* lisp-kernel/lisp-exceptions.c: Just say "%lx", not %08lx".

2005-06-16 17:11  gb

	* lisp-kernel/lisp-debug.c: Forgot to say "%lx" in some printf
	calls.

2005-06-16 17:10  gb

	* lisp-kernel/constants64.s: c_reg_save has room for N nodes, not N
	4-byte things.

2005-06-16 17:08  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: Define and use %LOGXOR,
	and set carry on entry to negation loop.

2005-06-16 17:07  gb

	* level-1/l1-init.lisp: ARRAY-RANK-LIMIT, CALL-ARGUMENTS-LIMIT,
	LAMBDA-PARAMETERS-LIMIT are functions of target::node-size.

2005-06-16 05:44  gb

	* level-0/l0-float.lisp: %truncate-double-float for PPC64.

2005-06-16 05:43  gb

	* level-0/l0-numbers.lisp: INIT-RANDOM-STATE-SEEDS on both
	platforms.

2005-06-16 05:41  gb

	* level-0/PPC/PPC64/l0-bignum-ppc64.lisp: Use old (safe-but-slow)
	bignum GCD routine on PPC64, for now.  Define
	ONE-BIGNUM-FACTOR-OF-TWO.

2005-06-16 05:39  gb

	* level-1/version.lisp: 050616.

2005-06-16 05:38  gb

	* lisp-kernel/darwin/Makefile: Don't try to determine GCC version
	from "reading specs from ..." verbose output if specs aren't read
	from a file (assume modern GCC in that case.)

2005-06-16 05:36  gb

	* lisp-kernel/pmcl-kernel.c: Enable EGC on PPC64.

2005-06-16 05:36  gb

	* lisp-kernel/gc.c: Zero enough bits (shift by "bitmap_shift", not
	"5") when tenuring to an area other than the oldest.

2005-06-15 23:41  gb

	* lib/nfcomp.lisp, xdump/faslenv.lisp: Bump fasl version.

2005-06-15 23:41  gb

	* level-0/PPC/PPC32/l0-bignum-ppc32.lisp: Remove embedded control
	char.

2005-06-15 23:16  gb

	* level-1/version.lisp: Bump; claim "Alpha" status for PPC64.

2005-06-15 23:15  gb

	* level-0/PPC/ppc-array.lisp: Fixes in %INIT-MISC.

2005-06-15 23:15  gb

	* level-0/PPC/ppc-def.lisp: %MAKE-CODE-EXECUTABLE fixes for PPC64.

2005-06-15 23:14  gb

	* level-0/PPC/ppc-misc.lisp: Word-size fixes.

2005-06-15 23:13  gb

	* level-0/PPC/ppc-numbers.lisp: don't do unsigned divide in
	%FIXNUM-TRUNCATE.  Bad %NEXT-RANDOM-SEED is arguably better than
	none.

2005-06-15 23:12  gb

	* level-0/PPC/ppc-utils.lisp: Fix in #+ppc64-target
	walk-static-area.

2005-06-15 23:11  gb

	* level-0/PPC/PPC64/: ppc64-bignum.lisp, l0-bignum-ppc64.lisp:
	Lots-o-bug-fixes.

2005-06-15 23:10  gb

	* level-1/l1-typesys.lisp: specialized-array-element-types include
	ppc64 64-bit array types.

2005-06-15 23:09  gb

	* level-1/l1-numbers.lisp: RANDOM-STATE changes for ppc64;
	%single-float-atanh for ppc64.

2005-06-15 23:08  gb

	* level-1/l1-clos-boot.lisp: Set up ppc64 signed/unsigned 64-bit
	vectors in class table.

2005-06-15 23:07  gb

	* xdump/xppcfasload.lisp: Define image-base-address per-backend.

2005-06-15 23:06  gb

	* xdump/xfasload.lisp: New fasl ops for 32-bit, 64-bit signed
	integers.  Image-base-address determined by backend.

2005-06-15 23:06  gb

	* xdump/faslenv.lisp: New fasl ops for 32-bit, 64-bit signed
	integers.

2005-06-15 23:04  gb

	* xdump/heap-image.lisp: Remove (obsolete) reference defs.

2005-06-15 23:03  gb

	* xdump/.cvsignore: Ignore 64-bit FASL files.

2005-06-15 23:02  gb

	* scripts/openmcl64: New file.

2005-06-15 23:01  gb

	* lisp-kernel/darwin64/Makefile: Need to check gcc version in some
	other way (actually, we can assume >= 4.0 for DarwinPPC64.)

2005-06-15 23:00  gb

	* lisp-kernel/darwin/.gdbinit: So, Apple ?  What's with all the
	SIGTTIN's ?

2005-06-15 22:59  gb

	* lisp-kernel/spentry.s: Fix bit vectore ref/set, small-bignum
	initialization after shifts/multiplies for ppc64.

2005-06-15 22:58  gb

	* lisp-kernel/ppc_print.c: Print some more uvector types in kernel
	debugger.

2005-06-15 22:57  gb

	* lisp-kernel/pmcl-kernel.c: Create much larger reserved area on
	ppc64.	Fix handling of HeapHighWaterMark, especially in cases when
	EGC is off.

2005-06-15 22:56  gb

	* lisp-kernel/lisp.h: Ensure that _align_to_power_of_2 DTRT on
	ppc64.

2005-06-15 22:53  gb

	* lisp-kernel/: lisp-exceptions.c, lisp-exceptions.h: Word-size
	changes.

2005-06-15 22:49  gb

	* lisp-kernel/lisp-debug.c: (S) command to find/describe symbol
	with matching pname.

2005-06-15 22:49  gb

	* lisp-kernel/gc.h: PPC64 code-vector-prefix.

2005-06-15 22:48  gb

	* lisp-kernel/gc.c: Lots of word-size fixes.

2005-06-15 22:47  gb

	* lisp-kernel/area.h: 64-bit IMAGE_BASE_ADDRESS for ppc64.

2005-06-15 22:46  gb

	* lib/setf-runtime.lisp: APPLY+ changes for PPC64.

2005-06-15 22:45  gb

	* lib/numbers.lisp: Use target::fixnumshift in PRINT-OBJECT method
	on RANDOM-STATE.

2005-06-15 22:44  gb

	* lib/nfcomp.lisp: Dump small integers (signed-byte 16, 32, 64) via
	specialized ops.

2005-06-15 22:14  gb

	* lib/macros.lisp: Parameterize %ilogbitp, other things for ppc64.

2005-06-15 22:13  gb

	* lib/foreign-types.lisp: :cdb-datum.size is (:unsigned 32), not
	:unsigned-long.

2005-06-15 22:12  gb

	* lib/db-io.lisp: Portability changes.

2005-06-15 22:11  gb

	* lib/backtrace.lisp: Conditionalize REGISTERS-USED-BY.

2005-06-15 22:11  gb

	* lib/backtrace-lds.lisp: target: package changes.

2005-06-15 22:10  gb

	* lib/apropos.lisp: Remove commented-out code.

2005-06-15 22:09  gb

	* level-0/PPC/PPC32/l0-bignum-ppc32.lisp: ONE-BIGNUM-FACTOR-OF-TWO,
	LOGBITP here for PPC32.

2005-06-15 22:06  gb

	* level-0/nfasload.lisp: primsizes array isn't of (non-portable)
	element-type 'fixnum.  New fasl ops for s32, s64.  Count package
	htab elements based on SYMBOLP only when resizing.

2005-06-15 22:02  gb

	* level-0/l0-pred.lisp: Fix NUMBERP typo.

2005-06-15 22:02  gb

	* level-0/l0-numbers.lisp: 
	Move ONE-BIGNUM-FACTOR-OF-TWO, LOGBITP elsewhere.

2005-06-15 22:01  gb

	* level-0/l0-misc.lisp: Look at the right area slots in
	%RESERVEDBYTES.

2005-06-15 21:58  gb

	* level-0/l0-int.lisp: Indentation and comment changes.

2005-06-15 21:57  gb

	* level-0/l0-float.lisp: ppc64 fixes.

2005-06-15 21:55  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Several fixes, mostly in
	bit addressing.

2005-06-15 21:54  gb

	* compiler/PPC/ppc-lapmacros.lisp: UNBOX-BASE-CHAR fixes for PPC64;
	16-bit digit-part accessors are ppc32-only.

2005-06-15 21:53  gb

	* compiler/PPC/ppc-disassemble.lisp: :RAW option to
	PPC-XDISASSEMBLE, ppc-gpr handles target rcontext.

2005-06-15 21:52  gb

	* compiler/nx1.lisp: Check platform-specific "naturalness" in
	comparisons.

2005-06-13 15:17  gb

	* lisp-kernel/lisp-exceptions.h: minor_opcode_TR cut-and-paste
	mishap.

2005-06-12 15:29  gb

	* level-1/l1-symhash.lisp: Missed another thing (in
	%USE-PACKAGE-CONFLICT-CHECK) that accesses package hash tables
	directly (and was doing so incorreclty, per the New Order.)

2005-06-10 16:13  gb

	* lisp-kernel/thread_manager.c: sigaction flags, node_size changes
	in thread startup.

2005-06-10 16:12  gb

	* lisp-kernel/subprims.s: start_lisp: save/restore C registers,
	build C stack frame in node_size multiples (not 4-byte multiples.)

2005-06-10 16:11  gb

	* lisp-kernel/ppc_print.c: Print (immedate) SINGLE-FLOATs on ppc64.

2005-06-10 16:09  gb

	* lisp-kernel/pmcl-kernel.c: sigaction flags.

2005-06-10 16:08  gb

	* lisp-kernel/lisp_globals.h: Define MIN_KERNEL_GLOBAL.

2005-06-10 16:08  gb

	* lisp-kernel/lisp-exceptions.h: We seem to be committed to the
	"new" DarwinSigReturn.	Add a little bit of abstraction for trap
	opcodes.

2005-06-10 16:04  gb

	* lisp-kernel/lisp-exceptions.c: Decode some traps more portably;
	still some work to be done here.

2005-06-10 16:02  gb

	* lisp-kernel/image.c: Word-size issues; use MIN_KERNEL_GLOBAL
	rather than platform-dependent constant.

2005-06-10 15:58  gb

	* lisp-kernel/gc.c: Lots of word-size issues.

2005-06-10 15:57  gb

	* lisp-kernel/constants64.s: Split tcr.flags into two 32-bit words,
	because the .h file does so.

2005-06-10 15:56  gb

	* compiler/optimizers.lisp: Always do N-ary +/- as a sequence of
	2-arg operations.

2005-06-10 15:55  gb

	* lib/numbers.lisp: Comment indentation.

2005-06-10 15:18  gb

	* level-1/version.lisp: Version de jour.

2005-06-10 15:16  gb

	* level-1/l1-processes.lisp: target:: package prefix changes.

2005-06-10 15:16  gb

	* level-1/l1-boot-1.lisp: HOST-PLATFORM returns second (64-bit-p)
	value; PLATFORM-DESCRIPTION decodes that,
	LISP-IMPLEMENTATION-VERSION uses that info.

2005-06-10 15:13  gb

	* level-0/PPC/PPC64/: l0-bignum-ppc64.lisp, ppc64-bignum.lisp: Bug
	fixes ...

2005-06-10 15:12  gb

	* level-0/PPC/ppc-misc.lisp: Use trlgei in (IIRC)
	%%SAVE-APPLICATION trap.

2005-06-10 15:11  gb

	* level-0/PPC/ppc-float.lisp: Move some #+ppc64 code to lisp.

2005-06-10 15:09  gb

	* level-0/nfasload.lisp: Finish package changes.

2005-06-10 15:08  gb

	* level-0/l0-init.lisp: Conditionalize ARRAY-TOTAL-SIZE-LIMIT; add
	*features* for word size, endianness.

2005-06-10 15:07  gb

	* level-0/l0-float.lisp: Some 64-bit conditionalization.

2005-06-10 15:04  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Need to define
	ONE-DIGIT-BIGNUM-HEADER after all.

2005-06-10 15:04  gb

	* compiler/PPC/ppc-lapmacros.lisp: SET-GLOBAL sets all 64  bits on
	PPC64.

2005-06-09 15:29  gb

	* lib/compile-ccl.lisp: Compile all of target-xdev-modules, not
	just the cdr of the list (why was it ever skipping the car of that
	list ???)

2005-06-07 23:35  gb

	* xdump/xfasload.lisp: Initial element in cloned package htabs is
	0, too.  New binaries.

2005-06-07 22:49  gb

	* level-1/version.lisp: 050607,  once in a lifetime.

2005-06-07 22:48  gb

	* level-0/nfasload.lisp, level-1/l1-symhash.lisp: Finish package
	bootstrapping (unless I missed something): package hash tables
	contain symbols (NILSYM on PPC32), 0 (unused/free entries), or
	(PACKAGE-DELETED-MARKER)s.

2005-06-07 21:06  gb

	* lisp-kernel/darwin/.gdbinit: Don't stop in GDB on SIGKILL.

2005-06-07 21:06  gb

	* lisp-kernel/spentry.s: ASH can return 64-bit results, as can
	fixnum multiplication.

2005-06-07 21:05  gb

	* lisp-kernel/pmcl-kernel.c: 64-bit changes.

2005-06-07 21:04  gb

	* lisp-kernel/lisp-exceptions.h: define some PPC64 opcodes/masks.

2005-06-07 21:02  gb

	* lisp-kernel/: lisp-debug.c, lisp-exceptions.c: Propagate
	exceptions on Darwin.

2005-06-07 21:02  gb

	* lisp-kernel/gc.h: 64-bit changes/fixes.  Ensure that area_dnode
	returns natural.

2005-06-07 21:01  gb

	* lisp-kernel/gc.c: 64-bit changes/fixes.

2005-06-07 21:00  gb

	* lisp-kernel/constants64.s: 4&5-bit bignum headers.

2005-06-07 20:59  gb

	* lisp-kernel/constants.h: TCR_FLAG_BIT_PROPAGATE_EXCEPTION.

2005-06-07 20:58  gb

	* lisp-kernel/: bits.c, bits.h: 64-bit changes.

2005-06-07 20:57  gb

	* level-1/ppc-trap-support.lisp: Decode and handle 64-bit traps.

2005-06-07 20:56  gb

	* level-1/: l1-typesys.lisp, sysutils.lisp: Use
	target::target-most-positive-fixnum when applicable.

2005-06-07 20:56  gb

	* level-1/l1-symhash.lisp: Use PACKAGE-DELETED-MARKER.

2005-06-07 20:55  gb

	* level-1/l1-streams.lisp: COLUMN moved here.

2005-06-07 20:54  gb

	* level-1/l1-lisp-threads.lisp: Recognize 64-bit bogus-objects.

2005-06-07 20:53  gb

	* level-1/l1-io.lisp: lower-case 1 char.

2005-06-07 20:53  gb

	* lib/compile-ccl.lisp: Remove some duplication.

2005-06-07 20:52  gb

	* lib/format.lisp: Remove some commented-out code.

2005-06-07 20:51  gb

	* lib/macros.lisp: 64-bit (DarwinPPC) callbacks.

2005-06-07 20:50  gb

	* lib/streams.lisp: Move COLUMN definition earlier.

2005-06-07 20:47  gb

	* library/lispequ.lisp: PACKAGE-DELETED-MARKER, some
	comment/formatting changes.

2005-06-07 20:46  gb

	* level-0/PPC/PPC64/: l0-bignum-ppc64.lisp, ppc64-bignum.lisp: Bug
	fixes.

2005-06-07 18:36  gb

	* level-0/PPC/PPC32/ppc32-bignum.lisp: Comment formatting.

2005-06-07 18:35  gb

	* level-0/PPC/ppc-utils.lisp: GC returns target::nil-value.

2005-06-07 18:34  gb

	* level-0/PPC/ppc-numbers.lisp: Do an unsigned divide; there may be
	another problem here (this is almost certainly wrong.)

2005-06-07 18:31  gb

	* level-0/nfasload.lisp: Start to recognize 0 as an unused package
	htab entry.

2005-06-07 18:30  gb

	* level-0/l0-numbers.lisp: target-package stuff.

2005-06-07 18:29  gb

	* level-0/l0-int.lisp: Some more target conditionalization.

2005-06-07 18:29  gb

	* level-0/l0-float.lisp: INTEGER-DECODE-DOUBLE-FLOAT doesn't have
	to make bignums on ppc64.

2005-06-07 18:27  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: trap-unless-list traps if
	tag is unsignged< or unsigned> ppc64::fulltag-cons, to distinguish
	itself from trap-unless-cons cases.

2005-06-07 18:25  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: tag-imm-2.

2005-06-07 18:25  gb

	* compiler/PPC/ppc2.lisp: Target-specific shift counts.

2005-06-07 18:24  gb

	* compiler/optimizers.lisp: LOCKP, INTEGERP use target types.

2005-06-07 18:23  gb

	* compiler/nx1.lisp: Parameterize ASH for target fixnum size.

2005-06-03 09:10  gb

	* level-1/version.lisp: Bump: 050603.

2005-06-03 09:09  gb

	* lisp-kernel/darwin/.gdbinit: 32/64-bit versions of some
	utilities; need to do
	
	(gdb) set $ppc64=1
	
	manually to enable 64-bit versions.

2005-06-03 09:08  gb

	* level-1/runtime.lisp: No more *LDS*.

2005-06-03 09:06  gb

	* level-1/: ppc-callback-support.lisp, ppc-trap-support.lisp:
	Target:: package changes, code-vector prefix.

2005-06-03 09:06  gb

	* level-1/: linux-files.lisp, ppc-threads-utils.lisp: Target::
	package changes.

2005-06-03 09:05  gb

	* level-1/level-1.lisp: No more LDS/*LDS*.

2005-06-03 09:02  gb

	* level-1/l1-utils.lisp: Remove some obsolete/archaic stuff.

2005-06-03 09:01  gb

	* level-1/l1-typesys.lisp: Some target-package/cross-compilation
	stuff.

2005-06-03 09:01  gb

	* level-1/l1-streams.lisp: Heap-ivector, other target-package
	fixes.

2005-06-03 09:00  gb

	* level-1/l1-readloop.lisp: Don't use (archaic) LDS macro.

2005-06-03 08:55  gb

	* level-1/l1-pathnames.lisp: Node size when getting command-line
	arguments.  Hide some pathname creation forms from COMPILE-FILE
	toplevel processing (may not be necessary now that
	cross-compilation binds *target-backend*.)

2005-06-03 08:53  gb

	* level-1/l1-numbers.lisp: LDB: look at target-package constants.

2005-06-03 08:52  gb

	* level-1/l1-lisp-threads.lisp: Lots of target-package changes.

2005-06-03 08:51  gb

	* level-1/l1-init.lisp: Use the right target-package symbols to
	initialize MOST-POSITIVE-FIXNUM and MOST-NEGATIVE-FIXNUM.

2005-06-03 08:50  gb

	* level-1/l1-format.lisp: Hide toplevel MAKE-ARRAY call (in
	*FORMAT-CHAR-TABLE* initial value); may not be necessary now that
	cross-compilation binds *target-backend*.

2005-06-03 08:49  gb

	* level-1/l1-files.lisp: Initialize *.fasl-pathname* correctly. 
	Hide toplevel macro call (in *default-pathname-defaults* initial
	value); may not be necessary now that cross-compilation binds
	*target-backend*.

2005-06-03 08:47  gb

	* level-1/l1-error-system.lisp: Remove a (meaningless) RESIDENT
	declaration.

2005-06-03 08:46  gb

	* level-1/l1-dcode.lisp: %STANDARD-INSTANCE-P uses
	TARGET-ARCH-CASE.

2005-06-03 08:45  gb

	* level-1/l1-clos-boot.lisp: Fix PPC64 ivector class names.  Lots
	of formatting changes.

2005-06-03 08:44  gb

	* level-1/l1-boot-2.lisp: More conditionalized pathnames.

2005-06-03 08:43  gb

	* level-1/l1-aprims.lisp: Some ppc64 changes + fixes.

2005-06-03 08:41  gb

	* level-0/PPC/ppc-utils.lisp: CLASS-OF, heap-walking fixes.

2005-06-03 08:40  gb

	* level-0/PPC/ppc-symbol.lisp: Don't bother conditionalizing pname
	hashes (32 bits is plenty, and we need to rehash after
	cross-compilation anyhow.)

2005-06-03 08:39  gb

	* level-0/PPC/ppc-pred.lisp: PPC64 EQUAL: recover NFN from FN after
	recursing.

2005-06-03 08:38  gb

	* level-0/PPC/ppc-numbers.lisp: Fake %NEXT-RANDOM-SEED for ppc64.

2005-06-03 08:37  gb

	* level-0/PPC/ppc-misc.lisp: Lots of fixes in 64-bit code.

2005-06-03 08:35  gb

	* level-0/PPC/ppc-float.lisp: Move some stuff used to do integer
	truncation elsewhere.

2005-06-03 08:32  gb

	* lib/compile-ccl.lisp: All PPC targets seem to have the same set
	of level-1 modules.  Compile target-xdev modules when
	cross-compiling.  Bind *TARGET-BACKEND* when cross-compiling, so
	that macros that use TARGET-ARCH-CASE or similar dtrt.

2005-06-03 08:30  gb

	* lib/nfcomp.lisp: Comment/formatting changes only.

2005-06-03 08:29  gb

	* lib/number-macros.lisp: Small bignums have two (32-bit) words on
	PPC64.

2005-06-03 08:28  gb

	* lib/pprint.lisp: No more *FRED-SPECIAL-INDENT-ALIST*.  (Might
	someday want something similar.)

2005-06-03 08:27  gb

	* lib/prepare-mcl-environment.lisp: Word size issues, target
	package.

2005-06-03 08:26  gb

	* xdump/: xfasload.lisp, xppcfasload.lisp: Multiple subdirs.

2005-06-03 08:24  gb

	* lisp-kernel/spentry.s: Lots of bug fixes, 64-bit changes.

2005-06-03 08:22  gb

	* lisp-kernel/ppc_print.c: Fix character printing (use
	charcode_shift), NIL printing on PPC64.

2005-06-03 08:21  gb

	* lisp-kernel/pmcl-kernel.c: Disable EGC on PPC64, until it works.

2005-06-03 08:20  gb

	* lisp-kernel/plbt.c: Print addresses with "l" qualifier.

2005-06-03 08:19  gb

	* lisp-kernel/lisp-exceptions.h: Quiet breakpoint trap, start to
	abstract 64-bit traps.

2005-06-03 08:18  gb

	* lisp-kernel/lisp-exceptions.c: Suppress warnings when mapping
	between TCRs and exception ports.  Recognize "quiet"
	lisp-breakpoints (no possibility of C-string messages, no changes
	to LR/PC, etc.)

2005-06-03 08:16  gb

	* lisp-kernel/lisp-debug.c: Start to learn about 64-bit traps, use
	%lx (etc) when printing 64-bit values.

2005-06-03 08:14  gb

	* library/lispequ.lisp: Comments, formatting changes.

2005-06-03 08:12  gb

	* level-0/PPC/: PPC32/.cvsignore, PPC32/l0-bignum-ppc32.lisp,
	PPC32/ppc32-bignum.lisp, PPC64/.cvsignore,
	PPC64/l0-bignum-ppc64.lisp, PPC64/ppc64-bignum.lisp: New file.

2005-06-03 08:11  gb

	* level-0/PPC/ppc-def.lisp: Lots of word-size and other ppc64
	changes.

2005-06-03 08:10  gb

	* level-0/PPC/ppc-array.lisp: Implement %extend-vector for ppc64.

2005-06-03 08:09  gb

	* level-0/nfasload.lisp: Lots-o-changes.

2005-06-03 08:08  gb

	* level-0/l0-utils.lisp: Use target package prefix.

2005-06-03 08:04  gb

	* level-0/l0-symbol.lisp: Very minor change in %ENSURE-SVAR.

2005-06-03 08:03  gb

	* level-0/l0-pred.lisp: %TYPE-OF for PPC64.

2005-06-03 08:02  gb

	* level-0/l0-numbers.lisp: target-package, some minor changes.

2005-06-03 08:01  gb

	* level-0/l0-init.lisp: Some cleanup/conditionalization of
	*FEATURES*.

2005-06-03 08:00  gb

	* level-0/l0-hash.lisp: Don't do unsafe fixnum arithmetic to
	"mixup" or "rotate" hash codes on ppc64.

2005-06-03 07:59  gb

	* level-0/l0-float.lisp: Fix a few typos.

2005-06-03 07:57  gb

	* level-0/: PPC/ppc-bignum.lisp, l0-bignum.lisp: Move functionality
	into target-specific subdirectory.

2005-06-03 07:52  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Lots of fixes, more
	consistent use of 64-bit rotates/shifts.

2005-06-03 07:50  gb

	* compiler/PPC/PPC64/ppc64-backend.lisp: Only require PPC64-VINSNS
	if we're the native target.  Change the Darwin architecture
	identifier.

2005-06-03 07:49  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: Only require PPC32-VINSNS
	if we're the native target.

2005-06-03 07:48  gb

	* compiler/PPC/ppc2.lisp: Some 64-bit fixes.

2005-06-03 07:47  gb

	* compiler/PPC/ppc-lapmacros.lisp: BKPT trap; a few fixes
	(including 64-bit INT-TO-FREG.)

2005-06-03 07:45  gb

	* compiler/PPC/ppc-asm.lisp: CLRLSLDI[.] had arguments inverted.

2005-06-03 07:45  gb

	* compiler/optimizers.lisp: SYMBOLP.

2005-06-03 07:43  gb

	* compiler/nx0.lisp: NX-BINARY-FIXNUM-OP-P is sensitive to target
	fixnum size.

2005-05-27 14:44  gb

	* level-1/version.lisp: 050527a.

2005-05-27 14:43  gb

	* lisp-kernel/: constants.h, constants.s: rcontext defined
	per-architecture.

2005-05-27 14:43  gb

	* lisp-kernel/: constants32.s, constants32.h: rcontext = r13.

2005-05-27 14:41  gb

	* lisp-kernel/: constants64.s, constants64.h: rcontext = r2.  Fix
	several typos/inconsistencies.

2005-05-27 14:40  gb

	* lisp-kernel/lisp-debug.c: Print wide registers (needs some
	tweaking.)

2005-05-27 14:38  gb

	* lisp-kernel/lisp-exceptions.c: Word-size fixes; preserve r13 when
	setting up pseudo-signal trampoline on ppc64.

2005-05-27 14:37  gb

	* lisp-kernel/lisp-exceptions.h: Define ALLOCPTR_TRAP for PPC64.

2005-05-27 14:36  gb

	* lisp-kernel/m4macros.m4: Use .machine directive in _beginfile. 
	Define stack-frame-type equates.

2005-05-27 14:34  gb

	* lisp-kernel/macros.s: header_length looks at all of the bits, as
	does extract_unsigned_byte_bits_.

2005-05-27 14:33  gb

	* lisp-kernel/plbt.c: Use dlsym() on Darwinppc64; print wide
	addresses on ppc64.

2005-05-27 14:32  gb

	* lisp-kernel/pmcl-kernel.c: Remap the subprims jump table on
	Darwinppc64

2005-05-27 14:31  gb

	* lisp-kernel/ppc_print.c: Print "natural-sized" integers.

2005-05-27 14:23  gb

	* lisp-kernel/spentry.s: Lots of word-size fixes, flesh out
	misc-set, deal with Tiger ld64/as64 alignment crap.  (Filed a bug.)

2005-05-27 14:22  gb

	* lisp-kernel/spjump.s: Add, export labels, so that we can work
	around Tiger ld64 lossage.

2005-05-27 14:21  gb

	* lisp-kernel/subprims.s: Use lwz to load each half of fp
	conversion constant.  (Hmmm.  May need another constant for 64-bit
	conversions.)

2005-05-27 14:19  gb

	* level-0/: l0-aprims.lisp, l0-array.lisp, l0-cfm-support.lisp,
	l0-def.lisp, l0-hash.lisp, l0-misc.lisp, l0-numbers.lisp,
	l0-pred.lisp, l0-symbol.lisp, l0-utils.lisp, nfasload.lisp,
	PPC/ppc-array.lisp, PPC/ppc-def.lisp, PPC/ppc-float.lisp,
	PPC/ppc-io.lisp, PPC/ppc-misc.lisp, PPC/ppc-numbers.lisp,
	PPC/ppc-pred.lisp, PPC/ppc-symbol.lisp, PPC/ppc-utils.lisp: Lots of
	word-size/tagging conditionalization.

2005-05-27 14:18  gb

	* level-1/ppc-trap-support.lisp: PPC-LAP-WORD (this version, at
	least ...) accounts for code-vector prefix.

2005-05-27 14:17  gb

	* level-1/: l1-boot-2.lisp, level-1.lisp: Load 64-bit fasls.

2005-05-27 14:16  gb

	* lib/nfcomp.lisp: Fix constant handling, slightly.

2005-05-27 14:16  gb

	* xdump/xppcfasload.lisp: Handle code-vectors more portably.

2005-05-27 14:15  gb

	* xdump/xfasload.lisp: A few word-size fixes; show addresses of
	cold-load functions, for debugging.

2005-05-27 14:14  gb

	* lisp-kernel/darwin64/Makefile: Give up (for the time being) on
	the notion of getting Apple's ld64 to do anything useful.

2005-05-27 14:12  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Bugs.

2005-05-27 14:11  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: rcontext = r2.  Not TCR bias;
	no low words in TCR def.  Fix kernel-global, nrs-offset.

2005-05-27 14:10  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: SCALE-NODE-MISC-OFFSET.

2005-05-27 14:09  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: rcontext = r13 for ppc32.

2005-05-27 14:08  gb

	* compiler/PPC/ppc2.lisp: fix lots of word-size assumptions in
	stack-unwinding, lambda-list processing.

2005-05-27 14:07  gb

	* compiler/PPC/ppc-lapmacros.lisp: rcontext is target-dependent fix
	int-to-freg for ppc64.

2005-05-27 14:05  gb

	* compiler/PPC/ppc-arch.lisp: r2, r16: usage is target-dependent.
	(Need to tell disassembler about this.)

2005-05-24 00:04  gb

	* lisp-kernel/linux/elf32ppclinux.x: Move image up a page.

2005-05-24 00:03  gb

	* level-1/l1-numbers.lisp: Fix botched #+ conditionalization.

2005-05-24 00:01  gb

	* lib/nfcomp.lisp, xdump/faslenv.lisp: Increment FASL version.

2005-05-24 00:00  gb

	* lisp-kernel/spjump.s: Don't pad jump table by extra page; revert
	to pc-relative branches.

2005-05-24 00:00  gb

	* lisp-kernel/pmcl-kernel.c: Don't copy spjump table anymore.

2005-05-23 23:59  gb

	* lisp-kernel/darwin/Makefile: Adjust image start address.

2005-05-23 23:36  gb

	* level-1/version.lisp: New binaries soon.

2005-05-23 23:29  gb

	* xdump/: heap-image.lisp, xfasload.lisp, xppcfasload.lisp: 64-bit
	xloader, cross-xloader.  New image header stuff for PPC64.

2005-05-23 23:28  gb

	* lisp-kernel/darwin64/Makefile: Mach Header too far away from old
	spjump address, so we'll have to move the spjump table.

2005-05-23 23:28  gb

	* lisp-kernel/pmcl-kernel.c: Duplicate the subprims jump table
	(bootstrapping kludge.)
	
	Observe word size when vpushing initial function.

2005-05-23 23:26  gb

	* lisp-kernel/macros.s: Use STRU when allocating TSP frames.

2005-05-23 23:25  gb

	* lisp-kernel/spentry.s: Fix bignum boxing for __ifdef([PPC64])
	case.

2005-05-23 23:24  gb

	* lisp-kernel/spjump.s: Do absolute jumps, to make relocation of
	the jump table itself simpler.

2005-05-23 23:24  gb

	* lisp-kernel/lisp_globals.h: Remove some very old stuff.

2005-05-23 23:23  gb

	* lisp-kernel/lisp-exceptions.c: Fix at least one Mach
	exception-handling case.

2005-05-23 23:22  gb

	* lisp-kernel/image.h: Allow loading 64-bit images.

2005-05-23 23:21  gb

	* lisp-kernel/image.c: Load PPC64 images.

2005-05-23 23:21  gb

	* lisp-kernel/constants64.s: Fix t_offset def.	Align TCR fields
	correctly.

2005-05-23 23:20  gb

	* lisp-kernel/area.h: area_codes are native fixnums.

2005-05-23 23:20  gb

	* lib/numbers.lisp: Call non-destructive single-float stuff on
	ppc64.

2005-05-23 23:19  gb

	* lib/nfcomp.lisp: Fix compile-time compilation (env/function name
	screwup).  Fasdump bignums using new fasl-op.

2005-05-23 23:17  gb

	* lib/backtrace.lisp: FIND-LOCAL-NAME: fix some incorrect
	stack-frame layout assumptions.

2005-05-23 23:15  gb

	* level-0/: l0-array.lisp, l0-float.lisp, l0-numbers.lisp,
	l0-pred.lisp, PPC/ppc-float.lisp, PPC/ppc-hash.lisp,
	PPC/ppc-misc.lisp, PPC/ppc-numbers.lisp, PPC/ppc-pred.lisp,
	PPC/ppc-symbol.lisp: Lots of #+ppc64 bug fixes and
	conditionalization.

2005-05-23 23:14  gb

	* level-1/l1-numbers.lisp: More non-destuctive short/single-float
	stuff.

2005-05-23 23:14  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: LOAD-DOUBLE-FLOAT-CONSTANT
	in 2 32-bit halves.

2005-05-23 23:13  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Double-float -cell indices.

2005-05-23 23:12  gb

	* compiler/PPC/ppc2.lisp: Renamed syscall stuff.

2005-05-23 23:12  gb

	* compiler/PPC/ppc-lapmacros.lisp: SINGLE-FLOAT-CONVERT: use TCR.
	prefix.

2005-05-23 23:11  gb

	* compiler/subprims.lisp: Subprims jump table moved from 0x4000 to
	0x5000 (at the moment, it's both places.)

2005-05-23 23:10  gb

	* compiler/nxenv.lisp: Rename syscall operators.

2005-05-23 23:10  gb

	* compiler/nx1.lisp: Use (new, renamed) POWEROPEN-SYSCALL for both
	PPC64 platforms.

2005-05-23 23:08  gb

	* compiler/arch.lisp: Define more error/UUO codes.

2005-05-20 07:38  gb

	* level-1/version.lisp: 050520b.

2005-05-20 07:38  gb

	* level-0/l0-io.lisp, level-1/l1-sockets.lisp,
	level-1/l1-streams.lisp, level-1/linux-files.lisp,
	lib/foreign-types.lisp, library/darwin-syscalls.lisp,
	library/linux-syscalls.lisp, library/syscall.lisp: System calls
	defined in OS-specific hash tables, not in the FTD.  System call
	indices are in the "SYSCALLS" package, not "OS".  (These changes
	make it a little easier to cross-compile between different
	architectures on the same OS, and perhaps a little more awkward to
	cross-compile between OSes.)

2005-05-20 04:18  gb

	* lib/macros.lisp: TARGET-OS-CASE.

2005-05-20 03:26  gb

	* level-1/l1-aprims.lisp: OS is now a nickname for the
	platform-specific package.
	
	Remove %COERCE-TO-UVECTOR. Whatever it was ...

2005-05-20 03:23  gb

	* level-1/l1-clos-boot.lisp: Fix typos in code which initializes
	ppc64 class table.

2005-05-20 03:22  gb

	* level-1/l1-numbers.lisp: Avoid "consing"
	single-floats/destructive operations on single-floats on PPC64.

2005-05-20 03:21  gb

	* level-1/l1-pathnames.lisp: setup CCL pathname translations for
	64-bit fasls.

2005-05-20 03:20  gb

	* level-1/l1-sockets.lisp: htonl, ntohs, etc. may not be defined in
	Tiger header files (and are no-ops on big-endian machines, anyway.)
	 Use lisp macros to remind ourselves that there may be byte-order
	issues here, someday.

2005-05-20 03:19  gb

	* level-1/l1-streams.lisp: Conditionalize MAKE-HEAP-IVECTOR.

2005-05-20 03:18  gb

	* level-1/version.lisp: 050520a.

2005-05-20 03:17  gb

	* lib/compile-ccl.lisp: CROSS-COMPILE-CCl.  A lot of the stuff in
	this file is way too complicated (left over from 68k->PPC MCL
	bootstrapping a long time ago); there were and may still be some
	duplicate function definitions and other nonsense here.

2005-05-20 03:15  gb

	* lib/db-io.lisp: Allow "the wrong target" to open .cdb files (as
	needs to be done during cross-compilation.)  Need a better
	solution/scheme here, to prevent this from happening by accident.

2005-05-20 03:13  gb

	* lib/foreign-types.lisp: Don't use the :PRINT-OBJECT DEFSTRUCT
	option (just define a couple of methods.)

2005-05-20 03:12  gb

	* lib/nfcomp.lisp: Some cross-compilation infrastructure.  Careful
	about references to 64-bit array types when cross-compiling.

2005-05-20 03:10  gb

	* lib/numbers.lisp: Avoid using %MAKE-SFLOAT/destructive
	single-float operations on ppc64.

2005-05-20 03:09  gb

	* lib/sequences.lisp: Fix #+ppc64-target typos in
	SIMPLE-1D-ARRAY-SUBSEQ.

2005-05-20 03:08  gb

	* library/parse-ffi.lisp: Make the target argument &optional, not
	&key.  Install the target backend while we're parsing, so that .cdb
	files will have the right signature even if they're cross-compiled.

2005-05-20 03:03  gb

	* library/syscall.lisp: Don't map arg/result types to
	representation types here (now happens in compiler frontend).

2005-05-20 02:59  gb

	* level-0/l0-float.lisp: FSQRT: do the single-float case
	non-destructively on PPC64.

2005-05-20 02:58  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: u32-shift-* ->
	natural-shift-*, and some other fixes...

2005-05-20 02:57  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: u32-shift-* ->
	natural-shift-*.

2005-05-20 02:56  gb

	* compiler/optimizers.lisp: listp: don't expand into references to
	the gensym on ppc64.

2005-05-20 02:55  gb

	* level-0/.cvsignore, level-0/PPC/.cvsignore, library/.cvsignore,
	tools/.cvsignore: Ignore more kinds of fasl files.

2005-05-20 02:49  gb

	* bindarwin/.cvsignore, .cvsignore, l1-dfsls/.cvsignore: Ignore
	more kinds of fasl files.

2005-05-20 02:47  gb

	* compiler/nx1.lisp: Map syscall arg/result types to representation
	types here.

2005-05-19 02:02  gb

	* lib/compile-ccl.lisp: Compiler backend stuff.

2005-05-19 02:02  gb

	* lib/foreign-types.lisp: Record types passed by address on Linux
	(and any other sane ABI.) Integer encoding is in natural-sized
	words (32/64) when ABI is not sane.

2005-05-19 02:00  gb

	* library/darwin-syscalls.lisp: A few things (at least a few of
	those that we know about) take/return :LONG or :UNSIGNED-LONG.

2005-05-19 01:59  gb

	* library/syscall.lisp: Pass args/results through
	FOREIGN-TYPE-TO-REPRESENTATION-TYPE (to handle things like :LONG,
	etc.)

2005-05-19 01:58  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Fix UNBOX-S32.

2005-05-19 01:58  gb

	* compiler/PPC/ppc2.lisp: :signed/unsigned-HALFword.

2005-05-18 23:35  gb

	* compiler/nx.lisp: Remove FORMAT call.

2005-05-18 23:17  gb

	* compiler/PPC/ppc2.lisp: Fix parenthesization in
	PPC2-POWEROPEN-FOREIGN-ARGS.

2005-05-18 23:10  gb

	* darwin-headers64/libc/C/populate.sh: Don't warn about tokens
	after #endif.  (Don't know how to suppress warnings about tokens
	after #include <foo>.)
	
	Don't pre-include float.h in limits.h

2005-05-18 23:07  gb

	* compiler/PPC/ppc2.lisp: ppc64 changes in poweropen-ffi-arglist
	stuff.

2005-05-18 23:01  gb

	* compiler/nx1.lisp: Pretend that :darwinppc64/:linuxppc64 targets
	follow PowerOpen ABI, which is kind of half-right, at least.

2005-05-18 23:00  gb

	* compiler/nx.lisp: XCOMPILE-LAMBDA binds target-ftd.

2005-05-18 22:59  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Fix eep.address.

2005-05-18 22:56  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: No more
	PPC64::ONE-DIGIT-BIGNUM-HEADER; fix a few things that thought that
	there was.

2005-05-18 22:55  gb

	* compiler/PPC/ppc2.lisp: New PPC2-UNBOXED-INTEGER-ARG-TO-REG.

2005-05-18 20:07  gb

	* lib/db-io.lisp: CDB-OPEN creates a CDB structure (which may have
	a null FID); %CDB-GET does nothing if the FID is null.	(This is
	intended to avoid repeated attempts to open a missing .cdb file, as
	when populating an interface directory for the first time.)

2005-05-18 20:04  gb

	* library/parse-ffi.lisp: Handle 128-bit integers here.  (Well,
	they aren't really handled anywhere, but we should at least
	recognize the data types.)

2005-05-18 19:05  gb

	* compiler/PPC/ppc2.lisp: Fix missing close-paren.

2005-05-18 19:01  gb

	* lisp-kernel/lisp-exceptions.h: a 64-bit opcode or two.

2005-05-18 19:00  gb

	* lisp-kernel/constants64.s: Bignum header constants.

2005-05-18 19:00  gb

	* level-0/PPC/ppc-array.lisp: %init-misc for PPC64.

2005-05-18 18:59  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: fix copy/past bug in
	box-u8.

2005-05-18 18:59  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: 2, 3 digit bignum headers are
	interesting; 1 (32-bit) digit headers don't exist.

2005-05-18 18:57  gb

	* compiler/PPC/ppc2.lisp: a bit more ppc64 conditionaliztion. 
	(This is probably pretty close to complete - modulo 64-bit ivectors
	- but probably pretty buggy.)

2005-05-18 18:55  gb

	* compiler/PPC/ppc-lapmacros.lisp: extract-unsigned-byte-bits. for
	PPC64.

2005-05-18 00:58  gb

	* lib/ccl-export-syms.lisp, level-1/l1-utils.lisp: Remove some more
	old/unreferenced stuff.

2005-05-18 00:58  gb

	* level-1/version.lisp: 050518a, since it's reasonable to assume
	that there will be more than 1-per-day.

2005-05-18 00:48  gb

	* xdump/xsym.lisp: no longer 1994

2005-05-18 00:44  gb

	* level-1/l1-utils.lisp: Lose some more old stuff.

2005-05-18 00:38  gb

	* lisp-kernel/spentry.s: Kinder, gentler .SPgetxlong (u32/s32
	only.)

2005-05-18 00:38  gb

	* library/lispequ.lisp: Remove some unused foreign struct
	definitions; make PTASKSTATE an istruct.

2005-05-18 00:37  gb

	* lib/foreign-types.lisp: All (lisp-level) foreign structs defined
	per-ftd.

2005-05-18 00:37  gb

	* lib/describe.lisp: Don't try to describe exception frames ...

2005-05-18 00:37  gb

	* lib/ccl-export-syms.lisp: Export STREAM-DEVICE; don't export some
	old MCL stuff, %PUT-* functions.

2005-05-18 00:35  gb

	* lib/db-io.lisp: Move foreign struct definitions elsewhere.

2005-05-18 00:34  gb

	* lib/level-2.lisp: Don't eval-redef %put-* functions.

2005-05-18 00:34  gb

	* level-1/l1-lisp-threads.lisp: Don't mess with stack overflow
	limits on new stacks.

2005-05-18 00:33  gb

	* level-1/l1-events.lisp: PTASKSTATE is now an istruct.

2005-05-18 00:33  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	New memory access stuff.

2005-05-18 00:32  gb

	* compiler/PPC/ppc-disassemble.lisp: Recognize LA to TSP.

2005-05-18 00:32  gb

	* compiler/: nx1.lisp, PPC/ppc2.lisp: Drop old (undocumented,
	problematic) %PUT-* memory update functions.  Try to handle some
	64-bit memory reference/assignments, make encoding a little more
	sane.

2005-05-18 00:30  gb

	* compiler/nx.lisp: Enable vinsn debugging in XCOMPILE-LAMBDA.

2005-05-18 00:30  gb

	* compiler/backend.lisp: Recognize :SIGNED-NATURAL alias, as well.

2005-05-17 09:20  gb

	* library/solaris-records.lisp: old old file

2005-05-17 08:43  gb

	* library/parse-ffi.lisp: change target ftd arg handling

2005-05-17 07:22  gb

	* lib/foreign-types.lisp: Arrgh.

2005-05-17 07:18  gb

	* darwin-headers64/libc/: .cvsignore, C/.cvsignore: new files.

2005-05-17 07:16  gb

	* darwin-headers64/libc/C/populate.sh: new file; generates some
	warnings.

2005-05-17 07:12  gb

	* headers64/libc/: C/.cvsignore, .cvsignore: new files.

2005-05-17 07:11  gb

	* headers64/libc/C/populate.sh: New file; use Fedora Core 4 test 3
	headers.

2005-05-17 07:10  gb

	* compiler/PPC/: PPC32/ppc32-backend.lisp,
	PPC64/ppc64-backend.lisp: make & install foreign type data for
	non-native backends.

2005-05-17 07:09  gb

	* lib/foreign-types.lisp: Straighten out :void type identity.

2005-05-17 05:05  gb

	* lib/db-io.lisp: Pass the ftd around, mostly so that we can
	determine the (ftd-specific/ target-specific) size of a pointer.

2005-05-17 04:44  gb

	* lib/foreign-types.lisp: fix linux typo.

2005-05-17 04:44  gb

	* level-1/version.lisp: um, 050517b.

2005-05-17 04:32  gb

	* lib/foreign-types.lisp: Get GETF arg order right.  Set
	long/pointer type sizes based on :bits-per-word.

2005-05-17 04:32  gb

	* lib/db-io.lisp, library/parse-ffi.lisp: Get GETF arg order right
	...

2005-05-17 03:48  gb

	* library/parse-ffi.lisp: ftd-attributes is now a plist; use its
	:bits-per-word key to determine bit size of primitive :long,
	:unsigned-long types.

2005-05-17 03:45  gb

	* lib/db-io.lisp: Pass the target ftd around a bit more, but that's
	probably hopeless.  ftd-attributes is now a plist.

2005-05-17 03:44  gb

	* lib/foreign-types.lisp: Conditionalize more; pass the target ftd
	around a bit more, but that's probably hopeless.  Type translators
	are ftd-specific after all; basic types get installed per-ftd. 
	ftd-attributes is now a plist.

2005-05-17 01:32  gb

	* level-1/version.lisp: Bump  version.

2005-05-17 01:31  gb

	* xdump/faslenv.lisp, lib/nfcomp.lisp: Bump fasl version.

2005-05-17 01:04  gb

	* lib/foreign-types.lisp: Lose ftype-info/ordinal stuff.  (Causes
	bootstrapping problems, as does its removal.)
	
	Primitive types (translators) are global, not per-ftd.

2005-05-17 01:02  gb

	* level-1/l1-io.lisp: WRITE-A-MACPTR: no ftype info.

2005-05-16 22:29  gb

	* lisp-kernel/spentry.s: fix typos.

2005-05-16 22:10  gb

	* lisp-kernel/spentry.s: Define a lot of PPC64 stuff.

2005-05-16 22:10  gb

	* lisp-kernel/constants64.s: Migrate builtin_function indices,
	fpscr bits to constants.s.  Add lowtag defs.  Fix double-float
	struct.

2005-05-16 22:09  gb

	* lisp-kernel/constants32.s: Migrate builtin_function indices,
	fpscr bits to constants.s.

2005-05-16 22:09  gb

	* lisp-kernel/constants.s: Migrate builtin_function indices, fpscr
	bits here from arch-specific files.

2005-05-16 22:08  gb

	* lisp-kernel/pmcl-kernel.c: Work around lack of
	<asm-ppc64/cputable.h>

2005-05-16 22:07  gb

	* lisp-kernel/macros.s: extract_lowtag for PPC64.

2005-05-16 22:07  gb

	* lisp-kernel/: errors.s, lisp-errors.h: Add
	error_object_not_unsigned_byte_56.

2005-05-16 22:03  gb

	* lib/foreign-types.lisp: Target packages, interface dirs.

2005-05-16 22:03  gb

	* lib/db-io.lisp: Don't garble error messages when checking
	trailer.

2005-05-16 22:02  gb

	* level-1/l1-aprims.lisp: Rename OS package.

2005-05-16 22:02  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	Try to distinguish between referencing fullwords and "natural"
	words in memory.

2005-05-16 22:02  gb

	* compiler/PPC/ppc2.lisp: Don't dereference pointers more than once
	(old %HGET stuff.) Try to distinguish between referencing fullwords
	and "natural" words in memory.

2005-05-16 22:00  gb

	* compiler/PPC/ppc-disassemble.lisp: Recognize a few more
	operations.

2005-05-16 21:59  gb

	* compiler/nx1.lisp: %SET-SINGLE-FLOAT is ppc32-specific.  Don't
	dereference pointers more than once (old %HGET stuff.)

2005-05-15 05:29  gb

	* level-1/version.lisp: Bump; new binaries soon.

2005-05-15 05:29  gb

	* compiler/nx.lisp, compiler/nx1.lisp, compiler/PPC/ppc2.lisp,
	lib/nfcomp.lisp: Lose old, obsolet LFUN-MAKER argument.  May need
	to use XCOMPILE-CCL to bootstrap.

2005-05-15 01:18  gb

	* examples/objc-clos.lisp: Shift in the right direction when
	converting bit- to byte-offsets.

2005-05-15 01:18  gb

	* lib/nfcomp.lisp: Default to *target-backend* (need to re-think
	some of this), use new (more specialized) fasl ops.

2005-05-15 01:16  gb

	* xdump/xfasload.lisp: XLOAD-DNODE-ALIGN: always account for
	header.

2005-05-15 01:15  gb

	* level-0/PPC/ppc-def.lisp: Change an STW to an STR.

2005-05-15 01:15  gb

	* level-0/l0-pred.lisp: A few target-package changes, comments,
	indentation.

2005-05-15 01:14  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp: Add
	vector/array headers to target-uvector alist.

2005-05-15 00:39  gb

	* level-0/nfasload.lisp: Recognize new fasl operators (specialized
	uvector/array types.)

2005-05-15 00:38  gb

	* xdump/: xfasload.lisp, xppcfasload.lisp: More fasl operators, for
	specialized array types.  Remove some (very) old code/concepts.

2005-05-15 00:38  gb

	* xdump/faslenv.lisp: More fasl operators, for specialized array
	types.

2005-05-14 17:18  gb

	* xdump/xsparcfasload.lisp: very old, irrelevant

2005-05-13 14:50  gb

	* lisp-kernel/spentry.s: Fix typo in makeu64.

2005-05-13 04:21  gb

	* compiler/PPC/ppc2.lisp: U32/natural changes, start handling
	64-bit register copies.

2005-05-13 04:20  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: misc byte-count stuff.

2005-05-13 04:19  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: rename most u32 operations
	to "natural" ones.  Handle some of them, as well as some u64/s64
	boxing/unboxing operations.

2005-05-13 04:18  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: rename most u32 operations
	to "natural" ones.

2005-05-13 04:18  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Implement byte-count stuff.

2005-05-13 04:17  gb

	* compiler/nx1.lisp: u32/natural changes.

2005-05-13 04:16  gb

	* compiler/nx0.lisp: Recognize "natural" constants and operands, as
	well as U32 ones.

2005-05-13 04:15  gb

	* compiler/nxenv.lisp: Change most *u32* operator names to
	*natural*.

2005-05-13 04:14  gb

	* compiler/vinsn.lisp: FIXUP-VINSN-TEMPLATE: account for the
	possibility that some (target-specific) vinsn templates may be
	missing.

2005-05-13 04:13  gb

	* compiler/vreg.lisp: Note when vinsn parameters/results have modes
	:s64/:u64, to prevent the corresponding registers from being used
	as temps.

2005-05-13 04:12  gb

	* compiler/backend.lisp: Accept :NATURAL as an alias for an
	unsigned "natural width" (32/64-bit) integer.
	
	AVAILABLE-IMM-TEMP defaults mode to :NATURAL, as does the
	WITH-IMM-TARGET macro.

2005-05-13 04:10  gb

	* compiler/arch.lisp: Architecture-specific
	ARRAY-DATA-SIZE-FUNCTION.

2005-05-13 04:09  gb

	* examples/objc-runtime.lisp: Skip the library version checks (at
	least in theory, the only classes/foreign methods we believe in are
	those described by the interface files.)
	
	Make %MLIST-CONTAINING force canonicaliazation of class pointers
	when updating message signature tables.

2005-05-13 04:07  gb

	* examples/bridge.lisp: UPDATE-TYPE-SIGNATURES-FOR-METHOD
	optionally canonicalizes the class, so that references to
	user-defined classes in method descriptor tables get revived when a
	saved image is restarted.

2005-05-13 04:05  gb

	* level-0/PPC/ppc-def.lisp: %FIXNUM-REF-U32 -> %FIXNUM-REF-NATURAL,
	and other 32/64-bit changes.

2005-05-13 04:04  gb

	* level-1/: ppc-threads-utils.lisp, l1-lisp-threads.lisp:
	%FIXNUM-REF-U32 -> %FIXNUM-REF-NATURAL.

2005-05-13 04:04  gb

	* lisp-kernel/spentry.s: fix some 32/64-bit boxing stuff.

2005-05-13 04:02  gb

	* level-1/version.lisp: 050513.

2005-05-11 23:10  gb

	* lisp-kernel/subprims.s: save/load NVRs without using stmw/lmw
	(since there aren't 64-bit equivalents.) use new __ifdef mechanism
	(old mechanism interfered with source line number scheme.)

2005-05-11 23:10  gb

	* lisp-kernel/spentry.s: save/load NVRs without using stmw/lmw
	(since there aren't 64-bit equivalents.) use new __ifdef mechanism
	(old mechanism interfered with source line number scheme.) A little
	bit of __ifdef([PPC64]) stuff works.

2005-05-11 23:06  gb

	* lisp-kernel/macros.s: save/load NVRs without using stmw/lmw
	(since there aren't 64-bit equivalents.)

2005-05-11 23:05  gb

	* lisp-kernel/m4macros.m4: New __ifdef mechanism.

2005-05-11 23:04  gb

	* lisp-kernel/constants64.s: min_array_subtag, min_vector_subtag.

2005-05-11 23:04  gb

	* lisp-kernel/constants.s: Enumerate all NVR names.  Apple's
	assembler sucks.

2005-05-11 23:03  gb

	* lisp-kernel/: asmutils.s, imports.s: Use new __ifdef mechanism.

2005-05-11 23:03  gb

	* examples/objc-support.lisp: Provide a more ... descriptive
	description for lisp exceptions.

2005-05-11 23:02  gb

	* examples/objc-runtime.lisp: Declare a few more private classes,
	for document load/save.  Need a better long-term solution,
	obviously.

2005-05-11 23:01  gb

	* examples/cocoa-editor.lisp: Don't call CCL::DBG on duplicate
	Hemlock buffer names.
	
	Disable "smart insertion and deletion"; apparently, this has
	something to do with frameworks.
	
	Turn on backup files, which would be named "foo~.lisp".  Not sure
	how easy this is to change.

2005-05-11 22:59  gb

	* examples/bridge.lisp: Failures in OBJC-CLASS-OF are often
	spurious, but we really shouldn't be asking this question in a lot
	of cases.  When #+debug, try to print the object's class name, so
	that we can special-case it.

2005-05-11 22:14  gb

	* examples/bridge.lisp: Remove a DBG trap; don't TIME the call to
	import method type signatures.

2005-05-11 22:04  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Be more careful to
	distinguish between (ARRAY *) and (ARRAY T) cases.  Treat
	DOUBLE-FLOAT objects as if they consisted of 2 32-bit elements.

2005-05-11 22:04  gb

	* compiler/optimizers.lisp: Use TARGET-ARCH-CASE; try to simplify
	simple MAKE-ARRAY calls

2005-05-11 22:03  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Be more careful to
	distinguish between (ARRAY *) and (ARRAY T) cases.

2005-05-11 22:02  gb

	* level-0/l0-numbers.lisp: Don't use
	WITH-STACK-SHORT-FLOATS/destuctive sfloat operations on PPC64.

2005-05-11 22:01  gb

	* level-0/l0-float.lisp: Changes for immediate single/short floats
	on ppc64.

2005-05-11 22:00  gb

	* level-0/PPC/ppc-def.lisp: Remove a comment.

2005-05-11 22:00  gb

	* level-0/PPC/ppc-float.lisp: Add #\Newline at EOF.

2005-05-11 21:59  gb

	* level-1/l1-aprims.lisp: %PASCAL-FUNCTIONS% starts out a little
	bigger.

2005-05-11 21:58  gb

	* level-1/l1-callbacks.lisp: DELETE-PASCAL-FUNCTION, be a little
	more careful about assumptions that PFEs are named/named globally.

2005-05-11 21:57  gb

	* level-1/l1-utils.lisp: %MAKE-SIMPLE-ARRAY.

2005-05-11 21:57  gb

	* level-1/ppc-callback-support.lisp: Make shorter trampolines (use
	absolute branches.)

2005-05-11 21:56  gb

	* level-1/version.lisp: 050511.

2005-05-11 21:56  gb

	* lib/number-macros.lisp: Use TARGET-ARCH-CASE in most macros.

2005-05-11 21:55  gb

	* lib/numbers.lisp: Some non-destructive SINGLE/SHORT-FLOAT stuff
	for PPC64.

2005-05-11 21:54  gb

	* lib/sequences.lisp: Comment indentation.

2005-05-11 21:54  gb

	* lib/number-case-macro.lisp: Use architecture-specific
	NUMERIC-TYPE-NAME-TO-TYPECODE-FUNCTION.

2005-05-11 21:54  gb

	* compiler/arch.lisp: NUMERIC-TYPE-NAME-TO-TYPECODE-FUNCTION.

2005-05-10 20:47  gb

	* lib/format.lisp: Don't revert to standard float printer if MARKER
	argument provided, in FORMAT-EXP-AUX.

2005-05-10 13:16  gb

	* level-1/version.lisp: Bump.

2005-05-10 13:16  gb

	* level-0/l0-float.lisp: Use ! to indicate destructive operation in
	LOG-E.

2005-05-10 13:16  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Bring back (and
	comment-out) the old %ILSR-C vinsn, just in case (I had some
	problems reading float contants around the time that the previous
	change was made; I was messing with how shift operations were
	compiled at the time, and the problem may have been elsewhere. 
	Just in case.)

2005-05-10 12:45  gb

	* lisp-kernel/asmutils.s: conditionalize count_leading_zeros,
	conditional loads/stores.

2005-05-10 12:44  gb

	* lisp-kernel/: constants32.s, constants.s: New scheme for
	assembler kernel globals.

2005-05-10 12:43  gb

	* lisp-kernel/constants64.h: Move SUBTAG_CHARACTER.

2005-05-10 12:42  gb

	* lisp-kernel/constants64.s: Move SUBTAG_CHARACTER.  New scheme for
	assembler kernel globals.

2005-05-10 12:39  gb

	* lisp-kernel/macros.s: CLEAR_ALLOC_TAG: parenthesize operands.

2005-05-10 12:39  gb

	* lisp-kernel/lisp-exceptions.c: Typo.

2005-05-10 12:39  gb

	* level-0/nfasload.lisp: Colons.

2005-05-10 12:38  gb

	* level-0/l0-symbol.lisp: #+PPC64-target: special-case (SYMBOL-NAME
	NIL).

2005-05-10 12:37  gb

	* level-0/l0-numbers.lisp: LOGIOR X 0 is X, LOGIOR 0 Y is Y. 
	Sheesh.

2005-05-10 12:37  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: There were 2 (different)
	definitions of %ILSR-C; the second (which took effect) generated
	slightly worse code (for an operation that's rarely used.)

2005-05-10 12:35  gb

	* compiler/vinsn.lisp: Change source file indicator.

2005-05-10 12:34  gb

	* compiler/nx1.lisp: Parameterize LOGBITP a bit.

2005-05-10 12:34  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Lots of changes, mostly for
	the better ...

2005-05-10 12:33  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Target package-name,
	t-offset.  Lots of other changes, including reassigning
	SUBTAG-CHARACTER to make SUBTAG-SINGLE-FLOAT easier to identify.

2005-05-10 12:32  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Target package-name,
	t-offset.

2005-05-10 12:31  gb

	* compiler/PPC/ppc-lap.lisp: Support T as a (constant) operand.

2005-05-10 12:31  gb

	* compiler/PPC/ppc-disassemble.lisp: Conditionalize for ppc64.

2005-05-10 12:30  gb

	* compiler/optimizers.lisp: Conditionalize for ppc64, partly (but
	see MAKE-ARRAY).

2005-05-10 12:29  gb

	* compiler/nx.lisp: XCOMPILE-LAMBDA, to test cross-compiler.

2005-05-10 12:29  gb

	* compiler/arch.lisp: Package name, t-offset in target-arch struct.

2005-05-10 00:39  gb

	* lisp-kernel/bits.h: Parameterize, try to force a few more things
	to inline.

2005-05-10 00:39  gb

	* lisp-kernel/darwin64/Makefile: Link with -lmx.

2005-05-10 00:39  gb

	* level-1/l1-numbers.lisp: Add a non-destructive %SINGLE-FLOAT-LOG
	for PPC64.  (Assumes -lmx on Darwin64).

2005-05-10 00:37  gb

	* level-1/l1-init.lisp: Use target::most-positive/negative-fixnum. 
	Remove a few MCL-isms.

2005-05-10 00:36  gb

	* level-0/: l0-def.lisp, l0-float.lisp, l0-io.lisp, l0-pred.lisp,
	l0-utils.lisp, PPC/ppc-debug.lisp, PPC/ppc-float.lisp,
	PPC/ppc-hash.lisp, PPC/ppc-misc.lisp, PPC/ppc-numbers.lisp,
	PPC/ppc-pred.lisp, PPC/ppc-symbol.lisp: some more #+ppc64-target
	conditionalization; still more to be done (especially bignum
	stuff.)

2005-05-10 00:33  gb

	* level-0/: l0-clos.lisp, l0-dcode.lisp, l0-debug.lisp: remove
	empty files.  (Remember to remove old fasls before (XLOAD-LEVEL-0).

2005-05-10 00:32  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC64/ppc64-arch.lisp:
	NODE-SIZE.

2005-05-10 00:31  gb

	* compiler/PPC/ppc-lapmacros.lisp: interlocked loads/stores, some
	more shifts, interrupt-checking fixes.

2005-05-09 07:42  gb

	* level-0/PPC/: ppc-clos.lisp, ppc-utils.lisp: conditionalize for
	ppc64.

2005-05-09 07:41  gb

	* compiler/PPC/ppc-lapmacros.lisp: EXTRACT-LOWBYTE for ppc64.

2005-05-09 05:43  gb

	* level-0/PPC/ppc-array.lisp: Conditionalize some for ppc64; warn
	at compile time about missing ppc64 functions.

2005-05-09 05:30  gb

	* level-0/l0-utils.lisp: Remove some unused functions.

2005-05-09 05:29  gb

	* level-0/l0-cfm-support.lisp: TARGET package.

2005-05-09 05:29  gb

	* level-0/: l0-array.lisp, nfasload.lisp: Use CL arithmetic to
	create 32-bit integers ...

2005-05-09 05:28  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: lowtag constants.

2005-05-09 05:28  gb

	* compiler/PPC/ppc-lapmacros.lisp: TRLGEI, EXTRACT-LOWTAG.

2005-05-09 05:27  gb

	* level-1/l1-clos-boot.lisp: 64-bit vectors, *CLASS-TABLE* changes
	for #+ppc64-target.

2005-05-08 23:01  gb

	* level-0/l0-array.lisp: Start to conditionalize for
	#+ppc64-target; -mostly- involves changing PPC32 package prefix to
	TARGET (but some -real- differences.) 2 down, about 100 to go.

2005-05-08 23:01  gb

	* level-0/l0-aprims.lisp: Start to conditionalize for
	#+ppc64-target; -mostly- involves changing PPC32 package prefix to
	TARGET.

2005-05-08 22:59  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Define lowtag constants,
	min-{vector,array}-subtag values.

2005-05-08 21:14  gb

	* lisp-kernel/constants64.s, compiler/PPC/PPC64/ppc64-arch.lisp:
	Fix some tag definitions, add missing ratio/complex.

2005-05-08 21:14  gb

	* lisp-kernel/constants64.h: Fix some tag definitions, add missing
	ratio/complex, define tag_of_nil.

2005-05-08 21:12  gb

	* lisp-kernel/constants32.s: Define tag_of_nil, for lisp_globals
	parameterization.

2005-05-08 21:11  gb

	* lisp-kernel/constants.s: Parameterize lisp_globals struct origin
	stuff.

2005-05-08 06:25  gb

	* level-1/version.lisp: Bump; time for new binaries.

2005-05-08 06:24  gb

	* xdump/xfasload.lisp, level-0/nfasload.lisp: Remove old
	code-vector/svar loading cases.

2005-05-08 06:17  gb

	* lib/nfcomp.lisp: Remove old code-vector/svar dumping cases.

2005-05-08 05:59  gb

	* compiler/PPC/ppc-arch.lisp, compiler/PPC/PPC32/ppc32-arch.lisp,
	compiler/PPC/PPC64/ppc64-arch.lisp, level-0/l0-misc.lisp,
	level-0/l0-utils.lisp, level-0/nfasload.lisp,
	level-1/l1-lisp-threads.lisp, xdump/xfasload.lisp: AREA-
	enumeration constants are PPC-specific, not platform-specific. 
	(AREA. accessors -are- platform-specific).

2005-05-08 05:57  gb

	* lib/nfcomp.lisp: Use $fasl-svar, $fasl-codevector.

2005-05-08 05:10  gb

	* level-0/nfasload.lisp, xdump/faslenv.lisp, xdump/xfasload.lisp:
	Define (and use) $FASL-CODE-VECTOR, $FASL-SVAR.

2005-05-08 04:30  gb

	* xdump/xfasload.lisp: Remove obsolete function.

2005-05-08 04:20  gb

	* lib/nfcomp.lisp: FASL-DUMP-FUNCTION.

2005-05-08 04:19  gb

	* level-0/nfasload.lisp: Report file position of bad fasl opcode.

2005-05-08 03:56  gb

	* xdump/xfasload.lisp: Fix typo.

2005-05-08 03:51  gb

	* xdump/: xfasload.lisp, faslenv.lisp: Drop old operators; add
	$FASL-FUNCTION.

2005-05-08 03:46  gb

	* level-0/nfasload.lisp: Drop old operators; add $FASL-FUNCTION.

2005-05-08 03:30  gb

	* lib/nfcomp.lisp: Use new $fasl-vetab-alloc/count, not
	$fasl-etab-alloc/long.

2005-05-08 03:07  gb

	* lib/nfcomp.lisp, xdump/faslenv.lisp: Increment fasl version.

2005-05-08 02:52  gb

	* lib/nfcomp.lisp: FASL-DUMP-DISPATCH: don't forget to dump
	character constants, and use ETYPECASE to keep from quietly
	neglecting to dump other types in the future.
	
	(All of this is getting tricky to bootstrap; there will be new
	binaries soon.)

2005-05-08 01:17  gb

	* lib/nfcomp.lisp: Know (a bit) less about platform-dependent
	typecodes when dumping; still more work to be done here.

2005-05-08 01:16  gb

	* xdump/: faslenv.lisp, xfasload.lisp: Define (and implement)
	$FASL-SFLOAT.

2005-05-08 01:11  gb

	* level-0/PPC/ppc-float.lisp: DOUBLE-FLOAT-BITS,
	DOUBLE-FLOAT-FROM-BITS.

2005-05-08 01:09  gb

	* level-1/l1-utils.lisp: DEFINE-CONSTANT: report new, old value in
	CERROR message.

2005-05-08 01:08  gb

	* level-0/nfasload.lisp: $FASL-SFLOAT.

2005-05-08 01:07  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp, lisp-kernel/constants64.h,
	lisp-kernel/constants64.s: BIGNUM, DOUBLE-FLOAT have 32-bit
	elements on PPC64 (to ease bootstrapping.)

2005-05-07 23:52  gb

	* level-0/PPC/ppc-float.lisp: (host) support to get/set
	single-float bits.

2005-05-07 23:51  gb

	* lib/nfcomp.lisp: Use new (so far ...) operators.

2005-05-07 23:51  gb

	* xdump/xfasload.lisp: Add support for new (so far) operators.

2005-05-07 23:50  gb

	* xdump/faslenv.lisp: Rename $FASL-FLOAT to $FASL-DFLOAT.

2005-05-07 23:50  gb

	* level-0/nfasload.lisp: Ignore (ignored) extended-string flag in
	obsolete FASL-READSTR and equally obsolete callers.

2005-05-07 22:01  gb

	* lib/nfcomp.lisp: Remove (old, unused) extended-string stuff.

2005-05-07 21:46  gb

	* lib/nfcomp.lisp: FASL-OUT-COUNT, to encode arbitrary-sized
	UNSIGNED-BYTE values.

2005-05-07 21:45  gb

	* level-0/nfasload.lisp: implement some new fasl operators.

2005-05-07 21:45  gb

	* xdump/faslenv.lisp: Define some new fasl operators.

2005-05-07 17:54  gb

	* lib/: defstruct.lisp, defstruct-lds.lisp: use $DEFSTUCT-STRUCT,
	to simplify cross-compilation.

2005-05-07 17:36  gb

	* lib/defstruct-macros.lisp: define $DEFSTUCT-STRUCT, to simplify
	cross-compilation.

2005-05-07 17:34  gb

	* lib/macros.lisp: Provide a couple of doc strings.

2005-05-07 17:34  gb

	* lib/misc.lisp: Function (macro, special-operator) documentation
	associated with function object.

2005-05-07 17:28  gb

	* level-1/l1-aprims.lisp, lib/sequences.lisp: Don't use
	%VECT-SUBTYPE.

2005-05-07 17:28  gb

	* level-0/l0-misc.lisp: Associate documentation with the
	definition.

2005-05-07 17:27  gb

	* level-0/l0-array.lisp: Don't define %VECT-SUBTYPE, to remove
	temptation to use it.

2005-05-07 17:27  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: TRAP-UNLESS-CHARACTER,
	TRAP-UNLESS-CONS.

2005-05-07 17:26  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Use :struct to name structure
	type.

2005-05-07 17:26  gb

	* compiler/PPC/ppc2.lisp: Hide a few more ppc32 dependencies. 
	Still issues when native typecodes are involved (%gvector,
	%alloc-misc, etc.)

2005-05-07 17:24  gb

	* compiler/PPC/ppc-lapmacros.lisp: Remove doc string from IF lap
	macro.

2005-05-06 22:59  gb

	* compiler/PPC/ppc2.lisp: Typed-uvref/uvset operators accept
	keywords.

2005-05-06 22:59  gb

	* compiler/nx1.lisp: Use the new (keyword-based) typed-uvref/uvset
	operators.

2005-05-06 22:21  gb

	* compiler/PPC/ppc2.lisp: Remove some ppc32 package constants.

2005-05-06 22:15  gb

	* compiler/: arch.lisp, PPC/PPC32/ppc32-arch.lisp:
	ARRAY-TYPE-NAME-FROM-CTYPE-FUNCTION in arch struct, and PPC32
	implementation.

2005-05-06 19:54  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: SINGLE-FLOAT-BITS.

2005-05-06 19:54  gb

	* lib/level-2.lisp: Don't define %TYPED-MISC-REF, %TYPED-MISC-SET
	anymore.

2005-05-06 19:53  gb

	* level-0/l0-array.lisp, lib/sequences.lisp,
	compiler/optimizers.lisp: Don't use %TYPED-MISC-REF,
	%TYPED-MISC-SET anymore.

2005-05-06 18:17  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Fix typo.

2005-05-06 18:06  gb

	* lib/sequences.lisp: Change typecode name in TYPE-KEYWORD-CODE
	call, do the call at readtime, not runtime.

2005-05-06 18:05  gb

	* level-1/sysutils.lisp: TYPE-KEYWORD-CODE uses vector types from
	target.

2005-05-06 18:05  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Define vector type names. 
	Flesh out uvector type codes.

2005-05-06 18:04  gb

	* compiler/arch.lisp: Add vector type names (gvector,
	n-bit-ivector.)

2005-05-03 16:31  gb

	* lisp-kernel/gc.c: No need to zero_last_page() anymore.

2005-05-03 16:31  gb

	* lisp-kernel/gc.h: use HeapHighWaterMark to mark highest mapped
	address known to be zero-filled.

2005-05-03 16:30  gb

	* lisp-kernel/image.c: No memory protection anymore, so no need to
	zero_last_page().

2005-05-03 16:30  gb

	* lisp-kernel/lisp-debug.c: Add a missing #\Newline.

2005-05-03 16:29  gb

	* lisp-kernel/lisp-exceptions.c: New handling of heap resizing and
	segment allocation/zeroing.

2005-05-03 16:28  gb

	* lisp-kernel/pmcl-kernel.c: Turn the EGC on again; track
	HeapHighWaterMark.

2005-05-03 16:28  gb

	* lisp-kernel/thread_manager.c: Use allocate_tcr() to ... allocate
	TCR pointers, to ensure that a Mach port can be assigned the TCR's
	address as a "name".

2005-05-03 16:27  gb

	* xdump/xfasload.lisp: Support doc strings in level-0.

2005-05-03 16:26  gb

	* level-1/linux-files.lisp: Return another value from %STAT-VALUES.

2005-05-03 16:25  gb

	* level-1/l1-utils.lisp: MEMBER/ASSOC support, MACRO-FUNCTION moved
	to level-0 (to handle early doc strings.)

2005-05-03 16:25  gb

	* level-0/nfasload.lisp: Handle cold-load documentation.

2005-05-03 16:24  gb

	* level-0/l0-utils.lisp: Some MEMBER/ASSOC support here.

2005-05-03 16:24  gb

	* level-0/l0-misc.lisp: Change the wording in ROOM: it's not 1989
	anymore.

2005-05-03 16:23  gb

	* level-0/l0-def.lisp: Remove (this version of) SET-DOCUMENTATION,
	which might or might not have been overridden by another version
	...
	
	Define a SET-FUNCTION-INFO, which handles the case where a
	function's information is just a doc string.
	
	Move the definition of MACRO-FUNCTION here.

2005-05-01 17:53  gb

	* examples/rubix/blocks.lisp: Hamilton's fix in
	RENDER-FOR-SELECTION.

2005-04-29 03:35  gb

	* lib/nfcomp.lisp, xdump/faslenv.lisp: Increment FASL version.

2005-04-29 03:07  gb

	* lisp-kernel/spentry.s: Writes that may introduce
	intergenerational references should all be handled here; ensuring
	atomicity and handling locatives requires some support in
	pc_luser_xp().

2005-04-29 03:05  gb

	* lisp-kernel/spjump.s: New subprims replace some old ones.

2005-04-29 03:05  gb

	* lisp-kernel/pmcl-kernel.c: No more hardware EGC write barrier. 
	EGC off by default (for bootstrapping new write barrier.)

2005-04-29 03:03  gb

	* lisp-kernel/memprotect.h: No more hardware EGC write barrier.

2005-04-29 03:02  gb

	* lisp-kernel/macros.s: A little more 32/64 macrology; some support
	for bitvector operations.

2005-04-29 03:01  gb

	* lisp-kernel/lisptypes.h: No more pageentry type.

2005-04-29 03:01  gb

	* lisp-kernel/lisp_globals.h: New globals (REFBITS,
	OLDSPACE_DNODE_COUNT).

2005-04-29 03:00  gb

	* lisp-kernel/lisp-exceptions.c: No more protectin-based write
	barrier.  Some new pc-luser support to make software write barrier
	appear to be atomic (needs testing.)

2005-04-29 02:59  gb

	* lisp-kernel/gc.h: No more pagemap.

2005-04-29 02:59  gb

	* lisp-kernel/gc.c: New (software) EGC write barrier; drop support
	for the old one ...

2005-04-29 02:57  gb

	* lisp-kernel/: constants32.s, constants64.s: Move lisp-global
	definitions elsewhere; define some bitvector-related values.

2005-04-29 02:57  gb

	* lisp-kernel/constants32.h: Define t_value.

2005-04-29 02:56  gb

	* lisp-kernel/constants.s: Move lisp-global definitions here.

2005-04-29 02:54  gb

	* lisp-kernel/: bits.c, bits.h: Some word-size issues; still very
	32-bit-centric.

2005-04-29 02:53  gb

	* lisp-kernel/asmutils.s: Add atomic_ior.

2005-04-29 02:51  gb

	* level-1/version.lisp: Bump.

2005-04-29 02:51  gb

	* level-0/PPC/ppc-misc.lisp: %STORE-NODE-CONDITIONAL goes
	out-of-line, for EGC write barrier.
	
	%STORE-IMMEDIATE-CONDITIONAL skips that, when fixnums/immediates
	are known to be involved.

2005-04-29 02:50  gb

	* level-0/PPC/ppc-hash.lisp: %SET-HASH-TABLE-VECTOR-KEY goes out of
	line, to handle EGC write barrier.

2005-04-29 02:49  gb

	* level-0/l0-misc.lisp: Use %STORE-IMMEDIATE-CONDITIONAL when
	fixnums are involved.

2005-04-29 02:48  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Remove misc-set-node and
	vcell-set.

2005-04-29 02:48  gb

	* compiler/PPC/ppc2.lisp: lwi -> lri.  Do setq of closed-over
	vcells via .SPgvset, for EGC.

2005-04-29 02:46  gb

	* compiler/PPC/ppc-arch.lisp: Replace some obsolete globals with
	refbits and oldspace-dnode-count.

2005-04-29 02:45  gb

	* compiler/subprims.lisp: Replace something obsolete with
	.SPset-hash-key.

2005-04-26 11:02  gb

	* lisp-kernel/spentry.s: Make Darwin assembler happy.  (Well,
	happier than it ordinarily is.)

2005-04-26 11:01  gb

	* examples/objc-runtime.lisp: Declare NSConcreteData.

2005-04-26 10:59  gb

	* lisp-kernel/: spentry.s, spjump.s: SPstore_node_conditional.

2005-04-26 10:58  gb

	* level-0/PPC/ppc-misc.lisp: Remove (very) obsolete %BIND-SPECIAL.

2005-04-26 10:57  gb

	* compiler/PPC/ppc2.lisp: Do rplaca/rplacd (and variants), svset
	(and variants) out-of-line, for new write-barrier scheme.

2005-04-26 10:55  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: A few indentation changes.

2005-04-26 10:55  gb

	* compiler/subprims.lisp: Add .SPstore-node-conditional.

2005-04-26 04:57  gb

	* compiler/subprims.lisp: Updated.

2005-04-26 04:56  gb

	* lisp-kernel/pmcl-kernel.c: Disable EGC, initially.

2005-04-26 04:54  gb

	* lisp-kernel/: spentry.s, spjump.s: Start new write-barrier
	scheme.

2005-04-26 00:55  gb

	* examples/bridge.lisp: Partially implement SEND in terms of
	interface information.

2005-04-26 00:54  gb

	* examples/cocoa-editor.lisp: Avoid message arg type ambiguity.

2005-04-26 00:53  gb

	* examples/: cocoa-typeout.lisp, cocoa-listener.lisp: Declare SEND
	arg type.

2005-04-26 00:52  gb

	* examples/objc-clos.lisp: Handle foreign slots differently, since
	offset/width info is available from interfaces.

2005-04-26 00:52  gb

	* examples/objc-runtime.lisp: Derive class info from interfaces,
	not via introspection.

2005-04-26 00:51  gb

	* examples/objc-support.lisp: Don't references private slots or use
	SEND to send undeclared messages.

2005-04-26 00:50  gb

	* level-1/version.lisp: Bump.

2005-04-26 00:50  gb

	* lib/foreign-types.lisp: Start thinking about making some of this
	target-sensitive.  Pre-define :<BOOL> as an integer type.

2005-04-26 00:48  gb

	* library/parse-ffi.lisp, lib/db-io.lisp: Handle protocol methods,
	protocols in ObjC class decls.

2005-04-26 00:47  gb

	* library/splay-tree.lisp: Add MAP-SPLAY-TREE-KEYS-AND-VALUES.

2005-04-24 00:01  gb

	* lib/arrays-fry.lisp: Ignore fill-pointers when looking at array
	dimensions in RESULT-BIT-ARRAY.

2005-04-20 06:25  gb

	* lib/db-io.lisp: Write trailer on CDB files, check for it.

2005-04-20 06:25  gb

	* level-1/version.lisp: Bump, once again.

2005-04-20 06:24  gb

	* headers/gnome2/C/.cvsignore: New file.

2005-04-20 03:08  gb

	* lib/db-io.lisp: Prepend 2K of NULs to .CDB files, for backward
	compatibility (sort of).  Still more bootstrapping ...

2005-04-20 00:53  gb

	* lib/db-io.lisp, library/parse-ffi.lisp: Changes to how some
	things are encoded in .cdb files; field offsets and widths are now
	provided explicitly.  This will require new .cdb files and is a
	little hard to bootstrap ...

2005-04-20 00:50  gb

	* level-1/l1-reader.lisp: Bryan's change to allow potential numbers
	with package prefixes to be treated as symbols.

2005-04-20 00:49  gb

	* headers/libc/C/populate.sh: Updated, a bit.

2005-04-20 00:48  gb

	* headers/gnome/C/populate.sh: Assume new-style location for
	gnome.h

2005-04-20 00:47  gb

	* headers/: gl/.cvsignore, gnome/.cvsignore, gtk/.cvsignore,
	libc/.cvsignore: Ignore backup .cdb files.

2005-04-20 00:44  gb

	* headers/: gl/C/.cvsignore, gnome/C/.cvsignore, gnome2/.cvsignore,
	gnome2/C/populate.sh, gnustep/.cvsignore, gnustep/C/populate.sh,
	gtk/C/.cvsignore, gtk2/C/.cvsignore, gtk2/C/populate.sh,
	libc/C/.cvsignore, gnustep/C/.cvsignore, gtk2/.cvsignore: New file.

2005-04-18 00:48  gb

	* examples/bridge.lisp: Fix typo: "dictionaryWithObjectsAndKeys:".

2005-04-18 00:47  gb

	* lib/db-io.lisp, lib/foreign-types.lisp, library/parse-ffi.lisp:
	Support for ObjC class info, method info in interface files.

2005-04-18 00:46  gb

	* lib/ccl-export-syms.lisp: Export CURRENT-DIRECTORY; drop
	COMPILE-LOAD.

2005-04-18 00:44  gb

	* level-1/version.lisp: Bump, yet again.

2005-04-18 00:44  gb

	* level-1/linux-files.lisp: Implement CURRENT-DIRECTORY and (SETF
	CURRENT-DIRECTORY).

2005-04-18 00:44  gb

	* level-1/l1-readloop-lds.lisp: Some toplevel commands for
	getting/setting the current directory.

2005-04-18 00:43  gb

	* level-1/l1-typesys.lisp: %DEFTYPE clears the type cache.

2005-04-18 00:43  gb

	* level-1/l1-files.lisp: Remove COMPILE-LOAD, which doesn't offer
	much functionality beyond that offered by (compile ... :load t),
	does it ?

2005-04-18 00:41  gb

	* level-0/l0-error.lisp: Say "FASL", not "PFSL" in error messages.

2005-04-18 00:41  gb

	* darwin-headers/libc/C/populate.sh: Use more recent headers
	(current Panther headers.)

2005-04-18 00:40  gb

	* darwin-headers/gl/C/populate.sh: Process agl.h as well.

2005-04-18 00:38  gb

	* darwin-headers/: gl/C/.cvsignore, quicktime/C/.cvsignore,
	quicktime/C/populate.sh: New file.

2005-04-18 00:38  gb

	* darwin-headers/: carbon/.cvsignore, cocoa/.cvsignore,
	gl/.cvsignore, libc/.cvsignore: Ignore *.cdb-BAK as well.

2005-04-18 00:36  gb

	* darwin-headers/: carbon/C/.cvsignore, chud/.cvsignore,
	chud/C/.cvsignore, chud/C/populate.sh, cocoa/C/.cvsignore,
	libc/C/.cvsignore, quicktime/.cvsignore: New files.

2005-04-18 00:26  gb

	* compiler/optimizers.lisp: Handle the 2-argument case of
	case-sensitive character comparison functions.

2005-04-17 19:29  alex

	* examples/objc-clos.lisp: 
	
	edited %objc-domain-slots-vector to allocate slot vectors on demand
	for object instantiated outside of lisp (AppKit).

2005-04-17 19:27  alex

	* level-1/l1-callbacks.lisp: 
	
	added a trace flag to the callback table and extended
	%pascal-functions% to set a special variable *callback-trace-p*
	during execution.

2005-04-17 19:26  alex

	* lib/encapsulate.lisp: 
	
	extended the trace facility to support tracing of callbacks, a
	:backtrace argument and hook variables for the IDE

2005-04-17 19:25  alex

	* lib/macros.lisp: 
	
	Extended DEFINE-CALLBACK and DEFCALLBACK-BODY to support tracing.

2005-04-17 08:56  beer

	* examples/bridge.lisp: evised %PARSE-MESSAGE and
	CHECK-MESSAGE-ARG-COUNT to fix a bug with interpreting some
	variable-arity message sends

2005-04-15 06:23  gb

	* level-1/version.lisp: Bump.

2005-04-15 06:13  gb

	* lib/level-2.lisp: Fix EVAL-REDEF of %ALLOC-MISC.

2005-04-15 06:00  gb

	* lisp-kernel/: constants64.h, constants64.s: Define charcodeshift,
	ncharchodebits consistently with what ppc64-arch says.

2005-04-15 06:00  gb

	* lisp-kernel/darwin64/Makefile: Apparently, it isn't necessary to
	use the well-known -weak_references_mismatch argument when that has
	nothing to do with anything.  ld64 just keeps getting better and
	better!

2005-04-15 05:59  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: TRAP-UNLESS-MACPTR.  Do a
	few more 64-bit comparisons.

2005-04-15 05:57  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: TRAP-UNLESS-MACPTR.

2005-04-15 05:57  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Need a 1-word code-vector
	prefix here.

2005-04-15 05:56  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: No code-vector prefix here.

2005-04-15 05:56  gb

	* compiler/PPC/ppc2.lisp: Maybe emit a "prefix" on the code vector.
	 More PPC64 conditionalization.

2005-04-15 05:53  gb

	* compiler/PPC/ppc-lap.lisp: Maybe emit a "prefix" on the code
	vector.

2005-04-15 05:52  gb

	* compiler/PPC/ppc-disassemble.lisp: Skip over any code-vector
	prefix.  Start to conditionalize to make PPC64 disassembly better.

2005-04-15 05:51  gb

	* compiler/nx0.lisp: Define, use, NX1-TARGET-FIXNUMP.

2005-04-15 05:50  gb

	* compiler/arch.lisp: CODE-VECTOR-PREFIX, for PPC64 alignment.

2005-04-14 21:27  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: charcode-shift is 8;
	ncharcodebits is 8 (for now).

2005-04-14 21:26  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Actually bother to define
	LOAD-CHARACTER-CONSTANT.

2005-04-14 21:26  gb

	* compiler/vreg.lisp: :u64const, :s64const.

2005-04-14 21:20  gb

	* compiler/PPC/ppc2.lisp: LWI -> LRI, PPC2-LWI -> PPC2-LRI.

2005-04-14 21:20  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: LWI -> LRI.

2005-04-14 21:19  gb

	* compiler/PPC/ppc-lapmacros.lisp: Use TARGET-ARCH-CASE, no need
	for PPC-LAP-TARGET-ARCH-CASE.

2005-04-14 21:18  gb

	* lib/macros.lisp: TARGET-ARCH-CASE here.

2005-04-14 01:39  gb

	* compiler/backend.lisp: Finish bootstrapping backend changes.

2005-04-14 01:13  gb

	* compiler/: backend.lisp, PPC/PPC32/ppc32-backend.lisp,
	PPC/PPC64/ppc64-backend.lisp: Start to remove obsolete target
	slots.

2005-04-14 00:51  gb

	* lib/sequences.lisp: Fix typos, exposed by Bryan's fix to #+/#-
	readers.

2005-04-14 00:21  gb

	* level-1/version.lisp: Bump version.

2005-04-14 00:20  gb

	* examples/bridge.lisp: #\B in typestrings is :<BOOL>.	C arrays
	are always passed by reference.

2005-04-14 00:19  gb

	* compiler/PPC/: PPC32/ppc32-vinsns.lisp, PPC64/ppc64-vinsns.lisp:
	Factor out some typecode-specific stuff.

2005-04-14 00:19  gb

	* compiler/PPC/: PPC32/ppc32-arch.lisp, PPC32/ppc32-backend.lisp,
	PPC64/ppc64-arch.lisp, PPC64/ppc64-backend.lisp: Backend/arch
	parameterization.

2005-04-14 00:18  gb

	* compiler/PPC/ppc2.lisp: Use target-specific parameters from 
	structure, not individually.  2d-aref/aset acode changes.

2005-04-14 00:18  gb

	* compiler/PPC/: ppc-lap.lisp, ppc-lapmacros.lisp: Use
	target-specific parameters from  structure, not individually.

2005-04-14 00:17  gb

	* compiler/PPC/ppc-arch.lisp: Require "ARCH" at load-time.

2005-04-14 00:16  gb

	* compiler/nx1.lisp: Try to keep target tags out of acode (for 2d
	array access only, so far.)

2005-04-14 00:16  gb

	* compiler/backend.lisp: Add a "target-arch" slot to backend
	structure (this should allow several other slots to be removed.)

2005-04-14 00:15  gb

	* compiler/arch.lisp: Start moving parameters from "backend"
	structure to new "target-arch" structure.

2005-04-13 12:23  bryan

	* lib/nfcomp.lisp: "file not found" during compile-file should be a
	file-error.

2005-04-12 22:57  bryan

	* level-1/l1-reader.lisp: per 2.4.8.17, "#+(or) #+(or) nil nil t"
	should probably read as T

2005-04-01 03:23  gb

	* darwin-headers/cocoa/C/populate.sh: No they weren't: parse
	PreferencePanes.h

2005-04-01 00:15  gb

	* compiler/PPC/ppc2.lisp: Minor target package changes.

2005-03-29 22:53  gb

	* compiler/: backend.lisp, PPC/PPC32/ppc32-backend.lisp: Start to
	add target-uvector-subtags to backend.

2005-03-29 07:06  gb

	* lisp-kernel/linux64/Makefile: First cut at a Makefile.

2005-03-29 07:05  gb

	* lisp-kernel/linux64/elf64ppc.x: Linker script for linux64; force
	kernel into low memory.

2005-03-29 07:05  gb

	* lisp-kernel/pmcl-kernel.c: May be grief including
	#<asm/cputable.h> on linux64.  Note that fact.

2005-03-29 07:04  gb

	* lisp-kernel/macros.s: extract_lowbyte uses clrlri.

2005-03-29 07:04  gb

	* lisp-kernel/lisp-exceptions.c: Don't save/restore PT_MQ; this had
	something to do with saving/restoring Altivec registers, a long
	time ago.

2005-03-29 07:03  gb

	* lisp-kernel/imports.s: Don't import __trampoline_setup on
	linux64.

2005-03-29 07:02  gb

	* lisp-kernel/plbt.c: No eabi_c_frame on linux64.

2005-03-28 04:34  gb

	* darwin-headers/cocoa/C/populate.sh: The actual cocoa interfaces
	(from darwin-interfaces-040505.tar.gz) were built from this, not
	from what's been in CVS.

2005-03-28 04:33  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp:
	TRAP-UNLESS-{SINGLE,DOUBLE}-FLOAT, refer to the least significant
	bit as "lowbit", not as "bit31".  A few other things implemented; a
	lot to go.

2005-03-28 04:31  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp:
	TRAP-UNLESS-{SINGLE,DOUBLE}-FLOAT, refer to the least significant
	bit as "lowbit", not as "bit31".

2005-03-28 04:28  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Some fixes & cleanups;
	TCR-BIAS.

2005-03-28 04:26  gb

	* compiler/PPC/: PPC32/ppc32-backend.lisp,
	PPC64/ppc64-backend.lisp: More compilation-target parameters in the
	backend.

2005-03-28 04:25  gb

	* compiler/PPC/ppc2.lisp: Start to remove some ppc32-isms.

2005-03-28 04:24  gb

	* compiler/PPC/ppc-lapmacros.lisp: MOST (not all) things run-time
	conditionalized for ppc32/ppc64.

2005-03-28 04:24  gb

	* compiler/PPC/ppc-lap.lisp: Remove some PPC32-isms.

2005-03-28 04:23  gb

	* compiler/backend.lisp: Put more target stuff in the backend
	structure.

2005-03-28 04:22  gb

	* level-0/PPC/ppc-clos.lisp: GF protos, trampolines: LAP moved
	here.

2005-03-28 04:21  gb

	* level-0/PPC/ppc-float.lisp: Float sign, zerop functions in lisp.

2005-03-28 04:21  gb

	* level-0/PPC/ppc-io.lisp: A little bit of conditionalization (for
	a little bit of code.)

2005-03-28 04:20  gb

	* level-0/PPC/ppc-misc.lisp: A little bit of conditionalization
	(needs more work.)

2005-03-28 04:19  gb

	* level-0/PPC/ppc-numbers.lisp: %DOUBLE-FLOAT-PLUSP,
	%SHORT-FLOAT-PLUSP in lisp.

2005-03-28 04:18  gb

	* level-0/l0-numbers.lisp: %DOUBLE-FLOAT-ZEROP, %SHORT-FLOAT-ZEROP
	in lisp.

2005-03-28 04:18  gb

	* level-0/l0-float.lisp: %DOUBLE-FLOAT-SIGN, %SHORT-FLOAT-SIGN in
	lisp.

2005-03-28 04:17  gb

	* level-1/version.lisp: Bump; again, a little hard to bootstrap.

2005-03-28 04:16  gb

	* lib/number-macros.lisp: Remove some commented-out code.

2005-03-28 04:16  gb

	* lib/systems.lisp: Define PPC64-VINSNS.

2005-03-28 04:15  gb

	* lib/compile-ccl.lisp: Include PPC64-ARCH in
	*PPC-COMPILER-MODULES*.

2005-03-28 04:14  gb

	* lisp-kernel/constants32.h: Define TCR_BIAS.

2005-03-28 04:13  gb

	* lisp-kernel/constants64.h: Don't use NATURAL_POINTER_FIELD. 
	Define TCR_BIAS.

2005-03-28 04:13  gb

	* lisp-kernel/constants64.s: Define TCR_BIAS; ensure that TCR has
	single_float_convert field.

2005-03-28 04:12  gb

	* lisp-kernel/darwin/.gdbinit: No TCR_BIAS on Darwin32; rcontext is
	now r13.

2005-03-28 04:11  gb

	* lisp-kernel/lisptypes.h: Don't (try to) support 32-bit foreign
	pointers in 64-bit code.

2005-03-28 04:10  gb

	* lisp-kernel/lisp.h: Don't define NATURAL_POINTER_FIELD.

2005-03-28 04:10  gb

	* lisp-kernel/area.h: Don't use NATURAL_POINTER_FIELD.

2005-03-28 04:09  gb

	* lisp-kernel/Threads.h: Don't use NATURAL_POINTER_FIELD.  Define
	TCR_BIAS in constants{32,64}.h

2005-03-28 04:08  gb

	* level-1/l1-dcode.lisp: Move LAP code to level-0.

2005-03-27 14:36  gb

	* xdump/faslenv.lisp: Increment min fasl version.

2005-03-27 14:30  gb

	* lib/nfcomp.lisp: Increment fasl version.

2005-03-27 14:22  gb

	* level-1/version.lisp: Bump.

2005-03-27 14:22  gb

	* xdump/faslenv.lisp: Increment $fasl_vers.

2005-03-27 14:17  gb

	* compiler/PPC/ppc-arch.lisp: Don't define old-rcontext.

2005-03-27 14:16  gb

	* lisp-kernel/: constants.h, constants.s, spentry.s, subprims.s,
	thread_manager.c: Stop maintaining old_rcontext.  Don't need
	special get_interrupt_tcr() on Linux; review other TCR-related
	cruft.

2005-03-27 13:38  gb

	* lisp-kernel/: constants.h, constants.s, spentry.s, subprims.s:
	r13 is rcontext; maintain r2 (old_rcontext) in parallel, until
	we're bootstrapped.

2005-03-27 13:38  gb

	* compiler/PPC/ppc-arch.lisp: r13 is rcontext; r2 (maintained by
	the kernel) is old-rcontext, until we stop referencing it.

2005-03-27 12:01  gb

	* level-0/PPC/ppc-bignum.lisp, level-0/PPC/ppc-def.lisp,
	level-0/PPC/ppc-float.lisp, level-0/PPC/ppc-misc.lisp,
	lisp-kernel/constants.h, lisp-kernel/constants.s,
	lisp-kernel/macros.s, lisp-kernel/spentry.s,
	lisp-kernel/subprims.s, compiler/PPC/ppc-arch.lisp,
	compiler/PPC/ppc-lapmacros.lisp,
	compiler/PPC/PPC32/ppc32-vinsns.lisp: Stop maintaining OLD-VSP; R13
	will soon (one more round of bootstrapping) become RCONTEXT, and
	then the fasl version will change and there'll be new binaries.

2005-03-27 11:27  gb

	* level-0/PPC/: ppc-bignum.lisp, ppc-def.lisp, ppc-float.lisp,
	ppc-misc.lisp: Maintain OLD-VSP, not NEW-VSP.

2005-03-27 11:13  gb

	* compiler/PPC/: ppc-lapmacros.lisp, ppc2.lisp,
	PPC32/ppc32-vinsns.lisp: VSP is now r15, OLD-VSP is r13.  Keep them
	in sync.  Don't use PPC2-FIX-STACKREG or vinsn
	ADJUST-STACK-REGISTER, for bootstrapping reasons.

2005-03-27 11:08  gb

	* compiler/PPC/ppc-arch.lisp: VSP is now r15, OLD-VSP is r13.

2005-03-27 11:04  gb

	* lisp-kernel/: constants.h, constants.s, macros.s, spentry.s,
	subprims.s: VSP is now r15, OLD-VSP is r13.  They should be
	equivalent until we're finished bootstrapping; use check_vsp to
	enforce that at discrete execution points.

2005-03-27 07:39  gb

	* level-0/PPC/ppc-float.lisp, level-0/PPC/ppc-misc.lisp,
	compiler/PPC/PPC32/ppc32-vinsns.lisp: Ensure vsp = new-vsp, harder.

2005-03-27 07:39  gb

	* lisp-kernel/spentry.s: do check_vsp on subprim entry.

2005-03-27 07:38  gb

	* lisp-kernel/macros.s: define check_vsp (trap if vsp != new_vsp)

2005-03-27 06:55  gb

	* compiler/PPC/ppc-arch.lisp, compiler/PPC/ppc-lapmacros.lisp,
	compiler/PPC/PPC32/ppc32-vinsns.lisp, level-0/PPC/ppc-bignum.lisp,
	level-0/PPC/ppc-def.lisp, level-0/PPC/ppc-misc.lisp,
	lisp-kernel/constants.s, lisp-kernel/macros.s,
	lisp-kernel/spentry.s, lisp-kernel/subprims.s: Really no more
	old-fn.  R15 is new-vsp; try to keep it in synch with VSP (soon to
	become "old-vsp") at all times.

2005-03-27 06:00  gb

	* compiler/PPC/ppc-arch.lisp, compiler/PPC/ppc-lapmacros.lisp,
	compiler/PPC/PPC32/ppc32-vinsns.lisp, level-0/PPC/ppc-def.lisp,
	lisp-kernel/constants.h, lisp-kernel/constants.s,
	lisp-kernel/lisp-debug.c, lisp-kernel/spentry.s,
	lisp-kernel/subprims.s: No more old-fn.

2005-03-27 04:53  gb

	* level-0/PPC/ppc-def.lisp: Copy FN to OLD-FN in
	%APPLY-LEXPR-TAIL-WISE.

2005-03-27 04:52  gb

	* compiler/PPC/: ppc-arch.lisp, ppc-lapmacros.lisp,
	PPC32/ppc32-vinsns.lisp: Lisp believes that FN = R16, copies it to
	OLD-FN whenever it's set (for bootstrapping).

2005-03-27 03:04  gb

	* compiler/PPC/ppc-arch.lisp, compiler/PPC/ppc-lapmacros.lisp,
	compiler/PPC/PPC32/ppc32-vinsns.lisp, lisp-kernel/constants.h,
	lisp-kernel/constants.s, lisp-kernel/constants32.s,
	lisp-kernel/lisp-debug.c, lisp-kernel/spentry.s,
	lisp-kernel/subprims.s: Remove remaining uses of temp4; define r16
	as "new_fn".  All assignments to fn copy to new_fn, as well (more
	bootstrapping).

2005-03-27 00:50  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp, level-0/PPC/ppc-clos.lisp,
	lib/ppcenv.lisp, lisp-kernel/Threads.h, lisp-kernel/constants32.s,
	lisp-kernel/thread_manager.c: Back out of previous change, since
	even current versions of Debian unstable don't provide a TLS-aware
	gcc/glibc.  Set TCR_BIAS to 0 where relevant.
	
	Start to take another approach (moving rcontext to r13), by
	starting to phase out temp4 (= r16).  Don't let the compiler
	allocate temp4, don't use temp4 in LAP code.

2005-03-26 20:35  gb

	* level-1/version.lisp: Bump.

2005-03-26 20:34  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp, lisp-kernel/Threads.h,
	lisp-kernel/constants32.s, lisp-kernel/lisp-exceptions.c,
	lisp-kernel/pmcl-kernel.c, lisp-kernel/spentry.s,
	lisp-kernel/thread_manager.c, lisp-kernel/darwin/.gdbinit,
	lisp-kernel/darwin/Makefile: Start to bootstrap changes to
	reconcile OpenMCL's notion of thread-specific-data (the TCR) with
	Linux's.  On Darwin, this means that r2 (rcontext) points #x7000
	bytes beyond the TCR; on Linux, the TCR structure will be the first
	(real) thread-local variable, and the C runtime's thread pointer
	will therefore point ... #x7000 bytes beyond the TCR.  (This
	basically means that we can keep the same value in r2/rcontext when
	running lisp and foreign code on Linux; Linux C and thread and
	debugging utilities are getting increasingly insistent about that.)
	
	This introduces binary incompatibility; there'll need to be a
	change in the fasl version and new images when the dust settles a
	bit.

2005-03-26 20:20  gb

	* lib/dumplisp.lisp: Hmm.  Not likely that MultiFinder/UniFinder
	are involved anymore.

2005-03-18 22:00  gb

	* lisp-kernel/m4macros.m4: Try to use .size directive on ELF.

2005-03-18 21:59  gb

	* lib/ccl-export-syms.lisp: Export
	*IGNORE-EXTRA-CLOSE-PARENTHESIS*.

2005-03-18 21:58  gb

	* level-1/version.lisp: Are we 0.14.3 yet ?

2005-03-18 21:57  gb

	* level-1/l1-reader.lisp: By default, signal errors on dangling
	close parens.

2005-03-18 21:57  gb

	* lib/encapsulate.lisp: Doc string for TRACE: don't describe
	obscure SBCL options.  Or obscure OpenMCL options, either

2005-03-18 21:56  gb

	* level-1/l1-clos.lisp: Add missing #\Newline at EOF.

2005-03-18 21:48  gb

	* lib/: eval.lisp, step.lisp: no more eval, step

2005-03-18 21:07  gb

	* tools/.cvsignore: ignore fasls

2005-03-18 20:42  gb

	* lisp-kernel/lisp-exceptions.c: Word-size and integer/pointer
	64-bit issues.	Some 64-bit Mach exception stuff (needs more work.)

2005-03-18 20:41  gb

	* lisp-kernel/pmcl-kernel.c: Word-size and integer/pointer 64-bit
	issues.  Use vm_region64 if applicable; someday soon, use it with
	reasonable parameters.

2005-03-18 20:39  gb

	* lisp-kernel/: thread_manager.c, plsym.c, plbt.c: Word-size and
	integer/pointer 64-bit issues.

2005-03-18 20:22  gb

	* lisp-kernel/: gc.c, image.c, lisp-debug.c, lisp-exceptions.h:
	Word-size and integer/pointer 64-bit issues.

2005-03-18 20:20  gb

	* lisp-kernel/constants64.h: ppc64 C frame (may be the same on
	linux/darwin.)

2005-03-18 20:19  gb

	* lisp-kernel/bits.h: ppc64 inline asm for count_leading_zeros. 
	(Still lots of 32-bit assumptions in callers ...)

2005-03-18 20:18  gb

	* lisp-kernel/bits.c: Include lisp-exceptions.h, for some obscure
	reason ...

2005-03-18 20:18  gb

	* lisp-kernel/asmutils.s: Some 64-bit fixes.

2005-03-18 20:07  gb

	* lisp-kernel/Threads.h: some extra casts

2005-03-18 19:53  gb

	* lisp-kernel/darwin64/Makefile: work around some new bugs in ld64

2005-03-17 23:55  gb

	* lisp-kernel/lisp-exceptions.c: Use printf-style '%', not
	format-style '~', in MACH_CHECK_ERROR.
	
	Try to get some thread state stuff for PPC64.
	
	Complain if we can't get thread state  in
	create_thread_context_frame.
	
	When deallocate thread exception port before destroying it, just in
	case.
	
	Hold the mach_exception_lock_set lock before suspending in
	suspend_tcr.

2005-03-17 23:51  gb

	* lisp-kernel/pmcl-kernel.c: Keep trying to get xFindSymbol to
	compile without warnings on current and future OS releases.

2005-03-13 04:47  gb

	* lisp-kernel/linux/Makefile: Add -maltivec to ASFLAGS.

2005-03-08 21:15  gb

	* lisp-kernel/spentry.s: Ensure that the XER is zeroed in the
	shared ff_call return code (doh!) and in a slightly more subtle
	case involving Linux syscall return: it seems that the XER[SO] bit
	can be set when the CR0[SO] bit is clear on syscall return, and we
	weren't zeroing the XER in that case (causing spurious arithmetic
	overflows on subsequent arithmetic operations.)

2005-03-08 21:05  gb

	* level-0/PPC/ppc-misc.lisp: Move YIELD, READ-LOCK-RWLOCK, and
	WRITE-LOCK-RWLOCK to lisp code, mostly 'cause I don't want to have
	to trust inline syscalls from LAP.

2005-03-08 21:04  gb

	* level-0/l0-misc.lisp: Move YIELD, READ-LOCK-RWLOCK, and
	WRITE-LOCK-RWLOCK here (from ppc-misc), mostly 'cause I don't want
	to have to trust inline syscalls from LAP.

2005-03-06 20:55  gb

	* level-0/PPC/ppc-misc.lisp: After doing inline syscalls, ensure
	that the XER (especially the XER[SO] bit) is cleared.

2005-03-05 02:07  bryan

	* level-1/l1-io.lisp: when *print-array*, use #nA(..) syntax even
	when array-element-type is something other than t.

2005-03-05 01:13  bryan

	* level-1/l1-io.lisp: print-unreadable-object should accept t
	(*terminal-io*) and nil (*standard-output*) for the stream.

2005-03-04 23:55  bryan

	* level-1/l1-io.lisp: %print-unreadable-object should always return
	nil.
	
	when type is t, %print-unreadable-object should always print a
	space after the type not just when it's followed by more stuff. 
	(seems less aesthetically pleasing, but that's what the spec says).

2005-03-04 14:46  bryan

	* level-1/l1-streams.lisp: ioblock-element-shift should never be <
	0.

2005-03-02 23:28  bryan

	* level-1/version.lisp: bump.

2005-03-02 20:05  bryan

	* level-1/l1-files.lisp: when *print-escape*, pathnames always
	print starting with #P.  (per clhs 22.1.3.11)

2005-03-02 19:18  bryan

	* level-1/l1-io.lisp: when *print-array* is nil, print bit-vectors
	unreadably.

2005-03-02 18:04  bryan

	* level-1/l1-io.lisp: don't do *print-level* truncation for
	bit-vectors and strings.

2005-03-02 16:42  bryan

	* level-1/l1-io.lisp: write-a-cons: when *print-length*=0, write
	"..." for the entire cons.  when the cons is a dotted pair, don't
	decrement print-length before printing the cdr.

2005-03-02 14:49  bryan

	* level-1/l1-io.lisp: when *print-length* would cause "..." to be
	printed immediately following "#(", don't print a space.  thus
	"#(...)", not "#( ...)".

2005-03-02 13:42  bryan

	* lib/format.lisp: don't insert commas inbetween padchars in #\r
	format directive.

2005-03-01 00:41  bryan

	* level-1/version.lisp: bump.

2005-03-01 00:40  bryan

	* lib/macros.lisp: defclass: signal program error when a slot is
	initialized more than once in :default-initargs.  defclass: make
	duplicate slot name program error a bit more verbose.

2005-02-28 23:06  bryan

	* lib/describe.lisp: really big BIGNUMS shouldn't cause describe to
	FLOATING-POINT-OVERFLOW.  instead just print the fact that it would
	if you tried.

2005-02-27 23:43  gb

	* lisp-kernel/darwin64/Makefile: Build on 64-bit DarwinPPC.  Work
	around some linker lossage.

2005-02-27 23:42  gb

	* lisp-kernel/darwin/Makefile: Remove some obsolete stuff.  Try to
	handle cases where OS libs are gratuitously deleted and added in
	unnamed, undiscussed OS releases.

2005-02-27 23:35  gb

	* lisp-kernel/pmcl-kernel.c: Some word size/signedness cleanup. 
	Use dlsym() in cases where we're sure that it exists.

2005-02-27 23:34  gb

	* lisp-kernel/plbt.c: Rename 'dladdr' to 'darwin_dladdr', in case
	The OS Release That Can Not Be Discussed defines its own dladdr
	function.

2005-02-27 23:32  gb

	* lisp-kernel/lisp-exceptions.h: Try to work around the (old, now
	fixed) OSX G5 kernel signal handler bug, by flipping an unused bug
	in the XER.

2005-02-27 23:31  gb

	* lisp-kernel/lisp-exceptions.c: Some word size/signedness cleanup.

2005-02-27 23:30  gb

	* lisp-kernel/lisp-debug.c: Don't prototype print_lisp_object().

2005-02-27 23:29  gb

	* lisp-kernel/image.c: Be fussy about word size, signedness. 
	(Needs more fussiness.)

2005-02-27 23:29  gb

	* lisp-kernel/imports.s: User PTR macro for imported addresses
	(word size issues.)

2005-02-27 23:28  gb

	* lisp-kernel/m4macros.m4: Tweak FUN .stabs handling, to make fussy
	assemblers (that can't be discussed in public yet) happy.

2005-02-27 23:23  gb

	* lisp-kernel/pantherg5/Makefile: no more pantherg5 stuff

2005-02-27 23:20  gb

	* lisp-kernel/spjump.s: Force 12 bit alignment.  (See if this
	breaks Linux.)

2005-02-27 23:18  gb

	* level-1/l1-streams.lisp: Remove obsolete INSTANCE-INITIALIZE
	methods.

2005-02-27 15:25  bryan

	* lib/format.lisp: width parameter <=0 passed to ~f format
	directive should act as if it never was specified.  previously
	(when 0) would loop.

2005-02-25 20:21  gb

	* lib/ccl-export-syms.lisp: Export WITH-POINTER-TO-IVECTOR from
	CCL; export a few missing things from OPENMCL-MOP.

2005-02-25 20:20  gb

	* lib/macros.lisp: WITH-POINTER-TO-IVECTOR.

2005-02-25 20:18  gb

	* level-0/l0-pred.lisp: Add UVECTORP & IVECTORP; make them type
	predicates.

2005-02-25 19:40  gb

	* level-0/PPC/ppc-misc.lisp: Handle the DOUBLE-FLOAT case(es) in
	%VECT-DATA-TO-MACPTR.

2005-02-25 19:36  gb

	* level-1/l1-streams.lisp: %MAKE-HEAP-IVECTOR: element count not
	optional.

2005-02-25 18:00  gb

	* level-1/version.lisp: Bump.

2005-02-25 17:59  gb

	* lisp-kernel/lisp-debug.c: Add an 'extern' to definition of
	debug_command_entries[].  In lisp_debugger(), define 'state' before
	executable body.

2005-02-25 17:57  gb

	* compiler/PPC/ppc-arch.lisp: A few name changes, for consistency
	with kernel notion of kernel-globals.

2005-02-25 17:56  gb

	* examples/: objc-clos.lisp, objc-support.lisp: Handle changes to
	DEFCLASS's processing of random slot options (:FOREIGN-TYPE).

2005-02-25 17:55  gb

	* lib/macros.lisp: DEFCLASS: only collect random slot option values
	into a list if option was provided more than once.

2005-02-25 17:52  gb

	* level-1/l1-clos.lisp: Preserve values of class slots (:ALLOCATION
	:CLASS) during class redefinition.

2005-02-25 17:51  gb

	* level-1/l1-boot-2.lisp: Bind *LOADING-FILE-SOURCE-FILE* around
	calls to %FASLOAD.

2005-02-25 17:50  gb

	* level-1/l1-init.lisp: Define *LOADING-FILE-SOURCE-FILE*
	elsewhere.

2005-02-25 17:49  gb

	* level-0/l0-init.lisp: Define *LOADING-FILE-SOURCE-FILE* here.

2005-02-25 17:48  gb

	* level-0/l0-misc.lisp: Kernel globals in PPC (not PPC32) package.

2005-02-25 17:44  gb

	* level-1/: l1-pathnames.lisp, l1-boot-1.lisp,
	l1-lisp-threads.lisp: Kernel globals in PPC (not PPC32) package.

2005-02-23 01:01  bryan

	* level-1/version.lisp: bump.

2005-02-22 16:24  gb

	* lisp-kernel/spentry.s: Load f1 from the right stack offset when
	returning from EABI callback.

2005-02-22 16:01  gb

	* lisp-kernel/spentry.s: All callback variants try to return values
	in r3, r4, and f1.

2005-02-22 15:59  gb

	* lib/macros.lisp: Handle float returns in callbacks (needs related
	kernel changes; untested on Linux.)

2005-02-22 13:26  bryan

	* lib/pprint.lisp: when *pretty-print* and *print-base* > 10, use
	the slightly slower #'write-a-symbol to properly determine
	potential numbers.

2005-02-22 13:22  bryan

	* level-1/l1-io.lisp: use *print-base*, not *read-base*, when
	deciding whether to quote a potential number.

2005-02-20 18:47  bryan

	* lib/format.lisp: handle ~v when nil for ~{...~}

2005-02-20 16:25  bryan

	* level-1/version.lisp: bump.  use this version to check for
	stream-external-format being a generic function.

2005-02-20 16:24  bryan

	* level-1/l1-sysio.lisp: rewrite stream-external-format as a
	generic function.

2005-02-20 15:36  bryan

	* lib/format.lisp: treat ~vr as ~r when arg is nil.  per clhs 22.3.

2005-02-20 13:33  bryan

	* level-1/l1-streams.lisp: remove unused code: (defmethod
	file-stream-external-format ((s broadcast-stream))

2005-02-20 03:08  bryan

	* level-1/version.lisp: bump.

2005-02-20 03:05  bryan

	* lib/format.lisp: treat ~v[...~] as ~[...~] when arg is nil.  per
	clhs 22.3.

2005-02-19 19:13  bryan

	* lib/arrays-fry.lisp: somebody misses printf.. format uses ~ and
	not %.

2005-02-19 16:51  bryan

	* lib/format.lisp: reverse ~:@C printing per clhs: "~:@C prints
	what ~:C would, and then if the character requires unusual  shift
	keys on the keyboard to type it, this fact is mentioned."

2005-02-19 15:34  bryan

	* level-1/l1-reader.lisp: add Fs (file separator), Gs (group
	separator), Rs (record separator), and Us (unit seperator) to
	*name-char-alist*.
	
	#\Fs to avoid printing something unescaped #\^\, the others for
	completeness.  the extra four entries in the alist shouldn't have
	any noticeable effect.
	
	probably could fix the printer (and reader?) to handle the escaped
	case, but i like seeing the textual representation.

2005-02-19 14:29  bryan

	* lib/format.lisp: when printing a number with a sign and padding,
	print padding first and then the sign.

2005-02-18 22:42  bryan

	* level-1/version.lisp: bump for #A changes.

2005-02-18 16:19  bryan

	* lib/read.lisp: rewrite #A dispatch handler to allow for all types
	of sequences (bitfields, strings, vectors, lists) when they make
	sense for the supplied rank.

2005-02-17 17:02  gb

	* examples/: objc-readtable.lisp, objc-runtime.lisp: Observe
	*READ-SUPPRESS* in reader macros.

2005-02-16 18:42  bryan

	* tools/asdf.lisp: hook asdf into *module-provider-functions*.

2005-02-16 16:15  bryan

	* level-1/version.lisp: bump.

2005-02-16 14:09  bryan

	* compiler/nx-basic.lisp, compiler/nx.lisp, compiler/nx0.lisp,
	compiler/PPC/ppc-disassemble.lisp, compiler/PPC/ppc-lapmacros.lisp,
	level-0/l0-aprims.lisp, level-0/l0-array.lisp, level-0/l0-def.lisp,
	level-0/l0-float.lisp, level-0/l0-hash.lisp, level-0/l0-init.lisp,
	level-0/l0-misc.lisp, level-0/l0-numbers.lisp,
	level-0/l0-pred.lisp, level-0/l0-symbol.lisp,
	level-0/PPC/ppc-pred.lisp, level-1/l1-aprims.lisp,
	level-1/l1-boot-1.lisp, level-1/l1-clos-boot.lisp,
	level-1/l1-error-signal.lisp, level-1/l1-error-system.lisp,
	level-1/l1-files.lisp, level-1/l1-init.lisp, level-1/l1-io.lisp,
	level-1/l1-numbers.lisp, level-1/l1-pathnames.lisp,
	level-1/l1-reader.lisp, level-1/l1-readloop-lds.lisp,
	level-1/l1-readloop.lisp, level-1/l1-streams.lisp,
	level-1/l1-symhash.lisp, level-1/l1-sysio.lisp,
	level-1/l1-typesys.lisp, level-1/l1-utils.lisp,
	level-1/sysutils.lisp, lib/apropos.lisp, lib/arrays-fry.lisp,
	lib/chars.lisp, lib/defstruct-lds.lisp, lib/defstruct.lisp,
	lib/describe.lisp, lib/encapsulate.lisp, lib/format.lisp,
	lib/hash.lisp, lib/lists.lisp, lib/macros.lisp, lib/misc.lisp,
	lib/nfcomp.lisp, lib/numbers.lisp, lib/pathnames.lisp,
	lib/pprint.lisp, lib/read.lisp, lib/sequences.lisp, lib/setf.lisp,
	lib/sort.lisp, lib/streams.lisp, lib/time.lisp, library/loop.lisp:
	add docstrings to the majority of common-lisp-user symbols starting
	with a snapshot of those found in SBCL 0.8.18.

2005-02-16 13:34  bryan

	* tools/asdf-install/: COPYRIGHT, load-asdf-install.lisp,
	split-sequence.lisp: initial repository version from 050201 import.

2005-02-16 13:29  bryan

	* level-1/l1-reader.lisp: unmatched ') when
	ccl::*ignore-extra-close-parenthesis* is nil should signal a
	reader-error.
	
	the default for ccl::*ignore-extra-close-parenthesis* remains t. 
	set it to nil in your init file for maximum ansi-compliance.

2005-02-16 13:12  bryan

	* tools/: README-OpenMCL.txt, asdf-install/README,
	asdf-install/asdf-install.asd, asdf-install/defpackage.lisp,
	asdf-install/installer.lisp, asdf-install/port.lisp,
	asdf-install/doc/index.html: sync with latest asdf-install code.

2005-02-16 12:53  bryan

	* tools/asdf.lisp: import latest ASDF from clocc repository.
	
	identical (besides revision number) to asdf.lisp found in SBCL
	0.8.18.

2005-02-16 12:50  bryan

	* xdump/xfasload.lisp: turn on *save-doc-strings* and
	*fasl-save-doc-strings*.

2005-02-16 12:45  bryan

	* level-1/l1-reader.lisp: ccl::%unreadable should signal a
	reader-error.
	
	ccl::%unreadable is called when the reader encounters #<, #), or
	#<whitespace>.

2005-02-16 12:44  bryan

	* lib/read.lisp: ## when *read-suppress* should return nil, not
	(values).

2005-02-16 12:43  bryan

	* level-1/l1-reader.lisp: #nr shouldn't type-check n when
	*read-suppress*.

2005-02-16 12:42  bryan

	* level-1/l1-reader.lisp: #( when *read-suppress should ignore
	array length problems.

2005-02-16 12:41  bryan

	* lib/read.lisp: rewrite #* handler
	
	#* must signal a reader-error if any of the token characters are
	not 0 or 1.  previously it would stop at the first character that
	was not 0 or 1.  single- and multi-escape are not allowed in the
	token for #*.
	
	#n* when n > 0 must have at least one element.	the number of
	elements can not exceed n.
	
	except if *read-suppress*, then anything goes until the next
	whitespace or terminating macro.

2005-02-16 12:39  bryan

	* level-1/l1-reader.lisp: more occurrences where error should be a
	reader-error.

2005-02-16 12:35  bryan

	* level-1/l1-streams.lisp: fill in some missing methods for
	echo-streams and concatenated-streams.
	
	  (defmethod stream-read-char-no-hang ((s echo-stream))
	  (defmethod stream-read-byte ((s echo-stream))
	  (defmethod stream-read-line ((s echo-stream))
	  (defmethod stream-read-vector ((s echo-stream) vector start end)
	
	  (defmethod stream-read-char-no-hang ((s concatenated-stream))
	  (defmethod stream-peek-char ((s concatenated-stream))
	  (defmethod stream-read-line ((s concatenated-stream))
	  (defmethod stream-read-list ((s concatenated-stream) list count)
	  (defmethod stream-read-vector ((s concatenated-stream) vector
	start end)

2005-02-16 12:31  bryan

	* level-0/l0-symbol.lisp, level-0/nfasload.lisp,
	level-1/l1-symhash.lisp: ccl::hash-pname loses when given a
	non-simple-string
	
	find-all-symbols did no checking and didn't massage.  added a
	ccl::ensure-simple-string to both check and massage.
	
	make-symbol checked that the arg was a 'simple-string using
	#'require-type.  replacing that with ccl::ensure-simple-string both
	checks and massages.
	
	ccl::pkg-arg (called by a bunch of symbol iterator macros) did
	check that if the arg was a string, that it was a simple string.  i
	rewrote the initial if form as a cond that will call
	ccl::ensure-simple-string if the arg is indeed a string.
	
	also updated ccl::new-package-name.

2005-02-16 12:22  bryan

	* lib/backquote.lisp: comma not inside backquote should signal
	reader-error.

2005-02-16 12:20  bryan

	* level-1/l1-reader.lisp: if *read-suppress*, return NIL from
	read(-*) forms.

2005-02-16 12:19  bryan

	* level-1/l1-io.lisp: adjustable arrays should print readably when
	*print-array* (per clhs 22.1.3.7-8)

2005-02-16 12:16  bryan

	* lib/pprint.lisp: don't declare dynamic-extent for the unused args
	passed to (funcall (formatter "~A") ..) which end up being returned
	to the caller.

2005-02-16 12:11  bryan

	* lib/apropos.lisp: "" is a substring to all strings, update
	%apropos-substring-p to explicitly check for that and return t
	before doing any more work.

2005-02-16 12:09  bryan

	* level-1/l1-utils.lisp: a string-designator can also be a
	singleton character, update string-argp to reflect that.

2005-02-16 12:05  bryan

	* lib/macros.lisp: typecase was always pushing the t clause (if
	present) to the end of the clauses.  i suspect that most cases when
	it appears before the end, the user intended for it to be
	equivalent to a final OTHERWISE clause.  hopefully the warning
	messages about later clauses being shadowed will be sufficient to
	alert them.  as an added benefit it dead-code strips any cases
	following a t-clause.
	
	finally it now correctly raises an error if OTHERWISE (if present)
	is not the final clause.

2005-02-16 11:56  bryan

	* lib/sequences.lisp: ccl::simple-vector-delete loses with
	displaced arrays with a displaced-index-offset > 0.
	
	the second loop (looping through the scratch bit vector) to copy
	the items that survive into the new array misuses the offset with
	the bit vector.  this causes an array out of bounds error.  instead
	it should use the offset with the original array to reference the
	item.
	
	the third loop which copies the remaining items that were
	explicitly excluded from the test also needs the offset to copy the
	right items.

2005-02-16 11:52  bryan

	* lib/format.lisp: allow mincol, minpad in format directives to be
	negative.

2005-02-16 11:46  bryan

	* lib/format.lisp: non-list args in ~{..~} format directive should
	signal type-error.

2005-02-16 11:41  bryan

	* level-1/l1-format.lisp: allow #\+ in format directives.

2005-02-16 11:40  bryan

	* compiler/PPC/ppc-lap.lisp: modify defppclapfunction to accept a
	docstring.

2005-02-16 00:24  bryan

	* lib/macros.lisp: don't update index if with-input-from-string
	exits abnormally.

2005-02-16 00:17  bryan

	* lib/setf.lisp: spec says that the long form of defsetf encloses
	the body in a block named after the access function.
	
	defsetf was doing the wrong thing and putting the block around the
	eventual setf-expansion instead of the body that's evaluated to
	generate the setf-expansion.
	
	defsetf should also return the name of the access-fn and not the
	doc string.

2005-02-15 19:23  bryan

	* level-1/l1-reader.lisp: accept #:. per CLHS and ansi-test
	SYNTAX.SHARP-COLON.7

2005-02-15 19:14  bryan

	* level-0/l0-hash.lisp: %hash-table-equalp uses :test arg instead
	of equalp.
	
	spec says: equalp descends hash-tables by first comparing the count
	of entries and the :test function; if those are the same, it
	compares the keys of the tables using the :test function and then
	the values of the matching keys using equalp recursively.

2005-02-15 19:04  bryan

	* level-1/l1-reader.lisp: suppress unused lexical variable warning
	in #: handler

2005-02-15 18:58  bryan

	* level-1/l1-io.lisp: clhs 22.1.3.8 says an array is printed
	started with #A.

2005-02-15 18:52  bryan

	* level-1/l1-io.lisp: clhs 22.1.3.1.4 says a complex number is
	printed started with #C.

2004-10-27 00:56  gb

	* lisp-kernel/lisp-exceptions.c: Hacks to keep fp exceptions
	enabled after pthread_kill() on Darwin.
	
	Allways enable fp exceptions when calling back into lisp.

2004-10-26 23:28  gb

	* lisp-kernel/asmutils.s: back out of earlier change, now that
	signal_handler calls get_interrupt_tcr

2004-10-26 23:23  gb

	* lisp-kernel/lisp-exceptions.c: Use get_interrupt_tcr() in
	signal_handler on linux.

2004-10-26 23:22  gb

	* lisp-kernel/thread_manager.c: get_interrupt_tcr() takes a
	"create-p" argument, like some callers thought it did.

2004-10-26 22:51  gb

	* lisp-kernel/: asmutils.s, lisp-exceptions.c: play around with r2
	when zeroing FPSCR

2004-10-06 16:44  gb

	* examples/: cocoa-editor.lisp, cocoa-listener.lisp,
	cocoa-typeout.lisp: Alex Crain's patches (paste in listener,
	typeout window size)

2004-10-01 05:03  gb

	* level-1/l1-clos.lisp: if a CERROR offers to change the class of
	an existing GF, actually call CHANGE-CLASS to do so

2004-09-25 18:38  gb

	* level-1/l1-clos.lisp: Use a real SHARED-INITIALIZE after CLOS is
	bootstrapped.  Default superclasses based on metaclass, in
	(SHARED-INITIALIZE :AFTER) method on SLOTS-CLASS.  Don't add use
	:INITARGS for most SLOTS-CLASS slots (the initargs to
	SHARED-INITIALIZE :AFTER should generally set them to computed
	values.) Make sure that the right version of UPDATE-SLOTS is
	committed.

2004-09-25 18:31  gb

	* level-1/l1-dcode.lisp: New support for funcallable instances,
	from Tim Moore.

2004-09-25 18:31  gb

	* level-1/l1-clos-boot.lisp: INSTANCE-SLOTS knows where to find
	slots in funcallable instances that aren't GF's (from Tim Moore.)

2004-09-25 15:38  gb

	* level-1/l1-lisp-threads.lisp: Use %HEAP-IVECTOR-P when checking
	bogosity.

2004-09-25 15:37  gb

	* level-1/l1-streams.lisp: Kinder, gentler heap-ivector stuff.	Use
	it.

2004-09-25 15:37  gb

	* level-1/version.lisp: Bump.

2004-09-25 15:36  gb

	* lib/ccl-export-syms.lisp: Export MAKE-HEAP-IVECTOR and
	DISPOSE-HEAP-IVECTOR.

2004-09-25 15:35  gb

	* lisp-kernel/darwin/Makefile, lib/macros.lisp: DEFCLASS macro:
	handle :DOCUMENTATION as a single option, if provided.	Don't
	default superclasses (from Tim Moore.).  Pass class name, not
	class, in :METACLASS option.

2004-09-25 15:16  gb

	* level-0/PPC/ppc-misc.lisp: FUDGE-HEAP-POINTER: user clrrwi to
	clear three bits.

2004-09-25 15:15  gb

	* hemlock/src/macros.lisp: WITH-POPUP-DISPLAY: use typeout-stream
	(from Alex Crain.)

2004-09-25 15:14  gb

	* hemlock/src/interp.lisp: Indentation change.

2004-09-25 15:13  gb

	* examples/cocoa-editor.lisp: Send backtrace info to typeout window
	on error (from Alex Crain.)

2004-09-25 15:12  gb

	* examples/cocoa-window.lisp: Typeout-window changes, from Alex
	Crain.

2004-09-25 15:08  gb

	* examples/cocoa-typeout.lisp: New file, from Alex Crain

2004-09-25 15:08  gb

	* examples/bridge.lisp: Fixes to COERCE-TO-FOREIGN-TYPE, from
	Randall Beer.

2004-09-25 15:07  gb

	* OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/:
	classes.nib, info.nib, objects.nib: Changes from Alex Crain, for
	typeout window.

2004-09-25 15:07  gb

	* OpenMCL.app/Contents/Resources/English.lproj/.cvsignore: new file

2004-09-19 17:21  gb

	* lisp-kernel/lisp-exceptions.c: use thread_abort_safely() when
	suspending Mach threads

2004-09-13 01:26  gb

	* lisp-kernel/thread_manager.c: wait_on_semaphore: return
	KERN_OPERATION_TIMED_OUT if wait was aborted and we'd timed out
	anyway.  suspend_tcr: use mach_suspend_tcr() preferentially on
	Darwin.

2004-09-13 01:21  gb

	* lisp-kernel/lisp-exceptions.c: mach_resume_tcr: it would be a
	good idea to actually resume the thread, not just do the
	bookkeeping (a call to thread_resume() was missing.)

2004-08-30 16:20  gb

	* examples/cocoa-editor.lisp: Lots of changes, mostly:
	
	- try to speed up callbacks that fetch characters from the virtual
	nsstring - kill echo-area buffers when closing windows - windows
	should be released when closed; documents should close when the  
	last window closes.  - try not to invalidate the buffer cache on
	insertions - disable background layout before closing the window
	(in case that's still	going on ...) - clear the buffer's modified
	state when buffer is saved (not sure if the   modeline indicator's
	updated correctly) - DISABLE-BLINK tells the layout manager to
	force redisplay of the (now   non-blinking) character.

2004-08-30 15:59  gb

	* examples/objc-runtime.lisp: Assert that SELF is an instance in
	instance method (should also assert that :ID-typed parameters are
	instances/classes.)

2004-08-30 15:58  gb

	* examples/objc-clos.lisp: set pointer types directly

2004-08-30 15:33  gb

	* examples/: cocoa-listener.lisp, cocoa-window.lisp: Use (THE ...)
	to help the bridge resolve some messages.

2004-08-30 15:31  gb

	* hemlock/src/modeline.lisp: Use DEFPARAMETER to initialize
	*DEFAULT-MODELINE-FIELDS*, so it's a little easier to redefine.

2004-08-30 15:30  gb

	* hemlock/src/lispmode.lisp: Wrap some of the indentation code in a
	MODIFYING-BUFFER, to defer display updates. (This is experimental,
	and should probably be made more general.)

2004-08-30 15:29  gb

	* hemlock/src/interp.lisp: Don't be quite so eager to clear the
	echo area, especially when it's the current buffer.

2004-08-30 15:25  gb

	* lib/foreign-types.lisp: Make (:* T) be shorthand for (:* :VOID). 
	May lead to (benign) redefinition warnings.

2004-08-30 15:25  gb

	* level-1/l1-init.lisp: Remove some FRED-isms.

2004-08-30 15:22  gb

	* level-0/l0-aprims.lisp: DEREFERENCE-BASE-STRING: third return
	value is just the length (not length + displacement).

2004-08-10 18:54  gb

	* level-1/l1-readloop.lisp: Check for local macro functions (and
	complain if FUNCTION references them) in cheap evaluator.
	
	Pass a function and other information to *MACROEXPAND-HOOK* when
	expanding symbol-macros.

2004-08-10 18:19  gb

	* level-1/l1-clos.lisp: late version of %MAKE-METHOD-INSTANCE, from
	HEL

2004-08-06 01:40  gb

	* lib/pprint.lisp: distinguish finding NIL from not finding symbol
	in MAYBE-PRINT-FAST

2004-08-02 22:56  gb

	* examples/cocoa-editor.lisp: Remove subviews from hemlock-frame
	(window) before closing it.

2004-08-01 18:54  gb

	* examples/cocoa-editor.lisp: INIT-WITH-TEXT-STORAGE ->
	SET-TEXT-STORAGE (was initing twice.)

2004-07-31 17:52  gb

	* hemlock/src/: lispmode.lisp, lispbuf.lisp:
	package-name-change-hook

2004-07-31 17:50  gb

	* hemlock/src/buffer.lisp: handle modeline update in
	%SET-BUFFER-MODIFIED

2004-07-31 17:44  gb

	* examples/objc-runtime.lisp: remove a debugging call to FORMAT

2004-07-31 17:43  gb

	* hemlock/src/modeline.lisp: modeline buffer-update zeal

2004-07-31 17:40  gb

	* level-1/l1-lisp-threads.lisp: *fake-stack-frames* is
	thread-specific, just in case

2004-07-31 17:39  gb

	* level-0/PPC/ppc-def.lisp: %%FRAME-BACKLINK: this isn't 0S7

2004-07-31 17:38  gb

	* level-1/l1-io.lisp: move %NEW-PTR here

2004-07-31 17:37  gb

	* level-0/l0-io.lisp: %new-ptr can't exist in level-0

2004-07-31 17:36  gb

	* lib/nfcomp.lisp: make-load-form for foreign-variable istruct

2004-07-31 17:35  gb

	* level-1/l1-files.lisp: fix dangling close paren

2004-07-25 19:15  gb

	* examples/rubix/: blocks.lisp, opengl.lisp, rubix.lisp: newer code
	from Hamilton

2004-07-23 16:15  gb

	* examples/rubix/: blocks.lisp, lights.lisp, loader.lisp,
	opengl.lisp, rubix.lisp, vectors.lisp: new files

2004-06-27 02:55  gb

	* examples/: cocoa-window.lisp, tiny.lisp: defer window creation

2004-06-27 02:55  gb

	* examples/objc-support.lisp: canonicalize classes referenced in
	type signatures

2004-06-27 02:55  gb

	* examples/bridge.lisp: class canonicalization, for resuming images

2004-06-27 02:55  gb

	* examples/finger.lisp: new version from Barry Perryman

2004-06-27 02:55  gb

	* examples/objc-runtime.lisp: early NSThread

2004-06-23 22:24  gb

	* level-1/linux-files.lisp: Remove a (debugging) call to FORMAT.

2004-06-23 11:32  gb

	* level-1/linux-files.lisp: New external-process waiting stuff.

2004-06-23 11:32  gb

	* level-1/l1-processes.lisp: Initial restarts have descriptive
	:report clauses.

2004-06-23 11:30  gb

	* level-1/l1-files.lisp: Gary King's fix to FIND-LOAD-FILE.

2004-06-23 11:30  gb

	* level-1/l1-error-system.lisp: INVOKE-RESTART-INTERACTIVELY works
	with SIMPLE-RESTARTs again.

2004-06-23 11:29  gb

	* level-1/l1-clos.lisp: UPDATE-SLOTS fix.

2004-06-15 03:40  gb

	* OpenMCL.app/Contents/MacOS/dppccl: added

2004-06-06 03:12  gb

	* level-1/linux-files.lisp: Don't sleep/poll while monitoring
	external process; signal completion via semaphore.

2004-06-06 03:11  gb

	* level-0/l0-cfm-support.lisp: Ignore NAME in
	SHLIB-CONTAINING-ADDRESS for Linux.

2004-06-06 00:01  gb

	* lisp-kernel/spentry.s: Ensure TSP valid before asserting
	lisp-mode in ffi return.

2004-06-06 00:00  gb

	* lisp-kernel/thread_manager.c: New post-gc freeing mechanism
	(suspened thread may own malloc lock.) Similar mechanism for TCR
	cleanup.

2004-06-05 23:59  gb

	* lisp-kernel/: gc.c, gc.h, lisp-exceptions.c: New post-gc freeing
	mechanism (suspened thread may own malloc lock.)

2004-06-05 23:57  gb

	* level-1/linux-files.lisp: Do external processes differently.

2004-06-05 23:57  gb

	* level-1/l1-boot-3.lisp: No periodic task for external processes.

2004-06-05 23:56  gb

	* level-1/l1-readloop-lds.lisp: Don't pass (%CURRENT-TCR) to
	stack-walking functions in break loop commands.

2004-06-05 23:55  gb

	* lib/describe.lisp: :prompt-function takes an argument.

2004-05-23 17:37  gb

	* level-1/linux-files.lisp: In GET-DESCRIPTOR-FOR, leave room for a
	#\Newline when copying an arbitrary input stream to a temporary
	file.

2004-05-08 14:21  gb

	* examples/cocoa.lisp: Define UI-OBJECT-DO-OPERATION for *NSApp*.

2004-05-08 14:20  gb

	* examples/objc-runtime.lisp: Use #?.  Find cfstrings in __const
	section, too.

2004-05-08 14:19  gb

	* examples/cocoa-window.lisp: Use #?.  SET THE UI OBJECT (lost in
	0.14.2 merge.)

2004-05-08 14:18  gb

	* examples/cocoa-listener.lisp: Use #?.

2004-05-07 10:56  gb

	* examples/cocoa-editor.lisp: Fix duplicate
	HI::SAVE-HEMLOCK-DOCUMENT.  Don't parse buffer unless we're looking
	at a paren when trying to determine blink location.

2004-05-07 02:23  gb

	* examples/objc-clos.lisp: Handle new issues with :foreign-type
	(non-standard slot options collect values into a list.)

2004-05-07 02:22  gb

	* level-1/version.lisp: Date tag for development.

2004-05-06 00:28  gb

	* compiler/PPC/ppc2.lisp, darwin-headers/cocoa/C/populate.sh,
	examples/cocoa-window.lisp, examples/cocoa.lisp,
	examples/objc-runtime.lisp, level-0/l0-cfm-support.lisp,
	level-0/l0-misc.lisp, level-0/PPC/ppc-symbol.lisp,
	level-1/l1-aprims.lisp, level-1/l1-boot-2.lisp,
	level-1/l1-clos-boot.lisp, level-1/l1-clos.lisp,
	level-1/l1-lisp-threads.lisp, level-1/l1-sockets.lisp,
	level-1/l1-utils.lisp, level-1/linux-files.lisp,
	level-1/ppc-trap-support.lisp, level-1/version.lisp,
	lib/arglist.lisp, lib/ccl-export-syms.lisp, lib/compile-ccl.lisp,
	lib/db-io.lisp, lib/edit-callers.lisp, lib/encapsulate.lisp,
	lib/foreign-types.lisp, lib/macros.lisp, lib/nfcomp.lisp,
	lib/systems.lisp, library/parse-ffi.lisp,
	lisp-kernel/pmcl-kernel.c, lisp-kernel/darwin/.gdb_history,
	lisp-kernel/darwin/Makefile, xdump/faslenv.lisp: incorporate 0.14.2
	changes

2004-05-02 01:28  gb

	* examples/cocoa-editor.lisp: save-as, open-document for Hemlock. 
	Fix off-by-one in paren-blinking; lock view focus when disabling
	blink to fix display glitch.

2004-05-02 01:27  gb

	* hemlock/src/filecoms.lisp: Use Cocoa for more file operations.

2004-04-30 20:34  gb

	* lib/macros.lisp: SETF shows arglist in error message, if odd
	length.

2004-04-30 20:34  gb

	* level-1/version.lisp: Bump the version.

2004-04-30 20:34  gb

	* hemlock/src/struct.lisp: Font-mark/font-region stuff.

2004-04-30 20:33  gb

	* hemlock/src/streams.lisp: Add a STREAM-WRITE-STRING method for
	echo area.

2004-04-30 20:32  gb

	* hemlock/src/morecoms.lisp: Don't call HI::MAYBE-UPDATE-SELECTION
	anymore.

2004-04-30 20:32  gb

	* hemlock/src/listener.lisp: New history, font-region stuff.

2004-04-30 20:31  gb

	* hemlock/src/lispmode.lisp: Arglist stuff.

2004-04-30 20:30  gb

	* hemlock/src/interp.lisp: Clear echo area on entry to command.

2004-04-30 20:30  gb

	* hemlock/src/htext3.lisp: Check buffer modification.

2004-04-30 20:30  gb

	* hemlock/src/htext2.lisp: Remove old selection-updating code (was
	unused.)

2004-04-30 20:29  gb

	* hemlock/src/font.lisp: Partial integration with new font-region
	stuff.

2004-04-30 18:53  gb

	* hemlock/src/: filecoms.lisp, files.lisp: Partial integration with
	Cocoa document handling.

2004-04-30 18:53  gb

	* hemlock/src/edit-defs.lisp: Still not working, but closer.

2004-04-30 18:52  gb

	* hemlock/src/command.lisp: Get rid of some (very) old code. 
	CENTER-TEXT-PANE via Cocoa.

2004-04-30 18:51  gb

	* hemlock/src/cocoa-hemlock.lisp: FONT-REGION stuff.

2004-04-30 18:51  gb

	* hemlock/src/bindings.lisp: arglist-on-space,
	current-function-arglist.

2004-04-30 18:50  gb

	* examples/: cocoa-editor.lisp, cocoa-listener.lisp: Lots-o-changes
	...

2004-04-30 18:49  gb

	* examples/cocoa-window.lisp: Synthesize obliqueness/boldness.

2004-04-30 13:58  gb

	* examples/objc-runtime.lisp: %MAKE-CONSTANT-NSSTRING when
	restoring constant NSStrings.

2004-04-19 13:31  gb

	* examples/cocoa-editor.lisp: Lots of changes/fixes: selection,
	view-size, scrolling, paren-matching, etc.

2004-04-19 13:30  gb

	* hemlock/src/cocoa-hemlock.lisp: Event-queue-node constructor.

2004-04-19 00:49  gb

	* level-1/l1-error-system.lisp: Don't use %CURRENT-TCR, in
	%LAST-FN-ON-STACK.

2004-04-13 13:26  gb

	* library/lispequ.lisp: New fields in backtrace context.

2004-04-13 13:26  gb

	* library/hemlock.lisp: Simple loader, for now.

2004-04-13 13:25  gb

	* level-1/version.lisp: Bump.

2004-04-13 13:25  gb

	* level-1/l1-lisp-threads.lisp, level-1/l1-readloop-lds.lisp,
	level-1/ppc-threads-utils.lisp, lib/backtrace-lds.lisp,
	lib/backtrace.lisp, lib/describe.lisp: New stack-walking scheme:
	pass optional backtrace context, not TCR.

2004-04-13 13:24  gb

	* hemlock/src/struct.lisp: region now per-buffer.

2004-04-13 13:23  gb

	* hemlock/src/streams.lisp: Less hysteria writing to echo-area
	stream.

2004-04-13 13:23  gb

	* hemlock/src/: pop-up-stream.lisp, rompsite.lisp: Remove some
	CLXisms.

2004-04-13 13:22  gb

	* hemlock/src/listener.lisp: Better EVAL-REGION.

2004-04-13 13:22  gb

	* hemlock/src/killcoms.lisp: Reorganize; new per-buffer
	active-region scheme.

2004-04-13 13:21  gb

	* hemlock/src/key-event.lisp: Immutable key-event (not dll-node.)

2004-04-13 13:21  gb

	* hemlock/src/htext3.lisp: Always delete current-region before
	insertion.

2004-04-13 13:20  gb

	* hemlock/src/echo.lisp: Don't call DISPLAYED-P.

2004-04-13 13:18  gb

	* hemlock/src/cursor.lisp: Remove a few CLXisms.

2004-04-13 13:18  gb

	* hemlock/src/command.lisp: Mark setup for new scheme.

2004-04-13 13:17  gb

	* hemlock/src/cocoa-hemlock.lisp: Key events are interned, so don't
	make them mutable.

2004-04-13 13:16  gb

	* hemlock/src/bindings.lisp: #k"Enter" evaluates region, not
	"defun".

2004-04-13 13:16  gb

	* examples/cocoa-editor.lisp: Lots-o-changes: double-click, paste,
	etc.

2004-04-13 13:15  gb

	* examples/objc-runtime.lisp: (Partial) fixes to struct-returning
	method definitions.

2004-04-13 13:14  gb

	* examples/cocoa-backtrace.lisp: Remove some commented-out code.

2004-04-12 13:29  gb

	* level-1/l1-sockets.lisp: Erik Pearson's SOCKET-ERROR
	changes/fixes.

2004-04-07 22:32  gb

	* OpenMCL.app/Contents/Resources/English.lproj/MainMenu~.nib/:
	classes.nib, info.nib, objects.nib: remove backup files

2004-04-07 21:49  gb

	* examples/objc-runtime.lisp: Call #_GetCurrentEventQueue before
	some other thread calls it ...	Make "void" NSThread early, to tell
	AppKit we're multi-threaded.

2004-04-07 21:46  gb

	* examples/cocoa-listener.lisp: Defaults changes.

2004-04-07 21:45  gb

	* examples/cocoa-editor.lisp: Defaults changes.  Support clipview
	around echo-area (horizontal scrolling).

2004-04-07 21:43  gb

	* examples/cocoa-defaults.lisp: Changes to support constraints,
	prefs dialog.

2004-04-07 21:42  gb

	* examples/cocoa-prefs.lisp: New file.

2004-04-07 21:41  gb

	* examples/cocoa-window.lisp: Require "COCOA-PREFS".  Doc string on
	defaults; handle showPreferences: message.

2004-04-07 21:38  gb

	* hemlock/src/cocoa-hemlock.lisp: Handle control-g (abort-event) in
	GET-KEY-EVENT.

2004-04-07 21:35  gb

	* OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/:
	classes.nib, info.nib, objects.nib: Add showPreferences: action,
	connect Preferences item to it.

2004-04-02 23:08  gb

	* lisp-kernel/pmcl-kernel.c: Use readlink() to determine executable
	pathname under Linux.  Use PATH_MAX on	both platforms.

2004-04-02 22:53  gb

	* lisp-kernel/pmcl-kernel.c: Determine executable pathname (needs
	to use /proc on Linux.)

2004-04-02 22:53  gb

	* lisp-kernel/lisp-exceptions.c: Hysteresis in stack-overflow
	recovery.  (Needs testing.)

2004-04-02 22:52  gb

	* library/lispequ.lisp: Add bt.break-condition.

2004-04-02 22:51  gb

	* lib/describe.lisp: Break condition comes from context now.

2004-04-02 22:50  gb

	* lib/backtrace-lds.lisp: %ACTIVE-AREA is deprecated.

2004-04-02 22:49  gb

	* level-1/l1-readloop-lds.lisp: Backtrace context now contains the
	break condition.

2004-04-02 22:47  gb

	* level-1/l1-lisp-threads.lisp: Fencepost in %PTR-IN-AREA-P. 
	Deprecate (and remove some calls to) %ACTIVE-AREA, since stacks
	have been contiguous for a couple of years now ...

2004-04-02 22:44  gb

	* level-1/l1-clos.lisp: Check for circularities when checking for
	forward-referenced superclasses.  Redefine %ADD-METHOD as
	ADD-METHOD when we're able to.	ENSURE-CLASS-USING-CLASS of a
	forward-referenced class passes initargs to CHANGE-CLASS.

2004-03-27 18:51  gb

	* examples/: cocoa-editor.lisp, cocoa-listener.lisp: Umm,
	background color components are of type :float.

2004-03-27 04:08  gb

	* OpenMCL.app/Contents/Resources/English.lproj/lispeditor~.nib/:
	classes.nib, info.nib, objects.nib: remove backup files from CVS

2004-03-27 04:05  gb

	*
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/objects.n
	ib: Not sure what changed, but IB found inconsistencies and wanted
	the .nib to be saved.

2004-03-27 03:59  gb

	* OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/:
	info.nib, objects.nib: Not sure what changed, but IB found
	inconsistencies and wanted the .nib to be saved.

2004-03-27 03:58  gb

	* examples/cocoa-backtrace.lisp: Integration.

2004-03-27 03:58  gb

	* examples/cocoa-editor.lisp: Color stuff, redisplay changes.  Use
	a sheet to display error messages from Hemlock command threads.

2004-03-27 03:57  gb

	* examples/cocoa-listener.lisp: Color stuff; maintain backtrace
	contexts in threads.  Menu action functions, validation for
	interrupt and backtrace.

2004-03-27 03:55  gb

	* examples/cocoa.lisp: Require COCOA-BACKTRACE.  Move
	UI-DO-OPERATION here, implement backtrace operations.

2004-03-27 03:54  gb

	* examples/objc-runtime.lisp: Don't install deallocate hook, for
	the time being.

2004-03-27 03:53  gb

	* hemlock/src/cocoa-hemlock.lisp: Update the selection before
	grabbing the next key-event.  Timed-wait on next event, for
	EDITOR-SLEEP.

2004-03-27 03:52  gb

	* hemlock/src/htext1.lisp: lock/unlock the buffer (actually the
	gap-cache) when editing.

2004-03-27 03:52  gb

	* hemlock/src/htext2.lisp: MAYBE-UPDATE-SELECTION: doesn't do
	anything anymore; should be removed.

2004-03-27 03:51  gb

	* hemlock/src/killcoms.lisp: Active region vars are now
	symbol-macros.

2004-03-27 03:50  gb

	* hemlock/src/listener.lisp: *POP-STRING* needed a newline.

2004-03-27 03:50  gb

	* hemlock/src/macros.lisp: Use new error handler.

2004-03-27 03:50  gb

	* hemlock/src/rompsite.lisp: Make EDITOR-SLEEP kind of work.

2004-03-27 03:49  gb

	* hemlock/src/struct.lisp: Keep active region stuff in gap-cache.

2004-03-27 03:48  gb

	* level-1/l1-clos.lisp: Fix error message typo when allocating GFs.

2004-03-27 03:47  gb

	* level-1/l1-dcode.lisp: Don't set &allow-other-keys in GF lambda
	lists if method only says &key.

2004-03-27 03:45  gb

	* level-1/l1-files.lisp: Quote more chars when converting from
	native namestrings.

2004-03-27 03:45  gb

	* level-1/version.lisp: 040326.

2004-03-27 03:44  gb

	* lib/macros.lisp: Unknown slot options in DEFCLASS: use CDR, not
	CADR for option value.

2004-03-27 03:43  gb

	* level-1/linux-files.lisp: NANOSCECONDS: always return two
	integers.

2004-03-25 18:13  gb

	* level-0/PPC/ppc-float.lisp: %SET-FPSCR-CONTROL: maintain stack
	discipline.  Write zeroes to status fields as well, to avoid
	enabling a signaled exception.

2004-03-25 13:10  gb

	* OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/:
	classes.nib, info.nib, objects.nib: Lisp menu

2004-03-24 20:28  gb

	* level-1/version.lisp: 040324.

2004-03-24 18:08  gb

	* compiler/dll-node.lisp: PROVIDE's been in the CL package for the
	last decade or so.  (This (small) change was made from a
	Hemlock/Cocoa editor !)

2004-03-24 18:07  gb

	* examples/cocoa-listener.lisp: EVAL-SELECTION ui methods.

2004-03-24 18:06  gb

	* examples/cocoa-editor.lisp: Update the buffer-cache after
	processing deletion notification.  MAKE-HEMLOCK-BUFFER makes the
	gap-context, used to make all buffers except echo area. 
	NSSTRING-TO-BUFFER needs to set up gap context.

2004-03-24 18:04  gb

	* hemlock/src/bindings.lisp: #k"enter", #k"c-m-x" bound to "Editor
	Evaluate Defun".

2004-03-24 18:03  gb

	* hemlock/src/listener.lisp: Eval-region via selection queue
	mechanism.

2004-03-24 18:03  gb

	* level-1/l1-clos-boot.lisp: Fix typo in error message
	(rededefining non-GF as GF.)

2004-03-24 10:26  gb

	* examples/cocoa-editor.lisp: Clean this up: put things in the
	right package.

2004-03-24 01:51  gb

	* examples/cocoa-editor.lisp: Use new gap-cache stuff.	Keep track
	of editing in textstorage; don't move point when editing.

2004-03-24 01:49  gb

	* examples/cocoa-listener.lisp: Get FDs right when starting a
	listener process.  Note package correctly.

2004-03-24 01:48  gb

	* hemlock/src/command.lisp: Transpose Characters - do it even if at
	line end (may be bugs in %SET-NEXT-CHARACTER.)

2004-03-24 01:47  gb

	* hemlock/src/htext1.lisp: New shared gap scheme.

2004-03-24 01:46  gb

	* hemlock/src/htext2.lisp: Use circumflex in mark printer. 
	%SET-NEXT-CHARACTER changes (still bugs here.)

2004-03-24 01:44  gb

	* hemlock/src/: struct.lisp, decls.lisp: New (shared) gap-cache
	stuff.

2004-03-24 01:43  gb

	* level-1/l1-streams.lisp: SELECTION-INPUT-STREAM fixes.

2004-03-23 23:34  gb

	* level-0/nfasload.lisp: Skip the alignment bytes when reading a
	(SIMPLE-ARRAY DOUBLE-FLOAT (*)).

2004-03-23 23:33  gb

	* lib/nfcomp.lisp: Skip the alignment bytes when writing a
	(SIMPLE-ARRAY DOUBLE-FLOAT (*)), but don't act as if they were
	included in the value returned by SUBTAG-BYTES.

2004-03-22 10:41  gb

	* examples/cocoa-editor.lisp: Process Hemlock commands in a
	per-frame thread.

2004-03-22 10:40  gb

	* examples/cocoa-listener.lisp: New listener
	process/selection-stream stuff.

2004-03-22 10:39  gb

	* examples/cocoa-window.lisp: Initialize UI object here.

2004-03-22 10:38  gb

	* examples/cocoa.lisp: UI object will be *NSApp*.

2004-03-22 10:38  gb

	* hemlock/src/bindings.lisp: Rearrange a bit.

2004-03-22 10:38  gb

	* hemlock/src/cocoa-hemlock.lisp: Maintain event queue in per-frame
	thread.

2004-03-22 10:37  gb

	* hemlock/src/edit-defs.lisp: Start to make this saner.

2004-03-22 10:37  gb

	* hemlock/src/htext1.lisp: Cache buffer gap variables in buffer,
	when passing buffer between threads.

2004-03-22 10:36  gb

	* hemlock/src/interp.lisp: Run a %COMMAND-LOOP (in a separate
	thread) after all.

2004-03-22 10:35  gb

	* hemlock/src/modeline.lisp: Major mode listed before others,
	always.

2004-03-22 10:35  gb

	* hemlock/src/listener.lisp: Hook for package change.  Use
	selection stream.

2004-03-22 10:34  gb

	* hemlock/src/key-event.lisp: Maintain key-events in doubly-linked
	lists.

2004-03-22 10:34  gb

	* hemlock/src/struct.lisp: Extra slots in BUFFER, to cache gap
	variables.

2004-03-22 10:33  gb

	* hemlock/src/ring.lisp: Lock rings while operating on them.

2004-03-22 10:32  gb

	* level-1/l1-boot-lds.lisp: MAKE-MCL-LISTENER-PROCESS changes.

2004-03-22 10:32  gb

	* level-1/l1-application.lisp: New file; define application class,
	subclasses.

2004-03-22 10:31  gb

	* level-1/l1-lisp-threads.lisp: NEW-TCR converts pointer to fixnum,
	even if sign bit set.

2004-03-22 10:30  gb

	* level-1/l1-processes.lisp: MAKE-PROCESS takes :CLASS argument.

2004-03-22 10:30  gb

	* level-1/l1-reader.lisp: All control chars, #\Space are
	whitespace.

2004-03-22 10:30  gb

	* level-1/l1-readloop-lds.lisp: toplevel loop changes.

2004-03-22 10:29  gb

	* level-1/l1-readloop.lisp: Move application stuff to
	l1-application.

2004-03-22 10:28  gb

	* level-1/l1-streams.lisp: Selection-stream stuff, apparently still
	buggy.

2004-03-22 10:27  gb

	* level-1/level-1.lisp: Load l1-application.

2004-03-22 10:27  gb

	* level-1/version.lisp: 040322.

2004-03-22 10:27  gb

	* lib/: compile-ccl.lisp, systems.lisp: Add l1-application.

2004-03-22 10:26  gb

	* OpenMCL.app/Contents/Info.plist: Change document classes to
	Hemlock*.

2004-03-22 04:12  gb

	* hemlock/src/decls.lisp: restored

2004-03-22 04:12  gb

	* hemlock/src/decls.lisp: accidental removal

2004-03-20 16:38  gb

	* level-1/version.lisp: Bump version to 040320.

2004-03-20 00:38  gb

	* examples/cocoa-editor.lisp: Handle key events in echo area.

2004-03-20 00:37  gb

	* examples/compile-hemlock.lisp: Revive kbdmac.

2004-03-20 00:37  gb

	* hemlock/src/rompsite.lisp: Remove more clx/tty stuff.

2004-03-20 00:36  gb

	* hemlock/src/kbdmac.lisp: Revive,  but don't create stream yet.

2004-03-20 00:35  gb

	* hemlock/src/: cocoa-hemlock.lisp, command.lisp, interp.lisp: More
	command-interpreter changes.

2004-03-19 11:39  gb

	* lisp-kernel/thread_manager.c: set foreign thread tcr back to NULL
	in tsd on exit

2004-03-18 17:48  gb

	* hemlock/src/streams.lisp: Bind current-buffer.  No real
	difference in output-buffering stuff.

2004-03-18 17:47  gb

	* hemlock/src/: main.lisp, rompsite.lisp: Remove/comment-out some
	unused stuff.

2004-03-18 17:47  gb

	* hemlock/src/interp.lisp: Use MESSAGE for editor-errors.  Call
	command-interpreter-info-function (for extended input stuff.)

2004-03-18 17:46  gb

	* hemlock/src/echo.lisp: Bind current-buffer when clearing echo
	area.

2004-03-18 17:44  gb

	* hemlock/src/command.lisp: Quoted-insert sets up command-info
	function.

2004-03-18 17:43  gb

	* hemlock/src/cocoa-hemlock.lisp: Command-information struct moves
	here; add function slot.

2004-03-18 17:43  gb

	* examples/cocoa-editor.lisp: Add echo-area stuff, start to use it.

2004-03-17 17:19  gb

	* lisp-kernel/thread_manager.c: Foreign thread exit on first
	cleanup call.  (Should all threads do so, after all ?)

2004-03-17 17:19  gb

	* level-1/l1-lisp-threads.lisp: Return NIL (not 0/%null-ptr) if no
	underlying pthread.

2004-03-17 17:18  gb

	* examples/cocoa-listener.lisp: Window-close on listener thread
	exit: don't wait around (deadlocks during QUIT.)

2004-03-17 08:43  gb

	* lisp-kernel/lisp-exceptions.c: Suspend other threads on entry to
	debugger (not on entry to Bug.)

2004-03-17 08:29  gb

	* lisp-kernel/lisp-debug.c: Suspend other threads on entry to
	debugger (not on entry to Bug.)

2004-03-17 08:29  gb

	* library/lispequ.lisp: Backtrace-info changes.

2004-03-17 08:28  gb

	* lib/describe.lisp: tsp/vsp ranges, for bogus-object detection.

2004-03-17 08:26  gb

	* level-1/l1-readloop-lds.lisp: Backtrace/break-loop changes.

2004-03-17 08:26  gb

	* level-1/l1-lisp-threads.lisp: LLGPL.	Fix some dynamic-binding
	stuff; ad-hoc scheme for bogus-thing check in (some) other threads.

2004-03-17 08:24  gb

	* level-0/PPC/ppc-def.lisp: %CATCH-TOP is always in the same place.

2004-03-17 08:23  gb

	* examples/cocoa-listener.lisp: No more *OPEN-EDITOR-DOCUMENTS*.

2004-03-17 08:22  gb

	* examples/cocoa-backtrace.lisp: Getting closer ...

2004-03-17 08:19  gb

	* examples/cocoa-window.lisp: Create an NSThread early.

2004-03-17 08:18  gb

	* examples/objc-runtime.lisp:
	%make-nsstring/%make-constant-nsstring.

2004-03-17 08:17  gb

	* OpenMCL.app/Contents/Resources/English.lproj/backtrace.nib/:
	classes.nib, info.nib, objects.nib: Smaller, striped ...

2004-03-12 06:24  gb

	* OpenMCL.app/Contents/Resources/English.lproj/backtrace.nib/:
	classes.nib, info.nib, objects.nib: add backtrace nib

2004-03-12 06:23  gb

	* examples/cocoa-backtrace.lisp: use nib

2004-03-08 12:36  gb

	* lisp-kernel/lisp-exceptions.c: Fix fatal_mach_error() prototype.

2004-03-08 07:02  gb

	* lisp-kernel/lisp-exceptions.c: Fix MACH_CHECK_ERROR.

2004-03-08 07:01  gb

	* library/lispequ.lisp: bt.stack-group -> bt.tcr

2004-03-08 07:00  gb

	* lib/describe.lisp: Add stack-inspector stuff.

2004-03-08 06:59  gb

	* level-1/l1-clos.lisp: SLOTS-CLASS has to look for primary-p-ness.

2004-03-08 06:58  gb

	* level-1/l1-clos-boot.lisp: Set GF lfun-bits if continued after
	congruency error.  SLOTS-CLASS has to look for primary-p-ness.

2004-03-08 06:56  gb

	* examples/cocoa-window.lisp: Factor in window creation.

2004-03-08 06:56  gb

	* examples/cocoa-editor.lisp: Factor out window creation.

2004-03-08 06:55  gb

	* examples/cocoa-backtrace.lisp: New file.  Doesn't work ...

2004-03-07 12:53  gb

	* lisp-kernel/pmcl-kernel.c: Parameterize MAXIMUM_MAPPABLE_MEMORY.

2004-03-07 12:53  gb

	* lib/level-2.lisp: No EVAL-REDEF for %newgotag.

2004-03-07 12:52  gb

	* compiler/nx1.lisp: No DEFNX1 for %newgotag.

2004-03-07 01:03  gb

	* lisp-kernel/constants64.h: Note that use of go/block tags is
	deprecated.

2004-03-07 01:03  gb

	* compiler/: nx0.lisp, nx1.lisp: Don't use dynamic block/go tags. 
	Forget about event-polling, etc.

2004-03-07 01:02  gb

	* compiler/PPC/ppc2.lisp: Don't use dynamic block/go tags.

2004-03-07 01:01  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Try to bring inline with
	constants64.[sh]

2004-03-07 00:55  gb

	* examples/cocoa-editor.lisp: Echo areas on windows.  Start the UI
	here when asked to.  Scroll windows.

2004-03-07 00:54  gb

	* examples/cocoa-defaults.lisp: Only synch if we added a new key.

2004-03-07 00:53  gb

	* examples/cocoa.lisp: APPLICATION-WILL-FINISH-LAUNCHING: start the
	UI.

2004-03-07 00:53  gb

	* hemlock/src/command.lisp: Window-scrolling changes.

2004-03-07 00:53  gb

	* hemlock/src/cursor.lisp: Let Cocoa scroll windows.

2004-03-07 00:52  gb

	* level-0/l0-misc.lisp: Per-thread stack-space calculated on a
	per-process basis.

2004-03-07 00:52  gb

	* level-1/l1-readloop-lds.lisp: BREAK-LOOP creates backtrace
	context, tells the application when it's valid.

2004-03-07 00:50  gb

	* level-1/l1-processes.lisp: *BACKTRACE-CONTEXTS* is bound
	per-thread.

2004-03-07 00:50  gb

	* level-1/ppc-threads-utils.lisp: Foreign thread initialization
	needs to emulate shallow per-thread binding.

2004-03-07 00:49  gb

	* level-1/version.lisp: 040307

2004-03-07 00:49  gb

	* lisp-kernel/thread_manager.c: Lock the area_lock while threads
	are suspended.	TCR cleanup frees tlb_pointer.

2004-03-07 00:48  gb

	* lisp-kernel/lisp-exceptions.c: darwin_exception_cleanup() frees
	native_thread_info (foreign exception state).

2004-03-07 00:37  gb

	* lisp-kernel/ppc_print.c: Careful with the use of ptr_from_lispobj
	in add_lisp_base_string.  Careful with the use of immheader_tag_p
	when printing vectors.

2004-03-06 03:10  gb

	* lisp-kernel/: Threads.h, area.h, constants64.h, gc.c, image.c,
	lisp-debug.c, lisp-exceptions.c, lisp-exceptions.h, lisptypes.h,
	macros.h, plbt.c, plsym.c, pmcl-kernel.c, ppc_print.c,
	thread_manager.c: Lots of PPC64 changes.  Move image_base to
	#x200000 on Darwin; reserve a little under 2GB by default.  Don't
	abort() if Mach exception-port stuff fails.

2004-03-06 03:04  gb

	* xdump/xfasload.lisp: Move image-base to #x200000 on Darwin.

2004-03-06 02:47  gb

	* examples/cocoa-defaults.lisp, examples/cocoa-editor.lisp,
	examples/cocoa-listener.lisp, hemlock/src/font.lisp,
	hemlock/src/listener.lisp, hemlock/src/rompsite.lisp: Random
	changes; still barely functional.

2004-03-03 16:27  gb

	* level-1/l1-clos.lisp: Define and use
	COMPUTE-CLASS-PRECEDENCE-LIST.	Flush initargs caches whenever
	class is finalized.

2004-03-03 15:20  gb

	* examples/objc-runtime.lisp: Uninstall dealloc-hook on
	*SAVE-EXIT-FUNCTIONS* (run before SAVE-APPLICATION), not
	*LISP-CLEANUP-FUNCTIONS* (so slot-vectors stay around during
	shutdown.)

2004-03-03 15:18  gb

	* examples/objc-clos.lisp: CRLF -> LF.

2004-03-03 15:01  gb

	* examples/cocoa-window.lisp: Require (and use) "COCOA-DEFAULTS".

2004-03-03 15:00  gb

	* examples/cocoa-listener.lisp: Wait until initial thread does
	CLOSE during listener thread cleanup.

2004-03-03 15:00  gb

	* examples/cocoa-editor.lisp: CLOSE message: close document before
	invoking SUPER method, not after.  Insertion/deletion fixes.

2004-03-03 14:56  gb

	* examples/cocoa-defaults.lisp: New file: maintain "defaults" via
	NSUserDefaults.

2004-03-03 14:53  gb

	* compiler/optimizers.lisp: fix %MAKE-DISPLACED-ARRAY call

2004-03-02 19:39  gb

	* lisp-kernel/spentry.s: Fix in destructuring-bind code.

2004-03-01 17:52  gb

	* hemlock/src/: main.lisp, modeline.lisp: Fix typos, start to
	introduce package-changed hooks.

2004-03-01 11:04  gb

	* lisp-kernel/thread_manager.c: Declare the right function in
	new_tcr().

2004-03-01 10:08  gb

	* lisp-kernel/: area.h, gc.c, image.c, imports.s, lisp_globals.h,
	pmcl-kernel.c, thread_manager.c: Use AREA_LOCK when accessing
	all_areas, unless we're early in bootstrapping.  Change the API,
	such as it is.	Need to ensure that readers/GC obey locking, as
	well.

2004-03-01 10:06  gb

	* level-1/l1-readloop.lisp: APPLICATION-UI-OBJECT stuff.

2004-03-01 10:06  gb

	* level-1/l1-readloop-lds.lisp: Notify "application-ui" on package
	change.

2004-03-01 10:05  gb

	* level-1/l1-lisp-threads.lisp: Don't terminate LISP-THREADs.

2004-03-01 10:05  gb

	* level-1/l1-clos-boot.lisp: DEFAULT-INITARGS: function follows
	form ...

2004-03-01 10:04  gb

	* level-1/l1-boot-lds.lisp: Use application-ui stuff to note
	initial package.

2004-03-01 10:03  gb

	* lib/macros.lisp: Invert order of initform/initfunction (FORM
	follows FUNCTION ? Nah ..) in canonicalized
	direct-default-initargs.

2004-03-01 10:02  gb

	* level-0/l0-int.lisp: Fix SIZE-VECT in bignum printer.

2004-03-01 10:01  gb

	* examples/cocoa-editor.lisp, examples/cocoa-listener.lisp,
	examples/cocoa-window.lisp, examples/cocoa.lisp,
	examples/compile-hemlock.lisp, hemlock/src/buffer.lisp,
	hemlock/src/listener.lisp, hemlock/src/modeline.lisp,
	hemlock/src/struct.lisp: More changes.	Every day, more changes. 
	(Listeners kind of work now.)

2004-02-29 07:56  gb

	* hemlock/src/bindings.lisp: Some listener-mode bindings.

2004-02-28 18:40  gb

	* hemlock/src/listener.lisp: Derived from lispbuf.lisp; barely
	differs yet.  Start to bring this code into the 90s.

2004-02-28 18:39  gb

	* hemlock/src/bindings.lisp: Some commented-out Listener-mode
	stuff.

2004-02-28 18:38  gb

	* hemlock/src/modeline.lisp: CR-terminated files have
	:EXTERNAL-FORMAT :MACOS, not :MAC.

2004-02-28 18:36  gb

	* examples/: cocoa-editor.lisp, cocoa-listener.lisp: Various
	changes.  Listeners still aren't functional.

2004-02-28 18:36  gb

	* examples/compile-hemlock.lisp: "listener" replaces "lispbuf".

2004-02-28 18:35  gb

	* compiler/optimizers.lisp: Bryan O'Connor's fix to
	COMP-MAKE-DISPLACED-ARRAY (make displacement explicit.)

2004-02-28 16:59  gb

	* level-1/l1-typesys.lisp: Fix typo, add more cases in
	CACHEABLE-CTYPE-P.

2004-02-28 02:24  gb

	* examples/hemlock-textstorage.lisp: Merge into cocoa-editor.lisp,
	remove this file.

2004-02-28 02:23  gb

	* hemlock/src/: bindings.lisp, cocoa-hemlock.lisp, filecoms.lisp,
	htext1.lisp, htext3.lisp, modeline.lisp, streams.lisp, struct.lisp:
	More changes for Cocoa Hemlock.

2004-02-28 02:22  gb

	* level-1/l1-typesys.lisp: Don't cache things involving certain
	MEMBER-CTYPEs.

2004-02-28 02:21  gb

	* level-1/: l1-streams.lisp, l1-sysio.lisp: stream ELEMENT-SHIFT
	fixes (from Bryan O'Connor.)

2004-02-28 02:20  gb

	* level-1/l1-error-system.lisp: INVOKE-RESTART recognizes simple
	restarts (from Bryan O'Connor.)

2004-02-28 02:19  gb

	* level-1/: l1-aprims.lisp, l1-utils.lisp: MAKE-ARRAY (and
	variants) track explicit array displacement (from Bryan O'Connor).

2004-02-28 02:16  gb

	* level-0/l0-array.lisp: ARRAY-DISPLACEMENT checks for explicit
	displacement (from Bryan O'Connor.)

2004-02-28 02:14  gb

	* level-0/l0-complex.lisp: Require NUMBER-MACROS at compile-time.

2004-02-28 02:14  gb

	* level-1/version.lisp: 0.14.2-040228.

2004-02-28 02:13  gb

	* lib/arrays-fry.lisp: ADJUST-ARRAY fixes (from Bryan O'Connor).

2004-02-28 02:12  gb

	* lib/macros.lisp: WITH-SIMPLE-RESTART change (from Bryan
	O'Connor).

2004-02-28 02:11  gb

	* library/lispequ.lisp: Define $arh_exp_disp_bit (from Bryan
	O'Connor).

2004-02-27 19:24  gb

	* OpenMCL.app/Contents/Info.plist: Try to persuade system to use
	openmcl icon for lisp documents.

2004-02-27 09:32  beer

	* examples/objc-clos.lisp: ObjC generic functions and methods for
	predefined ObjC messages mostly seem to work; support for
	conversion between ObjC records and Lisp structs (mostly from Gary)

2004-02-27 09:27  beer

	* examples/bridge.lisp: *TYPE-SIGNATURE-TABLE* now contains message
	descriptors; some new automatic type coercions for message
	arguments

2004-02-27 09:25  beer

	* examples/objc-runtime.lisp: UPDATE-TYPE-SIGNATURES-FOR-METHOD now
	takes a class as a second argument

2004-02-27 09:23  beer

	* examples/name-translation.lisp: Yet a few more new ObjC special
	words

2004-02-26 12:59  gb

	* lisp-kernel/thread_manager.c: (Hopefully) return NULL if
	semaphore_create() fails.

2004-02-26 12:58  gb

	* level-0/l0-aprims.lisp: Check return value from semaphore
	creation.

2004-02-26 12:57  gb

	* examples/cocoa-editor.lisp, examples/cocoa-listener.lisp,
	examples/cocoa-window.lisp, examples/hemlock-textstorage.lisp,
	hemlock/src/bindings.lisp, hemlock/src/buffer.lisp,
	hemlock/src/cocoa-hemlock.lisp, hemlock/src/filecoms.lisp,
	hemlock/src/htext1.lisp, hemlock/src/htext2.lisp,
	hemlock/src/htext3.lisp, hemlock/src/modeline.lisp,
	hemlock/src/struct.lisp, level-1/l1-readloop.lisp: QUIT typechecks
	arg before it's too late to do so.

2004-02-24 13:31  gb

	* examples/: cocoa-editor.lisp, cocoa-listener.lisp,
	cocoa-window.lisp, hemlock-textstorage.lisp: Start to use Hemlock
	for documents.

2004-02-24 13:30  gb

	* examples/objc-runtime.lisp: Use some other obscure way of
	initializing class before looking for methods (Panther).

2004-02-23 18:41  gb

	* examples/hemlock-textstorage.lisp, hemlock/src/bindings.lisp,
	hemlock/src/cocoa-hemlock.lisp, hemlock/src/command.lisp,
	hemlock/src/interp.lisp, hemlock/src/modeline.lisp,
	hemlock/src/struct.lisp: more changes.

2004-02-23 18:40  gb

	* examples/objc-runtime.lisp: method lookup: ensure class is
	initialized, via fairly obscure means.

2004-02-23 18:40  gb

	* examples/compile-hemlock.lisp: Add COCOA-HEMLOCK.

2004-02-23 18:39  gb

	* examples/cocoa-editor.lisp: require HEMLOCK-TEXTSTORAGE.  (Blows
	up during load ...).

2004-02-23 10:20  gb

	* examples/hemlock-textstorage.lisp, hemlock/src/bindings.lisp,
	hemlock/src/htext1.lisp, hemlock/src/htext2.lisp,
	hemlock/src/htext3.lisp, hemlock/src/htext4.lisp,
	hemlock/src/interp.lisp, hemlock/src/keysym-defs.lisp,
	hemlock/src/morecoms.lisp: Lots-o-changes.

2004-02-23 10:18  gb

	* examples/compile-hemlock.lisp: Reorganize; use FASL-CONCATENATE.

2004-02-23 10:18  gb

	* compiler/PPC/ppc2.lisp: Bugs in PPC2-%SET-BIT.

2004-02-21 18:41  gb

	* hemlock/src/keysym-defs.lisp: Learn to spell.  Learn what package
	we're in.

2004-02-21 18:40  gb

	* hemlock/src/keysym-defs.lisp: Learn to spell.

2004-02-21 18:27  gb

	* lisp-kernel/: area.h, bits.c, bits.h, constants.h, constants32.h,
	constants64.h, constants64.s, gc.c, gc.h, lisp-exceptions.h,
	lisp.h, lisp_globals.h, lisptypes.h, macros.h, macros.s, plsym.c,
	pmcl-kernel.c, spentry.s, darwin/.gdb_history, darwin/Makefile,
	pantherg5/Makefile: PPC64 changes (some of them rather suspect
	...).  32-bit kernel may be a little funky ...

2004-02-21 18:21  gb

	* examples/hemlock-textstorage.lisp: Lots of changes.  Still needs
	event-translation work (and lots of other things.)

2004-02-21 18:20  gb

	* examples/compile-hemlock.lisp: Fewer files.  More warnings ...

2004-02-21 18:19  gb

	* hemlock/src/: htext2.lisp, htext1.lisp: Maybe update the
	selection if the mark we move is the buffer's point.

2004-02-21 18:16  gb

	* hemlock/src/interp.lisp: Process single events.

2004-02-21 18:16  gb

	* hemlock/src/keysym-defs.lisp: Cocoa, not an RT.  (Still needs
	some work.)

2004-02-21 18:15  gb

	* hemlock/src/struct.lisp: Buffers maybe have text-storage, but no
	windows list.

2004-02-21 18:15  gb

	* hemlock/src/modeline.lisp: Move some modeline stuff here from
	window.lisp.

2004-02-21 18:14  gb

	* examples/objc-clos.lisp: Handle INITFUNCTION/INITARG case in
	SHARED-INITIALIZE.

2004-02-18 11:51  beer

	* examples/objc-clos.lisp: More (and different!) support for ObjC
	generic functions and methods

2004-02-16 03:41  gb

	* level-0/l0-float.lisp: ACOS of DOUBLE-FLOAT wants to
	(%MAKE-DFLOAT) the result.  Again.  Still.

2004-02-15 09:25  gb

	* lisp-kernel/thread_manager.c: Foreign threads linger, too.

2004-02-15 09:23  gb

	* examples/objc-support.lisp: Remove DBG trap in NS-EXCEPTION
	method.

2004-02-15 09:23  gb

	* examples/objc-runtime.lisp: Metaclass of user-defined class
	derived from class-name symbol, not foreign string.

2004-02-15 09:22  gb

	* examples/objc-clos.lisp: ALLOCATE-INSTANCE et al: install the
	instance's slot-vector if it has one.  Error out (don't just return
	nil) if instance slot-vector is missing.  Randall's fix to
	WRITER-METHOD-CLASS.

2004-02-15 09:20  gb

	* examples/process-objc-modules.lisp: Fix PROVIDE call.

2004-02-15 09:19  gb

	* examples/cocoa-window.lisp: Change PROCESS-INTERRUPT mechanism,
	since postEvent:atStart: doesn't seem to always do so from
	subthreads.

2004-02-15 09:17  gb

	* lib/number-case-macro.lisp: SINGLE-FLOAT, in *TYPE-TO-TYPECODE*.

2004-02-15 09:16  gb

	* lib/macros.lisp: WITH-OUTPUT-TO-STRING: don't quote element-type.

2004-02-15 09:14  gb

	* lib/backtrace-lds.lisp: OPCODE is in the ARCH package.

2004-02-15 09:10  gb

	* lib/dumplisp.lisp: No more quit-acknowledgement.

2004-02-15 09:10  gb

	* level-1/version.lisp: Date suffix for bleeding-edge version.

2004-02-15 09:10  gb

	* level-1/l1-readloop.lisp: No more "quit acknowledgement".

2004-02-15 09:08  gb

	* level-0/l0-float.lisp: pick up acos/asin fixes

2004-02-13 11:18  beer

	* examples/objc-clos.lisp: Some initial steps toward integrating
	ObjC methods into CLOS generic functions

2004-02-13 11:17  beer

	* examples/name-translation.lisp: Added a few more special ObjC
	words I've come across Removed old generic function name-mangling
	code, since we're no going that route

2004-02-12 00:22  gb

	* level-0/l0-float.lisp: ACOS: double-float case uses %MAKE-DFLOAT
	to allocate result.

2004-02-11 20:19  gb

	* lisp-kernel/pantherg5/Makefile: Start to conditionalize for
	PPC64, almost.

2004-02-11 20:17  gb

	* lisp-kernel/spentry.s: Fix a lot of the cases broken by removal
	of extract_2_lisptags_.

2004-02-11 20:16  gb

	* lisp-kernel/macros.s: More portability stuff; still a ways to go.

2004-02-11 20:15  gb

	* lisp-kernel/constants64.s: Flesh out a bit.

2004-02-11 20:15  gb

	* lisp-kernel/constants32.s: Don't suppress PPC64 defs of eabi
	stack frames.

2004-02-11 18:23  gb

	* lisp-kernel/constants.s: Hoist register names, etc into main
	file.

2004-02-11 12:01  gb

	* lisp-kernel/pantherg5/Makefile: Copy of regular Darwin Makefile,
	for starters.

2004-02-11 12:00  gb

	* lisp-kernel/darwin/Makefile: Beg the assembler to be
	AltiVec-aware.	Probably a better way.

2004-02-11 12:00  gb

	* lisp-kernel/spentry.s: Partly convert to 64-bit-maybeness.

2004-02-11 11:59  gb

	* lisp-kernel/macros.s: Parameterize more for ppc32/ppc64.

2004-02-11 11:59  gb

	* lisp-kernel/constants32.s: 32-bit platform constants.

2004-02-11 11:58  gb

	* lisp-kernel/constants.s: Include platform-specific constants
	file.

2004-02-11 11:58  gb

	* lisp-kernel/asmutils.s: Assume that the assembler is AltiVec
	aware in vector save/restore.  (Do we need vector save/restore ?)

2004-02-11 01:54  gb

	* lib/: compile-ccl.lisp, systems.lisp: add asdf, defsystem

2004-02-10 12:06  gb

	* compiler/nx-basic.lisp: VARIABLE-INFORMATION returns :SPECIAL if
	visible binding is proclaimed (but not declared) SPECIAL.

2004-02-10 11:39  gb

	* level-1/version.lisp: 0.14.1

2004-02-10 10:58  gb

	* lisp-kernel/sampler.c: was never used

2004-02-09 09:26  gb

	* level-1/l1-processes.lisp: ABORT-BREAK restart around process's
	initial function.

2004-02-09 09:22  gb

	* level-1/linux-files.lisp: Aargh.

2004-02-09 09:22  gb

	* level-1/l1-readloop.lisp: WITH-STANDARD-ABORT-HANDLING around the
	idle loop.

2004-02-09 01:34  gb

	* lisp-kernel/pmcl-kernel.c: egc back on

2004-02-09 01:33  gb

	* level-1/l1-files.lisp: fix error message on REQUIRE failure

2004-02-08 19:11  gb

	* level-0/PPC/ppc-float.lisp: %%SCALE-DFLOAT reserved 16 bytes on
	tsp, but used 24.

2004-02-07 23:08  gb

	* level-1/l1-pathnames.lisp: Add "ccl:tools;" to
	*MODULE-SEARCH-PATH*.

2004-02-07 23:08  gb

	* level-1/version.lisp: 040208, Alpha->Beta.

2004-02-07 22:58  gb

	* tools/README-OpenMCL.txt: New file.

2004-02-07 22:01  gb

	* tools/defsystem.lisp: imported from SourceForge clocc project
	HEAD as of 040207

2004-02-07 22:01  gb

	* tools/asdf.lisp: imported from SourceForge cclan project HEAD as
	of 040207

2004-02-07 21:57  gb

	* tools/asdf-install/: doc/index.html, Makefile, README,
	defpackage.lisp, digitool.lisp, installer.lisp, loader.lisp,
	port.lisp, .cvsignore, asdf-install.asd: imported from SourceForge
	cclan project HEAD as of 040207

2004-02-07 18:06  gb

	* level-1/l1-pathnames.lisp: Don't include "ccl:" or "home:" on
	*module-search-path*.  Do include "ccl:openmcl;modules;".

2004-02-07 18:01  gb

	* level-1/l1-init.lisp: *MODULE-FILE-ALIST* is gone.  Honest.

2004-02-07 18:00  gb

	* level-1/l1-files.lisp: Add a doc string for
	*MODULE-PROVIDER-FUNCTIONS*; reference it in the error message if
	REQUIRE fails.

2004-02-07 17:11  gb

	* level-1/l1-files.lisp: Incorporate Bryan O'Connor's changes to
	REQUIRE (with some changes.)

2004-02-07 17:10  gb

	* lib/ccl-export-syms.lisp: Remove *MODULE-FILE-ALIST*.  Add
	*MODULE-PROVIDER-FUNCTIONS*.

2004-02-07 17:09  gb

	* lib/dumplisp.lisp: Don't reference *MODULE-FILE-ALIST* anymore.

2004-02-07 15:20  gb

	* lib/macros.lisp: Define CCL::CONDITIONAL-STORE, for use by CLX
	(and maybe other things, if it learns how to decode more "places".)

2004-02-07 15:19  gb

	* level-0/l0-misc.lisp: Add STORE-GVECTOR-CONDITIONAL, to hide some
	represenatation details.

2004-02-07 14:59  gb

	* lib/level-2.lisp: %GET-DOUBLE-FLOAT and %GET-SINGLE-FLOAT: offset
	defaults to 0.

2004-02-07 14:58  gb

	* level-1/version.lisp: bump.

2004-02-07 14:58  gb

	* level-1/l1-utils.lisp: %GET-DOUBLE-FLOAT/%SET-DOUBLE-FLOAT were
	shadowed by later versions.

2004-02-07 14:57  gb

	* level-1/l1-readloop.lisp: Initial listener doesn't claim to be
	*INTERACTIVE-ABORT-PROCESS*.

2004-02-07 14:56  gb

	* level-1/l1-files.lisp: Don't call CHOOSE-FILE-DIALOG when looking
	for a module.

2004-02-07 14:55  gb

	* level-1/l1-events.lisp: New scheme to select process for SIGINT.

2004-02-07 14:54  gb

	* examples/objc-runtime.lisp: Revive objc-classes/methods when
	restarting an image.  Check appkit/foundation versions, print a
	message & exit if mismatch.  Find cfstring-containing library
	sections after loading appkit/foundation, and again on image
	startup.

2004-02-07 14:50  gb

	* examples/cocoa-window.lisp: Change comments.

2004-02-06 12:43  gb

	* examples/objc-runtime.lisp: REVIVIE-OBJC-CLASSES (mostly working,
	but needs to happen at the right time and needs to handle version
	mismatches.)

2004-02-06 12:42  gb

	* examples/objc-support.lisp: Don't call REMAP-OBJC-CLASSES on
	saved-application startup.

2004-02-06 12:41  gb

	* examples/process-objc-modules.lisp: No more
	REMAP-ALL-LIBRARY-CLASSES.

2004-02-06 12:40  gb

	* level-1/l1-boot-2.lisp: Replace *TERMINAL-INPUT-LOCK* with the
	new shared-resource scheme.

2004-02-06 12:39  gb

	* level-1/l1-boot-lds.lisp: MAKE-MCL-LISTENER-PROCESS: spawned
	process becomes "primary owner" of input stream, if it has an
	attached SHARED-RESOURCE.

2004-02-06 12:38  gb

	* level-1/l1-processes.lisp: Probably better to have PROCESS-WAIT
	sleep explicitly, so that it doesn't spend all of its time
	yielding.

2004-02-06 12:36  gb

	* level-1/l1-readloop-lds.lisp: Tweaks to the :Y command, to handle
	new shared-resource scheme.  Marco Baringer's :SET breakloop
	command, from almost a year ago.

2004-02-06 12:35  gb

	* level-1/l1-readloop.lisp: TOPLEVEL-FUNCTION manages the "shared
	resource" attached to the shared terminal-input stream.

2004-02-06 12:33  gb

	* level-1/l1-streams.lisp: INPUT-STREAMs may have a SHARED-RESOURCE
	attached to them; use it to manage terminal-input requests.

2004-02-06 12:32  gb

	* level-1/l1-typesys.lisp: Slot type predicates use CTYPEP, to
	(kind of) deal with (FUNCTION ...) types.

2004-02-06 12:30  gb

	* level-1/level-1.lisp: Load DLL-NODE a little earlier.

2004-02-06 12:30  gb

	* level-1/linux-files.lisp: SHARED-RESOURCEs, mostly for
	arbitrating access to CCL::*TERMINAL-INPUT*.  (May not work well,
	but neither did the old scheme.)

2004-02-06 12:28  gb

	* level-1/version.lisp: 040206.

2004-02-06 12:27  gb

	* lib/dumplisp.lisp: Do handshaking with initial thread before
	shutting down for SAVE-APPLICATION.

2004-02-06 12:27  gb

	* lib/macros.lisp: WITH-TERMINAL-INPUT changed slightly.

2004-02-06 12:26  gb

	* lisp-kernel/thread_manager.c: Keep the tcr around as long as
	possible (count down from PTHREAD_DESTRUCTOR_ITERATIONS).  Handle
	the case when a pthread can no longer reveive signals but the
	underlying Mach thread still exists, in suspend_tcr/resume_tcr.

2004-02-06 12:24  gb

	* lisp-kernel/lisp-exceptions.c: Provide mach_suspend_tcr(),
	mach_resume_tcr() so that threads can be suspended between
	pthread_exit() and their actual termination.

2004-02-06 11:57  gb

	* lisp-kernel/: constants.h, constants.s: Add shutdown_count field
	to tcr.

2004-02-02 09:22  gb

	* examples/objc-runtime.lisp: New
	OBJC-[CLASS,METACLASS,INSTANCE]-p, OBJC-OBJECT-P uses them.
	
	Install a callback to take over _dealloc responsibilities.  Doing
	so seems to sometimes trigger a hang on QUIT, where the initial
	thread never gets an interrupt.  Maybe memory corruption, maybe
	something else: need to check that (free) is the right way to free
	the object.

2004-02-02 09:15  gb

	* level-1/l1-error-system.lisp: Bryan O'Connor's change to
	INVOKE-RESTART: throw NIL if simple-restart/null fn.

2004-02-02 09:14  gb

	* level-1/l1-io.lisp: FUNCTION-IS-CURRENT-DEFINITION? knows about
	these new-fangled SETF function names.

2004-02-02 09:12  gb

	* level-1/l1-lisp-threads.lisp: Disable interrupts when accessing
	the termination queue; may need to inhibit GC as well.

2004-02-02 09:11  gb

	* level-1/l1-processes.lisp: REQUIRE-GLOBAL-SYMBOL checks the
	environment, too.

2004-02-02 09:11  gb

	* level-1/l1-readloop.lisp: Handshaking during
	QUIT/PREPARE-TO-QUIT; this is intended to work around a bug where
	#_pthread_kill seems to not deliver the signal to the target thread
	if the signaling thread (a) exits and (b) runs certain Cocoa
	tsd-cleanup routines.  (I.e., it's a mystery.)

2004-02-02 09:08  gb

	* level-1/l1-streams.lisp: Bryan O'Connor's change to FILE-LENGTH. 
	Default methods on some things that are supposed to TYPE-ERROR, not
	get a NO-APPLICABLE-METHOD.

2004-02-02 09:07  gb

	* level-1/version.lisp: 040202.

2004-02-02 09:06  gb

	* lib/ccl-export-syms.lisp: export %STR-FROM-PTR.  Don't export
	%STR-FROM-PTR-IN-SCRIPT, which doesn't exist.

2004-02-02 09:06  gb

	* lib/macros.lisp: Bryan O'Connor's fix to WITH-SIMPLE-RESTART. 
	LET-GLOBALLY moved here.

2004-02-02 09:01  gb

	* lisp-kernel/lisp-exceptions.c: Remove old vector-copying stuff.

2004-02-01 12:41  beer

	* examples/objc-clos.lisp: PRINT-OBJECT shouldn't die when given an
	OBJC-OBJECT whose ObjC part has "gone away"

2004-02-01 12:38  beer

	* examples/tiny.lisp: Use DEFCLASS and MAKE-INSTANCE

2004-02-01 12:37  beer

	* examples/bridge.lisp: Move toward the use of FIND-CLASS and
	CLASS-OF

2004-02-01 11:09  gb

	* lisp-kernel/: constants.h, thread_manager.c: Experimental change,
	to defer tcr cleanup.

2004-02-01 09:50  beer

	* examples/objc-clos.lisp: REMOVE-SLOT-INITARGS was dropping the
	last KEY/VALUE pair

2004-02-01 08:42  gb

	* examples/bridge.lisp: Ivar parsing follows different ruls for
	STRUCT than for *STRUCT; #\B is for :<BOOL>.  Now seems able to
	parse all Foundation/AppKit classes in 10.3.2.

2004-02-01 06:18  gb

	* examples/objc-support.lisp: NS-LISP-EXCEPTION has a lisp slot. 
	Now, to figure out a way to get rid of that ...

2004-02-01 06:17  gb

	* examples/: objc-clos.lisp, objc-runtime.lisp: More than one class
	can share the same metaclass.

2004-01-31 20:05  gb

	* lib/number-case-macro.lisp: Remove stale comment.

2004-01-31 20:04  gb

	* lib/foreign-types.lisp: Fix missing close-paren.

2004-01-31 19:55  gb

	* lib/foreign-types.lisp: Unparse :VOID, use keywords more
	consistently when unparsing.

2004-01-31 19:54  gb

	* library/lispequ.lisp: Fix DEF-ACCESSORS for VALUES-CTYPE.

2004-01-31 19:53  gb

	* lib/macros.lisp: PARSE-DEFGENERIC fix from Bryan O'Connor.

2004-01-30 21:34  gb

	* examples/bridge.lisp: PARSE-FOREIGN-STRUCT-OR-UNION-SPEC allows
	for anonymous fields.

2004-01-30 16:58  gb

	* lisp-kernel/pmcl-kernel.c: Don't enable EGC by default (so I can
	work on tuning it some ...)

2004-01-30 16:57  gb

	* level-1/l1-sysio.lisp: Handle BROADCAST-STREAMs, error out on
	other non-FILE-STREAMs.

2004-01-30 16:56  gb

	* level-1/l1-streams.lisp: Lots of nit-picking; BROADCAST-STREAM
	methods (at least partly) fixed to return value from last stream in
	list.

2004-01-30 16:54  gb

	* level-1/l1-sockets.lisp: Fix CLOSE call to LOCAL-SOCKET-FILENAME.

2004-01-30 16:53  gb

	* level-1/l1-reader.lisp: WHITESPACEP looks in readtable.

2004-01-30 16:52  gb

	* level-1/l1-io.lisp: FRESH-LINE uses STREAM-FRESH-LINE.

2004-01-30 16:51  gb

	* level-1/l1-files.lisp: IF-EXISTS: dialog nonsense.  PROBE-FILE
	checks WILD-PATHNAME-P, which moved here.

2004-01-30 16:49  gb

	* lib/pathnames.lisp: WILD-PATHNAME-P now earlier.

2004-01-30 16:48  gb

	* xdump/faslenv.lisp, lib/nfcomp.lisp: Bump fasl version.

2004-01-30 13:09  gb

	* examples/objc-clos.lisp: Lots of changes: foreign slot
	definitions have a :FOREIGN-TYPE; initarg is used to recognize
	them.  Foreign direct slot offset is (slightly encoded, for
	bitfields) relative slot offset, can be set by parsing ivars of
	predefined classes or from :FOREIGN-TYPE when setting
	(CLASS-DIRECT-SLOTS).  Effective-slot location set from class's own
	direct slot or from superclass direct slot.  The foreign "init.."
	method is called as part of ALLOCATE-INSTANCE, not (again) in
	SHARED-INITIALIZE.  ENSURE-CLASS-USING-CLASS tries to do what we
	mean, not what we say.	Hook into the guts of NSObjectDeallocate to
	note when an instance is deallocated (and remove its lisp
	slots-vector); still needs work.  Note that saving images with
	foreign classes in them still doesn't work.

2004-01-30 12:57  gb

	* examples/objc-runtime.lisp: Lots of changes: get rid of old
	DEF-OBJC-CLASS support, initialize predefined classes using CLOS
	(mostly).

2004-01-30 12:55  gb

	* examples/objc-support.lisp: Install predefined classes here.	Use
	DEFCLASS to create NS-LISP-EXCEPTION.

2004-01-30 12:51  gb

	* examples/process-objc-modules.lisp: MAP-OBJC-CLASS ->
	INSTALL-FOREIGN-OBJC-CLASS.

2004-01-30 12:49  gb

	* examples/: cocoa-editor.lisp, cocoa-inspector.lisp,
	cocoa-listener.lisp, cocoa-window.lisp, cocoa.lisp,
	hemlock-textstorage.lisp: Used DEFCLASS to creat classes,
	SLOT-VALUE or an accessor to access slots.

2004-01-30 12:48  gb

	* examples/bridge.lisp: Parse instance-var type strings differently
	from arg type strings.

2004-01-30 12:46  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Use CMPD vice CMPW.  (1
	down, a few hundred to go.)

2004-01-30 12:45  gb

	* level-1/version.lisp: 040130

2004-01-30 12:44  gb

	* level-1/l1-utils.lisp: %CSTRLEN.

2004-01-30 12:44  gb

	* level-1/l1-sysio.lisp: CLOSE just does CALL-NEXT-METHOD, which
	might work now.

2004-01-30 12:43  gb

	* level-1/l1-streams.lisp: CLOSE: set the closed slot to ...
	something non-NULL.  STREAM-IO-ERROR: so things like sockets can
	specialize it.	Need to test ELEMENT-SHIFT stuff; not sure if I
	merged Bryan's patch correctly.

2004-01-30 12:36  gb

	* level-1/l1-sockets.lisp: SOCKET-ERROR is (simple) STREAM-ERROR. 
	Change how it's signaled, and define STREAM-IO-ERROR for SOCKET.

2004-01-30 12:34  gb

	* level-1/l1-lisp-threads.lisp: Lock on *TERMINATION-POPULATION*
	access.

2004-01-30 12:34  gb

	* level-1/l1-clos.lisp: ADD-READER/WRITER-METHOD: less specialized.
	 Turn a few early accessors into GFs; writer methods on some slots.

2004-01-30 12:32  gb

	* level-1/l1-clos-boot.lisp: CLASS-SLOT-INITARGS,
	CREATE-READER/WRITER-METHOD-FUNCTION: less specialized.

2004-01-30 12:30  gb

	* lib/macros.lisp: WITH-STRING-FROM-CSTRING: stack allocate a
	lisp-string, getting bytes from c-string.

2004-01-30 12:28  gb

	* lib/foreign-types.lisp: BIT/BITFIELD foreign integer types.

2004-01-29 10:45  gb

	* level-0/l0-array.lisp: CTYPE-SUBTYPE: no specialized (COMPLEX )
	arrays, so check NUMERIC-CTYPE-COMPLEXP first.

2004-01-28 17:06  gb

	* lisp-kernel/lisp-exceptions.c: kinder, gentler do_tsp_overflow

2004-01-26 18:18  gb

	* lib/sequences.lisp: SUBSEQ: Array-headers aren't sequences;
	vector headers are.

2004-01-26 09:51  gb

	* lib/level-2.lisp: (SETF %GET-BITFIELD) becomes %SET-BITFIELD,
	which is what the setf inverse thought it was anyway.

2004-01-26 09:50  gb

	* lib/db-io.lisp: %DECODE-FOREIGN-NAME handles 0-length names
	correctly.

2004-01-26 05:09  gb

	* level-1/l1-clos.lisp: Kinder, gentler %SHARED-INITIALIZE uses
	INSTANCE-CLASS-WRAPPER.

2004-01-26 05:08  gb

	* level-1/l1-clos-boot.lisp: INSTANCE-CLASS-WRAPPER (how many
	versions of this are there ?) looks at pointer-based classes.

2004-01-26 05:06  gb

	* level-1/l1-error-system.lisp: Bryan O'Connor's fix to
	%ACTIVE-RESTART.

2004-01-26 05:05  gb

	* level-1/version.lisp: So much for the 040124 idea ...

2004-01-26 05:04  gb

	* lib/foreign-types.lisp: Initialize ordinal->type vector elements
	to NIL.

2004-01-25 15:16  gb

	* lisp-kernel/spentry.s: Linux "as" doesn't like semicolon
	comments, so use /* */.

2004-01-25 15:16  gb

	* lib/time.lisp: GET-INTERNAL-xxx-TIME moved here.

2004-01-25 15:16  gb

	* lib/number-macros.lisp: WITH-STACK-SHORT-FLOATS is
	PPC32-specific.

2004-01-25 15:15  gb

	* lib/macros.lisp: Start to make RLET assert foreign-type ordinals,
	then give up on the idea.  (FOREIGN-TYPES would need to work
	earlier in the cold load than they do.)

2004-01-25 15:14  gb

	* lib/foreign-types.lisp: Try to introduce "foreign type ordinals",
	which can be embedded in MACPTRs (this is hard to bootstrap for
	many reasons.) (PREF foo :thing.embedded-record) expands into some
	SETFable noise around %INC-PTR.

2004-01-25 15:12  gb

	* level-1/version.lisp: Bump.

2004-01-25 15:11  gb

	* level-1/sysutils.lisp: MAKE-ARRAY earlier.

2004-01-25 15:11  gb

	* level-1/linux-files.lisp: Move some time stuff to time.lisp.

2004-01-25 15:11  gb

	* level-1/l1-utils.lisp: %COMPOSITE-POINTER-REF, so embedded
	foreign structs can be SETF-able.

2004-01-25 15:10  gb

	* level-1/l1-typesys.lisp: Don't REQUIRE at loadtime, so we can
	maybe move earlier in the cold load.

2004-01-25 15:10  gb

	* level-1/l1-io.lisp: MACPTRs may say what they're pointing to,
	though this idea is hard to bootstrap.

2004-01-25 15:09  gb

	* level-1/l1-files.lisp: Move LOGICAL-PATHNAME-P earlier.

2004-01-25 15:08  gb

	* level-1/: l1-aprims.lisp, l1-clos-boot.lisp: Say "target:" a few
	times.

2004-01-25 15:07  gb

	* level-0/PPC/ppc-symbol.lisp: Fix %SVAR-BINDING-ADDRESS for the
	nth time.

2004-01-25 15:07  gb

	* level-0/PPC/ppc-float.lisp: Some conditionalization, mostly
	dealing with immediate/non-immediate SHORT-FLOATs.

2004-01-25 15:04  gb

	* level-0/l0-float.lisp, level-0/l0-numbers.lisp,
	level-1/l1-numbers.lisp, lib/numbers.lisp: Conditionalize use of
	WITH-STACK-SHORT-FLOATS, sortof.

2004-01-25 15:01  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: No low (half-) word of
	lisp-fpscr.

2004-01-25 15:00  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: WITH-STACK-SHORT-FLOATS moved
	here.

2004-01-25 15:00  gb

	* compiler/PPC/ppc-lapmacros.lisp: Halfhearted attempt at
	#+ppc32/#+ppc64 conditionalization.  Will need to split this in
	half.

2004-01-25 14:59  gb

	* compiler/optimizers.lisp: %composite-pointer-ref.

2004-01-24 16:45  gb

	* lib/systems.lisp: -some- PPC64 backend stuff.

2004-01-24 16:43  gb

	* lib/sequences.lisp: Vector case of SUBSEQ had better be faster
	...

2004-01-24 16:43  gb

	* lib/foreign-types.lisp: Start to associate "ordinal" numbers with
	types (for typed pointers.)

2004-01-24 16:40  gb

	* level-1/: l1-sockets.lisp, l1-streams.lisp, l1-sysio.lisp: Return
	was-open-p from CLOSE method.

2004-01-24 16:38  gb

	* level-1/l1-clos.lisp: UPDATE-SLOTS: assume that slotds are
	ordered, don't order them by location.

2004-01-24 16:37  gb

	* level-0/PPC/ppc-misc.lisp: %COPY-GVECTOR-TO-GVECTOR.

2004-01-24 16:36  gb

	* level-0/l0-array.lisp: Array element type of strings is
	CHARACTER, not that it matters whether it's that or BASE-CHAR.

2004-01-24 16:34  gb

	* examples/objc-runtime.lisp: Work harder to determine if an
	instance really is an instance.

2004-01-24 16:34  gb

	* examples/objc-clos.lisp: Lots of changes from Randall Beer.

2004-01-24 16:33  gb

	* examples/hemlock-textstorage.lisp: Preliminary NSBox stuff.  Not
	much of it, even.

2004-01-24 16:32  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: Some of these actually work
	...

2004-01-24 16:31  gb

	* compiler/PPC/PPC64/ppc64-backend.lisp: target-lisp-node-size is
	8.  Don't require vinsns (break circle).

2004-01-24 16:30  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Some fixes; call it
	fulltag-misc after all.

2004-01-24 16:30  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Rename some things to
	(start to) match ppc64.

2004-01-24 16:28  gb

	* compiler/PPC/PPC32/ppc32-backend.lisp: target-lisp-node-size in
	backend.  Make default if :ppc32-target, not :ppc-target.

2004-01-24 16:27  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Define
	target-most-[positive,negative]-fixnum

2004-01-24 16:27  gb

	* compiler/PPC/ppc2.lisp: Don't use LOAD-TIME-VALUE to reference
	vinsn-template cell; look up the template at runtime.  Change some
	vinsn usage.

2004-01-24 16:25  gb

	* compiler/PPC/ppc-asm.lisp: Fix 64-bit rotates, define clrrdi
	instead of defining clrrdi. twice.

2004-01-24 16:23  gb

	* compiler/vreg.lisp: Yawn.  Update spec class alist for new
	storage-class names.

2004-01-24 16:22  gb

	* compiler/vinsn.lisp: Match against :u64/:s64 storage class names.

2004-01-24 16:22  gb

	* compiler/reg.lisp: New constants for	64-bit storage classes.

2004-01-24 16:21  gb

	* compiler/backend.lisp: New GPR mode-names for 64-bit storage
	classes.

2004-01-24 16:20  gb

	* compiler/arch.lisp: 64-bit storage classes.

2004-01-22 03:53  gb

	* compiler/PPC/PPC32/ppc32-vinsns.lisp: Um, COPY-FPR sets (and
	uses) an FPR ...

2004-01-22 03:52  gb

	* compiler/vinsn.lisp: MAKE-VINSN zeros the GPRS-SET & FPRS-SET
	fields when pulling a vinsn off of the freelist.

2004-01-22 03:51  gb

	* lisp-kernel/spentry.s: Try to un-botch SPbuiltin_length, for
	about the third time in a week.

2004-01-21 23:11  gb

	* level-1/l1-readloop.lisp: New --version command-line argument;
	new APPLICATION-VERSION-STRING method.

2004-01-21 23:10  gb

	* level-1/version.lisp: Bump, again.

2004-01-21 23:10  gb

	* lib/compile-ccl.lisp: Correct TARGET-LEVEL-1-MODULES, to reflect
	new target names.

2004-01-21 01:32  gb

	* level-1/l1-streams.lisp: Default methods (specialized on T) of
	OPEN-STREAM-P, INTERACTIVE-STREAM-P, INPUT-STREAM-P,
	OUTPUT-STREAM-P complain that argument isn't a stream.	This is OK,
	as long as users only specialize these methods on subclasses of
	FUNDAMENTAL-STREAM, and they shouldn't be doing otherwise anyway.

2004-01-21 00:37  gb

	* level-1/l1-streams.lisp: Bryan O'Connor's fix to
	STREAM-UNREAD-CHAR method for ECHO-STREAM.

2004-01-21 00:30  gb

	* compiler/nx1.lisp: NX1-ASH: where did those numbers come from ?

2004-01-21 00:29  gb

	* level-1/l1-typesys.lisp: (SIGNED-BYTE 1) is perfectly legal ...

2004-01-20 16:54  gb

	* compiler/PPC/ppc-backend.lisp: Define FIXUP-PPC-BACKEND in terms
	of target.

2004-01-20 16:54  gb

	* lib/compile-ccl.lisp: :PPC -> :PPC32.

2004-01-20 16:43  gb

	* xdump/: xfasload.lisp, xppcfasload.lisp: Backend name changes.

2004-01-20 16:42  gb

	* lib/: compile-ccl.lisp, systems.lisp: More PPC/PPC32 changes. 
	(Not generalized yet ...)

2004-01-20 16:41  gb

	* level-1/version.lisp: Bump again.

2004-01-20 16:41  gb

	* level-1/l1-files.lisp: Bryan O'Connor's fix to PROBE-FILE.

2004-01-20 16:40  gb

	* compiler/PPC/ppc2.lisp: Don't refer to *PPC-VINSN-TEMPLATES*; use
	the target backend instead.

2004-01-20 16:39  gb

	* compiler/nx1.lisp: New backend names.

2004-01-20 16:38  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: backend changes

2004-01-20 16:37  gb

	* compiler/PPC/PPC64/ppc64-backend.lisp: new file

2004-01-20 16:17  gb

	* compiler/PPC/PPC32/: ppc32-backend.lisp, ppc32-vinsns.lisp: meet
	the new files, same as the old files

2004-01-20 16:16  gb

	* compiler/PPC/ppc-backend.lisp: new file, sorta

2004-01-20 16:15  gb

	* compiler/PPC/: ppc-backend.lisp, ppc-vinsns.lisp: removed, now
	PPC32-specific

2004-01-20 16:15  gb

	* compiler/PPC/ppc-asm.lisp: backend changes

2004-01-19 17:41  gb

	* library/loop.lisp: Bryan O'Connor's fix to force RETURNing
	clauses into the main body.

2004-01-19 17:40  gb

	* lib/nfcomp.lisp: Allow (EVAL-WHEN () ,@body).

2004-01-19 17:40  gb

	* lib/macros.lisp: PARSE-DEFGENERIC allows multiple DECLARE forms,
	passes them as :DECLARATIONS option.  HANDLER-BIND a little less
	jumpy.

2004-01-19 17:37  gb

	* lib/foreign-types.lisp: (Finally) try to handle odd poweropen
	struct alignment rules.

2004-01-19 17:37  gb

	* lib/db-io.lisp: (Finally) try to handle odd poweropen struct
	alignment rules.  Pad :DBM_CONSTANT to naturally align double-float
	field, since unnatural alignment is now the norm.

2004-01-19 17:35  gb

	* level-1/l1-readloop.lisp: SIGNAL keeps looking in the same
	cluster when a handler declines.

2004-01-19 17:34  gb

	* level-1/l1-readloop-lds.lisp: Allowing INVOKE-DEBUGGER to build a
	condition from extra arguments would clearly lead to increased
	street crime.

2004-01-19 17:33  gb

	* level-1/l1-error-system.lisp: Define (and signal) some new
	condition classes.

2004-01-19 17:30  gb

	* level-1/l1-error-signal.lisp: Map kernel "can't construct
	arglist" to a (new) TYPE-ERROR subclass.

2004-01-19 17:29  gb

	* level-1/l1-dcode.lisp: GF's need to check keywords after all. 
	Recognize :ALLOW-OTHER-KEYS T sooner, don't treat :ALLOW-OTHER-KEYS
	NIL as an unknown argument.

2004-01-19 17:27  gb

	* level-0/l0-array.lisp: Paranoia in CTYPE-SUBTYPE: allow float
	aliases.

2004-01-18 21:12  gb

	* examples/cocoa-inspector.lisp: Don't reference *objc-readtable*.

2004-01-17 21:00  gb

	* library/loop.lisp: From Bryan O'Connor: "LOOP FOR x ..." uses
	destructuring mechanism on X, so "LOOP FOR NIL ..." is accepted.

2004-01-17 20:58  gb

	* library/lispequ.lisp: More pathname info for DESCRIBE.  Use
	INSTANCE-SLOTS vice INSTANCE.SLOTS, so .accessors will work on
	other instance types.

2004-01-17 20:57  gb

	* lib/pprint.lisp: PPRINT-DISATCH: symbol is external in CL, so
	don't use it as a structure name.

2004-01-17 20:55  gb

	* lib/numbers.lisp: RATIONALIZE comments; extra typechecking in
	BOOLE.

2004-01-17 20:55  gb

	* lib/macros.lisp: WITH-HASH-TABLE-ITERATOR allows declarations.

2004-01-17 20:54  gb

	* lib/foreign-types.lisp: Handle FOREIGN-ARRAY-TYPE.  (Note: this
	is Darwin-specific.)

2004-01-17 20:53  gb

	* lib/arrays-fry.lisp: SBIT, %SBITSET hande 0-dimensional bitvector
	case.

2004-01-17 20:52  gb

	* level-1/version.lisp: Bump.

2004-01-17 20:52  gb

	* level-1/sysutils.lisp: TYPE-OF changes.  Blame CLHS.

2004-01-17 20:51  gb

	* level-1/l1-utils.lisp: More PROGRAM-ERRORs signaled during
	destructuring.

2004-01-17 20:50  gb

	* level-1/l1-typesys.lisp: Lots more changes.

2004-01-17 20:49  gb

	* level-1/l1-streams.lisp: MAKE-STRING-OUTPUT-STREAM: no such thing
	as a STRING-CHAR anymore.

2004-01-17 20:48  gb

	* level-1/l1-readloop-lds.lisp: WARN has to be more anal-retentive
	about the condition and any args it gets.

2004-01-17 20:47  gb

	* level-1/l1-numbers.lisp: Handle bytespecs with size 0.

2004-01-17 20:46  gb

	* level-1/l1-files.lisp: Quote dots in namestring components. 
	Catch a few bogus cases, like (:ABSOLUTE :UP) in directory.

2004-01-17 20:44  gb

	* level-1/l1-dcode.lisp: %%NTH-ARG-DCODE: signal program error if 0
	args.

2004-01-17 20:40  gb

	* level-1/l1-clos.lisp: Use safer accessors.  (May revert back some
	cases, since .accessors should now use INSTANCE-SLOTS rather than
	INSTANCE.SLOTS.)

2004-01-17 20:38  gb

	* level-1/l1-clos-boot.lisp: Define more accessors; INSTANCE-SLOTS
	is now used in most "early" .accessors.  Don't look at GF-AOK bit;
	whatever the problem with initarg caching is, that's not the
	solution.

2004-01-17 20:36  gb

	* level-1/l1-aprims.lisp: NRECONC uses ENDP.  %MAKE-DISPLACED-ARRAY
	always displaces to what the user said to displace to.

2004-01-17 20:35  gb

	* level-0/l0-pred.lisp: DISPLACED-ARRAY-P didn't handle transitive
	displacement.

2004-01-17 20:34  gb

	* level-0/l0-numbers.lisp: Handle denorms in
	INTEGER-DECODE-SHORT-FLOAT.

2004-01-17 20:33  gb

	* level-0/l0-float.lisp: (EXPT b e) is (COERCE 1 (TYPE-OF B)) if
	(ZEROP E).

2004-01-17 20:32  gb

	* level-0/l0-array.lisp: *BASE-CHAR-CLASS* may or may not be the
	same as *CHARACTER-CLASS*.  (integer 1 1) denotes a BIT.

2004-01-17 20:30  gb

	* compiler/optimizers.lisp: Handle negative bytespecs; don't define
	synonyms where they may be involved.  Open-code INTEGERP.

2004-01-15 01:34  gb

	* compiler/optimizers.lisp: Remove a stale comment.  Might consider
	a less-hairy typespec.

2004-01-15 01:33  gb

	* level-0/l0-array.lisp: (INTEGER 0 0) is a subtype of (INTEGER 0
	1), aka BIT.

2004-01-15 01:32  gb

	* level-1/l1-clos-boot.lisp: MAKE-INSTANCES-OBSOLETE: methods
	return class.

2004-01-15 01:29  gb

	* level-1/l1-dcode.lisp: %%CHECK-KEYWORDS is (a) slow (b) wrong (c)
	probably unnecessary.  If (c) is true, there's a similar case where
	the same things are probably true as well, and callers should be
	changed. (c) is certainly true in some cases (when the "combined
	method" is a simple method.

2004-01-15 01:26  gb

	* level-1/l1-error-system.lisp: READER-ERROR inherits from
	PARSE-ERROR and STREAM-ERROR.

2004-01-15 01:25  gb

	* level-1/l1-files.lisp: PATHNAME-DEVICE typechecks its arg before
	ignoring it.

2004-01-15 01:20  gb

	* level-1/l1-streams.lisp: Default version of STREAM-FILENAME
	signals an error; streams that aren't FILE-STREAMs aren't
	pathname-designators.

2004-01-15 01:18  gb

	* level-1/l1-typesys.lisp: Bump up the (global) type-cache size. 
	Fixes in CLASS type methods.

2004-01-15 01:16  gb

	* lisp-kernel/spentry.s: A million monkeys and a million
	typewriters: sooner or later, one of them will get ASH right ...

2004-01-14 20:59  gb

	* level-0/l0-numbers.lisp: Special-case (TRUNCATE
	MOST-NEGATIVE-FIXNUM x).

2004-01-13 21:50  gb

	* level-1/version.lisp: forgot to commit this earlier

2004-01-13 18:13  gb

	* compiler/nx-basic.lisp: Signal a PROGRAM-ERROR or two.  Better
	checking of SYMBOL-MACROs in AUGMENT-ENVIRONMENT.

2004-01-13 18:12  gb

	* compiler/nx0.lisp: Allow NIL to be a -local- function name. 
	Don't tail-call SIGNAL-PROGRAM-ERROR.

2004-01-13 18:11  gb

	* compiler/nx1.lisp: Add a (long-)missing IN-PACKAGE.

2004-01-13 18:11  gb

	* compiler/PPC/ppc-disassemble.lisp: DISASSEMBLE's output should go
	to *STANDARD-OUTPUT*.

2004-01-13 18:10  gb

	* level-0/l0-array.lisp: FILL-POINTER's lament.

2004-01-13 18:10  gb

	* level-0/l0-bignum.lisp: maybe bignum-bignum-gcd really works now.

2004-01-13 18:09  gb

	* level-0/l0-numbers.lisp: IMAGPART uses * vice FLOAT, to get the
	sign of 0.0 right.  PHASE of a negative rational returns
	single-float PI.

2004-01-13 18:08  gb

	* level-1/l1-aprims.lisp: ALT-LIST-LENGTH here.  LAST allows
	positive integers.  GET-PROPERTIES uses a TYPE-ERROR to complain
	about bad plists.

2004-01-13 18:06  gb

	* level-1/l1-clos-boot.lisp: Recognize that SLOT-MISSING might
	return if it's specialized.  Call it with the symbol SETF, not
	'(SETF SLOT-VALUE).

2004-01-13 18:04  gb

	* level-1/l1-clos.lisp: Check initargs via DESTRUCTURING-BIND in
	%SHARED-INITIALIZE.  ENSURE-CLASS-FOR-DEFCLASS and
	*defclass-redefines-improperly-named-classes-pedantically*.  (SETF
	CLASS-NAME) isn't an accessor; the real method uses
	REINITIALIZE-INSTANCE.

2004-01-13 18:02  gb

	* level-1/l1-dcode.lisp: Bad keywords trigger PROGRAM-ERRORs.

2004-01-13 18:01  gb

	* level-1/: l1-error-signal.lisp, l1-error-system.lisp: PARSE-ERROR
	isn't a STREAM-ERROR.  Tail-call ERROR from SIGNAL-PROGRAM-ERROR,
	to keep it out of backtrace.  UNDEFINED-FUNCTION-CALL: lose
	FUNCTION-NAME slot, use CELL-ERROR-NAME instead.

2004-01-13 17:58  gb

	* level-1/l1-numbers.lisp: Can't have a function called
	CL:RANDOM-STATE, so change its name and its only caller.

2004-01-13 17:58  gb

	* level-1/l1-readloop.lisp: SYMBOL-MACROLET in the cheap evaluator:
	process declarations along with symbol-macros, so that
	AUGMENT-ENVIRONMENT can complain about SPECIAL decls easier.

2004-01-13 17:56  gb

	* level-1/l1-typesys.lisp: Incorporate lots of changes (most of the
	type system, in fact) from recent CMUCL sources.  Thank Cristophe
	Rhodes and others for their work.
	
	Warning to fix an EVAL-WHEN; can't define some stuff at
	compile-time while bootstrapping from the old type system.

2004-01-13 17:55  gb

	* level-1/l1-utils.lisp: Fix ASSOC and friends, broken just a few
	days ago.  Signal PROGRAM-ERROR when detecting argument mismatches
	in macros.

2004-01-13 17:54  gb

	* level-1/sysutils.lisp: TYPE-OF's a little closer to being right
	(checks for PROPERly-named classes.)

2004-01-13 17:53  gb

	* lib/defstruct.lisp: STRUCTURE isn't a type specifier;
	STRUCTURE-OBJECT is.  Use the right one in COPY-STRUCTURE.

2004-01-13 17:52  gb

	* lib/lists.lisp: Use ENDP to detect bad alists in COPY-ALIST. 
	Move ALT-LIST-LENGTH elsewhere (and fix it ...)

2004-01-13 17:50  gb

	* lib/macros.lisp: DEFCLASS: allow NIL as slot :type, expand into
	(new) ENSURE-CLASS-FOR-DEFCLASS.  Signal a PROGRAM-ERROR in
	DEFINE-METHOD-COMBINATION.  Can't have a macro named CL:METHOD, so
	change its name to CCL::REFERENCE-METHOD for the time being.

2004-01-13 17:48  gb

	* lib/numbers.lisp: LCM-2, SIGNUM fixes.

2004-01-13 17:47  gb

	* lib/pprint.lisp: (SATISFIES (OUTPUT-STREAM-P)).  (The thing
	that's catching these things is a half-bootstrapped type system,
	but I'd have liked to have seen that one a lot earlier ...)

2004-01-13 17:46  gb

	* lib/read.lisp: Add an IN-PACKAGE.  PARSE-INTEGER signals
	PARSE-ERRORs.

2004-01-13 17:45  gb

	* lib/time.lisp: The type system is/was choking on unknown types;
	it choked on (NUMBER 0 *), which should have been (REAL 0 *) in the
	first place.

2004-01-13 17:43  gb

	* library/lispequ.lisp: New CTYPEs for negation, intersection.

2004-01-13 17:43  gb

	* lisp-kernel/spentry.s: Restore SPbuiltin_assq (ignore NILs in the
	alist.) (ash x y) returns -1 on (<= n -29); need to find a way to
	parameterize this while keeping M4 happy.

2004-01-12 08:20  beer

	* examples/objc-clos.lisp: Partial support for MAKE-INSTANCE on
	ObjC classes

2004-01-12 00:31  gb

	* level-1/l1-dcode.lisp: Too-few args to generic-function ->
	PROGRAM-ERROR, not just ERROR.

2004-01-12 00:30  gb

	* lib/lists.lisp: BUTLAST, NBUTLAST handle dotted lists again.

2004-01-12 00:29  gb

	* lib/level-2.lisp: Handle the case where &WHOLE is a structured
	lambda-list in %destructure-lambda-list.

2004-01-11 18:54  gb

	* lisp-kernel/spentry.s: Start to replace some old (old-binding
	scheme) entries with &restv support.  SPsvar_progvsave: save the
	old binding, not the new one.

2004-01-11 18:53  gb

	* lisp-kernel/spjump.s: Start to replace some old (old-binding
	scheme) entries with &restv support.

2004-01-11 18:53  gb

	* lib/arrays-fry.lisp: ARRAY-IN-BOUNDS-P allows bignum subscripts
	(which are never in bounds, of course.)

2004-01-11 18:52  gb

	* level-1/l1-utils.lisp: ASSEQL was misparenthesized.

2004-01-11 18:51  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: rename some macros:
	ppc->ppc64.

2004-01-11 18:50  gb

	* compiler/nx0.lisp: NX-TAG-INFO compares tagbody tags with EQL.

2004-01-10 23:24  gb

	* level-1/l1-clos-boot.lisp: (SETF FIND-CLASS) checks more
	carefully for "protected classes".

2004-01-10 23:14  gb

	* compiler/PPC/ppc2.lisp: Vinsn renames; slight change to remove
	backend support for "handle"-based memory accessors.

2004-01-10 23:13  gb

	* compiler/PPC/ppc-vinsns.lisp: Change some vinsn names, eliminate
	some unused vinsns.  This'll be "ppc32-vinsns.lisp" soon.

2004-01-10 23:08  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Fix nil-value constant.

2004-01-10 23:08  gb

	* compiler/PPC/PPC64/ppc64-vinsns.lisp: New file; not close to
	correct yet.

2004-01-10 23:07  gb

	* level-1/l1-lisp-threads.lisp: Make *DEFAULT-TEMP-STACK-SIZE* too
	big.

2004-01-10 23:06  gb

	* lib/numbers.lisp: Fix LCM/LCM-2 error checking.

2004-01-10 23:06  gb

	* lisp-kernel/spentry.s: _SPbuiltin_length handles the LIST-LENGTH
	case inline.

2004-01-09 15:09  gb

	* xdump/xfasload.lisp: Back out of the attempt to make LIST-LENGTH
	a builtin.

2004-01-09 14:36  gb

	* lib/lists.lisp: Another typo in BUTLAST.

2004-01-09 14:29  gb

	* level-1/l1-utils.lisp: Typo in ASSEQL.

2004-01-09 14:27  gb

	* xdump/xfasload.lisp: LIST-LENGTH will soon be builtin.

2004-01-09 14:27  gb

	* lib/lists.lisp: [N]BUTLAST fixes.

2004-01-09 14:26  gb

	* level-1/l1-error-system.lisp: BAD-SLOT-TYPE, IMPROPER-LIST
	conditions.

2004-01-09 14:25  gb

	* level-1/l1-error-signal.lisp: Handle IMPROPER-LIST

2004-01-09 14:24  gb

	* level-1/: l1-clos-boot.lisp, l1-clos.lisp: BAD-SLOT-TYPE errors.

2004-01-09 14:24  gb

	* level-0/l0-misc.lisp: LENGTH changes.

2004-01-07 17:30  gb

	* examples/: cocoa-window.lisp, cocoa.lisp: A little bit of
	conditionalization.

2004-01-07 17:29  gb

	* level-1/sysutils.lisp: TYPEP returns 1 value.

2004-01-07 17:29  gb

	* level-0/l0-bignum.lisp: Detect when destructive right shifts
	yield a fixnum more accurately (this was causing the bignums to be
	passed to internal functions that expect fixnums in some cases).

2004-01-07 16:40  gb

	* level-0/l0-misc.lisp: ASSQ is builtin, so just EVAL-REDEF it.

2004-01-07 16:39  gb

	* level-1/l1-utils.lisp: ASSOC variants don't allow NIL in an
	alist.	ASSEQL typechecks CAR/CDR.  MEMEQL uses ENDP, doesn't use
	%CAR/%CDR in unsafe contexts.

2004-01-07 16:38  gb

	* lib/level-2.lisp: Do an EVAL-REDEF for ASSQ.

2004-01-07 16:37  gb

	* lisp-kernel/spentry.s: Fix (at least the function case) of
	:ALLOW-OTHER-KEYS NIL.

2004-01-07 08:42  beer

	* examples/objc-clos.lisp: Added support for foreign slot
	definitions

2004-01-06 20:20  gb

	* level-0/PPC/ppc-clos.lisp: Assume that elaboration will call
	#'%SLOT-ID-REF-MISSING, #'%SLOT-ID-SET-MISSING as constant
	functions (not as symbols.)

2004-01-05 22:21  gb

	* examples/objc-clos.lisp: Print class addresses when generating
	slots, in the commented-out FORMAT calls.

2004-01-05 22:19  gb

	* examples/objc-runtime.lisp: Derive the names of superclasses when
	recursively mapping classes; don't use the name MAP-OBJC-CLASS was
	called with/defaulted to over and over.

2004-01-05 20:05  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Say "4" instead of "(ash 1
	ppc::word-shift)", since this is platform-dependent anyway.

2004-01-05 20:04  gb

	* examples/objc-support.lisp: Use "TARGET" package, not "ARCH".

2004-01-05 19:33  gb

	* lisp-kernel/static-linux/: .cvsignore, Makefile, staticlib.c:
	Preliminary support for statically-linked kernel.

2004-01-05 19:30  gb

	* xdump/heap-image.lisp: FIXNUMSHIFT in TARGET package.

2004-01-05 19:30  gb

	* lib/read.lisp: SUBTAG-INSTANCE in TARGET package.

2004-01-05 19:29  gb

	* level-1/l1-lisp-threads.lisp: Intern accessors in "TARGET"
	package.

2004-01-05 19:29  gb

	* compiler/PPC/ppc-disassemble.lisp: EXTRACT-DEFAULT function's in
	PPC package now.

2004-01-05 19:12  gb

	* xdump/xppcfasload.lisp: Error codes in ARCH package.

2004-01-05 19:11  gb

	* xdump/xfasload.lisp: Nilreg-relative-symbols are PPC common.

2004-01-05 19:11  gb

	* lisp-kernel/pmcl-kernel.c: Set lisp_global(STATICALLY_LINKED) if
	STATIC is defined.

2004-01-05 19:10  gb

	* lisp-kernel/plbt.c: Don't assume that dladdr exists if STATIC is
	defined.

2004-01-05 19:09  gb

	* lisp-kernel/: constants.s, lisp_globals.h: STATICALLY_LINKED
	global.

2004-01-05 19:09  gb

	* lib/ppcenv.lisp: PPC regs are in PPC package.

2004-01-05 19:08  gb

	* lib/backtrace-lds.lisp: Opcode/operand stuff's in ARCH package.

2004-01-05 19:08  gb

	* level-1/version.lisp: 040106, for a while.

2004-01-05 19:07  gb

	* level-1/: ppc-error-signal.lisp, ppc-trap-support.lisp: Error
	codes are in ARCH package.

2004-01-05 19:07  gb

	* level-1/l1-lisp-threads.lisp: TCR flags are in ARCH.	(Strange,
	but true.)

2004-01-05 19:06  gb

	* level-1/l1-io.lisp: All PPCs have an FPSCR with the same bits in
	it ...

2004-01-05 19:06  gb

	* level-1/l1-clos.lisp: Fix (bad) typo in %SHARED-INITIALIZE.

2004-01-05 19:05  gb

	* level-1/l1-clos-boot.lisp: Some changes to initarg
	checking/caching; may still not be correct.

2004-01-05 19:04  gb

	* level-0/PPC/: ppc-float.lisp, ppc-numbers.lisp, ppc-symbol.lisp:
	Internal-package dependency changes.

2004-01-05 19:03  gb

	* level-0/PPC/ppc-def.lisp: Errors in ARCH package.

2004-01-05 19:03  gb

	* level-0/l0-cfm-support.lisp: Some support for static linking
	under Linux, and changes to the startup code for when
	*STATICALLY-LINKED* is in effect.

2004-01-05 19:02  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: Should be close to having
	PPC64 stuff (tags, object layout) here.

2004-01-05 19:02  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Should be close to having
	PPC32 stuff (tags, object layout) here.   May need to be
	reorganized to cross-compile cleanly.

2004-01-05 19:00  gb

	* compiler/PPC/: ppc-disassemble.lisp, ppc-lap.lisp,
	ppc-lapmacros.lisp, ppc-vinsns.lisp, ppc2.lisp: Mostly PPC (not
	PPC32 or PPC64) specific, nominally.  (Undoubtedly still some PPC32
	dependencies.)

2004-01-05 18:59  gb

	* compiler/PPC/ppc-backend.lisp: Mostly PPC (not PPC32 or PPC64)
	specific, nominally.

2004-01-05 18:59  gb

	* compiler/PPC/ppc-asm.lisp: Mostly PPC (not PPC32 or PPC64)
	specific, nominally.  Opcode/operand lap stuff's in ARCH.

2004-01-05 18:56  gb

	* compiler/PPC/: ppc-arch.lisp, ppc-arch.lisp: Most stuff that's
	truly PPC-specific should be here (in the PPC package) now.

2004-01-05 18:54  gb

	* compiler/vreg.lisp: Storage classes (s64/u64 need to be added, at
	least) are in the ARCH package.

2004-01-05 18:53  gb

	* compiler/vinsn.lisp: (generic) opcode/operand stuff is in the
	ARCH package.

2004-01-05 18:53  gb

	* compiler/nx0.lisp: Builtin-functions list is in the ARCH package.

2004-01-05 18:52  gb

	* compiler/arch.lisp: Back in the ARCH package, but there's a lot
	less stuff here.

2004-01-03 16:36  gb

	* level-0/l0-bignum.lisp: Try again, using
	WITH-NEGATED-BIGNUM-BUFFERS.

2004-01-03 16:23  gb

	* level-0/l0-bignum.lisp: %BIGNUM-BIGNUM-GCD wasn't zeroing out the
	buffers it (re-)uses, so use a simpler algorithm (that conses more)
	until this is fixed.

2004-01-03 12:52  gb

	* compiler/PPC/ppc-asm.lisp: Slight change to requirements.

2004-01-03 12:51  gb

	* compiler/PPC/ppc-arch.lisp: New file.

2004-01-03 12:51  gb

	* compiler/PPC/PPC64/ppc64-arch.lisp: New (empty, in fact) file.

2004-01-03 12:50  gb

	* compiler/arch.lisp: Try to be less ppc32-specific.

2004-01-03 12:49  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: Try to be more
	ppc32-specific.

2004-01-03 12:49  gb

	* examples/bridge.lisp: (Mostly) work with gnu-objc; may have
	broken apple-objc ...

2004-01-03 12:48  gb

	* examples/name-translation.lisp: special-case GS under GNUstep.

2004-01-03 12:47  gb

	* examples/: objc-runtime.lisp, objc-clos.lisp: More gnu-objc
	conditionalization.  Take user-specified class-name when mapping
	objc-class.  Make CLASS-OF objc-metaclasses be OBJC-METACLASS.

2004-01-03 12:45  gb

	* examples/objc-support.lisp: More gnu-objc conditionalization.

2004-01-03 12:43  gb

	* level-0/nfasload.lisp: Generalize the notion of packages whose
	symbols are always exported.

2004-01-03 12:42  gb

	* level-1/l1-boot-1.lisp: Move command-line-arg stuff to
	l1-pathnames.

2004-01-03 12:42  gb

	* level-1/l1-boot-3.lisp: Install the kernel error callbacks, late
	in the cold load.

2004-01-03 12:41  gb

	* level-1/l1-clos-boot.lisp: Move FOREIGN-OBJECT-DOMAIN accessors
	elsewhere.  Make slot accessors work on pointer-based instances.

2004-01-03 12:40  gb

	* level-1/l1-clos.lisp: Add a VALIDATE-SUPERCLASS method for
	(FOREIGN-CLASS STANDARD-CLASS), just in case.

2004-01-03 12:39  gb

	* level-1/l1-pathnames.lisp: Move COMMAND-LINE-ARGUMENTS stuff
	here; use it to find the CCL directory, maybe.

2004-01-03 12:39  gb

	* level-1/ppc-error-signal.lisp: Rename the %ERR-DISP callback to
	%X-ERRDISP, so the kernel doesn't try to call out to %ERR-DISP too
	early in the cold load.

2004-01-03 12:38  gb

	* level-1/ppc-trap-support.lisp: Rename the CMAIN callback to
	XCMAIN, so the kernel doesn't try to call out to CMAIN too early in
	the cold load.

2004-01-03 12:37  gb

	* lib/: systems.lisp, compile-ccl.lisp: Add PPC-ARCH.  (This is all
	still a moving target.)

2004-01-03 12:37  gb

	* lisp-kernel/lisp-exceptions.c: Integrate a little better with the
	new debugger.

2004-01-03 12:36  gb

	* lisp-kernel/lisp-exceptions.h: According to my calculations, you
	need 5 bits to express a 5-bit register field (RT, RA, RB, etc.)

2004-01-03 12:35  gb

	* lisp-kernel/ppc_print.c: Print MACPTRs, get method
	names/specializers half-right.

2004-01-03 12:35  gb

	* library/lispequ.lisp: Move FOREIGN-OBJECT-DOMAIN accessors here.

2004-01-03 03:49  gb

	* lisp-kernel/spentry.s: Zero the domain/type fields when making a
	stack-block.

2003-12-31 04:12  gb

	* lib/describe.lisp: Use STANDARD-OBJECT-P to find instance
	class-wrappers.

2003-12-31 04:11  gb

	* level-1/l1-clos-boot.lisp: Fix an EQL-SPECIALIZER botch.  Lots of
	stuff to support foreign classes/foreign objects.

2003-12-31 04:09  gb

	* level-1/l1-clos.lisp: Use %class-slots instead of %CLASS.SLOTS
	when CLASS-SLOTS won't do.  Move CONSTANTLY here, remove some
	outdated comments.

2003-12-31 04:08  gb

	* level-1/l1-dcode.lisp: Careful about getting wrappers in
	dispatch.  Use %class-slots instead of %CLASS.SLOTS when
	CLASS-SLOTS won't do.

2003-12-31 04:06  gb

	* level-1/l1-io.lisp: Write the address involved in a #<Recursive
	printing error>, as if that helps ...  Use CLASS-NAME vice
	%CLASS.NAME.

2003-12-31 04:04  gb

	* level-0/PPC/ppc-utils.lisp: Macptr domain/type accessors.  In LAP
	to simplify treating them as (SIGNED-BYTE 32), but it was easier to
	make domain unsigned.

2003-12-31 04:03  gb

	* level-0/l0-pred.lisp: Half-hearted change to %TYPEP, to handle
	foreign-typed macptrs.

2003-12-31 04:02  gb

	* examples/process-objc-modules.lisp: Don't call MAP-OBJC-CLASS
	when walking modules.

2003-12-31 04:02  gb

	* examples/objc-runtime.lisp: Start to integrate CLOS & ObjC.

2003-12-31 04:01  gb

	* examples/objc-clos.lisp: New file: start to integrate CLOS/ObjC.

2003-12-31 04:01  gb

	* compiler/PPC/ppc-vinsns.lisp: MACPTR->STACK zeroes domain, type
	fields.

2003-12-29 01:19  gb

	* examples/objc-runtime.lisp: SUPER's gensym'ed in methods; FLET
	SUPER accesses it.  Remove the CFBUNDLE stuff, so this file can be
	loaded when it isn't necessary.

2003-12-29 01:17  gb

	* examples/objc-readtable.lisp: Access SUPER via (SUPER).

2003-12-29 01:17  gb

	* examples/fake-cfbundle-path.lisp: Put the CFBUNDLE nonsense here,
	independent of the rest of objc-support.

2003-12-29 01:17  gb

	* examples/cocoa.lisp: Get rid of *DEFAULT-BUNDLE-PATH* and friend;
	require FAKE-CFBUNDLE-PATH and use the function of that name
	explicitly.

2003-12-29 01:15  gb

	* examples/cocoa-window.lisp: Use (SUPER) in
	OBJC-MESSAGE-SEND-SUPER call.

2003-12-21 15:40  gb

	* examples/: cocoa-application.lisp, objc-runtime.lisp,
	process-objc-modules.lisp: revive class info, autorelease-pool when
	reiniting CCL directory

2003-12-20 05:18  gb

	* lisp-kernel/lisp-debug.c: Comment out things that don't (yet)
	work.

2003-12-20 05:17  gb

	* level-1/: l1-clos-boot.lisp, l1-clos.lisp: Punt on primary
	accessor methods.

2003-12-20 05:16  gb

	* lib/xref.lisp: Add newline before EOF.

2003-12-20 05:16  gb

	* lib/describe.lisp: Fix dangling close paren.

2003-12-20 03:45  gb

	* lib/describe.lisp: Alanr's fix to closure-inspector.

2003-12-20 00:48  gb

	* lisp-kernel/: spentry.s, thread_manager.c: Remove inline loginfo.

2003-12-20 00:48  gb

	* level-0/: l0-io.lisp, PPC/ppc-symbol.lisp: Add newline before
	EOF.

2003-12-19 17:29  gb

	* examples/: apple-objc.lisp, gnu-objc.lisp: Replaced by
	objc-runtime.lisp

2003-12-19 16:44  gb

	* lib/macros.lisp: A little clearer to say OPTION-NAME instead of
	(CADR OPTION) in DEFCLASS misc-option case.

2003-12-19 16:35  gb

	* lisp-kernel/lisp-debug.c: Change debugger prompt.  Still confuses
	the hell out of ILISP.

2003-12-19 16:34  gb

	* library/splay-tree.lisp: Keep count of splay-tree nodes;
	PRINT-OBJECT methods.

2003-12-19 16:33  gb

	* level-1/version.lisp: Bump the version number.

2003-12-19 16:33  gb

	* examples/process-objc-modules.lisp: Call MAP-OBJC-CLASS on (true)
	classes; MAP-OBJC-CLASS will handle the metaclass.

2003-12-19 16:32  gb

	* examples/objc-support.lisp: Add (commented-out) DBG call.

2003-12-19 16:31  gb

	* examples/objc-runtime.lisp: Some fixes: ensure that the Cocoa
	demo works under OSX.

2003-12-19 15:09  gb

	* lisp-kernel/: lisp-debug.c, lisp-exceptions.c, lisp-exceptions.h,
	lispdcmd.c: New & improved debugger.

2003-12-19 14:47  gb

	* library/splay-tree.lisp: map-splay-tree

2003-12-19 14:37  gb

	* examples/process-objc-modules.lisp: This is all #+apple-objc.

2003-12-19 14:36  gb

	* examples/objc-readtable.lisp: Move readtable stuff out of main
	path; preserve (for a while) for backward- compatibility.

2003-12-19 14:36  gb

	* examples/bridge.lisp: Require (new) OBJC-RUNTIME. Conditionalize
	a little for runtime differences (needs more work.)

2003-12-19 14:33  gb

	* examples/cocoa.lisp: Define bundle/executable paths here.

2003-12-19 14:31  gb

	* examples/objc-runtime.lisp: New file, intended to replace
	apple-objc.lisp.  Try to hide the differences between Apple/GNU
	ObjC runtimes here.

2003-12-19 07:05  beer

	* examples/apple-objc.lisp: Added missing comma to SELF in
	OBJC-METHOD-DEFINITION-FORM

2003-12-16 11:23  gb

	* lib/xref.lisp: use compiler frontend hooks

2003-12-16 11:22  gb

	* compiler/: nx.lisp, nx0.lisp, nx1.lisp: integrate XREF changes

2003-12-16 11:13  gb

	* examples/: apple-objc.lisp, gnu-objc.lisp: minor changes

2003-12-15 15:16  gb

	* library/splay-tree.lisp: new file

2003-12-15 14:12  gb

	* examples/: bridge.lisp, process-objc-modules.lisp: start to
	conditionalize for runtime

2003-12-15 14:11  gb

	* examples/gnu-objc.lisp: get more of this working

2003-12-13 14:53  gb

	* examples/gnu-objc.lisp: Revive efforts to get this working.

2003-12-13 14:51  gb

	* lib/pathnames.lisp: DIRECTORYP.

2003-12-12 16:32  gb

	* level-1/l1-clos.lisp: SETUP-SLOT-LOOKUP does nothing if no slots.

2003-12-12 16:30  gb

	* lib/defstruct.lisp: STRUCTURE isn't a type-specifier; use
	STRUCTURE-OBJECT instead.

2003-12-12 16:29  gb

	* level-1/sysutils.lisp: STRUCTURE isn't a type-specifier.

2003-12-12 16:29  gb

	* level-1/l1-typesys.lisp: TYPE-SPECIFIER does some typechecking.

2003-12-12 16:28  gb

	* level-1/l1-lisp-threads.lisp: FAKE-STACK-FRAME isn't a type
	specifier.

2003-12-12 16:27  gb

	* level-1/l1-clos-boot.lisp: STANDARD-INSTANCE isn't a type
	specifier.

2003-12-12 16:26  gb

	* level-0/l0-pred.lisp: COMPLEX-ARRAY, DISPLACED-ARRAY aren't type
	specifiers.

2003-12-12 14:12  gb

	* library/lispequ.lisp: New wrapper layout.

2003-12-12 14:12  gb

	* lib/ccl-export-syms.lisp: Export METHOD-NAME from CCL,
	OPENMCL-MOP.

2003-12-12 14:12  gb

	* level-1/l1-typesys.lisp: Set TYPE-PREDICATE slot of standard slot
	definition.

2003-12-12 14:10  gb

	* level-1/l1-dcode.lisp: New slot-value scheme.  No more
	reader/writer dcode.

2003-12-12 14:10  gb

	* level-1/: l1-clos-boot.lisp, l1-clos.lisp: New slot-value scheme.

2003-12-12 14:09  gb

	* level-0/PPC/ppc-clos.lisp: New scheme.

2003-12-10 01:25  gb

	* lisp-kernel/thread_manager.c: Don't free() a pointer that was
	just realloc()ed.

2003-12-10 01:25  gb

	* lisp-kernel/spentry.s: Don't reference tlb_pointer until we're
	sure it's big enough.

2003-12-10 01:24  gb

	* library/lispequ.lisp: More wrapper slots for faster slot lookup.

2003-12-10 01:24  gb

	* level-1/version.lisp: New date.

2003-12-10 01:23  gb

	* level-1/l1-clos.lisp: Set things up for faster slot lookup.

2003-12-10 01:22  gb

	* level-1/l1-clos-boot.lisp: SLOT-ID stuff.

2003-12-10 01:21  gb

	* level-0/PPC/ppc-clos.lisp: Some LAP for slot lookup.

2003-12-10 01:20  gb

	* level-0/l0-init.lisp: New PPC32, MOP features.

2003-12-06 22:25  gb

	* level-1/: l1-clos-boot.lisp, l1-clos.lisp: Move
	SLOT-ID-VALUE/SETF-SLOT-ID-VALUE from l1-clos.lisp to
	l1-clos-boot.lisp.

2003-12-06 22:24  gb

	* library/lispequ.lisp: There -will- be more fields in a class
	wrapper soon.

2003-12-06 21:11  gb

	* compiler/optimizers.lisp: First cut at SLOT-VALUE.

2003-12-06 18:44  gb

	* level-1/l1-io.lisp: PRINT-OBJECT method for SLOT-ID.

2003-12-06 18:44  gb

	* level-1/l1-clos-boot.lisp, level-1/l1-clos.lisp,
	library/lispequ.lisp: Start to implement new slot-lookup scheme.

2003-12-06 17:25  gb

	* examples/cocoa-listener.lisp: Return value of insertNewline:
	method is void.

2003-12-06 17:16  gb

	* level-1/l1-clos-boot.lisp: Be more careful about recognizing EQL
	specializers.

2003-12-06 17:15  gb

	* examples/apple-objc.lisp: COLLECT macro moved to CCL package.

2003-12-01 14:44  gb

	* lib/foreign-types.lisp: %foreign-type-or-record: recognize
	(:struct :foo) off the bat.

2003-12-01 14:44  gb

	* level-1/linux-files.lisp: Better %%rusage, since Darwin mucks up
	system/user time.

2003-12-01 14:42  gb

	* level-0/PPC/ppc-symbol.lisp: %SVAR-BINDING-ADDRESS fix.

2003-11-30 01:55  gb

	* lisp-kernel/pmcl-kernel.c: ensure_gc_structures_writable: account
	for entire heap, not just current dynamic area.  Don't try to
	commit a 0-length page range.

2003-11-30 01:54  gb

	* lisp-kernel/lisp-debug.c: Distinguish between read errors
	(especially EINTR) and EOF; terminate on true EOF.

2003-11-19 01:52  gb

	* level-0/l0-cfm-support.lisp, level-0/l0-utils.lisp,
	level-0/nfasload.lisp, level-0/PPC/ppc-array.lisp,
	level-0/PPC/ppc-def.lisp, level-0/PPC/ppc-float.lisp,
	level-0/PPC/ppc-misc.lisp, level-0/PPC/ppc-symbol.lisp,
	level-0/PPC/ppc-utils.lisp, level-1/l1-aprims.lisp,
	level-1/l1-clos-boot.lisp, level-1/l1-dcode.lisp,
	level-1/l1-events.lisp, level-1/l1-lisp-threads.lisp,
	level-1/l1-readloop.lisp, level-1/l1-streams.lisp,
	level-1/l1-utils.lisp, level-1/ppc-callback-support.lisp,
	level-1/ppc-error-signal.lisp, level-1/ppc-threads-utils.lisp,
	level-1/ppc-trap-support.lisp, lib/arrays-fry.lisp,
	lib/backtrace-lds.lisp, lib/backtrace.lisp, lib/dumplisp.lisp,
	lib/eval.lisp, lib/ppc-metering.lisp,
	library/macptr-termination.lisp: remove sparc lap; move all PPC lap
	code to ccl:level-0;PPC;

2003-11-18 08:32  gb

	* compiler/PPC/ppc-lap.lisp: PPC lap macros hash table in backend

2003-11-18 03:10  gb

	* compiler/backend.lisp, compiler/nx.lisp, compiler/vinsn.lisp,
	compiler/PPC/ppc-arch.lisp, compiler/PPC/ppc-asm.lisp,
	compiler/PPC/ppc-backend.lisp, compiler/PPC/ppc-disassemble.lisp,
	compiler/PPC/ppc-lap.lisp, compiler/PPC/PPC32/ppc32-arch.lisp,
	level-0/PPC/ppc-array.lisp, level-0/PPC/ppc-bignum.lisp,
	level-0/PPC/ppc-pred.lisp, level-0/PPC/ppc-symbol.lisp,
	level-1/l1-boot-2.lisp, level-1/runtime.lisp, lib/compile-ccl.lisp,
	lib/nfcomp.lisp, lib/number-macros.lisp, lib/systems.lisp: ppc-arch
	-> ppc32-arch, lap-macros slot in backend

2003-11-18 02:15  gb

	* compiler/PPC/PPC32/ppc32-arch.lisp: rename of ppc-arch.lisp

2003-11-18 01:25  gb

	* compiler/: arch.lisp, PPC/ppc-arch.lisp, PPC/ppc-asm.lisp: missed
	a few DEFENUM stragglers

2003-11-18 00:51  gb

	* compiler/arch.lisp, compiler/vinsn.lisp, level-0/l0-bignum.lisp,
	level-1/l1-clos.lisp, level-1/l1-typesys.lisp,
	lib/foreign-types.lisp, lib/macros.lisp, lib/number-macros.lisp:
	move ONCE-ONLY, COLLECT. ITERATE to CCL package

2003-11-18 00:51  gb

	* level-1/version.lisp: bump version

2003-11-17 23:59  gb

	* compiler/nx0.lisp, compiler/nx1.lisp, compiler/optimizers.lisp,
	compiler/vinsn.lisp, compiler/vreg.lisp, compiler/PPC/ppc-asm.lisp,
	compiler/PPC/ppc-backend.lisp, compiler/PPC/ppc-disassemble.lisp,
	compiler/PPC/ppc-lap.lisp, compiler/PPC/ppc-lapmacros.lisp,
	compiler/PPC/ppc-vinsns.lisp, compiler/PPC/ppc2.lisp,
	level-0/l0-aprims.lisp, level-0/l0-array.lisp,
	level-0/l0-bignum.lisp, level-0/l0-cfm-support.lisp,
	level-0/l0-def.lisp, level-0/l0-float.lisp, level-0/l0-hash.lisp,
	level-0/l0-init.lisp, level-0/l0-int.lisp, level-0/l0-io.lisp,
	level-0/l0-misc.lisp, level-0/l0-numbers.lisp,
	level-0/l0-pred.lisp, level-0/l0-symbol.lisp,
	level-0/l0-utils.lisp, level-0/nfasload.lisp,
	level-0/PPC/ppc-array.lisp, level-0/PPC/ppc-bignum.lisp,
	level-0/PPC/ppc-debug.lisp, level-0/PPC/ppc-def.lisp,
	level-0/PPC/ppc-float.lisp, level-0/PPC/ppc-hash.lisp,
	level-0/PPC/ppc-io.lisp, level-0/PPC/ppc-misc.lisp,
	level-0/PPC/ppc-numbers.lisp, level-0/PPC/ppc-pred.lisp,
	level-0/PPC/ppc-symbol.lisp, level-0/PPC/ppc-utils.lisp,
	level-1/l1-aprims.lisp, level-1/l1-boot-1.lisp,
	level-1/l1-boot-2.lisp, level-1/l1-clos-boot.lisp,
	level-1/l1-clos.lisp, level-1/l1-dcode.lisp,
	level-1/l1-events.lisp, level-1/l1-io.lisp,
	level-1/l1-lisp-threads.lisp, level-1/l1-numbers.lisp,
	level-1/l1-processes.lisp, level-1/l1-readloop.lisp,
	level-1/l1-sockets.lisp, level-1/l1-streams.lisp,
	level-1/l1-typesys.lisp, level-1/l1-utils.lisp,
	level-1/linux-files.lisp, level-1/ppc-callback-support.lisp,
	level-1/ppc-error-signal.lisp, level-1/ppc-threads-utils.lisp,
	level-1/ppc-trap-support.lisp, level-1/sysutils.lisp,
	lib/arrays-fry.lisp, lib/backtrace-lds.lisp, lib/backtrace.lisp,
	lib/defstruct-lds.lisp, lib/defstruct.lisp, lib/describe.lisp,
	lib/eval.lisp, lib/foreign-types.lisp, lib/macros.lisp,
	lib/nfcomp.lisp, lib/number-case-macro.lisp,
	lib/number-macros.lisp, lib/numbers.lisp, lib/ppc-metering.lisp,
	lib/ppcenv.lisp, lib/prepare-mcl-environment.lisp,
	library/macptr-termination.lisp, xdump/hashenv.lisp,
	xdump/xfasload.lisp, xdump/xppcfasload.lisp: rename arch:: ppc::
	refs to ppc32::, for now

2003-11-17 23:52  gb

	* compiler/: arch.lisp, PPC/ppc-arch.lisp: start big package rename
	scheme

2003-11-17 20:52  gb

	* lib/proxy-events.lisp: hasn't been used in a long time ...

2003-11-13 02:19  gb

	* compiler/PPC/ppc2.lisp: PPC2-LOCAL-GO: need to clean up the
	vstack regardless of XFER token.

2003-11-09 18:15  gb

	* compiler/PPC/ppc-asm.lisp: fix handling of immediate operands in
	vector instructions

2003-11-08 12:45  gb

	* lib/dumplisp.lisp: Clear *INTERACTIVE-ABORT-PROCESS* in
	KILL-LISP-POINTERS.

2003-11-08 12:44  gb

	* level-1/l1-events.lisp: Don't try to interrupt
	*INTERACTIVE-ABORT-PROCESS* if it's null.

2003-11-08 12:39  gb

	* level-1/version.lisp: Bump the version.

2003-11-06 01:57  gb

	* lisp-kernel/lisp-exceptions.c: Use symbolic constants in a few
	places.  Check for recent CREATE_LISP_FRAME_INSTRUCTION before
	pc_luser-ing through stack frame initialization, since it may be
	re-initialization.

2003-11-06 01:56  gb

	* lisp-kernel/lisp-exceptions.h: Define a few opcodes, and define
	CREATE_LISP_FRAME_INSTRUCTION.

2003-11-04 12:04  gb

	* level-1/: l1-clos-boot.lisp, l1-clos.lisp: More structure-class
	accessor stuff.

2003-11-04 12:04  gb

	* level-1/version.lisp: Guess ...

2003-11-04 10:15  gb

	* level-1/l1-clos.lisp: Some more work to make STRUCTURE-CLASS have
	real slot definitions.

2003-11-04 10:15  gb

	* level-1/l1-clos-boot.lisp: Define a MAKE-INSTANCES-OBSOLETE
	method for STRUCTURE-CLASS.  Next step: make it do something, like
	warning ...

2003-11-04 10:13  gb

	* level-1/l1-io.lisp: PRINT-OBJECT method for SLOT-DESCRIPTOR,
	whether standard or not.

2003-10-29 17:47  gb

	* level-1/l1-clos.lisp: Fix initialization of early
	effective-slotds.  Start to integrate STRUCTURE-CLASS a bit better.

2003-10-29 16:18  gb

	* lib/: defstruct-lds.lisp, defstruct-macros.lisp, defstruct.lisp:
	Distinguish between inherited structure slots and direct ones.

2003-10-29 16:16  gb

	* level-1/: l1-clos-boot.lisp, l1-clos.lisp: Introduce SLOTS-CLASS;
	make STD-CLASS and STRUCTURE-CLASS (for now) inherit from it.

2003-10-28 18:00  gb

	* hemlock/src/: files.lisp, line.lisp, linimage.lisp,
	rompsite.lisp: More changes/fixes: line-buffered-p stuff.

2003-10-28 17:59  gb

	* examples/compile-hemlock.lisp: new file

2003-10-27 16:48  gb

	* hemlock/src/: files.lisp, macros.lisp, morecoms.lisp,
	rompsite.lisp, window.lisp, winimage.lisp: Suppress some compiler
	warnings.

2003-10-27 16:47  gb

	* hemlock/src/decls.lisp: Declare some special variables.

2003-10-27 15:42  gb

	* hemlock/src/: bit-display.lisp, bit-screen.lisp, cursor.lisp,
	display.lisp, window.lisp, winimage.lisp: Use asterisks in (more)
	special variable names.

2003-10-27 15:28  gb

	* hemlock/src/: bit-screen.lisp, htext1.lisp, htext3.lisp,
	syntax.lisp: More #-clx stuff, fix typos.

2003-10-27 06:22  gb

	* lisp-kernel/gc.c: Fix botch in mark_tcr_tlb().

2003-10-27 06:21  gb

	* lisp-kernel/: Threads.h, lisp-exceptions.c, thread_manager.c:
	Handle tlb extension

2003-10-27 06:21  gb

	* lib/nfcomp.lisp, xdump/faslenv.lisp: Bump the fasl version.

2003-10-27 06:20  gb

	* level-0/l0-error.lisp: Handle XSYMNOBIND.

2003-10-27 04:24  gb

	* level-0/l0-symbol.lisp: Maintain (weak) inverse mapping from idx
	to svar.

2003-10-27 04:23  gb

	* level-1/l1-lisp-threads.lisp: nth-value-in-frame, etc: new
	binding scheme.

2003-10-27 04:18  gb

	* level-1/version.lisp: Bump.

2003-10-26 03:12  gb

	* lisp-kernel/gc.c: Fix typo.

2003-10-26 03:10  gb

	* lisp-kernel/spentry.s: Check for non-bindable symbols without
	trapping.

2003-10-26 03:09  gb

	* lisp-kernel/gc.c: Try to special-case
	NO_THREAD_LOCAL_BINDING_MARKER when walking tlb.

2003-10-26 03:08  gb

	* lisp-kernel/errors.s: XSYMNOBIND

2003-10-26 03:06  gb

	* lib/prepare-mcl-environment.lisp: Look for svar-idx in
	%RESET-OUTERMOST-BINDING.

2003-10-24 10:40  gb

	* lib/prepare-mcl-environment.lisp: (Hopefully) fix
	%RESET-OUTERMOST-BINDING.

2003-10-24 01:33  gb

	* lisp-kernel/spentry.s: Enable/fix shallow-binding stuff.

2003-10-24 01:33  gb

	* lisp-kernel/macros.s: trlle.

2003-10-24 01:32  gb

	* lisp-kernel/gc.c: GC tcr->tlb.

2003-10-24 01:31  gb

	* lisp-kernel/thread_manager.c: Make initial tlb a little bigger.

2003-10-24 01:29  gb

	* lib/db-io.lisp: #$-reader takes more care with constants.

2003-10-24 01:28  gb

	* level-1/l1-readloop.lisp: Cheap evaluator takes more care with
	constants.

2003-10-24 01:28  gb

	* compiler/nx0.lisp: Avoid consing SVARS unnecessarly when
	transforming symbols.

2003-10-23 15:46  gb

	* level-1/l1-utils.lisp: UNDEFINE-CONSTANT.

2003-10-23 15:46  gb

	* level-0/PPC/ppc-symbol.lisp: Low-level symbol/svar accessors.

2003-10-23 15:45  gb

	* level-0/nfasload.lisp: KEYWORD interning sets global value.

2003-10-23 15:45  gb

	* level-0/l0-symbol.lisp: Need an SVAR for symbol-value in general;
	global versions for when we don't.

2003-10-23 15:43  gb

	* compiler/subprims.lisp: Use UNDEFINE-CONSTANT vice MAKUNBOUND

2003-10-23 13:52  gb

	* level-0/l0-symbol.lisp, level-0/PPC/ppc-symbol.lisp,
	lib/backtrace-lds.lisp: New binding stuff.

2003-10-23 13:51  gb

	* compiler/subprims.lisp: Rename old binding subprims.

2003-10-23 13:51  gb

	* compiler/arch.lisp: SVAR-related tcr fields.

2003-10-23 07:37  gb

	* compiler/PPC/: ppc-vinsns.lisp, ppc2.lisp: backend SVAR support

2003-10-23 06:59  gb

	* xdump/xfasload.lisp: SVAR support.

2003-10-23 06:57  gb

	* level-1/sysutils.lisp: More SVAR type stuff.

2003-10-23 06:57  gb

	* level-1/l1-io.lisp: PRINT-OBJECT for svars.

2003-10-23 06:57  gb

	* level-1/l1-clos-boot.lisp: SVAR class.

2003-10-23 06:57  gb

	* level-0/nfasload.lisp: Special-case SVARs in fasl-gvect.

2003-10-23 06:56  gb

	* level-0/l0-symbol.lisp: SVAR binding stuff.

2003-10-23 06:56  gb

	* level-0/l0-pred.lisp: SVAR type support.

2003-10-23 03:51  gb

	* lisp-kernel/: constants.h, constants.s, macros.s, spentry.s,
	spjump.s, thread_manager.c: New svar stuff.  (will need GC
	changes.)

2003-10-23 03:47  gb

	* compiler/nx1.lisp: svar progv support.

2003-10-23 03:47  gb

	* compiler/arch.lisp: svar tag, struct.

2003-10-23 03:47  gb

	* compiler/subprims.lisp: New subprims for svar binding scheme.

2003-10-21 18:09  gb

	* darwin-headers/: carbon/.cvsignore, carbon/C/populate.sh,
	cocoa/.cvsignore, cocoa/C/populate.sh, gl/.cvsignore,
	gl/C/populate.sh, libc/.cvsignore, libc/C/populate.sh: recover
	darwin-headers sources

2003-10-21 18:07  gb

	* headers/: gl/.cvsignore, gl/C/populate.sh, gnome/.cvsignore,
	gnome/C/populate.sh, gtk/.cvsignore, gtk/C/populate.sh,
	libc/.cvsignore, libc/C/populate.sh: recover headers sources

2003-10-21 18:00  gb

	* lisp-kernel/: gc.h, lisp-exceptions.c: Handle new gc-traps for
	egc state changes.

2003-10-21 18:00  gb

	* level-1/l1-dcode.lisp: CLASS-SLOT bugs in dcode/reader-trap.

2003-10-21 17:59  gb

	* level-1/l1-aprims.lisp: Serialize EGC state changes.

2003-10-19 02:57  gb

	* .cvsignore, LGPL, LICENSE, binppc/.cvsignore, compiler/arch.lisp,
	compiler/backend.lisp, compiler/dll-node.lisp,
	compiler/lambda-list.lisp, compiler/nx-base-app.lisp,
	compiler/nx-basic.lisp, compiler/nx.lisp, compiler/nx0.lisp,
	compiler/nx1.lisp, compiler/nxenv.lisp, compiler/optimizers.lisp,
	compiler/reg.lisp, compiler/risc-lap.lisp, compiler/subprims.lisp,
	compiler/vinsn.lisp, compiler/vreg.lisp,
	compiler/PPC/ppc-arch.lisp, compiler/PPC/ppc-asm.lisp,
	compiler/PPC/ppc-backend.lisp, compiler/PPC/ppc-disassemble.lisp,
	compiler/PPC/ppc-lap.lisp, compiler/PPC/ppc-lapmacros.lisp,
	compiler/PPC/ppc-vinsns.lisp, compiler/PPC/ppc2.lisp,
	l1-pfsls/.cvsignore, level-0/l0-aprims.lisp, level-0/l0-array.lisp,
	level-0/l0-cfm-support.lisp, level-0/l0-clos.lisp,
	level-0/l0-complex.lisp, level-0/l0-dcode.lisp,
	level-0/l0-debug.lisp, level-0/l0-def.lisp, level-0/l0-error.lisp,
	level-0/l0-float.lisp, level-0/l0-hash.lisp, level-0/l0-init.lisp,
	level-0/l0-int.lisp, level-0/l0-io.lisp, level-0/l0-misc.lisp,
	level-0/l0-pred.lisp, level-0/l0-symbol.lisp,
	level-0/l0-utils.lisp, level-0/.cvsignore, level-0/l0-bignum.lisp,
	level-0/l0-numbers.lisp, level-0/nfasload.lisp,
	level-0/PPC/.cvsignore, level-0/PPC/ppc-array.lisp,
	level-0/PPC/ppc-bignum.lisp, level-0/PPC/ppc-debug.lisp,
	level-0/PPC/ppc-def.lisp, level-0/PPC/ppc-float.lisp,
	level-0/PPC/ppc-hash.lisp, level-0/PPC/ppc-io.lisp,
	level-0/PPC/ppc-misc.lisp, level-0/PPC/ppc-numbers.lisp,
	level-0/PPC/ppc-pred.lisp, level-0/PPC/ppc-symbol.lisp,
	level-0/PPC/ppc-utils.lisp, level-1/l1-aprims.lisp,
	level-1/l1-boot-1.lisp, level-1/l1-boot-3.lisp,
	level-1/l1-boot-lds.lisp, level-1/l1-callbacks.lisp,
	level-1/l1-cl-package.lisp, level-1/l1-clos.lisp,
	level-1/l1-dcode.lisp, level-1/l1-error-signal.lisp,
	level-1/l1-error-system.lisp, level-1/l1-events.lisp,
	level-1/l1-files.lisp, level-1/l1-format.lisp,
	level-1/l1-init.lisp, level-1/l1-io.lisp,
	level-1/l1-lisp-threads.lisp, level-1/l1-numbers.lisp,
	level-1/l1-processes.lisp, level-1/l1-reader.lisp,
	level-1/l1-readloop-lds.lisp, level-1/l1-readloop.lisp,
	level-1/l1-sockets.lisp, level-1/l1-sort.lisp,
	level-1/l1-streams.lisp, level-1/l1-symhash.lisp,
	level-1/linux-files.lisp, level-1/l1-boot-2.lisp,
	level-1/l1-clos-boot.lisp, level-1/l1-pathnames.lisp,
	level-1/l1-sysio.lisp, level-1/l1-typesys.lisp,
	level-1/l1-utils.lisp, level-1/level-1.lisp,
	level-1/ppc-callback-support.lisp, level-1/ppc-error-signal.lisp,
	level-1/ppc-threads-utils.lisp, level-1/ppc-trap-support.lisp,
	level-1/runtime.lisp, level-1/solaris-files.lisp,
	level-1/sysutils.lisp, level-1/version.lisp, lib/apropos.lisp,
	lib/arglist.lisp, lib/arrays-fry.lisp, lib/backquote.lisp,
	lib/backtrace-lds.lisp, lib/backtrace.lisp, lib/case-error.lisp,
	lib/ccl-export-syms.lisp, lib/chars.lisp, lib/compile-ccl.lisp,
	lib/defstruct-lds.lisp, lib/defstruct-macros.lisp,
	lib/defstruct.lisp, lib/describe.lisp, lib/distrib-inits.lisp,
	lib/dumplisp.lisp, lib/edit-callers.lisp, lib/encapsulate.lisp,
	lib/db-io.lisp, lib/eval.lisp, lib/foreign-types.lisp,
	lib/format.lisp, lib/hash.lisp, lib/level-2.lisp, lib/lists.lisp,
	lib/macros.lisp, lib/mcl-compat.lisp, lib/method-combination.lisp,
	lib/misc.lisp, lib/nfcomp.lisp, lib/number-case-macro.lisp,
	lib/number-macros.lisp, lib/numbers.lisp, lib/pathnames.lisp,
	lib/ppc-init-ccl.lisp, lib/ppc-metering.lisp, lib/ppcenv.lisp,
	lib/pprint.lisp, lib/prepare-mcl-environment.lisp,
	lib/print-db.lisp, lib/proxy-events.lisp, lib/read.lisp,
	lib/sequences.lisp, lib/setf-runtime.lisp, lib/setf.lisp,
	lib/sort.lisp, lib/source-files.lisp, lib/sparcenv.lisp,
	lib/step.lisp, lib/streams.lisp, lib/systems.lisp, lib/time.lisp,
	library/darwin-syscalls.lisp, library/extended-loop.lisp,
	library/lisp-package.lisp, examples/README-OPENMCL-EXAMPLES,
	examples/apple-objc.lisp, examples/cocoa-listener.lisp,
	examples/cocoa-window.lisp, examples/cocoa.lisp,
	examples/finger.lisp, examples/gtk-clock.lisp,
	examples/gtk-minesweeper.lisp, examples/gtk-step.lisp,
	examples/opengl-ffi.lisp, library/.cvsignore,
	library/linux-syscalls.lisp, library/lispequ.lisp,
	library/loop.lisp, library/mac-file-io.lisp,
	library/macptr-termination.lisp, library/mit-loop.lisp,
	library/openmcl-gtk-support.lisp, library/parse-ffi.lisp,
	library/pascal-strings.lisp, library/pty.lisp,
	library/solaris-records.lisp, library/syscall.lisp,
	lisp-kernel/Threads.h, lisp-kernel/area.h, lisp-kernel/asmutils.s,
	lisp-kernel/bits.c, lisp-kernel/bits.h, lisp-kernel/constants.h,
	lisp-kernel/constants.s, lisp-kernel/errors.s, lisp-kernel/gc.c,
	lisp-kernel/gc.h, lisp-kernel/image.c, lisp-kernel/image.h,
	lisp-kernel/imports.s, lisp-kernel/kernel-globals.h,
	lisp-kernel/lisp-debug.c, lisp-kernel/lisp-errors.h,
	lisp-kernel/lisp-exceptions.c, lisp-kernel/lisp-exceptions.h,
	lisp-kernel/lisp.h, lisp-kernel/lisp.s, lisp-kernel/lisp_globals.h,
	lisp-kernel/lispdcmd.c, lisp-kernel/lispdcmd.h,
	lisp-kernel/lisptypes.h, lisp-kernel/m4macros.m4,
	lisp-kernel/macros.h, lisp-kernel/macros.s,
	lisp-kernel/memprotect.h, lisp-kernel/pad.s, lisp-kernel/plbt.c,
	lisp-kernel/plprint.c, lisp-kernel/plsym.c,
	lisp-kernel/pmcl-kernel.c, lisp-kernel/ppc_print.c,
	lisp-kernel/sampler.c, lisp-kernel/sigcontext.h,
	lisp-kernel/spentry.s, lisp-kernel/spjump.s,
	lisp-kernel/subprims.s, lisp-kernel/thread_manager.c,
	lisp-kernel/uuo.s, lisp-kernel/darwin/.gdb_history,
	lisp-kernel/darwin/.gdbinit, lisp-kernel/darwin/Makefile,
	lisp-kernel/darwin/retain, lisp-kernel/linux/.gdbinit,
	lisp-kernel/linux/Makefile, lisp-kernel/linux/elf32ppclinux.x,
	scripts/openmcl, xdump/.cvsignore, xdump/faslenv.lisp,
	xdump/hashenv.lisp, xdump/heap-image.lisp, xdump/xfasload.lisp,
	xdump/xppcfasload.lisp, xdump/xsparcfasload.lisp, xdump/xsym.lisp,
	OpenMCL.app/Contents/Info.plist, OpenMCL.app/Contents/PkgInfo,
	OpenMCL.app/Contents/Resources/OpenMCLKeyBindings.dict,
	OpenMCL.app/Contents/Resources/openmcl-icon.icns,
	OpenMCL.app/Contents/Resources/English.lproj/Credits.rtf,
	OpenMCL.app/Contents/Resources/English.lproj/InfoPlist.strings,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/classes.n
	ib,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/info.nib,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/objects.n
	ib,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu~.nib/classes.
	nib,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu~.nib/info.nib
	,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu~.nib/objects.
	nib,
	OpenMCL.app/Contents/Resources/English.lproj/OpenmclInspector.nib/c
	lasses.nib,
	OpenMCL.app/Contents/Resources/English.lproj/OpenmclInspector.nib/i
	nfo.nib,
	OpenMCL.app/Contents/Resources/English.lproj/OpenmclInspector.nib/o
	bjects.nib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor.nib/classes
	.nib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor.nib/info.ni
	b,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor.nib/objects
	.nib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor~.nib/classe
	s.nib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor~.nib/info.n
	ib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor~.nib/object
	s.nib, OpenMCL.app/Contents/Resources/Help/cocoa-notes.html,
	OpenMCL.app/Contents/Resources/Help/index.html,
	bindarwin/.cvsignore, doc/HTML/.cvsignore,
	examples/CocoaBridgeDoc.txt, examples/bridge.lisp,
	examples/cocoa-application.lisp, examples/cocoa-editor.lisp,
	examples/cocoa-inspector.lisp, examples/cocoa-textfind.lisp,
	examples/gnu-objc.lisp, examples/hemlock-textstorage.lisp,
	examples/jni.lisp, examples/name-translation.lisp,
	examples/objc-support.lisp, examples/process-objc-modules.lisp,
	examples/tiny.lisp, examples/webkit.lisp, hemlock/INSTALL,
	hemlock/README, hemlock/TODO, hemlock/hemlock.system,
	hemlock/hemlock11.cursor, hemlock/hemlock11.mask,
	hemlock/bin/openmcl/.cvsignore, hemlock/doc/cim/aux-sys.mss,
	hemlock/doc/cim/cim.mss, hemlock/doc/misc/compilation.order,
	hemlock/doc/misc/hemlock.log, hemlock/doc/misc/hemlock.upd,
	hemlock/doc/misc/notes.txt, hemlock/doc/misc/perq-hemlock.log,
	hemlock/doc/misc/things-to-do.txt,
	hemlock/doc/scribe-converter/NOTES,
	hemlock/doc/scribe-converter/README, hemlock/doc/user/commands.mss,
	hemlock/doc/user/intro.mss, hemlock/doc/user/lisp.mss,
	hemlock/doc/user/mail.mss, hemlock/doc/user/netnews.mss,
	hemlock/doc/user/special-modes.mss, hemlock/doc/user/user.mss,
	hemlock/src/abbrev.lisp, hemlock/src/auto-save.lisp,
	hemlock/src/bindings-gb.lisp, l1-dfsls/.cvsignore,
	hemlock/src/bindings.lisp, hemlock/src/bit-display.lisp,
	hemlock/src/bit-screen.lisp, hemlock/src/bufed.lisp,
	hemlock/src/buffer.lisp, hemlock/src/charmacs.lisp,
	hemlock/src/command.lisp, hemlock/src/comments.lisp,
	hemlock/src/completion.lisp, hemlock/src/cursor.lisp,
	hemlock/src/debug.lisp, hemlock/src/decls.lisp,
	hemlock/src/defsyn.lisp, hemlock/src/dired.lisp,
	hemlock/src/diredcoms.lisp, hemlock/src/display.lisp,
	hemlock/src/doccoms.lisp, hemlock/src/dylan.lisp,
	hemlock/src/echo.lisp, hemlock/src/echocoms.lisp,
	hemlock/src/edit-defs.lisp, hemlock/src/eval-server.lisp,
	hemlock/src/filecoms.lisp, hemlock/src/files.lisp,
	hemlock/src/fill.lisp, hemlock/src/font.lisp,
	hemlock/src/group.lisp, hemlock/src/hemlock-ext.lisp,
	hemlock/src/highlight.lisp, hemlock/src/htext1.lisp,
	hemlock/src/htext2.lisp, hemlock/src/htext3.lisp,
	hemlock/src/htext4.lisp, hemlock/src/hunk-draw.lisp,
	hemlock/src/icom.lisp, hemlock/src/indent.lisp,
	hemlock/src/input.lisp, hemlock/src/interp.lisp,
	hemlock/src/kbdmac.lisp, hemlock/src/key-event.lisp,
	hemlock/src/keysym-defs.lisp, hemlock/src/killcoms.lisp,
	hemlock/src/line.lisp, hemlock/src/linimage.lisp,
	hemlock/src/lisp-lib.lisp, hemlock/src/lispbuf.lisp,
	hemlock/src/lispdep.lisp, hemlock/src/lispeval.lisp,
	hemlock/src/lispmode.lisp, hemlock/src/macros.lisp,
	hemlock/src/main.lisp, hemlock/src/mh.lisp, hemlock/maint/publish,
	hemlock/resources/XKeysymDB, hemlock/resources/mh-scan,
	hemlock/src/morecoms.lisp, hemlock/src/netnews.lisp,
	hemlock/src/overwrite.lisp, hemlock/src/package.lisp,
	hemlock/src/pascal.lisp, hemlock/src/pop-up-stream.lisp,
	hemlock/src/rcs.lisp, hemlock/src/register.lisp,
	hemlock/src/ring.lisp, hemlock/src/rompsite.lisp,
	hemlock/src/screen.lisp, hemlock/src/scribe.lisp,
	hemlock/src/search1.lisp, hemlock/src/search2.lisp,
	hemlock/src/searchcoms.lisp, hemlock/src/shell.lisp,
	hemlock/src/spell-aug.lisp, hemlock/src/spell-corr.lisp,
	hemlock/src/spell-rt.lisp, hemlock/src/spellcoms.lisp,
	hemlock/src/srccom.lisp, hemlock/src/streams.lisp,
	hemlock/src/struct.lisp, hemlock/src/syntax.lisp,
	hemlock/src/table.lisp, hemlock/src/text.lisp,
	hemlock/src/ts-buf.lisp, hemlock/src/ts-stream.lisp,
	hemlock/src/undo.lisp, hemlock/src/unixcoms.lisp,
	hemlock/src/vars.lisp, hemlock/src/window.lisp,
	hemlock/src/winimage.lisp, hemlock/src/xcoms.lisp,
	hemlock/src/elisp/README, hemlock/src/elisp/base.lisp,
	hemlock/src/elisp/cmucl-hemlock-glue.lisp,
	hemlock/src/elisp/codewalker.lisp, hemlock/src/elisp/compile.lisp,
	hemlock/src/elisp/hemlock-shims.lisp,
	hemlock/src/elisp/implementation-needed,
	hemlock/src/elisp/internals.lisp, hemlock/src/elisp/loadup.lisp,
	hemlock/src/elisp/packages.lisp, hemlock/src/elisp/read-table.lisp,
	hemlock/src/spell/README, hemlock/src/spell/build.lisp,
	hemlock/src/spell/classes.lisp, hemlock/src/spell/constants.lisp,
	hemlock/src/spell/correlate.lisp, hemlock/src/spell/flags.lisp,
	hemlock/src/spell/hashing.lisp, hemlock/src/spell/io.lisp,
	hemlock/src/spell/package.lisp, hemlock/src/spell/spell-aug.lisp,
	hemlock/src/spell/spell-dictionary.text,
	hemlock/src/spell/spell.asd, hemlock/src/spell/spellcoms.lisp,
	hemlock/src/tty/termcap.lisp, hemlock/src/tty/tty-disp-rt.lisp,
	hemlock/src/tty/tty-display.lisp, hemlock/src/tty/tty-screen.lisp,
	hemlock/src/wire/Notes, hemlock/src/wire/package.lisp,
	hemlock/src/wire/port.lisp, hemlock/src/wire/remote.lisp,
	hemlock/src/wire/wire.lisp,
	hemlock/resources/spell-dictionary.text,
	hemlock/unused/bit-stream.lisp, hemlock/unused/clx-ext.lisp,
	hemlock/unused/ed-integrity.lisp, hemlock/unused/gosmacs.lisp,
	hemlock/unused/hacks.lisp, hemlock/unused/hemcom.lisp,
	hemlock/unused/hi-integrity.lisp, hemlock/unused/keytran.lisp,
	hemlock/unused/keytrandefs.lisp, hemlock/unused/spell-build.lisp,
	hemlock/unused/struct-ed.lisp, hemlock/unused/tty-stream.lisp,
	hemlock/website/index.html.in: recovered 0.14 sources

2003-10-19 02:57  gb

	* .cvsignore, LGPL, LICENSE, binppc/.cvsignore, compiler/arch.lisp,
	compiler/backend.lisp, compiler/dll-node.lisp,
	compiler/lambda-list.lisp, compiler/nx-base-app.lisp,
	compiler/nx-basic.lisp, compiler/nx.lisp, compiler/nx0.lisp,
	compiler/nx1.lisp, compiler/nxenv.lisp, compiler/optimizers.lisp,
	compiler/reg.lisp, compiler/risc-lap.lisp, compiler/subprims.lisp,
	compiler/vinsn.lisp, compiler/vreg.lisp,
	compiler/PPC/ppc-arch.lisp, compiler/PPC/ppc-asm.lisp,
	compiler/PPC/ppc-backend.lisp, compiler/PPC/ppc-disassemble.lisp,
	compiler/PPC/ppc-lap.lisp, compiler/PPC/ppc-lapmacros.lisp,
	compiler/PPC/ppc-vinsns.lisp, compiler/PPC/ppc2.lisp,
	l1-pfsls/.cvsignore, level-0/l0-aprims.lisp, level-0/l0-array.lisp,
	level-0/l0-cfm-support.lisp, level-0/l0-clos.lisp,
	level-0/l0-complex.lisp, level-0/l0-dcode.lisp,
	level-0/l0-debug.lisp, level-0/l0-def.lisp, level-0/l0-error.lisp,
	level-0/l0-float.lisp, level-0/l0-hash.lisp, level-0/l0-init.lisp,
	level-0/l0-int.lisp, level-0/l0-io.lisp, level-0/l0-misc.lisp,
	level-0/l0-pred.lisp, level-0/l0-symbol.lisp,
	level-0/l0-utils.lisp, level-0/.cvsignore, level-0/l0-bignum.lisp,
	level-0/l0-numbers.lisp, level-0/nfasload.lisp,
	level-0/PPC/.cvsignore, level-0/PPC/ppc-array.lisp,
	level-0/PPC/ppc-bignum.lisp, level-0/PPC/ppc-debug.lisp,
	level-0/PPC/ppc-def.lisp, level-0/PPC/ppc-float.lisp,
	level-0/PPC/ppc-hash.lisp, level-0/PPC/ppc-io.lisp,
	level-0/PPC/ppc-misc.lisp, level-0/PPC/ppc-numbers.lisp,
	level-0/PPC/ppc-pred.lisp, level-0/PPC/ppc-symbol.lisp,
	level-0/PPC/ppc-utils.lisp, level-1/l1-aprims.lisp,
	level-1/l1-boot-1.lisp, level-1/l1-boot-3.lisp,
	level-1/l1-boot-lds.lisp, level-1/l1-callbacks.lisp,
	level-1/l1-cl-package.lisp, level-1/l1-clos.lisp,
	level-1/l1-dcode.lisp, level-1/l1-error-signal.lisp,
	level-1/l1-error-system.lisp, level-1/l1-events.lisp,
	level-1/l1-files.lisp, level-1/l1-format.lisp,
	level-1/l1-init.lisp, level-1/l1-io.lisp,
	level-1/l1-lisp-threads.lisp, level-1/l1-numbers.lisp,
	level-1/l1-processes.lisp, level-1/l1-reader.lisp,
	level-1/l1-readloop-lds.lisp, level-1/l1-readloop.lisp,
	level-1/l1-sockets.lisp, level-1/l1-sort.lisp,
	level-1/l1-streams.lisp, level-1/l1-symhash.lisp,
	level-1/linux-files.lisp, level-1/l1-boot-2.lisp,
	level-1/l1-clos-boot.lisp, level-1/l1-pathnames.lisp,
	level-1/l1-sysio.lisp, level-1/l1-typesys.lisp,
	level-1/l1-utils.lisp, level-1/level-1.lisp,
	level-1/ppc-callback-support.lisp, level-1/ppc-error-signal.lisp,
	level-1/ppc-threads-utils.lisp, level-1/ppc-trap-support.lisp,
	level-1/runtime.lisp, level-1/solaris-files.lisp,
	level-1/sysutils.lisp, level-1/version.lisp, lib/apropos.lisp,
	lib/arglist.lisp, lib/arrays-fry.lisp, lib/backquote.lisp,
	lib/backtrace-lds.lisp, lib/backtrace.lisp, lib/case-error.lisp,
	lib/ccl-export-syms.lisp, lib/chars.lisp, lib/compile-ccl.lisp,
	lib/defstruct-lds.lisp, lib/defstruct-macros.lisp,
	lib/defstruct.lisp, lib/describe.lisp, lib/distrib-inits.lisp,
	lib/dumplisp.lisp, lib/edit-callers.lisp, lib/encapsulate.lisp,
	lib/db-io.lisp, lib/eval.lisp, lib/foreign-types.lisp,
	lib/format.lisp, lib/hash.lisp, lib/level-2.lisp, lib/lists.lisp,
	lib/macros.lisp, lib/mcl-compat.lisp, lib/method-combination.lisp,
	lib/misc.lisp, lib/nfcomp.lisp, lib/number-case-macro.lisp,
	lib/number-macros.lisp, lib/numbers.lisp, lib/pathnames.lisp,
	lib/ppc-init-ccl.lisp, lib/ppc-metering.lisp, lib/ppcenv.lisp,
	lib/pprint.lisp, lib/prepare-mcl-environment.lisp,
	lib/print-db.lisp, lib/proxy-events.lisp, lib/read.lisp,
	lib/sequences.lisp, lib/setf-runtime.lisp, lib/setf.lisp,
	lib/sort.lisp, lib/source-files.lisp, lib/sparcenv.lisp,
	lib/step.lisp, lib/streams.lisp, lib/systems.lisp, lib/time.lisp,
	library/darwin-syscalls.lisp, library/extended-loop.lisp,
	library/lisp-package.lisp, examples/README-OPENMCL-EXAMPLES,
	examples/apple-objc.lisp, examples/cocoa-listener.lisp,
	examples/cocoa-window.lisp, examples/cocoa.lisp,
	examples/finger.lisp, examples/gtk-clock.lisp,
	examples/gtk-minesweeper.lisp, examples/gtk-step.lisp,
	examples/opengl-ffi.lisp, library/.cvsignore,
	library/linux-syscalls.lisp, library/lispequ.lisp,
	library/loop.lisp, library/mac-file-io.lisp,
	library/macptr-termination.lisp, library/mit-loop.lisp,
	library/openmcl-gtk-support.lisp, library/parse-ffi.lisp,
	library/pascal-strings.lisp, library/pty.lisp,
	library/solaris-records.lisp, library/syscall.lisp,
	lisp-kernel/Threads.h, lisp-kernel/area.h, lisp-kernel/asmutils.s,
	lisp-kernel/bits.c, lisp-kernel/bits.h, lisp-kernel/constants.h,
	lisp-kernel/constants.s, lisp-kernel/errors.s, lisp-kernel/gc.c,
	lisp-kernel/gc.h, lisp-kernel/image.c, lisp-kernel/image.h,
	lisp-kernel/imports.s, lisp-kernel/kernel-globals.h,
	lisp-kernel/lisp-debug.c, lisp-kernel/lisp-errors.h,
	lisp-kernel/lisp-exceptions.c, lisp-kernel/lisp-exceptions.h,
	lisp-kernel/lisp.h, lisp-kernel/lisp.s, lisp-kernel/lisp_globals.h,
	lisp-kernel/lispdcmd.c, lisp-kernel/lispdcmd.h,
	lisp-kernel/lisptypes.h, lisp-kernel/m4macros.m4,
	lisp-kernel/macros.h, lisp-kernel/macros.s,
	lisp-kernel/memprotect.h, lisp-kernel/pad.s, lisp-kernel/plbt.c,
	lisp-kernel/plprint.c, lisp-kernel/plsym.c,
	lisp-kernel/pmcl-kernel.c, lisp-kernel/ppc_print.c,
	lisp-kernel/sampler.c, lisp-kernel/sigcontext.h,
	lisp-kernel/spentry.s, lisp-kernel/spjump.s,
	lisp-kernel/subprims.s, lisp-kernel/thread_manager.c,
	lisp-kernel/uuo.s, lisp-kernel/darwin/.gdb_history,
	lisp-kernel/darwin/.gdbinit, lisp-kernel/darwin/Makefile,
	lisp-kernel/darwin/retain, lisp-kernel/linux/.gdbinit,
	lisp-kernel/linux/Makefile, lisp-kernel/linux/elf32ppclinux.x,
	scripts/openmcl, xdump/.cvsignore, xdump/faslenv.lisp,
	xdump/hashenv.lisp, xdump/heap-image.lisp, xdump/xfasload.lisp,
	xdump/xppcfasload.lisp, xdump/xsparcfasload.lisp, xdump/xsym.lisp,
	OpenMCL.app/Contents/Info.plist, OpenMCL.app/Contents/PkgInfo,
	OpenMCL.app/Contents/Resources/OpenMCLKeyBindings.dict,
	OpenMCL.app/Contents/Resources/openmcl-icon.icns,
	OpenMCL.app/Contents/Resources/English.lproj/Credits.rtf,
	OpenMCL.app/Contents/Resources/English.lproj/InfoPlist.strings,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/classes.n
	ib,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/info.nib,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu.nib/objects.n
	ib,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu~.nib/classes.
	nib,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu~.nib/info.nib
	,
	OpenMCL.app/Contents/Resources/English.lproj/MainMenu~.nib/objects.
	nib,
	OpenMCL.app/Contents/Resources/English.lproj/OpenmclInspector.nib/c
	lasses.nib,
	OpenMCL.app/Contents/Resources/English.lproj/OpenmclInspector.nib/i
	nfo.nib,
	OpenMCL.app/Contents/Resources/English.lproj/OpenmclInspector.nib/o
	bjects.nib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor.nib/classes
	.nib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor.nib/info.ni
	b,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor.nib/objects
	.nib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor~.nib/classe
	s.nib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor~.nib/info.n
	ib,
	OpenMCL.app/Contents/Resources/English.lproj/lispeditor~.nib/object
	s.nib, OpenMCL.app/Contents/Resources/Help/cocoa-notes.html,
	OpenMCL.app/Contents/Resources/Help/index.html,
	bindarwin/.cvsignore, doc/HTML/.cvsignore,
	examples/CocoaBridgeDoc.txt, examples/bridge.lisp,
	examples/cocoa-application.lisp, examples/cocoa-editor.lisp,
	examples/cocoa-inspector.lisp, examples/cocoa-textfind.lisp,
	examples/gnu-objc.lisp, examples/hemlock-textstorage.lisp,
	examples/jni.lisp, examples/name-translation.lisp,
	examples/objc-support.lisp, examples/process-objc-modules.lisp,
	examples/tiny.lisp, examples/webkit.lisp, hemlock/INSTALL,
	hemlock/README, hemlock/TODO, hemlock/hemlock.system,
	hemlock/hemlock11.cursor, hemlock/hemlock11.mask,
	hemlock/bin/openmcl/.cvsignore, hemlock/doc/cim/aux-sys.mss,
	hemlock/doc/cim/cim.mss, hemlock/doc/misc/compilation.order,
	hemlock/doc/misc/hemlock.log, hemlock/doc/misc/hemlock.upd,
	hemlock/doc/misc/notes.txt, hemlock/doc/misc/perq-hemlock.log,
	hemlock/doc/misc/things-to-do.txt,
	hemlock/doc/scribe-converter/NOTES,
	hemlock/doc/scribe-converter/README, hemlock/doc/user/commands.mss,
	hemlock/doc/user/intro.mss, hemlock/doc/user/lisp.mss,
	hemlock/doc/user/mail.mss, hemlock/doc/user/netnews.mss,
	hemlock/doc/user/special-modes.mss, hemlock/doc/user/user.mss,
	hemlock/src/abbrev.lisp, hemlock/src/auto-save.lisp,
	hemlock/src/bindings-gb.lisp, l1-dfsls/.cvsignore,
	hemlock/src/bindings.lisp, hemlock/src/bit-display.lisp,
	hemlock/src/bit-screen.lisp, hemlock/src/bufed.lisp,
	hemlock/src/buffer.lisp, hemlock/src/charmacs.lisp,
	hemlock/src/command.lisp, hemlock/src/comments.lisp,
	hemlock/src/completion.lisp, hemlock/src/cursor.lisp,
	hemlock/src/debug.lisp, hemlock/src/decls.lisp,
	hemlock/src/defsyn.lisp, hemlock/src/dired.lisp,
	hemlock/src/diredcoms.lisp, hemlock/src/display.lisp,
	hemlock/src/doccoms.lisp, hemlock/src/dylan.lisp,
	hemlock/src/echo.lisp, hemlock/src/echocoms.lisp,
	hemlock/src/edit-defs.lisp, hemlock/src/eval-server.lisp,
	hemlock/src/filecoms.lisp, hemlock/src/files.lisp,
	hemlock/src/fill.lisp, hemlock/src/font.lisp,
	hemlock/src/group.lisp, hemlock/src/hemlock-ext.lisp,
	hemlock/src/highlight.lisp, hemlock/src/htext1.lisp,
	hemlock/src/htext2.lisp, hemlock/src/htext3.lisp,
	hemlock/src/htext4.lisp, hemlock/src/hunk-draw.lisp,
	hemlock/src/icom.lisp, hemlock/src/indent.lisp,
	hemlock/src/input.lisp, hemlock/src/interp.lisp,
	hemlock/src/kbdmac.lisp, hemlock/src/key-event.lisp,
	hemlock/src/keysym-defs.lisp, hemlock/src/killcoms.lisp,
	hemlock/src/line.lisp, hemlock/src/linimage.lisp,
	hemlock/src/lisp-lib.lisp, hemlock/src/lispbuf.lisp,
	hemlock/src/lispdep.lisp, hemlock/src/lispeval.lisp,
	hemlock/src/lispmode.lisp, hemlock/src/macros.lisp,
	hemlock/src/main.lisp, hemlock/src/mh.lisp, hemlock/maint/publish,
	hemlock/resources/XKeysymDB, hemlock/resources/mh-scan,
	hemlock/src/morecoms.lisp, hemlock/src/netnews.lisp,
	hemlock/src/overwrite.lisp, hemlock/src/package.lisp,
	hemlock/src/pascal.lisp, hemlock/src/pop-up-stream.lisp,
	hemlock/src/rcs.lisp, hemlock/src/register.lisp,
	hemlock/src/ring.lisp, hemlock/src/rompsite.lisp,
	hemlock/src/screen.lisp, hemlock/src/scribe.lisp,
	hemlock/src/search1.lisp, hemlock/src/search2.lisp,
	hemlock/src/searchcoms.lisp, hemlock/src/shell.lisp,
	hemlock/src/spell-aug.lisp, hemlock/src/spell-corr.lisp,
	hemlock/src/spell-rt.lisp, hemlock/src/spellcoms.lisp,
	hemlock/src/srccom.lisp, hemlock/src/streams.lisp,
	hemlock/src/struct.lisp, hemlock/src/syntax.lisp,
	hemlock/src/table.lisp, hemlock/src/text.lisp,
	hemlock/src/ts-buf.lisp, hemlock/src/ts-stream.lisp,
	hemlock/src/undo.lisp, hemlock/src/unixcoms.lisp,
	hemlock/src/vars.lisp, hemlock/src/window.lisp,
	hemlock/src/winimage.lisp, hemlock/src/xcoms.lisp,
	hemlock/src/elisp/README, hemlock/src/elisp/base.lisp,
	hemlock/src/elisp/cmucl-hemlock-glue.lisp,
	hemlock/src/elisp/codewalker.lisp, hemlock/src/elisp/compile.lisp,
	hemlock/src/elisp/hemlock-shims.lisp,
	hemlock/src/elisp/implementation-needed,
	hemlock/src/elisp/internals.lisp, hemlock/src/elisp/loadup.lisp,
	hemlock/src/elisp/packages.lisp, hemlock/src/elisp/read-table.lisp,
	hemlock/src/spell/README, hemlock/src/spell/build.lisp,
	hemlock/src/spell/classes.lisp, hemlock/src/spell/constants.lisp,
	hemlock/src/spell/correlate.lisp, hemlock/src/spell/flags.lisp,
	hemlock/src/spell/hashing.lisp, hemlock/src/spell/io.lisp,
	hemlock/src/spell/package.lisp, hemlock/src/spell/spell-aug.lisp,
	hemlock/src/spell/spell-dictionary.text,
	hemlock/src/spell/spell.asd, hemlock/src/spell/spellcoms.lisp,
	hemlock/src/tty/termcap.lisp, hemlock/src/tty/tty-disp-rt.lisp,
	hemlock/src/tty/tty-display.lisp, hemlock/src/tty/tty-screen.lisp,
	hemlock/src/wire/Notes, hemlock/src/wire/package.lisp,
	hemlock/src/wire/port.lisp, hemlock/src/wire/remote.lisp,
	hemlock/src/wire/wire.lisp,
	hemlock/resources/spell-dictionary.text,
	hemlock/unused/bit-stream.lisp, hemlock/unused/clx-ext.lisp,
	hemlock/unused/ed-integrity.lisp, hemlock/unused/gosmacs.lisp,
	hemlock/unused/hacks.lisp, hemlock/unused/hemcom.lisp,
	hemlock/unused/hi-integrity.lisp, hemlock/unused/keytran.lisp,
	hemlock/unused/keytrandefs.lisp, hemlock/unused/spell-build.lisp,
	hemlock/unused/struct-ed.lisp, hemlock/unused/tty-stream.lisp,
	hemlock/website/index.html.in: Initial revision

