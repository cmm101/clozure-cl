#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
% -----------------------------------------  
% Autogenerated LaTeX file from XML DocBook  
% -----------------------------------------  
%%<params>
%%</params>

\usepackage{ifthen}\newboolean{DBKIsBook}
\setboolean{DBKIsBook}{true}
\IfFileExists{ifxetex.sty}{%
    \usepackage{ifxetex}%
  }{%
    \newif\ifxetex
    \xetexfalse
  }
  \ifxetex
\usepackage{fontspec}\usepackage{xltxtra}\setmainfont{DejaVu Serif}
\setsansfont{DejaVu Sans}
\setmonofont{DejaVu Sans Mono}
\else
\fi
\usepackage{fancybox}\usepackage[hyperlink]{docbook}\renewcommand{\DBKreleaseinfo}{}


\title{Using Clozure CL}
\author{}

% ------------------
% Collaborators
% ------------------
\renewcommand{\DBKindexation}{
\begin{DBKindtable}
\DBKinditem{\writtenby}{}
\end{DBKindtable}
}
\makeindex
\makeglossary
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "%"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Using Clozure CL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "using-ccl"

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "using-ccl-introduction"

\end_inset

The Common Lisp standard allows considerable latitude in the details of
 an implementation, and each particular Common Lisp system has some idiosyncrasi
es.
 This chapter describes ordinary user-level features of Clozure CL, including
 features that may be part of the Common Lisp standard, but which may have
 quirks or details in the Clozure CL implementation that are not described
 by the standard.
 It also describes extensions to the standard; that is, features of Clozure
 CL that are not part of the Common Lisp standard at all.
\end_layout

\begin_layout Section
Trace
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Trace"

\end_inset

Clozure CL's tracing facility is invoked by an extended version of the Common
 Lisp 
\family typewriter
trace
\family default
 macro.
 Extensions allow tracing of methods, as well as finer control over tracing
 actions.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
TRACE
\family default
 {
\family typewriter
\size small
\emph on
keyword
\family default
\emph default
 
\family typewriter
\emph on
global-value
\family default
\emph default
}* {
\family typewriter
\emph on
spec
\family default
\emph default
 | (
\family typewriter
\emph on
spec
\family default
\emph default
 {
\family typewriter
\emph on
keyword
\family default
\emph default
 
\family typewriter
\emph on
local-value
\family default
\emph default
}*)}* [Macro]
\end_layout

\begin_layout Standard
The 
\family typewriter
trace
\family default
 macro encapsulates the functions named by 
\family typewriter
\size small
\emph on
spec
\family default
\emph default
s, causing trace actions to take place on entry and exit from each function.
 The default actions print a message on function entry and exit.
 
\family typewriter
\emph on
Keyword
\family default
\emph default
/
\family typewriter
\emph on
value
\family default
\emph default
 options can be used to specify changes in the default behavior.
\end_layout

\begin_layout Standard
Invoking 
\family typewriter
(trace)
\family default
 without arguments returns a list of functions being traced.
\end_layout

\begin_layout Standard
A 
\family typewriter
\size small
\emph on
spec
\family default
\emph default
 is either a symbol that is the name of a function, or an expression of
 the form 
\family typewriter
(setf 
\emph on
symbol
\emph default
)
\family default
, or a specific method of a generic function in the form 
\family typewriter
(:method 
\emph on
gf-name
\emph default
 {
\emph on
qualifier
\emph default
}* ({
\emph on
specializer
\emph default
}*))
\family default
, where a 
\family typewriter
\emph on
specializer
\family default
\emph default
 can be the name of a class or an 
\family typewriter
EQL
\family default
 specializer.
\end_layout

\begin_layout Standard
A 
\family typewriter
\size small
\emph on
spec
\family default
\emph default
 can also be a string naming a package, or equivalently a list 
\family typewriter
(:package 
\emph on
package-name
\emph default
)
\family default
, in order to request that all functions in the package to be traced.
\end_layout

\begin_layout Standard
By default, whenever a traced function is entered or exited, a short message
 is printed on 
\family typewriter
*trace-output*
\family default
 showing the arguments on entry and values on exit.
 Options specified as key/value pairs can be used to modify this behavior.
 Options preceding the function 
\family typewriter
\size small
\emph on
spec
\family default
\emph default
s apply to all the functions being traced.
 Options specified along with a 
\family typewriter
\emph on
spec
\family default
\emph default
 apply to that spec only and override any global options.
 The following options are supported:
\end_layout

\begin_layout Description

\family typewriter
:methods {T | nil}
\family default
 If true, and if applied to a 
\family typewriter
\size small
\emph on
spec
\family default
\emph default
 naming a generic function, arranges to trace all the methods of the generic
 function in addition to the generic function itself.
 
\end_layout

\begin_layout Description

\family typewriter
:inside 
\emph on
outside-spec
\emph default
 | ({
\emph on
outside-spec
\emph default
}*)
\family default
 Inhibits all trace actions unless the current invocation of the function
 being traced is inside one of the 
\family typewriter
\size small
\emph on
outside-spec
\family default
\emph default
's, i.e.
 unless a function named by one of the 
\family typewriter
\emph on
outside-spec
\family default
\emph default
's is currently on the stack.
 
\family typewriter
\emph on
outside-spec
\family default
\emph default
 can name a function, a method, or a package, as above.
 
\end_layout

\begin_layout Description

\family typewriter
:if 
\emph on
form
\family default
\emph default
, 
\family typewriter
:condition 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced is about to be entered, and inhibits
 all trace actions if 
\family typewriter
\emph on
form
\family default
\emph default
 returns nil.
 The form may reference the lexical variable 
\family typewriter
ccl::args
\family default
, which is a list of the arguments in this call.
 
\family typewriter
:condition
\family default
 is just a synonym for 
\family typewriter
:if
\family default
, though if both are specified, both must return non-nil.
 
\end_layout

\begin_layout Description

\family typewriter
:before-if 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced is about to be entered, and inhibits
 the entry trace actions if 
\family typewriter
\emph on
form
\family default
\emph default
 returns nil.
 The form may reference the lexical variable 
\family typewriter
ccl::args
\family default
, which is a list of the arguments in this call.
 If both 
\family typewriter
:if
\family default
 and 
\family typewriter
:before-if
\family default
 are specified, both must return non-nil in order for the before entry actions
 to happen.
 
\end_layout

\begin_layout Description

\family typewriter
:after-if 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced has just exited, and inhibits the exit
 trace actions if 
\family typewriter
\emph on
form
\family default
\emph default
 returns nil.
 The form may reference the lexical variable 
\family typewriter
ccl::vals
\family default
, which is a list of values returned by this call.
 If both 
\family typewriter
:if
\family default
 and 
\family typewriter
:after-if
\family default
 are specified, both must return non-nil in order for the after exit actions
 to happen.
 
\end_layout

\begin_layout Description

\family typewriter
:print-before 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced is about to be entered, and prints the
 result before printing the standard entry message.
 The form may reference the lexical variable 
\family typewriter
ccl::args
\family default
, which is a list of the arguments in this call.
 To see multiple forms, use 
\family typewriter
values
\family default
: 
\family typewriter
:print-before (values (one-thing) (another-thing))
\family default
.
 
\end_layout

\begin_layout Description

\family typewriter
:print-after 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced has just exited, and prints the result
 after printing the standard exit message.
 The form may reference the lexical variable 
\family typewriter
ccl::vals
\family default
, which is a list of values returned by this call.
 To see multiple forms, use 
\family typewriter
values
\family default
: 
\family typewriter
:print-after (values (one-thing) (another-thing))
\family default
.
 
\end_layout

\begin_layout Description

\family typewriter
:print 
\emph on
form
\family default
\emph default
 Equivalent to 
\family typewriter
:print-before 
\size small
\emph on
form
\emph default
 :print-after 
\emph on
form
\family default
\emph default
.
 
\end_layout

\begin_layout Description

\family typewriter
:eval-before 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced is about to be entered.
 The form may reference the lexical variable 
\family typewriter
ccl::args
\family default
, which is a list of the arguments in this call.
 
\end_layout

\begin_layout Description

\family typewriter
:eval-after 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being has just exited.
 The form may reference the lexical variable 
\family typewriter
ccl::vals
\family default
, which is a list of values returned by this call.
 
\end_layout

\begin_layout Description

\family typewriter
:eval 
\emph on
form
\family default
\emph default
 Equivalent to 
\family typewriter
:eval-before 
\size small
\emph on
form
\emph default
 :eval-after 
\emph on
form
\family default
\emph default
.
 
\end_layout

\begin_layout Description

\family typewriter
:break-before 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced is about to be entered, and if the result
 is non-nil, enters a debugger break loop.
 The form may reference the lexical variable 
\family typewriter
ccl::args
\family default
, which is a list of the arguments in this call.
 
\end_layout

\begin_layout Description

\family typewriter
:break-after 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced has just exited, and if the result is
 non-nil, enters a debugger break loop.
 The form may reference the lexical variable 
\family typewriter
ccl::vals
\family default
, which is a list of values returned by this call.
 
\end_layout

\begin_layout Description

\family typewriter
:break 
\emph on
form
\family default
\emph default
 Equivalent to 
\family typewriter
:break-before 
\size small
\emph on
form
\emph default
 :break-after 
\emph on
form
\family default
\emph default
.
 
\end_layout

\begin_layout Description

\family typewriter
:backtrace-before 
\emph on
form
\family default
\emph default
, 
\family typewriter
:backtrace 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced is about to be entered.
 The form may reference the lexical variable 
\family typewriter
ccl::args
\family default
, which is a list of the arguments in this call.
 The value returned by 
\family typewriter
\emph on
form
\family default
\emph default
 is intepreted as follows:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
nil
\family default
 does nothing 
\end_layout

\begin_layout Description

\family typewriter
:detailed
\family default
 prints a detailed backtrace to 
\family typewriter
*trace-output*
\family default
.
 
\end_layout

\begin_layout Description

\family typewriter
(:detailed 
\emph on
integer
\emph default
)
\family default
 prints the top 
\family typewriter
\size small
\emph on
integer
\family default
\emph default
 frames of detailed backtrace to 
\family typewriter
*trace-output*
\family default
.
 
\end_layout

\begin_layout Description

\family typewriter
\emph on
integer
\family default
\emph default
 prints top 
\family typewriter
\size small
\emph on
integer
\family default
\emph default
 frames of a terse backtrace to 
\family typewriter
*trace-output*
\family default
.
 
\end_layout

\begin_layout Description
anything else prints a terse backtrace to 
\family typewriter
*trace-output*
\family default
.
 
\end_layout

\begin_layout Standard
\noindent
Note that unlike with the other options, 
\family typewriter
:backtrace
\family default
 is equivalent to 
\family typewriter
:backtrace-before
\family default
 only, not both before and after, since it's usually not helpful to print
 the same backtrace both before and after the function call.
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:backtrace-after 
\emph on
form
\family default
\emph default
 Evaluates 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 whenever the function being traced has just exited.
 The form may reference the lexical variable 
\family typewriter
ccl::vals
\family default
, which is a list of values returned by this call.
 The value returned by 
\family typewriter
\emph on
form
\family default
\emph default
 is intepreted as follows:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
nil
\family default
 does nothing 
\end_layout

\begin_layout Description

\family typewriter
:detailed
\family default
 prints a detailed backtrace to 
\family typewriter
*trace-output*
\family default
.
 
\end_layout

\begin_layout Description

\family typewriter
(:detailed 
\emph on
integer
\emph default
)
\family default
 prints the top 
\family typewriter
\size small
\emph on
integer
\family default
\emph default
 frames of detailed backtrace to 
\family typewriter
*trace-output*
\family default
.
 
\end_layout

\begin_layout Description

\family typewriter
\emph on
integer
\family default
\emph default
 prints top 
\family typewriter
\size small
\emph on
integer
\family default
\emph default
 frames of a terse backtrace to 
\family typewriter
*trace-output*
\family default
.
 
\end_layout

\begin_layout Description
anything else prints a terse backtrace to 
\family typewriter
*trace-output*
\family default
.
 
\end_layout

\end_deeper
\begin_layout Description
\noindent

\family typewriter
:before
\family default
 
\family typewriter
\emph on
action
\family default
\emph default
 specifies the action to be taken just before the traced function is entered.
 
\family typewriter
\size small
\emph on
action
\family default
\emph default
 is one of:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
:print
\family default
 The default, prints a short indented message showing the function name
 and the invocation arguments 
\end_layout

\begin_layout Description

\family typewriter
:break
\family default
 Equivalent to 
\family typewriter
:before :print :break-before t
\family default
 
\end_layout

\begin_layout Description

\family typewriter
:backtrace
\family default
 Equivalent to 
\family typewriter
:before :print :backtrace-before t
\family default
 
\end_layout

\begin_layout Description

\family typewriter
\emph on
function
\family default
\emph default
 Any other value is interpreted as a function to call on entry instead of
 printing the standard entry message.
 It is called with its first argument being the name of the function being
 traced, the remaining arguments being all the arguments to the function
 being traced, and 
\family typewriter
ccl:*trace-level*
\family default
 bound to the current nesting level of trace actions.
 
\end_layout

\end_deeper
\begin_layout Description
\noindent

\family typewriter
:after
\family default
 
\family typewriter
\emph on
action
\family default
\emph default
 specifies the action to be taken just after the traced function exits.
 
\family typewriter
\size small
\emph on
action
\family default
\emph default
 is one of:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
:print
\family default
 The default, prints a short indented message showing the function name
 and the returned values 
\end_layout

\begin_layout Description

\family typewriter
:break
\family default
 Equivalent to 
\family typewriter
:after :print :break-after t
\family default
 
\end_layout

\begin_layout Description

\family typewriter
:backtrace
\family default
 Equivalent to 
\family typewriter
:after :print :backtrace-after t
\family default
 
\end_layout

\begin_layout Description

\family typewriter
\emph on
function
\family default
\emph default
 Any other value is interpreted as a function to call on exit instead of
 printing the standard exit message.
 It is called with its first argument being the name of the function being
 traced, the remaining arguments being all the values returned by the function
 being traced, and ccl:*trace-level* bound to the current nesting level
 of trace actions.
 
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:*TRACE-LEVEL*
\family default
 [Variable]
\end_layout

\begin_layout Standard
Variable bound to the current nesting level during execution of before and
 after trace actions.
 The default printing actions use it to determine the amount of indentation.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:*TRACE-MAX-INDENT*
\family default
 [Variable]
\end_layout

\begin_layout Standard
The default before and after print actions will not indent by more than
 the value of 
\family typewriter
ccl:*trace-max-indent*
\family default
 regardless of the current trace level.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:TRACE-FUNCTION
\family default
 
\family typewriter
\size small
\emph on
spec
\family default
\emph default
 
\family typewriter
&key
\family default
 {
\family typewriter
\emph on
keyword
\family default
\emph default
 
\family typewriter
\emph on
value
\family default
\emph default
}* [Function]
\end_layout

\begin_layout Standard
This is a functional version of the TRACE macro.
 
\family typewriter
\size small
\emph on
spec
\family default
\emph default
 and 
\family typewriter
\emph on
keyword
\family default
\emph default
s are as for TRACE, except that all arguments are evaluated.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:*TRACE-PRINT-LEVEL*
\family default
 [Variable]
\end_layout

\begin_layout Standard
The default print actions bind 
\family typewriter
CL:*PRINT-LEVEL*
\family default
 to this value while printing.
 Note that this rebinding is only in effect during the default entry and
 exit messages.
 It does not apply to printing of 
\family typewriter
:print-before/:print-after
\family default
 forms or any explicit printing done by user code.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:*TRACE-PRINT-LENGTH*
\family default
 [Variable]
\end_layout

\begin_layout Standard
The default print actions bind 
\family typewriter
CL:*PRINT-LENGTH*
\family default
 to this value while printing.
 Note that this rebinding is only in effect during the default entry and
 exit messages.
 It does not apply to printing of 
\family typewriter
:print-before/:print-after
\family default
 forms or any explicit printing done by user code.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:*TRACE-BAR-FREQUENCY*
\family default
 [Variable]
\end_layout

\begin_layout Standard
By default, this is nil.
 If non-nil it should be a integer, and the default entry and exit messages
 will print a | instead of space every this many levels of indentation.
\end_layout

\begin_layout Section
Advising
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Advising"

\end_inset

The 
\family typewriter
advise
\family default
 macro can be thought of as a more general version of 
\family typewriter
trace
\family default
.
 It allows code that you specify to run before, after, or around a given
 function, for the purpose of changing the behavior of the function.
 Each piece of added code is called a piece of advice.
 Each piece of advice has a unique name, so that you can have multiple pieces
 of advice on the same function, including multiple 
\family typewriter
:before
\family default
, 
\family typewriter
:after
\family default
, and 
\family typewriter
:around
\family default
 pieces of advice.
\end_layout

\begin_layout Standard
The 
\family typewriter
:name
\family default
 and 
\family typewriter
:when
\family default
 keywords serve to identify the piece of advice.
 A later call to 
\family typewriter
advise
\family default
 with the same values of 
\family typewriter
:name
\family default
 and 
\family typewriter
:when
\family default
 will replace the existing piece of advice; a call with different values
 will not.
\end_layout

\begin_layout Subsection
ADVISE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_advise"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
advise
\end_layout

\end_inset

ADVISE --- Add a piece of advice to the function or method specified by
 
\family typewriter
spec
\family default
 according to 
\family typewriter
form
\family default
.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard

\noun on
advise spec form &key when name
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
spec A specification of the function on which to put the advice.
 This is either a symbol that is the name of a function or generic function,
 or an expression of the form (setf 
\family typewriter
\size small
\emph on
symbol
\family default
\emph default
), or a specific method of a generic function in the form (:method symbol
 {qualifiers} (specializer {specializer})).
 
\end_layout

\begin_layout Description
form A form to execute before, after, or around the advised function.
 The form can refer to the variable arglist that is bound to the arguments
 with which the advised function was called.
 You can exit from form with (return).
 
\end_layout

\begin_layout Description
name A name that identifies the piece of advice.
 
\end_layout

\begin_layout Description
when An argument that specifies when the piece of advice is run.
 There are three allowable values.
 The default is 
\family typewriter
:before
\family default
, which specifies that form is executed before the advised function is called.
 Other possible values are 
\family typewriter
:after
\family default
, which specifies that form is executed after the advised function is called,
 and 
\family typewriter
:around
\family default
, which specifies that form is executed around the call to the advised function.
 Use 
\family typewriter
(:do-it)
\family default
 within form to indicate invocation of the original definition.
 
\end_layout

\begin_layout Subsubsection*
Examples
\end_layout

\begin_layout Standard
\noindent
The function 
\family typewriter
foo
\family default
, already defined, does something with a list of numbers.
 The following code uses a piece of advice to make foo return zero if any
 of its arguments is not a number.
 Using :around advice, you can do the following: 
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
\noindent

(advise foo (if (some #'(lambda (n) (not (numberp n))) arglist) 0 (:do-it))
 :when :around :name :zero-if-not-nums)
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
To do the same thing using a :before piece of advice: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(advise foo (if (some #'(lambda (n) (not (numberp n))) arglist) (return
 0)) :when :before :name :zero-if-not-nums)
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection
UNADVISE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_unadvise"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
unadvise
\end_layout

\end_inset

UNADVISE --- Remove the piece or pieces of advice matching 
\family typewriter
spec
\family default
, 
\family typewriter
when
\family default
, and 
\family typewriter
name
\family default
.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard

\noun on
unadvise spec &key when name
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
The unadvise macro removes the piece or pieces of advice matching 
\family typewriter
spec
\family default
, 
\family typewriter
when
\family default
, and 
\family typewriter
name
\family default
.
 When the value of 
\family typewriter
spec
\family default
 is t and the values of 
\family typewriter
when
\family default
 and 
\family typewriter
name
\family default
 are nil, unadvise removes every piece of advice; when 
\family typewriter
spec
\family default
 is t, the argument 
\family typewriter
when
\family default
 is nil, and 
\family typewriter
name
\family default
 is non-nil, unadvise removes all pieces of advice with the given name.
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Standard
The arguments have the same meaning as in 
\begin_inset CommandInset ref
LatexCommand ref
reference "m_advise"

\end_inset

ADVISE.
\end_layout

\begin_layout Subsection
ADVISEDP
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_advisedp"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
advisedp
\end_layout

\end_inset

ADVISEDP --- Return a list of the pieces of advice matching 
\family typewriter
spec
\family default
, 
\family typewriter
when
\family default
, and 
\family typewriter
name
\family default
.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard

\noun on
advisedp spec &key when name
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
The advisedp macro returns a list of existing pieces of advice that match
 
\family typewriter
spec
\family default
, 
\family typewriter
when
\family default
, and 
\family typewriter
name
\family default
.
 When the value of 
\family typewriter
spec
\family default
 is t and the values of 
\family typewriter
when
\family default
 and 
\family typewriter
name
\family default
 are nil, advisedp returns all existing pieces of advice.
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Standard
The arguments have the same meaning as in 
\begin_inset CommandInset ref
LatexCommand ref
reference "m_advise"

\end_inset

ADVISE.
\end_layout

\begin_layout Section
Directory
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Directory"

\end_inset

Clozure CL's 
\family typewriter
DIRECTORY
\family default
 function accepts the following implementation-dependent keyword arguments:
\end_layout

\begin_layout Description

\family typewriter
:files
\family default
 
\family typewriter
\emph on
boolean
\family default
\emph default
 If true, includes regular (non-directory) files in DIRECTORY's output.
 Defaults to T.
 
\end_layout

\begin_layout Description

\family typewriter
:directories
\family default
 
\family typewriter
\emph on
boolean
\family default
\emph default
 If true, includes directories in DIRECTORY's output.
 Defaults to NIL.
 
\end_layout

\begin_layout Description

\family typewriter
:all
\family default
 
\family typewriter
\emph on
boolean
\family default
\emph default
 If true, includes files and directories whose names start with a dot character
 in DIRECTORY's output.
 (Entries whose name is "." or ".." are never included.) Defaults to T.
 
\end_layout

\begin_layout Description

\family typewriter
:follow-links
\family default
 
\family typewriter
\emph on
boolean
\family default
\emph default
 If true, includes the TRUENAMEs of symbolic or hard links in DIRECTORY's
 output; if false, includes the link filenames without attempting to resolve
 them.
 Defaults to T.
\end_layout

\begin_deeper
\begin_layout Standard
Note that legacy HFS alias files are treated as plain files.
 
\end_layout

\end_deeper
\begin_layout Section
Unicode
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "Unicode"

\end_inset

All characters and strings in Clozure CL fully support Unicode by using
 UTF-32.
 There is only one 
\family typewriter
CHARACTER
\family default
 type and one 
\family typewriter
STRING
\family default
 type in Clozure CL.
 There has been a lot of discussion about this decision which can be found
 by searching the openmcl-devel archives at 
\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout

http://clozure.com/pipermail/openmcl-devel/
\end_layout

\end_inset

.
 Suffice it to say that we decided that the simplicity and speed advantages
 of only supporting UTF-32 outweigh the space disadvantage.
\end_layout

\begin_layout Subsection
Characters
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "unicode-characters"

\end_inset

There is one 
\family typewriter
CHARACTER
\family default
 type in Clozure CL.
 All 
\family typewriter
CHARACTER
\family default
s are 
\family typewriter
BASE-CHAR
\family default
s.
 
\family typewriter
CHAR-CODE-LIMIT
\family default
 is now 
\family typewriter
#x110000
\family default
, which means that all Unicode characters can be directly represented.
 As of Unicode 5.0, only about 100,000 of 1,114,112 possible 
\family typewriter
CHAR-CODE
\family default
s are actually defined.
 The function 
\family typewriter
CODE-CHAR
\family default
 knows that certain ranges of code values (notably 
\family typewriter
#xd800
\family default
-
\family typewriter
#xddff
\family default
) will never be valid character codes and will return 
\family typewriter
NIL
\family default
 for arguments in that range, but may return a non-
\family typewriter
NIL
\family default
 value (an undefined/non-standard 
\family typewriter
CHARACTER
\family default
 object) for other unassigned code values.
\end_layout

\begin_layout Standard
Clozure CL supports character names of the form 
\family typewriter
u+xxxx
\family default
—where 
\family typewriter
x
\family default
 is a sequence of one or more hex digits.
 The value of the hex digits denotes the code of the character.
 The 
\family typewriter
+
\family default
 character is optional, so 
\family typewriter
#
\backslash
u+0020
\family default
, 
\family typewriter
#
\backslash
U0020
\family default
, and 
\family typewriter
#
\backslash
U+20
\family default
 all refer to the 
\family typewriter
#
\backslash
Space
\family default
 character.
\end_layout

\begin_layout Standard
Characters with codes in the range 
\family typewriter
#xa0
\family default
-
\family typewriter
#x7ff
\family default
 also have symbolic names These are the names from the Unicode standard
 with spaces replaced by underscores.
 So 
\family typewriter
#
\backslash
Greek_Capital_Letter_Epsilon
\family default
 can be used to refer to the character whose 
\family typewriter
CHAR-CODE
\family default
 is 
\family typewriter
#x395
\family default
.
 To see the complete list of supported character names, look just below
 the definition for 
\family typewriter
register-character-name
\family default
 in 
\family typewriter
ccl:level-1;l1-reader.lisp
\family default
.
\end_layout

\begin_layout Subsection
External Formats
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "External-Formats"

\end_inset


\family typewriter
OPEN
\family default
, 
\family typewriter
LOAD
\family default
, and 
\family typewriter
COMPILE-FILE
\family default
 all take an 
\family typewriter
:EXTERNAL-FORMAT
\family default
 keyword argument.
 The value of 
\family typewriter
:EXTERNAL-FORMAT
\family default
 can be 
\family typewriter
:DEFAULT
\family default
 (the default value), a line termination keyword (see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Line-Termination-Keywords"

\end_inset

), a character encoding keyword (see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Character-Encodings"

\end_inset

), an external-format object created using 
\family typewriter
CCL::MAKE-EXTERNAL-FORMAT
\family default
 (see MAKE-EXTERNAL-FORMAT), or a plist with keys: 
\family typewriter
:DOMAIN
\family default
, 
\family typewriter
:CHARACTER-ENCODING
\family default
 and 
\family typewriter
:LINE-TERMINATION
\family default
.
 If 
\family typewriter
\size small
\emph on
argument
\family default
\emph default
 is a plist, the result of 
\family typewriter
(APPLY #'MAKE-EXTERNAL-FORMAT 
\emph on
argument
\emph default
)
\family default
 will be used.
\end_layout

\begin_layout Standard
If 
\family typewriter
:DEFAULT
\family default
 is specified, then the value of 
\family typewriter
CCL:*DEFAULT-EXTERNAL-FORMAT*
\family default
 is used.
 If no line-termination is specified, then the value of 
\family typewriter
CCL:*DEFAULT-LINE-TERMINATION*
\family default
 is used, which defaults to 
\family typewriter
:UNIX
\family default
.
 If no character encoding is specified, then 
\family typewriter
CCL:*DEFAULT-FILE-CHARACTER-ENCODING*
\family default
 is used for file streams and 
\family typewriter
CCL:*DEFAULT-SOCKET-CHARACTER-ENCODING*
\family default
 is used for socket streams.
 The default, default character encoding is 
\family typewriter
NIL
\family default
 which is a synonym for 
\family typewriter
:ISO-8859-1
\family default
.
\end_layout

\begin_layout Standard
Note that the set of keywords used to denote CHARACTER-ENCODINGs and the
 set of keywords used to denote line-termination conventions is disjoint:
 a keyword denotes at most a character encoding or a line termination convention
, but never both.
\end_layout

\begin_layout Standard
EXTERNAL-FORMATs are objects (structures) with two read-only fields that
 can be accessed via the functions: 
\family typewriter
EXTERNAL-FORMAT-LINE-TERMINATION
\family default
 and 
\family typewriter
EXTERNAL-FORMAT-CHARACTER-ENCODING
\family default
.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
CCL:*DEFAULT-EXTERNAL-FORMAT*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_default-external-format"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*default-external-format*
\end_layout

\end_inset

CCL:*DEFAULT-EXTERNAL-FORMAT* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
The value of this variable is used when :EXTERNAL-FORMAT is unspecified
 or specified as :DEFAULT.
 It can meaningfully be given any value that can be used as an external-format
 (except for the value :DEFAULT.)
\end_layout

\begin_layout Standard
The initial value of this variable in Clozure CL is 
\family typewriter
:UNIX
\family default
, which is equivalent to 
\family typewriter
(:LINE-TERMINATION :UNIX)
\family default
, among other things.
\end_layout

\begin_layout Subsubsection
CCL:*DEFAULT-LINE-TERMINATION*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_default-line-termination"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*default-line-termination*
\end_layout

\end_inset

CCL:*DEFAULT-LINE-TERMINATION* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
The value of this variable is used when an external-format doesn't specify
 a line-termination convention (or specifies it as :DEFAULT.) It can meaningfully
 be given any value that can be used as a line termination keyword (see
 Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Line-Termination-Keywords"

\end_inset

).
\end_layout

\begin_layout Standard
The initial value of this variable in Clozure CL is 
\family typewriter
:UNIX
\family default
.
\end_layout

\begin_layout Subsubsection
MAKE-EXTERNAL-FORMAT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-external-format"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-external-format
\end_layout

\end_inset

MAKE-EXTERNAL-FORMAT --- Either creates a new external format object, or
 return an existing one with the same specified slot values.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
make-external-format &key domain character-encoding line-termination =>
 external-format 
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
domain This is used to indicate where the external format is to be used.
 Its value can be almost anything.
 It defaults to 
\family typewriter
NIL
\family default
.
 There are two domains that have a pre-defined meaning in Clozure CL: 
\family typewriter
:FILE
\family default
 indicates encoding for a file in the file system and 
\family typewriter
:SOCKET
\family default
 indicates i/o to/from a socket.
 The value of 
\family typewriter
\size small
\emph on
domain
\family default
\emph default
 affects the default values for 
\family typewriter
\emph on
character-encoding
\family default
\emph default
 and 
\family typewriter
\emph on
line-termination
\family default
\emph default
.
 
\end_layout

\begin_layout Description
character-encoding A keyword that specifies the character encoding for the
 external format.
 Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Character-Encodings"

\end_inset

.
 Defaults to 
\family typewriter
:DEFAULT
\family default
 which means if 
\family typewriter
\size small
\emph on
domain
\family default
\emph default
 is 
\family typewriter
:FILE
\family default
 use the value of the variable 
\family typewriter
CCL:*DEFAULT-FILE-CHARACTER-ENCODING*
\family default
 and if 
\family typewriter
\emph on
domain
\family default
\emph default
 is 
\family typewriter
:SOCKET
\family default
, use the value of the variable 
\family typewriter
CCL:*DEFAULT-SOCKET-CHARACTER-ENCODING*
\family default
.
 The initial value of both of these variables is 
\family typewriter
NIL
\family default
, which means the 
\family typewriter
:ISO-8859-1
\family default
 encoding.
 
\end_layout

\begin_layout Description
line-termination A keyword that indicates a line termination keyword Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Line-Termination-Keywords"

\end_inset

.
 Defaults to 
\family typewriter
:DEFAULT
\family default
 which means use the value of the variable 
\family typewriter
CCL:*DEFAULT-LINE-TERMINATION*
\family default
.
 
\end_layout

\begin_layout Description
external-format An external-format object as described above.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
Despite the function's name, it doesn't necessarily create a new, unique
 EXTERNAL-FORMAT object: two calls to MAKE-EXTERNAL-FORMAT with the same
 arguments made in the same dynamic environment return the same (eq) object.
\end_layout

\begin_layout Subsection
Line Termination Keywords
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Line-Termination-Keywords"

\end_inset

Line termination keywords indicate which characters are used to indicate
 the end of a line.
 On input, the external line termination characters are replaced by 
\family typewriter
#
\backslash
Newline
\family default
 and on output, 
\family typewriter
#
\backslash
Newline
\family default
s are converted to the external line termination characters.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
character(s
\series default
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:UNIX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\backslash
Linefeed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:MACOS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\backslash
Return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:CR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\backslash
Return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:CRLF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\backslash
Return #
\backslash
Linefeed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:CP/M
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\backslash
Return #
\backslash
Linefeed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:MSDOS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\backslash
Return #
\backslash
Linefeed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:DOS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\backslash
Return #
\backslash
Linefeed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:WINDOWS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\backslash
Return #
\backslash
Linefeed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:INFERRED
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
See below
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
:UNICODE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#
\backslash
Line_Separator
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
:INFERRED
\family default
 means that a stream's line-termination convention is determined by looking
 at the contents of a file.
 It is only useful for 
\family typewriter
FILE-STREAM
\family default
s that're open for 
\family typewriter
:INPUT
\family default
 or 
\family typewriter
:IO
\family default
.
 The first buffer full of data is examined, and if a 
\family typewriter
#
\backslash
Return
\family default
 character occurs before any 
\family typewriter
#
\backslash
Linefeed
\family default
 character, then the line termination type is set to 
\family typewriter
:WINDOWS
\family default
 if that 
\family typewriter
#
\backslash
Return
\family default
 character is immediately followed by a 
\family typewriter
#
\backslash
Linefeed
\family default
 character and to 
\family typewriter
:MACOS
\family default
 otherwise.
 If a 
\family typewriter
#
\backslash
Return
\family default
 character isn't found in the buffer or if 
\family typewriter
#
\backslash
Return
\family default
 is preceded by 
\family typewriter
#
\backslash
Linefeed
\family default
, the file's line terminationt type is set to 
\family typewriter
:UNIX
\family default
.
\end_layout

\begin_layout Subsection
Character Encodings
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Character-Encodings"

\end_inset

Internally, all characters and strings in Clozure CL are in UTF-32.
 Externally, files or socket streams may encode characters in a wide variety
 of ways.
 The International Organization for Standardization, widely known as ISO,
 defines many of these character encodings.
 Clozure CL implements some of these encodings as detailed below.
 These encodings are part of the specification of external formats Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "External-Formats"

\end_inset

.
 When reading from a stream, characters are converted from the specified
 external character encoding to UTF-32.
 When writing to a stream, characters are converted from UTF-32 to the specified
 character encoding.
\end_layout

\begin_layout Standard
Internally, CHARACTER-ENCODINGs are objects (structures) that are named
 by character encoding keywords (:ISO-8859-1, :UTF-8, etc.).
 The structures contain attributes of the encoding and functions used to
 encode/decode external data, but unless you're trying to define or debug
 an encoding there's little reason to know much about the CHARACTER-ENCODING
 objects and it's usually preferable to refer to a character encoding by
 its name.
\end_layout

\begin_layout Subsubsection
Encoding Problems
\end_layout

\begin_layout Standard
On output to streams with character encodings that can encode the full range
 of Unicode—and on input from any stream—"unencodable characters" are represente
d using the Unicode #
\backslash
Replacement_Character (= #
\backslash
U+fffd); the presence of such a character usually indicates that something
 got lost in translation.
 Either data wasn't encoded properly or there was a bug in the decoding
 process.
\end_layout

\begin_layout Subsubsection
Byte Order Marks
\end_layout

\begin_layout Standard
The endianness of a character encoding is sometimes explicit, and sometimes
 not.
 For example, 
\family typewriter
:UTF-16BE
\family default
 indicates big-endian, but 
\family typewriter
:UTF-16
\family default
 does not specify endianness.
 A byte order mark is a special character that may appear at the beginning
 of a stream of encoded characters to specify the endianness of a multi-byte
 character encoding.
 (It may also be used with UTF-8 character encodings, where it is simply
 used to indicate that the encoding is UTF-8.)
\end_layout

\begin_layout Standard
Clozure CL writes a byte order mark as the first character of a file or
 socket stream when the endianness of the character encoding is not explicit.
 Clozure CL also expects a byte order mark on input from streams where the
 endianness is not explicit.
 If a byte order mark is missing from input data, that data is assumed to
 be in big-endian order.
\end_layout

\begin_layout Standard
A byte order mark from a UTF-8 encoded input stream is not treated specially
 and just appears as a normal character from the input stream.
 It is probably a good idea to skip over this character.
\end_layout

\begin_layout Subsubsection

\family typewriter
DESCRIBE-CHARACTER-ENCODINGS
\end_layout

\begin_layout Standard
The set of character encodings supported by Clozure CL can be retrieved
 by calling 
\family typewriter
CCL:DESCRIBE-CHARACTER-ENCODINGS
\family default
.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
DESCRIBE-CHARACTER-ENCODINGS
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_describe-character-encodings"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
DESCRIBE-CHARACTER-ENCODINGS
\end_layout

\end_inset

DESCRIBE-CHARACTER-ENCODINGS --- Writes descriptions of defined character
 encodings to 
\family typewriter
*terminal-io*
\family default
.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 describe-character-encodings 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Writes descriptions of all defined character encodings to 
\family typewriter
*terminal-io*
\family default
.
 These descriptions include the names of the encoding's aliases and a doc
 string which briefly describes each encoding's properties and intended
 use.
\end_layout

\begin_layout Subparagraph*
See Also
\end_layout

\begin_layout Standard
Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Character-Encodings"

\end_inset

, Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "External-Formats"

\end_inset

, Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Supported-Character-Encodings"

\end_inset

 
\end_layout

\begin_layout Subsubsection
Supported Character Encodings
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Supported-Character-Encodings"

\end_inset

The list of supported encodings is reproduced here.
 Most encodings have aliases, e.g.
 the encoding named 
\family typewriter
:ISO-8859-1
\family default
 can also be referred to by the names 
\family typewriter
:LATIN1
\family default
 and 
\family typewriter
:IBM819
\family default
, among others.
 Where possible, the keywordized name of an encoding is equivalent to the
 preferred MIME charset name (and the aliases are all registered IANA charset
 names.)
\end_layout

\begin_layout Description

\family typewriter
:ISO-8859-1
\family default
 An 8-bit, fixed-width character encoding in which all character codes map
 to their Unicode equivalents.
 Intended to support most characters used in most Western European languages.
\end_layout

\begin_deeper
\begin_layout Standard
Clozure CL uses ISO-8859-1 encoding for 
\family typewriter
*TERMINAL-IO*
\family default
 and for all streams whose EXTERNAL-FORMAT isn't explicitly specified.
 The default for 
\family typewriter
*TERMINAL-IO*
\family default
 can be set via the 
\family typewriter
-K
\family default
 command-line argument (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "Command-Line-Options"

\end_inset

).
\end_layout

\begin_layout Standard
ISO-8859-1 just covers the first 256 Unicode code points, where the first
 128 code points are equivalent to US-ASCII.
 That should be pretty much equivalent to what earliers versions of Clozure
 CL did that only supported 8-bit characters, but it may not be optimal
 for users working in a particular locale.
\end_layout

\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-1, :LATIN1, :L1, :IBM819, :CP819, :CSISOLATIN1
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-2
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in most languages used in Central/Eas
tern Europe.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-2, :LATIN2, :L2, :CSISOLATIN2
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-3
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in most languages used in Southern
 Europe.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-3, :LATIN3 :L3, :CSISOLATIN3
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-4
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in most languages used in Northern
 Europe.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-4, :LATIN4, :L4, :CSISOLATIN4
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-5
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in the Cyrillic alphabet.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-5, :CYRILLIC, :CSISOLATINCYRILLIC, :ISO-IR-144
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-6
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in the Arabic alphabet.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-6, :ARABIC, :CSISOLATINARABIC, :ISO-IR-127
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-7
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in the Greek alphabet.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-7, :GREEK, :GREEK8, :CSISOLATINGREEK, :ISO-IR-126, :ELOT_928,
 :ECMA-118
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-8
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in the Hebrew alphabet.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-8, :HEBREW, :CSISOLATINHEBREW, :ISO-IR-138
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-9
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#xcf map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in the Turkish alphabet.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-9, :LATIN5, :CSISOLATIN5, :ISO-IR-148
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-10
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in Nordic alphabets.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-10, :LATIN6, :CSISOLATIN6, :ISO-IR-157
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-11
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found the Thai alphabet.
 
\end_layout

\begin_layout Description

\family typewriter
:ISO-8859-13
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in Baltic alphabets.
 
\end_layout

\begin_layout Description

\family typewriter
:ISO-8859-14
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in Celtic languages.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-14, :ISO-IR-199, :LATIN8, :L8, :ISO-CELTIC
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-15
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in Western European languages
 (including the Euro sign and some other characters missing from ISO-8859-1.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-15, :LATIN9
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:ISO-8859-16
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x9f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Intended to provide most characters found in Southeast European languages.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:ISO_8859-16, :ISO-IR-199, :LATIN8, :L8, :ISO-CELTIC
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:MACINTOSH
\family default
 An 8-bit, fixed-width character encoding in which codes #x00-#x7f map to
 their Unicode equivalents and other codes map to other Unicode character
 values.
 Traditionally used on Classic MacOS to encode characters used in western
 languages.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:MACOS-ROMAN, :MACOSROMAN, :MAC-ROMAN, :MACROMAN
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:UCS-2
\family default
 A 16-bit, fixed-length encoding in which characters with CHAR-CODEs less
 than #x10000 can be encoded in a single 16-bit word.
 The endianness of the encoded data is indicated by the endianness of a
 byte-order-mark character (#u+feff) prepended to the data; in the absence
 of such a character on input, the data is assumed to be in big-endian order.
 
\end_layout

\begin_layout Description

\family typewriter
:UCS-2BE
\family default
 A 16-bit, fixed-length encoding in which characters with CHAR-CODEs less
 than #x10000 can be encoded in a single 16-bit big-endian word.
 The encoded data is implicitly big-endian; byte-order-mark characters are
 not interpreted on input or prepended to output.
 
\end_layout

\begin_layout Description

\family typewriter
:UCS-2LE
\family default
 A 16-bit, fixed-length encoding in which characters with CHAR-CODEs less
 than #x10000 can be encoded in a single 16-bit little-endian word.
 The encoded data is implicitly little-endian; byte-order-mark characters
 are not interpreted on input or prepended to output.
 
\end_layout

\begin_layout Description

\family typewriter
:US-ASCII
\family default
 An 7-bit, fixed-width character encoding in which all character codes map
 to their Unicode equivalents.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:CSASCII, :CP637, :IBM637, :US, :ISO646-US, :ASCII, :ISO-IR-6
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:UTF-16
\family default
 A 16-bit, variable-length encoding in which characters with CHAR-CODEs
 less than #x10000 can be encoded in a single 16-bit word and characters
 with larger codes can be encoded in a pair of 16-bit words.
 The endianness of the encoded data is indicated by the endianness of a
 byte-order-mark character (#u+feff) prepended to the data; in the absence
 of such a character on input, the data is assumed to be in big-endian order.
 Output is written in native byte-order with a leading byte-order mark.
 
\end_layout

\begin_layout Description

\family typewriter
:UTF-16BE
\family default
 A 16-bit, variable-length encoding in which characters with CHAR-CODEs
 less than #x10000 can be encoded in a single 16-bit big-endian word and
 characters with larger codes can be encoded in a pair of 16-bit big-endian
 words.
 The endianness of the encoded data is implicit in the encoding; byte-order-mark
 characters are not interpreted on input or prepended to output.
 
\end_layout

\begin_layout Description

\family typewriter
:UTF-16LE
\family default
 A 16-bit, variable-length encoding in which characters with CHAR-CODEs
 less than #x10000 can be encoded in a single 16-bit little-endian word
 and characters with larger codes can be encoded in a pair of 16-bit little-endi
an words.
 The endianness of the encoded data is implicit in the encoding; byte-order-mark
 characters are not interpreted on input or prepended to output.
 
\end_layout

\begin_layout Description

\family typewriter
:UTF-32
\family default
 A 32-bit, fixed-length encoding in which all Unicode characters can be
 encoded in a single 32-bit word.
 The endianness of the encoded data is indicated by the endianness of a
 byte-order-mark character (#u+feff) prepended to the data; in the absence
 of such a character on input, input data is assumed to be in big-endian
 order.
 Output is written in native byte order with a leading byte-order mark.
\end_layout

\begin_deeper
\begin_layout Standard
Alias: 
\family typewriter
:UTF-4
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:UTF-32BE
\family default
 A 32-bit, fixed-length encoding in which all Unicode characters encoded
 in a single 32-bit word.
 The encoded data is implicitly big-endian; byte-order-mark characters are
 not interpreted on input or prepended to output.
\end_layout

\begin_deeper
\begin_layout Standard
Alias: 
\family typewriter
:UCS-4BE
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:UTF-8
\family default
 An 8-bit, variable-length character encoding in which characters with CHAR-CODE
s in the range #x00-#x7f can be encoded in a single octet; characters with
 larger code values can be encoded in 2 to 4 bytes.
 
\end_layout

\begin_layout Description

\family typewriter
:UTF-32LE
\family default
 A 32-bit, fixed-length encoding in which all Unicode characters can encoded
 in a single 32-bit word.
 The encoded data is implicitly little-endian; byte-order-mark characters
 are not interpreted on input or prepended to output.
\end_layout

\begin_deeper
\begin_layout Standard
Alias: 
\family typewriter
:UCS-4LE
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:Windows-31j
\family default
 An 8-bit, variable-length character encoding in which character code points
 in the range #x00-#x7f can be encoded in a single octet; characters with
 larger code values can be encoded in 2 bytes.
\end_layout

\begin_deeper
\begin_layout Standard
Aliases: 
\family typewriter
:CP932, :CSWINDOWS31J
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:EUC-JP
\family default
 An 8-bit, variable-length character encoding in which character code points
 in the range #x00-#x7f can be encoded in a single octet; characters with
 larger code values can be encoded in 2 bytes.
\end_layout

\begin_deeper
\begin_layout Standard
Alias: 
\family typewriter
:EUCJP
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:GB2312
\family default
 An 8-bit, variable-length character encoding in which character code points
 in the range #x00-#x80 can be encoded in a single octet; characters with
 larger code values can be encoded in 2 bytes.
\end_layout

\begin_deeper
\begin_layout Standard
Alias: 
\family typewriter
:GB2312-80 :GB2312-1980 :EUC-CN :EUCCN
\family default
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
:CP936
\family default
 An 8-bit, variable-length character encoding in which character code points
 in the range #x00-#x80 can be encoded in a single octet; characters with
 larger code values can be encoded in 2 bytes.
\end_layout

\begin_deeper
\begin_layout Standard
Alias: 
\family typewriter
:GBK :MS936 :WINDOWS-936
\family default
 
\end_layout

\end_deeper
\begin_layout Subsubsection
Encoding and Decoding Strings
\end_layout

\begin_layout Standard
\noindent
Clozure CL provides functions to encode and decode strings to and from vectors
 of type (simple-array (unsigned-byte 8)).
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
count-characters-in-octet-vector
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "count-characters-in-octet-vector"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
count-characters-in-octet-vector
\end_layout

\end_inset

count-characters-in-octet-vector ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
count-characters-in-octet-vector vector &key start end external-format 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Returns the number of characters that would be produced by decoding 
\family typewriter
vector
\family default
 (or the subsequence thereof delimited by 
\family typewriter
start
\family default
 and 
\family typewriter
end
\family default
) according to 
\family typewriter
external-format
\family default
.
\end_layout

\begin_layout Paragraph
decode-string-from-octets
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "decode-string-from-octets"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
"decode-string-from-octets
\end_layout

\end_inset

decode-string-from-octets ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 decode-string-from-octets vector &key start end external-format string
 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Decodes the octets in 
\family typewriter
vector
\family default
 (or the subsequence of it delimited by 
\family typewriter
start
\family default
 and 
\family typewriter
end
\family default
) into a string according to 
\family typewriter
external-format
\family default
.
\end_layout

\begin_layout Standard
If 
\family typewriter
string
\family default
 is supplied, output will be written into it.
 It must be large enough to hold the decoded characters.
 If 
\family typewriter
 string
\family default
 is not supplied, a new string will be allocated to hold the decoded characters.
\end_layout

\begin_layout Standard
Returns, as multiple values, the decoded string and the position in 
\family typewriter
vector
\family default
 where the decoding ended.
\end_layout

\begin_layout Standard
Sequences of octets in 
\family typewriter
vector
\family default
 that cannot be decoded into characters according to 
\family typewriter
external-format
\family default
 will be decoded as #
\backslash
Replacement_Character.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
encode-string-to-octets
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "encode-string-to-octets"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
encode-string-to-octets
\end_layout

\end_inset

encode-string-to-octets ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
encode-string-to-octets string &key start end external-format use-byte-order-mar
k vector vector-offset 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Encodes 
\family typewriter
string
\family default
 (or the substring delimited by 
\family typewriter
start
\family default
 and 
\family typewriter
end
\family default
) into 
\family typewriter
external-format
\family default
 and returns, as multiple values, a vector of octets containing the encoded
 data and an integer that specifies the offset into the vector where the
 encoded data ends.
\end_layout

\begin_layout Standard
When 
\family typewriter
use-byte-order-mark
\family default
 is true, a byte-order mark will be included in the encoded data.
\end_layout

\begin_layout Standard
If 
\family typewriter
vector
\family default
 is supplied, output will be written to it.
 It must be of type (simple-array (unsigned-byte 8)) and be large enough
 to hold the encoded data.
 If it is not supplied, the function will allocate a new vector.
\end_layout

\begin_layout Standard
If 
\family typewriter
vector-offset
\family default
 is supplied, data will be written into the output vector starting at that
 offset.
\end_layout

\begin_layout Standard
Characters in 
\family typewriter
string
\family default
 that cannot be encoded into 
\family typewriter
external-format
\family default
 will be replaced with an encoding-dependent replacement character (#
\backslash
Replacement_Character or #
\backslash
Sub) before being encoded and written into the output vector.
\end_layout

\begin_layout Paragraph
string-size-in-octets
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "string-size-in-octets"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
string-size-in-octets
\end_layout

\end_inset

string-size-in-octets ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 string-size-in-octets string &key start end external-format use-byte-order-mark
 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Returns the number of octets required to encode 
\family typewriter
string
\family default
 (or the substring delimited by 
\family typewriter
start
\family default
 and 
\family typewriter
end
\family default
) into 
\family typewriter
external-format
\family default
.
\end_layout

\begin_layout Standard
When 
\family typewriter
use-byte-order-mark
\family default
 is true, the returned size will include space for a byte-order marker.
\end_layout

\begin_layout Section
Pathnames
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Pathnames"

\end_inset


\end_layout

\begin_layout Subsection
Pathname Expansion
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "pathname-tilde-expansion"

\end_inset

Leading tilde (~) characters in physical pathname namestrings are expanded
 in the way that most shells do:
\end_layout

\begin_layout Standard

\family typewriter
"~user/..."
\family default
 can be used to refer to an absolute pathname rooted at the home directory
 of the user named "user".
\end_layout

\begin_layout Standard

\family typewriter
"~/..."
\family default
 can be used to refer to an absolute pathname rooted at the home directory
 of the current user.
\end_layout

\begin_layout Subsection
Predefined Logical Hosts
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Predefined-Logical-Hosts"

\end_inset

Clozure CL sets up logical pathname translations for logical hosts: 
\family typewriter
ccl
\family default
 and 
\family typewriter
home
\family default
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
CCL Logical Host
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
CCL
\family default
 logical host should point to the 
\family typewriter
ccl
\family default
 directory.
 It is used for a variety of purposes by Clozure CL including: locating
 Clozure CL source code, 
\family typewriter
require
\family default
 and 
\family typewriter
provide
\family default
, accessing foreign function information, and the Clozure CL build process.
 It is set to the value of the environment variable 
\family typewriter
CCL_DEFAULT_DIRECTORY
\family default
, which is set by the openmcl shell script 
\begin_inset CommandInset ref
LatexCommand ref
reference "The-ccl-Shell-Script"

\end_inset

.
 If 
\family typewriter
CCL_DEFAULT_DIRECTORY
\family default
 is not set, then it is set to the directory containing the current heap
 image.
\end_layout

\begin_layout Subsection
Pathname Namestrings
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "pathname-namestrings"

\end_inset

The syntax of namestrings is implementation-defined in Common Lisp.
 Portable programs cannot assume much of anything about them.
 (See section 19.1.1 of the Common Lisp standard for more information.)
\end_layout

\begin_layout Standard
When translating a namestring into a pathname object, most implementations
 seem to follow the convention that a dot character in the namestring separates
 the 
\family typewriter
pathname-name
\family default
 and the 
\family typewriter
pathname-type
\family default
.
 When there is more than one dot in involved, or when dots appear at the
 beginning or end of the namestrings, what to do is less clear: does ".emacs"
 describe a pathname whose name is 
\family typewriter
nil
\family default
 and whose type is 
\family typewriter
emacs
\family default
 or something else? Similarly, given "a.b.c", the question is which parts
 are parsed as the pathname name, and which are parsed as the pathname type?
\end_layout

\begin_layout Standard
When generating a namestring from a pathname object (as happens, for example,
 when printing a pathname), Clozure CL tries to avoid some potential ambiguity
 by escaping characters that might otherwise be used to separate pathname
 components.
 The character used to quote or escape the separators is a backlash on Unix
 systems, and a #
\backslash
> character on Windows.
 So, for example, "a
\backslash

\backslash
.b.c" has name "a.b" and type "c", whereas "a.b
\backslash

\backslash
.c" has name "a" and type "b.c".
\end_layout

\begin_layout Standard
To get a native namestring suitable for passing to an operating system command,
 use the function 
\family typewriter
ccl:native-translated-namestring
\family default
.
\end_layout

\begin_layout Subsubsection
Working with native namestrings
\end_layout

\begin_layout Paragraph
native-translated-namestring
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_native-translated-namestring"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
native-translated-namestring
\end_layout

\end_inset

native-translated-namestring --- Return a namestring that uses the conventions
 of the native operating system.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
native-translated-namestring pathname-designator
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a namestring that represents a pathname using the
 native conventions of the operating system.
 Any quoting or escaping of special characters will be removed.
\end_layout

\begin_layout Standard
For example, suppose that 
\family typewriter
p
\family default
 is a pathname made by 
\family typewriter
(make-pathname :name "a.b" :type "c")
\family default
.
 Then, 
\family typewriter
(native-translated-namestring p)
\family default
 evaluates to "a.b.c".
 By contrast, 
\family typewriter
(namestring p)
\family default
 evaluates to "a
\backslash

\backslash
.b.c".
\end_layout

\begin_layout Paragraph
with-filename-cstrs
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-filename-cstrs"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-filename-cstrs
\end_layout

\end_inset

with-filename-cstrs --- Suitably encode strings to be used as filenames
 for foreign code.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
with-filename-cstrs ( (var value)* ) form*
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Executes 
\family typewriter
forms
\family default
 in an environemt in which each 
\family typewriter
var
\family default
 is bound to a stack-allocated foreign pointer which refers to a C-style
 string suitable for passing to foreign code which expects a filename argument.
\end_layout

\begin_layout Standard
For example, one might use this macro in the following way: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(with-filename-cstrs ((s (native-translated-namestring pathname))) 
\end_layout

\begin_layout Plain Layout

  (#_unlink s))
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Various operating systems have different conventions for how they expect
 native pathname strings to be encoded.
 Darwin expects then to be decomposed UTF-8.
 The Unicode variants to Windows file-handling functions expect UTF-16.
 Other systems just treat them as opaque byte sequences.
 This macro ensures that the correct encoding is used, whatever the host
 operating system.
\end_layout

\begin_layout Subsection
OS X (Darwin)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "pathnames-on-darwin"

\end_inset

Clozure CL assumes that pathname strings are decomposed UTF-8.
\end_layout

\begin_layout Subsection
Linux
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "pathnames-on-linux"

\end_inset

Pathname strings are treated as null-terminated strings coded in the encoding
 named by the value returned by the function 
\family typewriter
CCL:PATHNAME-ENCODING-NAME
\family default
.
 This value may be changed with 
\family typewriter
SETF
\family default
.
\end_layout

\begin_layout Subsection
FreeBSD
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "pathnames-on-freebsd"

\end_inset

Pathname strings are treated as null-terminated strings encoded according
 to the current locale; a future release may change this convention to use
 UTF-8.
\end_layout

\begin_layout Section
Memory-mapped Files
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Memory-Mapped-Files"

\end_inset

In release 1.2 and later, Clozure CL supports 
\emph on
memory-mapped files
\emph default
.
 On operating systems that support memory-mapped files (including Mac OS
 X, Linux, and FreeBSD), the operating system can arrange for a range of
 virtual memory addresses to refer to the contents of an open file.
 As long as the file remains open, programs can read values from the file
 by reading addresses in the mapped range.
\end_layout

\begin_layout Standard
Using memory-mapped files may in some cases be more efficient than reading
 the contents of a file into a data structure in memory.
\end_layout

\begin_layout Standard
Clozure CL provides the functions 
\family typewriter
CCL:MAP-FILE-TO-IVECTOR
\family default
 and 
\family typewriter
CCL:MAP-FILE-TO-OCTET-VECTOR
\family default
 to support memory-mapping.
 These functions return vectors whose contents are the contents of memory-mapped
 files.
 Reading an element of such a vector returns data from the corresponding
 position in the file.
\end_layout

\begin_layout Standard
Without memory-mapped files, a common idiom for reading the contents of
 files might be something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(let* ((stream (open pathname :direction :input :element-type '(unsigned-byte
 8)))
\end_layout

\begin_layout Plain Layout

       (vector (make-array (file-size-to-vector-size stream) :element-type
 '(unsigned-byte 8))))
\end_layout

\begin_layout Plain Layout

  (read-sequence vector stream)) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using a memory-mapped files has a result that is the same in that, like
 the above example, it returns a vector whose contents are the same as the
 contents of the file.
 It differs in that the above example creates a new vector in memory and
 copies the file's contents into it; using a memory-mapped file instead
 arranges for the vector's elements to point to the file's contents on disk
 directly, without copying them into memory first.
\end_layout

\begin_layout Standard
The vectors returned by 
\family typewriter
CCL:MAP-FILE-TO-IVECTOR
\family default
 and 
\family typewriter
CCL:MAP-FILE-TO-OCTET-VECTOR
\family default
 are read-only; any attempt to change an element of a vector returned by
 these functions results in a memory-access error.
 Clozure CL does not currently support writing data to memory-mapped files.
\end_layout

\begin_layout Standard
Vectors created by 
\family typewriter
CCL:MAP-FILE-TO-IVECTOR
\family default
 and 
\family typewriter
CCL:MAP-FILE-TO-OCTET-VECTOR
\family default
 are required to respect Clozure CL's limit on the total size of an array.
 That means that you cannot use these functions to create a vector longer
 than 
\family typewriter
ARRAY-TOTAL-SIZE-LIMIT
\family default
, even if the filesystem supports file sizes that are larger.
 The value of 
\family typewriter
ARRAY-TOTAL-SIZE-LIMIT
\family default
 is 
\family typewriter
(EXPT 2 24)
\family default
 on 32-bit platforms; and 
\family typewriter
(EXPT 2 56)
\family default
 on 64-bit platforms.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:MAP-FILE-TO-IVECTOR
\family default
 
\family typewriter
\size small
\emph on
pathname
\family default
\emph default
 
\family typewriter
\emph on
element-type
\family default
\emph default
 [Function]
\end_layout

\begin_layout Description

\family typewriter
pathname
\family default
 The pathname of the file to be memory-mapped.
 
\end_layout

\begin_layout Description

\family typewriter
element-type
\family default
 The element-type of the vector to be created.
 Specified as a 
\emph on
type-specifier
\emph default
 that names a subtype of either 
\family typewriter
SIGNED-BYTE
\family default
 or 
\family typewriter
UNSIGNED-BYTE
\family default
.
 
\end_layout

\begin_layout Standard
\noindent
The 
\family typewriter
map-file-to-ivector
\family default
 function tries to open the file at 
\family typewriter
\size small
\emph on
pathname
\family default
\emph default
 for reading.
 If successful, the function maps the file's contents to a range of virtual
 addresses.
 If successful, it returns a read-only vector whose element-type is given
 by 
\family typewriter
\emph on
element-type
\family default
\emph default
, and whose contents are the contents of the memory-mapped file.
\end_layout

\begin_layout Standard
The returned vector is a 
\emph on
displaced-array
\emph default
 whose element-type is 
\family typewriter
(UPGRADED-ARRAY-ELEMENT-TYPE element-type)
\family default
.
 The target of the displaced array is a vector of type 
\family typewriter
(SIMPLE-ARRAY element-type (*))
\family default
 whose elements are the contents of the memory-mapped file.
\end_layout

\begin_layout Standard
Because of alignment issues, the mapped file's contents start a few bytes
 (4 bytes on 32-bit platforms, 8 bytes on 64-bit platforms) into the vector.
 The displaced array returned by 
\family typewriter
CCL:MAP-FILE-TO-IVECTOR
\family default
 hides this overhead, but it's usually more efficient to operate on the
 underlying simple 1-dimensional array.
 Given a displaced array (like the value returned by 
\family typewriter
CCL:MAP-FILE-TO-IVECTOR
\family default
), the function 
\family typewriter
ARRAY-DISPLACEMENT
\family default
 returns the underlying array and the displacement index in elements.
\end_layout

\begin_layout Standard
Currently, Clozure CL supports only read operations on memory-mapped files.
 If you try to change the contents of an array returned by 
\family typewriter
map-file-to-ivector
\family default
, Clozure CL signals a memory error.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:UNMAP-IVECTOR
\family default
 
\family typewriter
\size small
\emph on
displaced-array
\family default
\emph default
 [Function]
\end_layout

\begin_layout Standard
If the argument is a displaced-array returned by 
\family typewriter
map-file-to-ivector
\family default
, and if it has not yet been unmapped by this function, then 
\family typewriter
unmap-ivector
\family default
 undoes the memory mapping, closes the mapped file, and changes the displaced-ar
ray so that its target is an empty vector (of length zero).
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:MAP-FILE-TO-OCTET-VECTOR
\family default
 
\family typewriter
\size small
\emph on
pathname
\family default
\emph default
 [Function]
\end_layout

\begin_layout Standard
This function is a synonym for 
\family typewriter
(CCL:MAP-FILE-TO-IVECTOR pathname '(UNSIGNED-BYTE 8))
\family default
 It is provided as a convenience for the common case of memory-mapping a
 file as a vector of bytes.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CCL:UNMAP-OCTET-VECTOR
\family default
 
\family typewriter
\size small
\emph on
displaced-array
\family default
\emph default
 [Function]
\end_layout

\begin_layout Standard
This function is a synonym for 
\family typewriter
(CCL:UNMAP-IVECTOR)
\end_layout

\begin_layout Section
Static Variables
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Static_Variables"

\end_inset

Clozure CL supports the definition of 
\emph on
static variables
\emph default
, whose values are the same across threads, and which may not be dynamically
 bound.
 The value of a static variable is thus the same across all threads; changing
 the value in one thread changes it for all threads.
\end_layout

\begin_layout Standard
Attempting to dynamically rebind a static variable (for instance, by using
 
\family typewriter
LET
\family default
, or using the variable name as a parameter in a 
\family typewriter
LAMBDA
\family default
 form) signals an error.
 Static variables are shared global resources; a dynamic binding is private
 to a single thread.
\end_layout

\begin_layout Standard
Static variables therefore provide a simple way to share mutable state across
 threads.
 They also provide a simple way to introduce race conditions and obscure
 bugs into your code, since every thread reads and writes the same instance
 of a given static variable.
 You must take care, therefore, in how you change the values of static variables
, and use normal multithreaded programming techniques, such as locks or
 semaphores, to protect against race conditions.
\end_layout

\begin_layout Standard
In Clozure CL, access to a static variable is usually faster than access
 to a special variable that has not been declared static.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
DEFSTATIC
\family default
 
\family typewriter
\size small
\emph on
var
\family default
\emph default
 
\family typewriter
\emph on
value
\family default
\emph default
 
\family typewriter
&key
\family default
 
\family typewriter
\emph on
doc-string
\family default
\emph default
 [Macro]
\end_layout

\begin_layout Description

\family typewriter
var
\family default
 The name of the new static variable.
 
\end_layout

\begin_layout Description

\family typewriter
value
\family default
 The initial value of the new static variable.
 
\end_layout

\begin_layout Description

\family typewriter
doc-string
\family default
 A documentation string that is assigned to the new variable.
 
\end_layout

\begin_layout Standard
\noindent
Proclaims the variable 
\emph on
special
\emph default
, assigns the variable the supplied value, and assigns the 
\family typewriter
doc-string
\family default
 to the variable's 
\family typewriter
VARIABLE
\family default
 documentation.
 Marks the variable static, preventing any attempt to dynamically rebind
 it.
 Any attempt to dynamically rebind 
\family typewriter
var
\family default
 signals an error.
\end_layout

\begin_layout Section
Saving Applications
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Saving-Applications"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
save-application
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Clozure CL provides the function 
\family typewriter
CCL:SAVE-APPLICATION
\family default
, which creates a file containing an archived Lisp memory image.
\end_layout

\begin_layout Standard
Clozure CL consists of a small executable called the Lisp 
\emph on
kernel
\emph default
, which implements the very lowest level features of the Lisp system, and
 an 
\emph on
image
\emph default
, which contains the in-memory representation of most of the Lisp system,
 including functions, data structures, variables, and so on.
 When you start Clozure CL, you are launching the kernel, which then locates
 and reads an image file, restoring the archived image in memory.
 Once the image is fully restored, the Lisp system is running.
\end_layout

\begin_layout Standard
Using 
\family typewriter
CCL:SAVE-APPLICATION
\family default
, you can create a file that contains a modified image, one that includes
 any changes you've made to the running Lisp system.
 If you later pass your image file to the Clozure CL kernel as a command-line
 parameter, it then loads your image file instead of its default one, and
 Clozure CL starts up with your modifications.
\end_layout

\begin_layout Standard
If this scenario seems to you like a convenient way to create an application,
 that's just as intended.
 You can create an application by modifying the running Lisp until it does
 what you want, then use 
\family typewriter
CCL:SAVE-APPLICATION
\family default
 to preserve your changes and later load them for use.
\end_layout

\begin_layout Standard
In fact, you can go further than that.
 You can replace Clozure CL's 
\emph on
toplevel function
\emph default
 with your own, and then, when the image is loaded, the Lisp system immediately
 performs your tasks rather than the default tasks that make it a Lisp developme
nt system.
 If you save an image in which you have done this, the resulting Lisp system
 is your tool rather than a Lisp development system.
\end_layout

\begin_layout Standard
You can go a step further still.
 You can tell 
\family typewriter
CCL:SAVE-APPLICATION
\family default
 to prepend the Lisp kernel to the image file.
 Doing this makes the resulting image into a self-contained executable binary.
 When you run the resulting file, the Lisp kernel immediately loads the
 attached image file and runs your saved system.
 The Lisp system that starts up can have any behavior you choose.
 It can be a Lisp development system, but with your customizations; or it
 can immediately perform some task of your design, making it a specialized
 tool rather than a general development system.
\end_layout

\begin_layout Standard
In other words, you can develop any application you like by interactively
 modifying Clozure CL until it does what you want, then using 
\family typewriter
CCL:SAVE-APPLICATION
\family default
 to preserve your changes in an executable image.
\end_layout

\begin_layout Standard
On Mac OS X, the application builder uses 
\family typewriter
CCL:SAVE-APPLICATION
\family default
 to create the executable portion of the 
\emph on
application bundle
\emph default
.
 Double-clicking the application bundle runs the executable image created
 by 
\family typewriter
CCL:SAVE-APPLICATION
\family default
.
\end_layout

\begin_layout Standard
Also on Mac OS X, Clozure CL supports an object type called 
\family typewriter
MACPTR
\family default
, which is the type of pointers into the foreign (Mac OS) heap.
 Examples of commonly-user 
\family typewriter
MACPTR
\family default
 objects are Cocoa windows and other dynamically-allocated Mac OS system
 objects.
\end_layout

\begin_layout Standard
Because a 
\family typewriter
MACPTR
\family default
 object is a pointer into a foreign heap that exists for the lifetime of
 the running Lisp process, and because a saved image is used by loading
 it into a brand new Lisp process, saved 
\family typewriter
MACPTR
\family default
 objects cannot be relied on to point to the same things when reconstituted
 from a saved image.
 In fact, a restored 
\family typewriter
MACPTR
\family default
 object might point to anything at all—for example an arbitrary location
 in the middle of a block of code, or a completely nonexistent virtual address.
\end_layout

\begin_layout Standard
For that reason, 
\family typewriter
CCL:SAVE-APPLICATION
\family default
 converts all 
\family typewriter
MACPTR
\family default
 objects to 
\family typewriter
DEAD-MACPTR
\family default
 objects when writing them to an image file.
 A 
\family typewriter
DEAD-MACPTR
\family default
 is functionally identical to a 
\family typewriter
MACPTR
\family default
, except that code that operates on 
\family typewriter
MACPTR
\family default
 objects distinguishes them from 
\family typewriter
DEAD-MACPTR
\family default
 objects and can handle them appropriately—signaling errors, for example.
\end_layout

\begin_layout Standard
As of Clozure CL 1.2, there is one exception to the conversion of 
\family typewriter
MACPTR
\family default
 to 
\family typewriter
DEAD-MACPTR
\family default
 objects: a 
\family typewriter
MACPTR
\family default
 object that points to the address 0 is not converted, because address 0
 can always be relied upon to refer to the same thing.
 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
+NULL-PTR+
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As of Clozure CL 1.2, the constant 
\family typewriter
CCL:+NULL-PTR+
\family default
 refers to a 
\family typewriter
MACPTR
\family default
 object that points to address 0.
\end_layout

\begin_layout Standard
On all supported platforms, you can use 
\family typewriter
CCL:SAVE-APPLICATION
\family default
 to create a command-line tool that runs the same way any command-line program
 does.
 Alternatively, if you choose not to prepend the kernel, you can save an
 image and then later run it by passing it as a command-line parameter to
 the 
\family typewriter
ccl
\family default
 or 
\family typewriter
ccl64
\family default
 script.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
SAVE-APPLICATION
\family default
 
\family typewriter
\size small
\emph on
filename
\family default
\emph default
 
\family typewriter
&key
\family default
 
\family typewriter
\emph on
toplevel-function
\family default
\emph default
 
\family typewriter
\emph on
init-file
\family default
\emph default
 
\family typewriter
\emph on
error-handler
\family default
\emph default
 
\family typewriter
\emph on
application-class
\family default
\emph default
 
\family typewriter
\emph on
clear-clos-caches
\family default
\emph default
 
\family typewriter
\emph on
(purify t)
\family default
\emph default
 
\family typewriter
\emph on
impurify
\family default
\emph default
 
\family typewriter
\emph on
(mode #o644)
\family default
\emph default
 
\family typewriter
\emph on
prepend-kernel
\family default
\emph default
 
\family typewriter
\emph on
native
\family default
\emph default
 [Function]
\end_layout

\begin_layout Description

\family typewriter
filename
\family default
 The pathname of the file to be created when Clozure CL saves the application.
 
\end_layout

\begin_layout Description

\family typewriter
toplevel-function
\family default
 The function to be executed after startup is complete.
 The toplevel is a function of no arguments that performs whatever actions
 the lisp system should perform when launched with this image.
\end_layout

\begin_deeper
\begin_layout Standard
If this parameter is not supplied, Clozure CL uses its default toplevel.
 The default toplevel runs the 
\emph on
read-eval-print loop
\emph default
.
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
init-file
\family default
 The pathname of a Lisp file to be loaded when the image starts up.
 You can place initialization expressions in this file, and use it to customize
 the behavior of the Lisp system when it starts up.
 
\end_layout

\begin_layout Description

\family typewriter
error-handler
\family default
 The error-handling mode for the saved image.
 The supplied value determines what happens when an error is not handled
 by the saved image.
 Valid values are 
\family typewriter
:quit
\family default
 (Lisp exits with an error message); 
\family typewriter
:quit-quietly
\family default
 (Lisp exits without an error message); or 
\family typewriter
:listener
\family default
 (Lisp enters a break loop, enabling you to debug the problem by interacting
 in a listener).
 If you don't supply this parameter, the saved image uses the default error
 handler (
\family typewriter
:listener
\family default
).
 
\end_layout

\begin_layout Description

\family typewriter
application-class
\family default
 The CLOS class that represents the saved Lisp application.
 Normally you don't need to supply this parameter; 
\family typewriter
CCL:SAVE-APPLICATION
\family default
 uses the class 
\family typewriter
CCL:LISP-DEVELOPMENT-SYSTEM
\family default
.
 In some cases you may choose to create a custom application class; in that
 case, pass the name of the class as the value for this parameter.
 
\end_layout

\begin_layout Description

\family typewriter
clear-clos-caches
\family default
 If true, ensures that CLOS caches are emptied before saving the image.
 Normally you don't need to supply this parameter, but if for some reason
 you want to ensure the CLOS caches are clear when the image starts up,
 you can pass any true value.
 
\end_layout

\begin_layout Description

\family typewriter
purify
\family default
 When true, calls (in effect) 
\family typewriter
purify
\family default
 before saving the heap image.
 This moves certain objects that are unlikely to become garbage to a special
 memory area that is not scanned by the GC (since it is expected that the
 GC wouldn't find anything to collect).
 
\end_layout

\begin_layout Description

\family typewriter
impurify
\family default
 If true, calls (in effect) 
\family typewriter
impurify
\family default
 before saving the heap image.
 (If both 
\family typewriter
:impurify
\family default
 and 
\family typewriter
:purify
\family default
 are true, first 
\family typewriter
impurify
\family default
 is done, and then 
\family typewriter
purify
\family default
.)
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
impurify
\family default
 moves objects in certain special memory areas into the regular dynamic
 heap, where they will be scanned by the GC.
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
mode
\family default
 A number specifying the mode (permission bits) of the output file.
 
\end_layout

\begin_layout Description

\family typewriter
prepend-kernel
\family default
 Specifies the file to prepend to the saved heap image.
 A value of 
\family typewriter
t
\family default
 means to prepend the lisp kernel binary that the lisp started with.
 Otherwise, the value of 
\family typewriter
:prepend-kernel
\family default
 should be a pathname designator for the file to be prepended.
\end_layout

\begin_deeper
\begin_layout Standard
If the prepended file is execuatable, its execute mode bits will be copied
 to the output file.
\end_layout

\begin_layout Standard
This argument can be used to prepend any kind of file to the saved heap
 image.
 This can be useful in some special cases.
 
\end_layout

\end_deeper
\begin_layout Description

\family typewriter
native
\family default
 If true, saves the image as a native (ELF, Mach-O, PE) shared library.
 (On platforms where this isn't yet supported, a warning is issued and the
 option is ignored.) 
\end_layout

\begin_layout Section
Concatenating FASL Files
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "concatenating-fasl-files"

\end_inset

Multiple fasl files can be concatenated into a single file.
\end_layout

\begin_layout Subsection
FASL-CONCATENATE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_fasl-concatenate"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fasl-concatenate
\end_layout

\end_inset

FASL-CONCATENATE --- Concatenate several fasl files, producing a single
 output file.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
fasl-concatenate out-file fasl-files &key (:if-exists :error)
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
out-file Name of the file in which to store the concatenation.
 
\end_layout

\begin_layout Description
fasl-files List of names of fasl files to concatenate.
 
\end_layout

\begin_layout Description
:if-exists As for 
\family typewriter
OPEN
\family default
, defaults to 
\family typewriter
 :error
\family default
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Creates a fasl file which, when loaded, will have the same effect as loading
 the individual input fasl files in the specified order.
 The single file might be easier to distribute or install, and loading it
 may be at least a little faster than loading the individual files (since
 it avoids the overhead of opening and closing each file in succession.)
\end_layout

\begin_layout Standard
The PATHNAME-TYPE of the output file and of each input file defaults to
 the current platform's fasl file type (.dx64fsl or whatever.) If any of the
 input files has a different type/extension an error will be signaled, but
 it doesn't otherwise try too hard to verify that the input files are real
 fasl files for the current platform.
\end_layout

\begin_layout Section
Floating Point Numbers
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "floating-point"

\end_inset

In Clozure CL, the Common Lisp types short-float and single-float are implemente
d as IEEE single precision values; double-float and long-float are IEEE
 double precision values.
 On 64-bit platforms, single-floats are immediate values (like fixnums and
 characters).
\end_layout

\begin_layout Standard
Floating-point exceptions are generally enabled and detected.
 By default, threads start up with overflow, division-by-zero, and invalid
 enabled, and the rounding mode is set to nearest.
 The functions 
\family typewriter
SET-FPU-MODE
\family default
 and 
\family typewriter
GET-FPU-MODE
\family default
 provide user control over floating-point behavior.
\end_layout

\begin_layout Subsection
GET-FPU-MODE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_get-fpu-mode"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get-fpu-mode
\end_layout

\end_inset

GET-FPU-MODE --- Return the state of exception-enable and rounding-mode
 control flags for the current thread.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
get-fpu-mode &optional mode
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
mode One of the keywords :rounding-mode, :overflow, :underflow, :division-by-zer
o, :invalid, :inexact.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
If 
\family typewriter
mode
\family default
 is supplied, returns the value of the corresponding control flag for the
 current thread.
\end_layout

\begin_layout Standard
Otherwise, returns a list of keyword/value pairs which describe the floating-poi
nt exception-enable and rounding-mode control flags for the current thread.
\end_layout

\begin_layout Description
rounding-mode One of :nearest, :zero, :positive, :negative 
\end_layout

\begin_layout Description
overflow, underflow, division-by-zero, invalid, inexact  If true, the floating-p
oint exception is signaled.
 If NIL, it is masked.
 
\end_layout

\begin_layout Subsection
SET-FPU-MODE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_set-fpu-mode"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
set-fpu-mode
\end_layout

\end_inset

SET-FPU-MODE --- Set the state of exception-enable and rounding-mode control
 flags for the current thread.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
set-fpu-mode &key rounding-mode overflow underflow division-by-zero invalid
 inexact
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
rounding-mode If supplied, must be one of :nearest, :zero, :positive, or
 :negative.
 
\end_layout

\begin_layout Description
overflow, underflow, division-by-zero, invalid, inexact NIL to mask the
 exception, T to signal it.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Sets the current thread's exception-enable and rounding-mode control flags
 to the indicated values for arguments that are supplied, and preserves
 the values assoicated with those that aren't supplied.
\end_layout

\begin_layout Section
Watched Objects
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "watched-objects"

\end_inset

As of release 1.4, Clozure CL provides a way for lisp objects to be watched
 so that a condition will be signaled when a thread attempts to write to
 the watched object.
 For a certain class of bugs (someone is changing this value, but I don't
 know who), this can be extremely helpful.
\end_layout

\begin_layout Subsection
WATCH
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "watched-watch"

\end_inset


\end_layout

\begin_layout Subsubsection
WATCH
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_watch"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
watch
\end_layout

\end_inset

WATCH --- Monitor a lisp object for writes.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
watch &optional object
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
object Any memory-allocated lisp object.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
The WATCH function arranges for the specified object to be monitored for
 writes.
 This is accomplished by copying the object to its own set of virtual memory
 pages, which are then write-protected.
 This protection is enforced by the computer's memory-management hardware;
 the write-protection does not slow down reads at all.
\end_layout

\begin_layout Standard
When any write to the object is attempted, a WRITE-TO-WATCHED-OBJECT condition
 will be signaled.
\end_layout

\begin_layout Standard
When called with no arguments, WATCH returns a freshly-consed list of the
 objects currently being watched.
\end_layout

\begin_layout Standard
WATCH returns NIL if the object cannot be watched (typically because the
 object is in a static or pure memory area).
\end_layout

\begin_layout Paragraph*
DWIM
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "watch-dwim"

\end_inset

WATCH operates at a fairly low level; it is not possible to avoid the details
 of the internal representation of objects.
 Nevertheless, as a convenience, WATCHing a standard-instance, a hash-table,
 or a multi-dimensional or non-simple CL array will watch the underlying
 slot-vector, hash-table-vector, or data-vector, respectively.
\end_layout

\begin_layout Paragraph*
Discussion
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "watch-discuss"

\end_inset

WATCH can monitor any memory-allocated lisp object.
\end_layout

\begin_layout Standard
In Clozure CL, a memory-allocated object is either a cons cell or a uvector.
\end_layout

\begin_layout Standard
WATCH operates on cons cells, not lists.
 In order to watch a chain of cons cells, each cons cell must be watched
 individually.
 Because each watched cons cell takes up its own own virtual memory page
 (4 Kbytes), it's only feasible to watch relatively short lists.
\end_layout

\begin_layout Standard
If a memory-allocated object isn't a cons cell, then it is a vector-like
 object called a uvector.
 A uvector is a memory-allocated lisp object whose first word is a header
 that describes the object's type and the number of elements that it contains.
\end_layout

\begin_layout Standard
So, a hash table is a uvector, as is a string, a standard instance, a double-flo
at, a CL array or vector, and so forth.
\end_layout

\begin_layout Standard
Some CL objects, like strings and other simple vectors, map in a straightforward
 way onto the uvector representation.
 It is easy to understand what happens in such cases.
 The uvector index corresponds directly to the vector index:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (defvar *s* "xxxxx")
\end_layout

\begin_layout Plain Layout

*S* 
\end_layout

\begin_layout Plain Layout

? (watch *s*) 
\end_layout

\begin_layout Plain Layout

"xxxxx" 
\end_layout

\begin_layout Plain Layout

? (setf (char *s* 3) #
\backslash
0)
\end_layout

\begin_layout Plain Layout

> Error: Write to watched uvector "xxxxx" at index 3 
\end_layout

\begin_layout Plain Layout

> Faulting instruction: (movl (
\end_layout

\begin_layout Plain Layout

> While executing: SET-CHAR, in process listener(1).
 
\end_layout

\begin_layout Plain Layout

> Type :POP to abort, :R for a list of available restarts.
 
\end_layout

\begin_layout Plain Layout

> Type :? for other options.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the case of more complicated objects (e.g., a hash-table, a standard-instance,
 a package, etc.), the elements of the uvector are like slots in a structure.
 It's necessary to know which one of those "slots" contains the data that
 will be changed when the object is written to.
\end_layout

\begin_layout Standard
As mentioned above, watch knows about arrays, hash-tables, and standard-instance
s, and will automatically watch the appropriate data-containing element.
\end_layout

\begin_layout Standard
An example might make this clearer.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (defclass foo () 
\end_layout

\begin_layout Plain Layout

   (slot-a slot-b slot-c)) 
\end_layout

\begin_layout Plain Layout

#<STANDARD-CLASS FOO> 
\end_layout

\begin_layout Plain Layout

? (defvar *a-foo* (make-instance 'foo)) 
\end_layout

\begin_layout Plain Layout

*A-FOO* 
\end_layout

\begin_layout Plain Layout

? (watch *a-foo*) 
\end_layout

\begin_layout Plain Layout

#<SLOT-VECTOR #xDB00D> ;;; Note that WATCH has watched the internal slot-vector
 object 
\end_layout

\begin_layout Plain Layout

? (setf (slot-value *a-foo* 'slot-a) 'foo) 
\end_layout

\begin_layout Plain Layout

> Error: Write to watched uvector #<SLOT-VECTOR #xDB00D> at index 1 
\end_layout

\begin_layout Plain Layout

> Faulting instruction: (movq (
\end_layout

\begin_layout Plain Layout

> While executing: 
\end_layout

\begin_layout Plain Layout

> Type :POP to abort, :R for a list of available restarts.
 
\end_layout

\begin_layout Plain Layout

> Type :? for other options.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Looking at a backtrace would presumably show what object and slot name were
 written.
\end_layout

\begin_layout Standard
Note that even though the write was to slot-a, the uvector index was 1 (not
 0).
 This is because the first element of a slot-vector is a pointer to the
 instance that owns the slots.
 We can retrieve that to look at the object that was modified:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

1 > (uvref (write-to-watched-object-object *break-condition*) 0) 
\end_layout

\begin_layout Plain Layout

#<FOO #x30004113502D> 
\end_layout

\begin_layout Plain Layout

1 > (describe *) 
\end_layout

\begin_layout Plain Layout

#<FOO #x30004113502D> 
\end_layout

\begin_layout Plain Layout

Class: #<STANDARD-CLASS FOO> 
\end_layout

\begin_layout Plain Layout

Wrapper: #<CLASS-WRAPPER FOO #x300041135EBD> 
\end_layout

\begin_layout Plain Layout

Instance slots 
\end_layout

\begin_layout Plain Layout

SLOT-A: #<Unbound> 
\end_layout

\begin_layout Plain Layout

SLOT-B: #<Unbound> 
\end_layout

\begin_layout Plain Layout

SLOT-C: #<Unbound> 
\end_layout

\begin_layout Plain Layout

1 > 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
UNWATCH
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "watched-unwatch"

\end_inset


\end_layout

\begin_layout Subsubsection
UNWATCH
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_unwatch"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
unwatch
\end_layout

\end_inset

UNWATCH --- Stop monitoring a lisp object for writes.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
unwatch object
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
The UNWATCH function ensures that the specified object is in normal, non-monitor
ed memory.
 If the object is not currently being watched, UNWATCH does nothing and
 returns NIL.
 Otherwise, the newly unwatched object is returned.
\end_layout

\begin_layout Subsection
WRITE-TO-WATCHED-OBJECT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "watched-write-to-watched-object"

\end_inset


\end_layout

\begin_layout Subsubsection
WRITE-TO-WATCHED-OBJECT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "c_write-to-watched-object"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
write-to-watched-object
\end_layout

\end_inset

WRITE-TO-WATCHED-OBJECT --- Condition signaled when a write to a watched
 object is attempted.
\end_layout

\begin_layout Standard
Condition
\end_layout

\begin_layout Paragraph*
Discussion
\end_layout

\begin_layout Standard
This condition is signaled when a watched object is written to.
 There are three slots of interest:
\end_layout

\begin_layout Description
object The actual object that was the destination of the write.
 
\end_layout

\begin_layout Description
offset The byte offset from the tagged object pointer to the address of
 the write.
 
\end_layout

\begin_layout Description
instruction The disassembled machine instruction that attempted the write.
 
\end_layout

\begin_layout Paragraph*
Restarts
\end_layout

\begin_layout Standard
\noindent
A few restarts are provided: one will skip over the faulting write instruction
 and proceed; another offers to unwatch the object and continue.
\end_layout

\begin_layout Standard
There is also an emulate restart.
 In some common cases, the faulting write instruction can be emulated, enabling
 the write to be performed without having to unwatch the object (and therefore
 let other threads potentially write to it).
 If the faulting instruction isn't recognized, the emulate restart will
 not be offered.
\end_layout

\begin_layout Subsection
Notes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "watch-notes"

\end_inset

Although some care has been taken to minimize potential problems arising
 from watching and unwatching objects from multiple threads, there may well
 be subtle race conditions present that could cause bad behavior.
\end_layout

\begin_layout Standard
For example, suppose that a thread attempts to write to a watched object.
 This causes the operating system to generate an exception.
 The lisp kernel figures out what the exception is, and calls back into
 lisp to signal the write-to-watched-object condition and perhaps handle
 the error.
\end_layout

\begin_layout Standard
Now, as soon lisp code starts running again (for the callback), it's possible
 that some other thread could unwatch the very watched object that caused
 the exception, perhaps before we even have a chance to signal the condition,
 much less respond to it.
\end_layout

\begin_layout Standard
Having the object unwatched out from underneath a handler may at least confuse
 it, if not cause deeper trouble.
 Use caution with unwatch.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "watch-examples"

\end_inset

Here are a couple more examples in addition to the above examples of watching
 a string and a standard-instance.
\end_layout

\begin_layout Subsubsection
Fancy arrays
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (defvar *f* (make-array '(2 3) :element-type 'double-float)) 
\end_layout

\begin_layout Plain Layout

*F* 
\end_layout

\begin_layout Plain Layout

? (watch *f*) 
\end_layout

\begin_layout Plain Layout

#(0.0D0 0.0D0 0.0D0 0.0D0 0.0D0 0.0D0) ;;; Note that the above vector is the underlyin
g data-vector for the array 
\end_layout

\begin_layout Plain Layout

? (setf (aref *f* 1 2) pi) 
\end_layout

\begin_layout Plain Layout

> Error: Write to watched uvector #<VECTOR 6 type DOUBLE-FLOAT, simple>
 at index 5 
\end_layout

\begin_layout Plain Layout

> Faulting instruction: (movq (
\end_layout

\begin_layout Plain Layout

> While executing: ASET, in process listener(1).
 
\end_layout

\begin_layout Plain Layout

> Type :POP to abort, :R for a list of available restarts.
 
\end_layout

\begin_layout Plain Layout

> Type :? for other options.
 1 
\end_layout

\begin_layout Plain Layout

> 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case, uvector index in the report is the row-major index of the
 element that was written to.
\end_layout

\begin_layout Subsubsection
Hash tables
\end_layout

\begin_layout Standard
Hash tables are surprisingly complicated.
 The representation of a hash table includes an element called a hash-table-vect
or.
 The keys and values of the elements are stored pairwise in this vector.
\end_layout

\begin_layout Standard
One problem with trying to monitor hash tables for writes is that the underlying
 hash-table-vector is replaced with an entirely new one when the hash table
 is rehashed.
 A previously-watched hash-table-vector will not be the used by the hash
 table after rehashing, and writes to the new vector will not be caught.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(defvar *h* (make-hash-table)) 
\end_layout

\begin_layout Plain Layout

*H* 
\end_layout

\begin_layout Plain Layout

? (setf (gethash 'noise *h*) 'feep) 
\end_layout

\begin_layout Plain Layout

FEEP 
\end_layout

\begin_layout Plain Layout

? (watch *h*) 
\end_layout

\begin_layout Plain Layout

#<HASH-TABLE-VECTOR #xDD00D> ;;; underlying hash-table-vector 
\end_layout

\begin_layout Plain Layout

? (setf (gethash 'noise *h*) 'ding) 
\end_layout

\begin_layout Plain Layout

> Error: Write to watched uvector #<HASH-TABLE-VECTOR #xDD00D> at index
 35 
\end_layout

\begin_layout Plain Layout

> Faulting instruction: (lock) 
\end_layout

\begin_layout Plain Layout

> (cmpxchgq (
\end_layout

\begin_layout Plain Layout

> While executing: 
\end_layout

\begin_layout Plain Layout

> Type :POP to abort, :R for a list of available restarts.
 
\end_layout

\begin_layout Plain Layout

> Type :? for other options.
 ;;; see what value is being replaced...
 
\end_layout

\begin_layout Plain Layout

1 > (uvref (write-to-watched-object-object *break-condition*) 35)
\end_layout

\begin_layout Plain Layout

FEEP 
\end_layout

\begin_layout Plain Layout

;;; backtrace shows useful context 
\end_layout

\begin_layout Plain Layout

1 > :b 
\end_layout

\begin_layout Plain Layout

*(1A109F8) : 0 ( 
\end_layout

\begin_layout Plain Layout

 (1A10A50) : 1 (LOCK-FREE-PUTHASH NOISE #<HASH-TABLE :TEST EQL size 1/60
 #x30004117D47D> DING) 653 
\end_layout

\begin_layout Plain Layout

 (1A10AC8) : 2 (CALL-CHECK-REGS PUTHASH NOISE #<HASH-TABLE :TEST EQL size
 1/60 #x30004117D47D> DING) 229 
\end_layout

\begin_layout Plain Layout

 (1A10B00) : 3 (TOPLEVEL-EVAL (SETF (GETHASH # *H*) 'DING) NIL) 709 ...
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Lists
\end_layout

\begin_layout Standard
As previously mentioned, WATCH only watches individual cons cells.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (defun watch-list (list) 
\end_layout

\begin_layout Plain Layout

    (maplist #'watch list)) 
\end_layout

\begin_layout Plain Layout

WATCH-LIST 
\end_layout

\begin_layout Plain Layout

? (defvar *l* (list 1 2 3)) 
\end_layout

\begin_layout Plain Layout

*L*
\end_layout

\begin_layout Plain Layout

? (watch-list *l*) 
\end_layout

\begin_layout Plain Layout

((1 2 3) (2 3) (3)) 
\end_layout

\begin_layout Plain Layout

? (setf (nth 2 *l*) 'foo) 
\end_layout

\begin_layout Plain Layout

> Error: Write to the CAR of watched cons cell (3) 
\end_layout

\begin_layout Plain Layout

> Faulting instruction: (movq (
\end_layout

\begin_layout Plain Layout

> While executing: 
\end_layout

\begin_layout Plain Layout

> Type :POP to abort, :R for a list of available restarts.
 
\end_layout

\begin_layout Plain Layout

> Type :? for other options.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Code Coverage
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "code-coverage"

\end_inset


\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "code-coverage-overview"

\end_inset

In Clozure CL 1.4 and later, code coverage provides information about which
 paths through generated code have been executed and which haven't.
 For each source form, it can report one of three possible outcomes:
\end_layout

\begin_layout Itemize
Not covered: this form was never entered.
\end_layout

\begin_layout Itemize
Partly covered: This form was entered, and some parts were executed and
 some weren't.
\end_layout

\begin_layout Itemize
Fully covered: Every bit of code generated from this form was executed.
\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "code-coverage-limitations"

\end_inset

While the information gathered for coverage of generated code is complete
 and precise, the mapping back to source forms is of necessity heuristic,
 and depends a great deal on the behavior of macros and the path of the
 source forms through compiler transforms.
 Source information is not recorded for variables, which further limits
 the source mapping.
 In practice, there is often enough information scattered about a partially
 covered function to figure out which logical path through the code was
 taken and which wasn't.
 If that doesn't work, you can try disassembling to see which parts of the
 compiled code were not executed: in the disassembled code there will be
 references to #<CODE-NOTE [xxx] ...> where xxx is NIL if the code that follows
 was never executed and non-NIL if it was.
\end_layout

\begin_layout Standard
Sometimes the situation can be improved by modifying macros to try to preserve
 more of the input forms, rather than destructuring and rebuilding them.
\end_layout

\begin_layout Standard
Because the code coverage information is associated with compiled functions,
 code coverage information is not available for load-time toplevel expressions.
 You can work around this by creating a function and calling it.
 I.e.
 instead of 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(progn (do-this) (setq that ...) ...))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
do: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(defun init-this-and-that () (do-this) (setq that ...) ...) (init-this-and-that)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then you can see the coverage information in the definition of 
\family typewriter
init-this-and-that
\family default
.
\end_layout

\begin_layout Subsection
Usage
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "code-coverage-usage"

\end_inset

In order to gather code coverage information, you first have to recompile
 all your code to include code coverage instrumentation.
 Compiling files will generate code coverage instrumentation if 
\family typewriter
CCL:*COMPILE-CODE-COVERAGE*
\family default
 is true: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(setq ccl:*compile-code-coverage* t) (recompile-all-your-files)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The compilation process will be many times slower than normal, and the fasl
 files will be many times bigger.
\end_layout

\begin_layout Standard
When you execute functions loaded from instrumented fasl files, they will
 record coverage information every time they are executed.
 You can examine that information by calling 
\family typewriter
ccl:report-coverage
\family default
 or 
\family typewriter
ccl:coverage-statistics
\family default
.
\end_layout

\begin_layout Standard
While recording coverage, you can collect incremental coverage deltas between
 any two points in time.
 You might do this while running a test suite, to record the coverage for
 each test, for example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(ccl:reset-incremental-coverage) 
\end_layout

\begin_layout Plain Layout

(loop with coverage = (make-hash-table) 
\end_layout

\begin_layout Plain Layout

    for test in (tests-to-run) 
\end_layout

\begin_layout Plain Layout

       do (run-test test) 
\end_layout

\begin_layout Plain Layout

       do (setf (gethash test coverage) 
\end_layout

\begin_layout Plain Layout

                (ccl:get-incremental-coverage)) 
\end_layout

\begin_layout Plain Layout

     finally (return coverage))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
creates a hash table mapping a test to a representation of all coverage
 recorded while running the test.
 This hash table can then be passed to 
\family typewriter
ccl:report-coverage
\family default
, 
\family typewriter
ccl:incremental-coverage-svn-matches
\family default
 or 
\family typewriter
ccl:incremental-coverage-source-matches
\family default
.
\end_layout

\begin_layout Subsection
Functions and Variables
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "code-coverage-functions-and-variables"

\end_inset

The following functions can be used to manage the coverage data:
\end_layout

\begin_layout Subsubsection
REPORT-COVERAGE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_report-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
report-coverage
\end_layout

\end_inset

REPORT-COVERAGE --- Generate a code coverage report
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
report-coverage output-file &key (tags nil) (external-format :default) (statisti
cs t) (html t) 
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
output-file Pathname for the output index file.
 
\end_layout

\begin_layout Description
html If non-nil (the default), this will generate an HTML report, consisting
 of an index file in 
\family typewriter
output-file
\family default
 and, in the same directory, one html file for each instrumented source
 file that has been loaded in the current session.
 
\end_layout

\begin_layout Description
tags If non-nil, this should be a hash table mapping arbitrary keys (tags)
 to incremental coverage deltas.
 The HTML report will show a list of tags, and allow selection of an arbitrary
 subset of them to show the coloring and statistics for coverage by that
 subset.
 
\end_layout

\begin_layout Description
external-format Controls the external format of the html files.
 
\end_layout

\begin_layout Description
statistics If non-nil (the default), a comma-separated file is generated
 with the summary of statistics.
 You can specify a filename for the statistics argument, otherwise "statistics.cs
v" is created in the directory of 
\family typewriter
output-file
\family default
.
 See documentation of coverage-statistics below for a description of the
 values in the statistics file.
 
\end_layout

\begin_layout Paragraph*
Example
\end_layout

\begin_layout Standard
\noindent
If you've loaded foo.lx64fsl and bar.lx64fsl, and have run some tests, you
 could do 
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
\noindent

(REPORT-COVERAGE "/my/dir/coverage/report.html") 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
and this would generate report.html, foolisp.html and barlisp.html, and statistics.c
sv all in /my/dir/coverage/.
\end_layout

\begin_layout Subsubsection
RESET-COVERAGE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_reset-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
reset-coverage
\end_layout

\end_inset

RESET-COVERAGE --- Resets all coverage data back to the "Not Executed" state
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Resets all coverage data back to the "Not Executed" state
\end_layout

\begin_layout Subsubsection
CLEAR-COVERAGE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_clear-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
clear-coverage
\end_layout

\end_inset

CLEAR-COVERAGE --- Forget about all instrumented files that have been loaded.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Gets rid of the information about which instrumented files have been loaded,
 so 
\family typewriter
ccl:report-coverage
\family default
 will not report any files, and 
\family typewriter
ccl:save-coverage-in-file
\family default
 will not save any info, until more instrumented files are loaded.
\end_layout

\begin_layout Subsubsection
SAVE-COVERAGE-IN-FILE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_save-coverage-in-file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
save-coverage-in-file
\end_layout

\end_inset

SAVE-COVERAGE-IN-FILE --- Save all coverage into to a file so you can restore
 it later.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
save-coverage-in-file pathname 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Saves all coverage info in a file, so you can restore the coverage state
 later.
 This allows you to combine multiple runs or continue in a later session.
 Equivalent to 
\family typewriter
(ccl:write-coverage-to-file (ccl:get-coverage) pathname)
\family default
.
\end_layout

\begin_layout Subsubsection
RESTORE-COVERAGE-FROM-FILE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_restore-coverage-from-file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
restore-coverage-from-file
\end_layout

\end_inset

RESTORE-COVERAGE-FROM-FILE --- Load coverage state from a file.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
restore-coverage-from-file pathname 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Restores the coverage data previously saved with ccl:save-coverage-in-file,
 for the set of instrumented fasls that were loaded both at save and restore
 time.
 I.e.
 coverage info is only restored for files that have been loaded in this
 session.
 For example if in a previous session you had loaded "foo.lx86fsl" and then
 saved the coverage info, in this session you must load the same "foo.lx86fsl"
 before calling 
\family typewriter
restore-coverage-from-file
\family default
 in order to retrieve the stored coverage info for "foo".
 Equivalent to 
\family typewriter
(ccl:restore-coverage (ccl:read-coverage-from-file pathname))
\family default
.
\end_layout

\begin_layout Subsubsection
GET-COVERAGE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_get-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get-coverage
\end_layout

\end_inset

GET-COVERAGE --- Returns a snapshot of the current coverage data.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns a snapshot of the current coverage data.
 A snapshot is a copy of the current coverage state.
 It can be saved in a file with 
\family typewriter
ccl:write-coverage-to-file
\family default
, reinstated back as the current state with 
\family typewriter
ccl:restore-coverage
\family default
, or combined with other snapshots with 
\family typewriter
ccl:combine-coverage
\family default
.
\end_layout

\begin_layout Subsubsection
RESTORE-COVERAGE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_restore-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
restore-coverage
\end_layout

\end_inset

RESTORE-COVERAGE --- Reinstalls a coverage snapshot as the current coverage
 state.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
restore-coverage snapshot 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Reinstalls a coverage snapshot as the current coverage state.
\end_layout

\begin_layout Subsubsection
COMBINE-COVERAGE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_combine-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
combine-coverage
\end_layout

\end_inset

COMBINE-COVERAGE --- Combines multiple coverage snapshots into one.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
combine-coverage snapshots 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Takes a list of coverage snapshots and returns a new coverage snapshot represent
ing a union of all the coverage data.
\end_layout

\begin_layout Subsubsection
WRITE-COVERAGE-TO-FILE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_write-coverage-to-file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
write-coverage-to-file
\end_layout

\end_inset

WRITE-COVERAGE-TO-FILE --- Save a coverage snapshot in a file.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
write-coverage-to-file snapshot pathname 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Saves the coverage snapshot in a file.
 The snapshot can be loaded back with 
\family typewriter
ccl:read-coverage-from-file
\family default
 or loaded and restored with 
\family typewriter
ccl:restore-coverage-from-file
\family default
.
 Note that the file created is actually a lisp source file and can be compiled
 for faster loading.
\end_layout

\begin_layout Subsubsection
READ-COVERAGE-FROM-FILE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_read-coverage-from-file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
read-coverage-from-file
\end_layout

\end_inset

READ-COVERAGE-FROM-FILE --- Return the coverage snapshot saved in a file.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
read-coverage-from-file pathname 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the snapshot saved in pathname.
 Doesn't affect the current coverage state.
 pathname can be the file previously created with 
\family typewriter
ccl:write-coverage-to-file
\family default
 or 
\family typewriter
ccl:save-coverage-in-file
\family default
, or it can be the name of the fasl created from compiling such a file.
\end_layout

\begin_layout Subsubsection
COVERAGE-STATISTICS
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_coverage-statistics"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
coverage-statistics
\end_layout

\end_inset

COVERAGE-STATISTICS --- Returns a sequence of 
\family typewriter
ccl:coverage-statistics
\family default
 objects, one per source file.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
coverage-statistics 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns a sequence of 
\family typewriter
ccl:coverage-statistics
\family default
 objects, one for each source file, containing the same information as that
 written to the statistics file by 
\family typewriter
ccl:report-coverage
\family default
.
 The following accessors are defined for 
\family typewriter
ccl:coverage-statistics
\family default
 objects: 
\end_layout

\begin_layout Description

\family typewriter
coverage-source-file
\family default
 the name of the source file corresponding to this information 
\end_layout

\begin_layout Description

\family typewriter
coverage-expressions-total
\family default
 the total number of expressions 
\end_layout

\begin_layout Description

\family typewriter
coverage-expressions-entered
\family default
 the number of source expressions that have been entered (i.e.
 at least partially covered) 
\end_layout

\begin_layout Description

\family typewriter
coverage-expressions-covered
\family default
 the number of source expressions that were fully covered 
\end_layout

\begin_layout Description

\family typewriter
coverage-unreached-branches
\family default
 the number of conditionals with one branch taken and one not taken 
\end_layout

\begin_layout Description

\family typewriter
coverage-code-forms-total
\family default
 the total number of code forms.
 A code form is an expression in the final stage of compilation, after all
 macroexpansion and compiler transforms and simplification 
\end_layout

\begin_layout Description

\family typewriter
coverage-code-forms-covered
\family default
 the number of code forms that have been entered 
\end_layout

\begin_layout Description

\family typewriter
coverage-functions-total
\family default
 the total number of functions 
\end_layout

\begin_layout Description

\family typewriter
coverage-functions-fully-covered
\family default
 the number of functions that were fully covered 
\end_layout

\begin_layout Description

\family typewriter
coverage-functions-partly-covered
\family default
 the number of functions that were partly covered 
\end_layout

\begin_layout Description

\family typewriter
coverage-functions-not-entered
\family default
 the number of functions never entered 
\end_layout

\begin_layout Subsubsection
RESET-INCREMENTAL-COVERAGE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_reset-incremental-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
reset-incremental-coverage
\end_layout

\end_inset

RESET-INCREMENTAL-COVERAGE --- Reset incremental coverage.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
reset-incremental-coverage 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Marks a starting point for recording incremental coverage.
 Note that calling this function does not affect regular coverage data (whereas
 calling 
\family typewriter
ccl:reset-coverage
\family default
 resets incremental coverage as well).
\end_layout

\begin_layout Subsubsection
GET-INCREMENTAL-COVERAGE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_get-incremental-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get-incremental-coverage
\end_layout

\end_inset

GET-INCREMENTAL-COVERAGE --- Returns the delta of coverage since the last
 incremental reset.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
get-incremental-coverage &key (reset t) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the delta of coverage since the last reset of incremental coverage.
 If 
\family typewriter
reset
\family default
 is true (the default), it also resets incremental coverage now, so that
 the next call to 
\family typewriter
get-incremental-coverage
\family default
 will return the delta from this point.
\end_layout

\begin_layout Standard
Incremental coverage deltas are represented differently than the full coverage
 snapshots returned by functions such as 
\family typewriter
ccl:get-coverage
\family default
.
 Incremental coverage uses an abbreviated format and is missing some of
 the information in a full snapshot, and therefore cannot be passed to functions
 documented to accept a 
\family typewriter
snapshot
\family default
, only to functions specifically documented to accept incremental coverage
 deltas.
\end_layout

\begin_layout Subsubsection
INCREMENTAL-COVERAGE-SOURCE-MATCHES
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_incremental-coverage-source-matches"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
incremental-coverage-source-matches
\end_layout

\end_inset

INCREMENTAL-COVERAGE-SOURCE-MATCHES --- Find incremental coverage deltas
 intersecting source regions.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
incremental-coverage-source-matches collection sources 
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
collection A hash table mapping arbitrary keys to incremental coverage deltas,
 or a sequence of incremental coverage deltas.
 
\end_layout

\begin_layout Description
sources A list of pathnames and/or source-notes, the latter representing
 a range within a file.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
Given a hash table 
\family typewriter
collection
\family default
 whose values are incremental coverage deltas, return a list of all keys
 corresponding to those deltas that intersect any region in 
\family typewriter
sources
\family default
.
\end_layout

\begin_layout Standard
For example if the deltas represent tests, then the returned value is a
 list of all tests that cover some part of the source regions.
\end_layout

\begin_layout Standard

\family typewriter
collection
\family default
 can also be a sequence of deltas, in which case a subsequence of matching
 deltas is returned.
 In particular you can test whether any particular delta intersects the
 sources by passing it in as a single-element list.
\end_layout

\begin_layout Subsubsection
INCREMENTAL-COVERAGE-SVN-MATCHES
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_incremental-coverage-svn-matches"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
incremental-coverage-svn-matches
\end_layout

\end_inset

INCREMENTAL-COVERAGE-SVN-MATCHES --- Find incremental coverage deltas matching
 changes from a particular subversion revision.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
incremental-coverage-svn-matches collection &key (directory (current-directory))
 (revision :base) 
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
collection A hash table mapping arbitrary keys to incremental coverage deltas,
 or a sequence of incremental coverage deltas.
 
\end_layout

\begin_layout Description
directory The pathname of a subversion working directory.
 
\end_layout

\begin_layout Description
revision The revision to compare to the working directory, an integer or
 another value whose printed representation is suitable for passing as the
 
\family typewriter
--revision
\family default
 argument to svn.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
Given a hash table 
\family typewriter
collection
\family default
 whose values are incremental coverage deltas, return a list of all keys
 corresponding to those deltas that intersect any changed source in 
\family typewriter
directory
\family default
 since revision 
\family typewriter
revision
\family default
 in subversion.
\end_layout

\begin_layout Standard
For example if the deltas represent tests, then the returned value is a
 list of all tests that might be affected by the changes.
\end_layout

\begin_layout Standard

\family typewriter
collection
\family default
 can also be a sequence of deltas, in which case a subsequence of matching
 deltas is returned.
 In particular you can test whether any particular delta is affected by
 the changes by passing it in as a single-element list.
\end_layout

\begin_layout Subsubsection
*COMPILE-CODE-COVERAGE*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_compile-code-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*COMPILE-CODE-COVERAGE*
\end_layout

\end_inset

*COMPILE-CODE-COVERAGE* --- When true, instrument functions being compiled
 to collect code coverage information.
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
*compile-code-coverage* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This variable controls whether functions are instrumented for code coverage.
 Files compiled while this variable is true will contain code coverage instrumen
tation.
\end_layout

\begin_layout Subsubsection
WITHOUT-COMPILING-CODE-COVERAGE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_without-compiling-code-coverage"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
without-compiling-code-coverage
\end_layout

\end_inset

WITHOUT-COMPILING-CODE-COVERAGE --- Don't record code coverage for forms
 within the body.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
without-compiling-code-coverage 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This macro arranges so that body doesn't record internal details of code
 coverage.
 It will be considered totally covered if it's entered at all.
 The Common Lisp macros 
\family typewriter
ASSERT
\family default
 and 
\family typewriter
CHECK-TYPE
\family default
 use this macro.
\end_layout

\begin_layout Subsection
Interpreting Code Coloring
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "code-coverage-interpreting-code-coloring"

\end_inset

The output of ccl:report-coverage consists of formatted source code, with
 coverage indicated by coloring.
 Four colors are used: dark green for forms that compiled to code in which
 every single instruction was executed, light green for forms that have
 been entered but weren't totally covered, red for forms that were never
 entered, and the page background color for toplevel forms that weren't
 instrumented.
\end_layout

\begin_layout Standard
The source coloring is applied from outside in.
 So for example if you have 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(outer-form ...
 (inner-form ...) ...) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
first the whole outer form is painted with whatever color expresses the
 outer form coverage, and then the inner form color is replaced with whatever
 color expresses the inner form coverage.
 One consequence of this approach is that every part of the outer form that
 is not specifically inside some executable inner form will have the outer
 form's coverage color.
 If the syntax of outer form involves some non-executable forms, or forms
 that do not have coverage info of their own for whatever reason, then they
 will just inherit the color of the outer form, because they don't get repainted
 with a color of their own.
\end_layout

\begin_layout Standard
One case in which this approach can be confusing is in the case of symbols.
 As noted in the Limitations section, coverage information is not recorded
 for variables; hence the coloring of a variable does not convey information
 about whether the variable was evaluated or not -- that information is
 not available, and the variable just inherits the color of the form that
 contains it.
\end_layout

\begin_layout Section
Other Extensions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "other-extensions"

\end_inset


\end_layout

\begin_layout Subsection
QUIT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_quit"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
quit
\end_layout

\end_inset

QUIT --- Cleanly exit the lisp.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
quit &optional (exit 0) &key error-handler 
\end_layout

\begin_layout Subsubsection*
Summary
\end_layout

\begin_layout Standard
Cleanly exit from lisp.
 If the exit argument is a value of type (signed-byte 32), that value will
 be passed to the C library function _exit() as the status code.
 (A value of nil is treated as a zero.)
\end_layout

\begin_layout Standard
Alternatively, exit may be a function of no arguments; this function will
 be called instead of _exit() to exit the lisp.
\end_layout

\begin_layout Standard
The error-handler argument, if supplied, must be a function of one argument,
 the condition, that will be called if an error occurs when preparing to
 quit.
 The error-handler function should exit the lisp.
\end_layout

\begin_layout Subsection
WAIT-FOR-SIGNAL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_wait-for-signal"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wait-for-signal
\end_layout

\end_inset

WAIT-FOR-SIGNAL --- Wait for a particular signal to be received.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
wait-for-signal s duration 
\end_layout

\begin_layout Subsubsection*
Summary
\end_layout

\begin_layout Standard
Wait for the signal with signal number s to be received, or until duration
 seconds have elapsed.
 If duration is nil, wait for an indeterminate "very long time" (many years).
\end_layout

\begin_layout Standard
If signal number s is outside the range of valid signals, or is reserved
 by the lisp for its own use, an error is signaled.
 (An error is always signaled on Windows systems.)
\end_layout

\begin_layout Subsection
UNWIND-PROTECT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_unwind-protect"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
unwind-protect
\end_layout

\end_inset

UNWIND-PROTECT --- Ensure cleanup-forms are executed.
\end_layout

\begin_layout Standard
Special operator
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
unwind-protect protected-form cleanup-form* 
\end_layout

\begin_layout Subsubsection*
Summary
\end_layout

\begin_layout Standard
In Clozure CL, the cleanup forms are always executed as if they were wrapped
 with 
\begin_inset CommandInset ref
LatexCommand ref
reference "m_without-interrupts"

\end_inset

.
 To allow interrupts, use 
\begin_inset CommandInset ref
LatexCommand ref
reference "m_with-interrupts-enabled"

\end_inset

.
\end_layout

\begin_layout Subsection
*disassemble-verbose*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_disassemble-verbose"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
*disassemble-verbose*
\end_layout

\end_inset

*disassemble-verbose* --- When true, display verbose disassembly output.
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
When true, the output of 
\family typewriter
disassemble
\family default
 may include platform-dependent additional information.
 For instance, on the x86 ports, the output will include the x86 opcode
 bytes.
\end_layout

\begin_layout Standard
The default value is 
\family typewriter
nil
\family default
.
 
\end_layout

\end_body
\end_document
