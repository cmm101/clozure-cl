#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
% -----------------------------------------  
% Autogenerated LaTeX file from XML DocBook  
% -----------------------------------------  
%%<params>
%%</params>

\usepackage{ifthen}\newboolean{DBKIsBook}
\setboolean{DBKIsBook}{true}
\IfFileExists{ifxetex.sty}{%
    \usepackage{ifxetex}%
  }{%
    \newif\ifxetex
    \xetexfalse
  }
  \ifxetex
\usepackage{fontspec}\usepackage{xltxtra}\setmainfont{DejaVu Serif}
\setsansfont{DejaVu Sans}
\setmonofont{DejaVu Sans Mono}
\else
\fi
\usepackage{fancybox}\usepackage[hyperlink]{docbook}\renewcommand{\DBKreleaseinfo}{}


\title{Hemlock Programming}
\author{}

% ------------------
% Collaborators
% ------------------
\renewcommand{\DBKindexation}{
\begin{DBKindtable}
\DBKinditem{\writtenby}{}
\end{DBKindtable}
}
\makeindex
\makeglossary
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "%"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Hemlock Programming
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgramming"

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingIntroduction"

\end_inset

Hemlock is the text editor used in Clozure CL.
 It was originally based on the CMU Hemlock editor, but has since diverged
 from it in various ways.
 We continue to call the editor part of our IDE 
\family typewriter
Hemlock
\family default
 to give credit where credit is due, but we make no attempt at source or
 API compatibility with the original Hemlock.
\end_layout

\begin_layout Standard
Like the code, this documentation is based on the original Hemlock documentation
, modified as necessary.
\end_layout

\begin_layout Standard
Hemlock follows in the tradition of Emacs-compatible editors, with a rich
 set of extensible commands.
 This document describes the API for implementing new commands.
 The basic editor consists of a set of Lisp utility functions for manipulating
 buffers and the other data structures of the editor.
 All user level commands are written in terms of these functions.
 To find out how to define commands see Commands.
\end_layout

\begin_layout Section
Representation of Text
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingRepresentationOfText"

\end_inset

In Hemlock, text is represented as a sequence of lines.
 Newline characters are never stored but are implicit between lines.
 The implicit newline character is treated as the single character 
\family typewriter
#
\backslash
Newline
\family default
 by the text primitives.
\end_layout

\begin_layout Standard
Text is broken into lines when it is first introduced into Hemlock.
 Text enters Hemlock from the outside world in two ways: reading a file,
 or pasting text from the system clipboard.
 Hemlock uses heuristics 
\series bold
(which should be documented here!)
\series default
 to decide what newline convention to use to convert the incoming text into
 its internal representation as a sequence of lines.
 Similarly it uses heuristics 
\series bold
(which should be documented here!)
\series default
 to convert the internal representation into a string with embedded newlines
 in order to write a file or paste a region into the clipboard.
\end_layout

\begin_layout Subsection
Lines
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Lines"

\end_inset

A 
\family typewriter
line
\family default
 is an object representing a sequence of characters with no line breaks.
\end_layout

\begin_layout Subsubsection
linep
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_linep"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
linep
\end_layout

\end_inset

linep ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
linep line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if line is a line object, otherwise nil.
\end_layout

\begin_layout Subsubsection
line-string
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-string"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-string
\end_layout

\end_inset

line-string ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
line-string line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Given a line, this function returns as a simple string the characters in
 the line.
 This is setf'able to set the line-string to any string that does not contain
 newline characters.
 It is an error to destructively modify the result of line-string or to
 destructively modify any string after the line-string of some line has
 been set to that string.
\end_layout

\begin_layout Subsubsection
line-previous
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-previous"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-previous
\end_layout

\end_inset

line-previous ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
line-previous line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Subsubsection
line-next
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-next"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-next
\end_layout

\end_inset

line-next ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 line-next line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Given a line, line-previous returns the previous line or nil if there is
 no previous line.
 Similarly, line-next returns the line following line or nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
line-buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-buffer"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-buffer
\end_layout

\end_inset

line-buffer ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
line-buffer line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the buffer which contains this line.
 Since a line may not be associated with any buffer, in which case line-buffer
 returns nil.
\end_layout

\begin_layout Subsubsection
line-length
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-length"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-length
\end_layout

\end_inset

line-length ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
line-length line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the number of characters in the line.
 This excludes the newline character at the end.
\end_layout

\begin_layout Subsubsection
line-character
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-character"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-character
\end_layout

\end_inset

line-character ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
line-character line index 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the character at position index within line.
 It is an error for index to be greater than the length of the line or less
 than zero.
 If index is equal to the length of the line, this returns a #
\backslash
newline character.
\end_layout

\begin_layout Subsubsection
line-plist
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-plist"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-plist
\end_layout

\end_inset

line-plist ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
line-plist line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the property-list for line.
 setf, getf, putf and remf can be used to change properties.
 This is typically used in conjunction with line-signature to cache information
 about the line's contents.
\end_layout

\begin_layout Subsubsection
line-signature
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-signature"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-signature
\end_layout

\end_inset

line-signature ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
line-signature line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns an object that serves as a signature for a line's
 contents.
 It is guaranteed that any modification of text on the line will result
 in the signature changing so that it is not eql to any previous value.
 The signature may change even when the text remains unmodified, but this
 does not happen often.
\end_layout

\begin_layout Subsection
Marks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Marks"

\end_inset

A 
\family typewriter
mark
\family default
 indicates a specific position within the text represented by a line and
 a character position within that line.
 Although a mark is sometimes loosely referred to as pointing to some character,
 it in fact points between characters.
 If the charpos is zero, the previous character is the newline character
 separating the previous line from the mark's line.
 If the charpos is equal to the number of characters in the line, the next
 character is the newline character separating the current line from the
 next.
 If the mark's line has no previous line, a mark with charpos of zero has
 no previous character; if the mark's line has no next line, a mark with
 charpos equal to the length of the line has no next character.
\end_layout

\begin_layout Standard
This section discusses the very basic operations involving marks, but a
 lot of Hemlock programming is built on altering some text at a mark.
 For more extended uses of marks see Altering And Searching Text.
\end_layout

\begin_layout Subsubsection
Kinds of Marks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "MarksKindsOfMarks"

\end_inset

A mark may have one of two lifetimes: temporary or permanent.
 Permanent marks remain valid after arbitrary operations on the text; temporary
 marks do not.
 Temporary marks are used because less bookkeeping overhead is involved
 in their creation and use.
 If a temporary mark is used after the text it points to has been modified
 results will be unpredictable.
 Permanent marks continue to point between the same two characters regardless
 of insertions and deletions made before or after them.
\end_layout

\begin_layout Standard
There are two different kinds of permanent marks which differ only in their
 behavior when text is inserted at the position of the mark; text is inserted
 to the left of a left-inserting mark and to the right of right-inserting
 mark.
\end_layout

\begin_layout Subsubsection
Mark Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "MarksMarkFunctions"

\end_inset


\end_layout

\begin_layout Paragraph
markp
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_markp"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
markp
\end_layout

\end_inset

markp ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
markp mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns t if mark is a mark object, otherwise nil.
\end_layout

\begin_layout Paragraph
mark-line
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-line"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-line
\end_layout

\end_inset

mark-line ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
mark-line mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the line to which mark points.
\end_layout

\begin_layout Paragraph
mark-charpos
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-charpos"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-charpos
\end_layout

\end_inset

mark-charpos ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
mark-charpos mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the character position 
\emph on
in the line
\emph default
 of the character after mark, i.e.
 the number of characters before the mark in the mark's line.
\end_layout

\begin_layout Paragraph
mark-buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-buffer"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-buffer
\end_layout

\end_inset

mark-buffer ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
mark-buffer mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Returns the buffer containing this mark.
\end_layout

\begin_layout Paragraph
mark-absolute-position
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-absolute-position"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-absolute-position
\end_layout

\end_inset

mark-absolute-position ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
mark-absolute-position mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the character position 
\emph on
in the buffer
\emph default
 of the character after the mark, i.e.
 the number of characters before the mark in the mark's buffer.
\end_layout

\begin_layout Paragraph
mark-kind
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-kind"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-kind
\end_layout

\end_inset

mark-kind ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
mark-kind mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns one of 
\family typewriter
:right-inserting
\family default
, 
\family typewriter
:left-inserting
\family default
 or 
\family typewriter
:temporary
\family default
 depending on the mark's kind.
 A corresponding setf form changes the mark's kind.
\end_layout

\begin_layout Paragraph
previous-character
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_previous-character"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
previous-character
\end_layout

\end_inset

previous-character ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
previous-character mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Paragraph
next-character
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_next-character"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
next-character
\end_layout

\end_inset

next-character ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
next-character mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the character immediately before (after) the position
 of the mark, or nil if there is no previous (next) character.
 These characters may be set with setf when they exist; the setf methods
 for these forms signal errors when there is no previous or next character.
\end_layout

\begin_layout Subsubsection
Making Marks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "MarksMakingMarks"

\end_inset


\end_layout

\begin_layout Paragraph
mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark
\end_layout

\end_inset

mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
mark line charpos &optional kind 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a mark object that points to the charpos'th character
 of the line.
 Kind is the kind of mark to create, one of 
\family typewriter
:temporary
\family default
, 
\family typewriter
:left-inserting
\family default
, or 
\family typewriter
:right-inserting
\family default
.
 The default is :temporary.
\end_layout

\begin_layout Paragraph
copy-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_copy-mark"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
copy-mark
\end_layout

\end_inset

copy-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
copy-mark mark &optional kind 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a new mark pointing to the same position and of the
 same kind, or of kind kind if it is supplied.
\end_layout

\begin_layout Paragraph
delete-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_delete-mark"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete-mark
\end_layout

\end_inset

delete-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
delete-mark mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function deletes mark.
 Delete any permanent marks when you are finished using it.
\end_layout

\begin_layout Paragraph
with-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-mark"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-mark
\end_layout

\end_inset

with-mark ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
with-mark ((mark pos [kind])*) form* 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This macro binds to each variable mark a mark of kind kind, which defaults
 to 
\family typewriter
:temporary
\family default
, pointing to the same position as the markpos.
 On exit from the scope the mark is deleted.
 The value of the last form is the value returned.
\end_layout

\begin_layout Subsubsection
Moving Marks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "MarksMovingMarks"

\end_inset

These functions destructively modify marks to point to new positions.
 Other sections of this document describe mark moving routines specific
 to higher level text forms than characters and lines, such as words, sentences,
 paragraphs, Lisp forms, etc.
\end_layout

\begin_layout Paragraph
move-to-position
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_move-to-position"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
move-to-position
\end_layout

\end_inset

move-to-position ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
move-to-position mark charpos &optional line 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function changes the mark to point to the given character position
 on the line line.
 Line defaults to mark's line.
\end_layout

\begin_layout Paragraph
move-to-absolute-position
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_move-to-absolute-position"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
move-to-absolute-position
\end_layout

\end_inset

move-to-absolute-position ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
move-to-absolute-position mark position 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function changes the mark to point to the given character position
 in the buffer.
\end_layout

\begin_layout Paragraph
move-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_move-mark"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
move-mark
\end_layout

\end_inset

move-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
move-mark mark new-position 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function moves mark to the same position as the mark new-position and
 returns it.
\end_layout

\begin_layout Paragraph
line-start
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-start"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-start
\end_layout

\end_inset

line-start ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
line-start mark &optional line 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Paragraph
line-end
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-end"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-end
\end_layout

\end_inset

line-end ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
line-end mark &optional line 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function changes mark to point to the beginning or the end of line
 and returns it.
 Line defaults to mark's line.
\end_layout

\begin_layout Paragraph
buffer-start
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-start"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-start
\end_layout

\end_inset

buffer-start ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
buffer-start mark &optional buffer 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Paragraph
buffer-end
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-end"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-end
\end_layout

\end_inset

buffer-end ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
buffer-end mark &optional buffer 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
These functions change mark to point to the beginning or end of buffer,
 which defaults to the buffer mark currently points into.
 If buffer is unsupplied, then it is an error for mark to be disassociated
 from any buffer.
\end_layout

\begin_layout Paragraph
mark-before
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-before"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-before
\end_layout

\end_inset

mark-before ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
mark-before mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Paragraph
mark-after
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-after"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-after
\end_layout

\end_inset

mark-after ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
mark-after mark 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
These functions change mark to point one character before or after the current
 position.
 If there is no character before/after the current position, then they return
 nil and leave mark unmodified.
\end_layout

\begin_layout Paragraph
character-offset
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_character-offset"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
character-offset
\end_layout

\end_inset

character-offset ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
character-offset mark n 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function changes mark to point n characters after (n before if n is
 negative) the current position.
 If there are less than n characters after (before) the mark, then this
 returns nil and mark is unmodified.
\end_layout

\begin_layout Paragraph
line-offset
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-offset"

\end_inset

fline-offset
\begin_inset Index idx
status collapsed


\end_inset

line-offset ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 line-offset mark n &optional charpos 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function changes mark to point n lines after (n before if n is negative)
 the current position.
 The character position of the resulting mark is (min (line-length resulting-lin
e) (mark-charpos mark)) if charpos is unspecified, or (min (line-length
 resulting-line) charpos) if it is.
 As with character-offset, if there are not n lines then nil is returned
 and mark is not modified.
\end_layout

\begin_layout Subsection
Regions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Regions"

\end_inset

A 
\family typewriter
region
\family default
 is simply a pair of marks: a starting mark and an ending mark.
 The text in a region consists of the characters following the starting
 mark and preceding the ending mark (keep in mind that a mark points between
 characters on a line, not at them).
 By modifying the starting or ending mark in a region it is possible to
 produce regions with a start and end which are out of order or even in
 different buffers.
 The use of such regions is undefined and may result in arbitrarily bad
 behavior.
\end_layout

\begin_layout Subsubsection
Region Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "RegionsRegionFunctions"

\end_inset

\end_layout

\begin_layout Paragraph
region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
region
\end_layout

\end_inset

region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 region start end 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a region constructed from the marks start and end.
 It is an error for the marks to point to non-contiguous lines or for start
 to come after end.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
regionp
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_regionp"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
regionp
\end_layout

\end_inset

regionp ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 regionp region 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns t if region is a region object, otherwise nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
make-empty-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-empty-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-empty-region
\end_layout

\end_inset

make-empty-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 make-empty-region 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a region with start and end marks pointing to the
 start of one empty line.
 The start mark is a 
\family typewriter
:right-inserting
\family default
 mark, and the end is a 
\family typewriter
:left-inserting
\family default
 mark.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
copy-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_copy-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
copy-region
\end_layout

\end_inset

copy-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 copy-region region 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a region containing a copy of the text in the specified
 region.
 The resulting region is completely disjoint from region with respect to
 data references --- marks, lines, text, etc.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
region-to-string
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_region-to-string"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
region-to-string
\end_layout

\end_inset

region-to-string ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 region-to-string region 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
string-to-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_string-to-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
string-to-region
\end_layout

\end_inset

string-to-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 string-to-region string 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
These functions coerce regions to Lisp strings and vice versa.
 Within the string, lines are delimited by newline characters.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
line-to-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line-to-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line-to-region
\end_layout

\end_inset

line-to-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 line-to-region line 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a region containing all the characters on line.
 The first mark is 
\family typewriter
:right-inserting
\family default
 and the last is 
\family typewriter
:left-inserting
\family default
.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
region-start
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_region-start"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
region-start
\end_layout

\end_inset

region-start ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 region-start region 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
region-end
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_region-end"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
region-end
\end_layout

\end_inset

region-end ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 region-end region 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the start or end mark of region.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
region-bounds
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_region-bounds"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
region-bounds
\end_layout

\end_inset

region-bounds ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 region-bounds region 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns as multiple-values the starting and ending marks of
 region.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
set-region-bounds
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_set-region-bounds"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
set-region-bounds
\end_layout

\end_inset

set-region-bounds ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 set-region-bounds region start end 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function sets the start and end of region to start and end.
 It is an error for start to be after or in a different buffer from end.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
count-lines
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_count-lines"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
count-lines
\end_layout

\end_inset

count-lines ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 count-lines region 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the number of lines in the region, first and last
 lines inclusive.
 A newline is associated with the line it follows, thus a region containing
 some number of non-newline characters followed by one newline is one line,
 but if a newline were added at the beginning, it would be two lines.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
count-characters
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_count-characters"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
count-characters
\end_layout

\end_inset

count-characters ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 count-characters region 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the number of characters in a given region.
 This counts line breaks as one character.
\end_layout

\begin_layout Section
Buffers
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingBuffers"

\end_inset

A buffer is an object consisting of: 
\end_layout

\begin_layout Enumerate
 A name.
\end_layout

\begin_layout Enumerate
 A piece of text.
\end_layout

\begin_layout Enumerate
 The insertion point.
\end_layout

\begin_layout Enumerate
 An associated file (optional).
\end_layout

\begin_layout Enumerate
 A write protect flag.
\end_layout

\begin_layout Enumerate
 Some variables.
\end_layout

\begin_layout Enumerate
 Some key bindings.
\end_layout

\begin_layout Enumerate
 A collection of modes.
\end_layout

\begin_layout Enumerate
 A list of modeline fields (optional).
\end_layout

\begin_layout Standard
Because of the way Hemlock is currently integrated in Cocoa, all modifications
 to buffer contents must take place in the GUI thread.
 Hemlock commands always run in the GUI thread, so most of the time you
 do not need to worry about it.
 If you are running code in another thread that needs to modify a buffer,
 you should perform that action using 
\family typewriter
gui::execute-in-gui
\family default
 or 
\family typewriter
gui::queue-for-gui
\family default
.
\end_layout

\begin_layout Standard
There are no intrinsic limitations on examining buffers from any thread,
 however, Hemlock currently does no locking, so you risk seeing the buffer
 in an inconsistent state if you look at it outside the GUI thread.
\end_layout

\begin_layout Subsection
The Current Buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CurrentBuffer"

\end_inset

Hemlock has the concept of the "current buffer".
 The current buffer is defined during Hemlock commands as the buffer of
 the hemlock view that received the key events that invoked the command.
 Many hemlock function operate on the current buffer rather than taking
 an explicit buffer argument.
 In effect, the current buffer is an implicit argument to many text manipulation
 functions.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-buffer"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-buffer
\end_layout

\end_inset

current-buffer ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the current buffer, which, during command execution, is the buffer
 that is the target of the command.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-point
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-point"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-point
\end_layout

\end_inset

current-point ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-point 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the buffer-point of the current buffer .
 This is such a common idiom in commands that it is defined despite its
 trivial implementation.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-point-collapsing-selection
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-point-collapsing-selection"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-point-collapsing-selection
\end_layout

\end_inset

current-point-collapsing-selection ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-point-collapsing-selection 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the buffer-point of the current buffer, after first
 deactivating any active region.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-point-extending-selection
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-point-extending-selection"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-point-extending-selection
\end_layout

\end_inset

current-point-extending-selection ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-point-extending-selection 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the buffer-point of the current buffer, after first
 making sure there is an active region - if the region is already active,
 keeps it active, otherwise it establishes a new (empty) region at point.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-point-for-insertion
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-point-for-insertion"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-point-for-insertion
\end_layout

\end_inset

current-point-for-insertion ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-point-for-insertion 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function checks to see if the current buffer can be modified at its
 current point, and errors if not.
 Otherwise, it deletes the current selection if any, and returns the current
 point.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-point-for-deletion
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-point-for-deletion"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-point-for-deletion
\end_layout

\end_inset

current-point-for-deletion ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-point-for-deletion 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function checks to see if the current buffer can be modified at its
 current point and errors if not.
 Otherwise, if there is a section in the current buffer, it deletes it and
 returns NIL.
 If there is no selection, it returns the current point.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-point-unless-selection
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-point-unless-selection"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-point-unless-selection
\end_layout

\end_inset

current-point-unless-selection ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-point-unless-selection 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function checks to see if the current buffer can be modified at its
 current point and errors if not.
 Otherwise, if there's a selection in the current buffer, returns NIL.
 If there is no selection, it returns the current point.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-mark"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-mark
\end_layout

\end_inset

current-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the top of the current buffer's mark stack.
 There always is at least one mark at the beginning of the buffer's region,
 and all marks returned are right-inserting.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
pop-buffer-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_pop-buffer-mark"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pop-buffer-mark
\end_layout

\end_inset

pop-buffer-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 pop-buffer-mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function pops the current buffer's mark stack, returning the mark.
 If the stack becomes empty, this pushes a new mark on the stack pointing
 to the buffer's start.
 This always deactivates the current region (see Active Regions).
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
push-buffer-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_push-buffer-mark"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
push-buffer-mark
\end_layout

\end_inset

push-buffer-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 push-buffer-mark mark &optional activate-region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function pushes mark into the current buffer's mark stack, ensuring
 that the mark is right-inserting.
 If mark does not point into the current buffer, this signals an error.
 Optionally, the current region is made active, but this never deactivates
 the current region (see Active Regions).
 Mark is returned.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
push-new-buffer-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_push-new-buffer-mark"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
push-new-buffer-mark
\end_layout

\end_inset

push-new-buffer-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 push-new-buffer-mark mark &optional activate-region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function pushes a new mark onto the mark stack, at the position of
 
\family typewriter
mark
\family default
.
 It's equivalent to calling 
\family typewriter
push-buffer-mark
\family default
 on 
\family typewriter
(copy-mark mark)
\family default
.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
all-buffers
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_all-buffers"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all-buffers
\end_layout

\end_inset

all-buffers ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 all-buffers 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns a list of all the buffer objects made with make-buffer.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
*buffer-names*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_buffer-names"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*buffer-names*
\end_layout

\end_inset

*buffer-names* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 *buffer-names* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This variable holds a string-table mapping the name of a buffer to the correspon
ding buffer object.
\end_layout

\begin_layout Subsection
Buffer Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "BufferFunctions"

\end_inset

BufferFunctions
\end_layout

\begin_layout Subsubsection
make-buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-buffer"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-buffer
\end_layout

\end_inset

make-buffer ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 make-buffer name &key :modes :modeline-fields :delete-hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Default Modeline Fields
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_default_modeline_fields"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Default Modeline Fields
\end_layout

\end_inset

Default Modeline Fields ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Default Modeline Fields 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Make Buffer Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_make_buffer_hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Make Buffer Hook
\end_layout

\end_inset

Make Buffer Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Make Buffer Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
make-buffer creates and returns a buffer with the given name.
 If a buffer named name already exists, nil is returned.
 Modes is a list of modes which should be in effect in the buffer, major
 mode first, followed by any minor modes.
 If this is omitted then the buffer is created with the list of modes contained
 in Default Modes.
 Modeline-fields is a list of modeline-field objects (see the Modelines
 section) which may be nil.
 delete-hook is a list of delete hooks specific to this buffer, and delete-buffe
r invokes these along with Delete Buffer Hook.
\end_layout

\begin_layout Standard
Buffers created with make-buffer are entered into the list (all-buffers),
 and their names are inserted into the string-table *buffer-names*.
 When a buffer is created the hook Make Buffer Hook is invoked with the
 new buffer.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
bufferp
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_bufferp"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bufferp
\end_layout

\end_inset

bufferp ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 bufferp buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns t if buffer is a buffer object, otherwise nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-name
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-name"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-name
\end_layout

\end_inset

buffer-name ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-name buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Buffer Name Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_buffer_name_hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Buffer Name Hook
\end_layout

\end_inset

Buffer Name Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Buffer Name Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
buffer-name returns the name, which is a string, of the given buffer.
 The corresponding setf method invokes Buffer Name Hook with buffer and
 the new name and then sets the buffer's name.
 When the user supplies a name for which a buffer already exists, the setf
 method signals an error.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-region
\end_layout

\end_inset

buffer-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-region buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the buffer's region.
 Note this is the region that contains all the text in a buffer, as opposed
 to the current-region.
\end_layout

\begin_layout Standard
This can be set with setf to replace the buffer's text.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-pathname
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-pathname"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-pathname
\end_layout

\end_inset

buffer-pathname ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-pathname buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Buffer Pathname Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_buffer_pathname_hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Buffer Pathname Hook
\end_layout

\end_inset

Buffer Pathname Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Buffer Pathname Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
buffer-pathname returns the pathname of the file associated with the given
 buffer, or nil if it has no associated file.
 This is the truename of the file as of the most recent time it was read
 or written.
 There is a setf form to change the pathname.
 When the pathname is changed the hook Buffer Pathname Hook is invoked with
 the buffer and new value.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-write-date
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-write-date"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-write-date
\end_layout

\end_inset

buffer-write-date ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-write-date buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the write date for the file associated with the buffer in universal
 time format.
 When this the buffer-pathname is set, use setf to set this to the corresponding
 write date, or to nil if the date is unknown or there is no file.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-point
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-point"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-point
\end_layout

\end_inset

buffer-point ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-point buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the mark which is the current location within buffer.
 To move the point, use move-mark or move-to-position
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-mark"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-mark
\end_layout

\end_inset

buffer-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-mark buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the top of buffer's mark stack.
 There always is at least one mark at the beginning of buffer's region,
 and all marks returned are right-inserting.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-start-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-start-mark"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-start-mark
\end_layout

\end_inset

buffer-start-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-start-mark buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-end-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-end-mark"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-end-mark
\end_layout

\end_inset

buffer-end-mark ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-end-mark buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These functions return the start and end marks of buffer's region:
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
(buffer-start-mark buffer ) &lt;==&gt; (region-start (buffer-region buffer))
\end_layout

\begin_layout Standard
and
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
(buffer-end-mark buffer ) &lt;==&gt; (region-end (buffer-region buffer))
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-writable
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-writable"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-writable
\end_layout

\end_inset

buffer-writable ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-writable buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Buffer Writable Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_buffer_writable_hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Buffer Writable Hook
\end_layout

\end_inset

Buffer Writable Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Buffer Writable Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if you can modify the buffer, nil if you cannot.
 If a buffer is not writable, then any attempt to alter text in the buffer
 results in an error.
 There is a setf method to change this value.
 The setf method invokes the functions in Buffer Writable Hook on the buffer
 and new value before storing the new value.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-modified
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-modified"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-modified
\end_layout

\end_inset

buffer-modified ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-modified buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Buffer Modified Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_buffer_modified_hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Buffer Modified Hook
\end_layout

\end_inset

Buffer Modified Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Buffer Modified Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
buffer-modified returns t if the buffer has been modified, nil if it hasn't.
 This attribute is set whenever a text-altering operation is performed on
 a buffer.
 There is a setf method to change this value.
 The setf method invokes the functions in Buffer Modified Hook with the
 buffer whenever the value of the modified flag changes.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
with-writable-buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-writable-buffer"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-writable-buffer
\end_layout

\end_inset

with-writable-buffer ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 with-writable-buffer (buffer) &body body 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This macro executes forms with buffer's writable status set.
 After forms execute, this resets the buffer's writable and modified status.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-signature
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-signature"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-signature
\end_layout

\end_inset

buffer-signature ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-signature buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns an arbitrary number which reflects the buffer's current
 signature.
 The result is eql to a previous result if and only if the buffer has not
 been modified between the calls.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-variables
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-variables"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-variables
\end_layout

\end_inset

buffer-variables ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-variables buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns a string-table containing the names of the buffer's
 local variables.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-modes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-modes"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-modes
\end_layout

\end_inset

buffer-modes ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-modes buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the list of the names of the modes active in buffer.
 The major mode is first, followed by any minor modes.
 See the Modes chapter.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-delete-hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-delete-hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-delete-hook
\end_layout

\end_inset

buffer-delete-hook ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-delete-hook buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the list of buffer specific functions delete-buffer
 invokes when deleting a buffer .
 This is setf-able.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
delete-buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_delete-buffer"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete-buffer
\end_layout

\end_inset

delete-buffer ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 delete-buffer buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Delete Buffer Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_delete_buffer_hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Delete Buffer Hook
\end_layout

\end_inset

Delete Buffer Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Delete Buffer Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
delete-buffer removes buffer from (all-buffers) and its name from *buffer-names*.
 Before buffer is deleted, this invokes the functions on buffer returned
 by buffer-delete-hook and those found in Delete Buffer Hook.
 If buffer is the current-buffer, or if it is displayed in any view, then
 this function signals an error.
\end_layout

\begin_layout Subsection
Modelines
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Modelines"

\end_inset

A Buffer may specify a modeline, a line of text which is displayed
 across the bottom of a view to indicate status information.
 Modelines are described by a list of modeline-field objects which have
 individual update functions and are optionally fixed-width.
 These have an eql name for convenience in referencing and updating, but
 the name must be unique for all created modeline-field objects.
 All modeline-field functions must take a buffer as an argument and return
 a string.
 When displaying a modeline-field with a specified width, the result of
 the update function is either truncated or padded on the right to meet
 the constraint.
\end_layout

\begin_layout Standard
Whenever one of the following changes occurs, all of a buffer's modeline
 fields are updated: 
\end_layout

\begin_layout Itemize
 A buffer's major mode is set.
\end_layout

\begin_layout Itemize
 One of a buffer's minor modes is turned on or off.
\end_layout

\begin_layout Itemize
 A buffer is renamed.
\end_layout

\begin_layout Itemize
 A buffer's pathname changes.
\end_layout

\begin_layout Itemize
 A buffer's modified status changes.
\end_layout

\begin_layout Standard
The policy is that whenever one of these changes occurs, it is guaranteed
 that the modeline will be updated before the next trip through redisplay.
 Furthermore, since the system cannot know what modeline-field objects the
 user has added whose update functions rely on these values, or how he has
 changed Default Modeline Fields, we must update all the fields.
\end_layout

\begin_layout Standard
The user should note that modelines can be updated at any time, so update
 functions should be careful to avoid needless delays (for example, waiting
 for a local area network to determine information).
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
make-modeline-field
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-modeline-field"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-modeline-field
\end_layout

\end_inset

make-modeline-field ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 make-modeline-field &key :name :width :function 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns a modeline-field object with name, width, and function.
 Width defaults to nil meaning that the field is variable width; otherwise,
 the programmer must supply this as a positive integer.
 Function must take a buffer as an arguments and return a string.
 If name already names a modeline-field object, then this signals an error.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
modeline-field-name
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_modeline-field-name"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modeline-field-name
\end_layout

\end_inset

modeline-field-name ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 modeline-field-name modeline-field 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the name field of a modeline-field object.
 If this is set with setf, and the new name already names a modeline-field,
 then the setf method signals an error.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
modeline-field-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_modeline-field-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modeline-field-p
\end_layout

\end_inset

modeline-field-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 modeline-field-p modeline-field 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if its argument is a modeline-field object, nil
 otherwise.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
modeline-field
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_modeline-field"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modeline-field
\end_layout

\end_inset

modeline-field ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 modeline-field name 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This returns the modeline-field object named name.
 If none exists, this returns nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
modeline-field-function
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_modeline-field-function"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modeline-field-function
\end_layout

\end_inset

modeline-field-function ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 modeline-field-function modeline-field 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the function called when updating the modeline-field.
 When this is set with setf, the setf method updates modeline-field for
 all views on all buffers that contain the given field, so the next trip
 through redisplay will reflect the change.
 All modeline-field functions must take a buffer as an argument and return
 a string.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
modeline-field-width
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_modeline-field-width"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
modeline-field-width
\end_layout

\end_inset

modeline-field-width ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 modeline-field-width modeline-field 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the width to which modeline-field is constrained, or nil indicating
 that it is variable width.
 When this is set with setf, the setf method updates all modeline-fields
 for all views on all buffers that contain the given field, so the next
 trip through redisplay will reflect the change.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-modeline-fields
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-modeline-fields"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-modeline-fields
\end_layout

\end_inset

buffer-modeline-fields ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-modeline-fields buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns a copy of the list of buffer's modeline-field objects.
 This list can be destructively modified without affecting display of buffer's
 modeline, but modifying any particular field's components (for example,
 width or function) causes the changes to be reflected the next trip through
 redisplay in every modeline display that uses the modified modeline-field.
 When this is set with setf, the setf method method updates all modeline-fields
 on all views on the buffer, so next trip through the redisplay will reflect
 the change.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-modeline-field-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-modeline-field-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-modeline-field-p
\end_layout

\end_inset

buffer-modeline-field-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-modeline-field-p buffer field 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
If field, a modeline-field or the name of one, is in buffer's list of modeline-f
ield objects, it is returned; otherwise, this returns nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
update-modeline-fields
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_update-modeline-fields"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
update-modeline-fields
\end_layout

\end_inset

update-modeline-fields ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 update-modeline-fields buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Arranges so that the modeline display is updated with the latest values
 at the end of current command.
\end_layout

\begin_layout Section
Altering and Searching Text
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingAlteringAndSearchingText"

\end_inset

A note on marks and text alteration:
 :temporary marks are invalid after any change has been made to the buffer
 the mark points to; it is an error to use a temporary mark after such a
 change has been made.
\end_layout

\begin_layout Standard
If text is deleted which has permanent marks pointing into it then they
 are left pointing to the position where the text was.
\end_layout

\begin_layout Subsection
Altering Text
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "AlteringText"

\end_inset

\end_layout

\begin_layout Subsubsection
insert-character
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_insert-character"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
insert-character
\end_layout

\end_inset

insert-character ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 insert-character mark character 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
insert-string
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_insert-string"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
insert-string
\end_layout

\end_inset

insert-string ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 insert-string mark string 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
insert-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_insert-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
insert-region
\end_layout

\end_inset

insert-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 insert-region mark region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Inserts character, string or region at mark.
 
\family typewriter
insert-character
\family default
 signals an error if character is not 
\family typewriter
string-char-p
\family default
.
 If string or region is empty, and mark is in some buffer, then Hemlock
 leaves buffer-modified of mark's buffer unaffected.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
ninsert-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_ninsert-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ninsert-region
\end_layout

\end_inset

ninsert-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 ninsert-region mark region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Like 
\family typewriter
insert-region
\family default
, inserts the region at the mark's position, destroying the source region.
 This must be used with caution, since if anyone else can refer to the source
 region bad things will happen.
 In particular, one should make sure the region is not linked into any existing
 buffer.
 If region is empty, and mark is in some buffer, then Hemlock leaves buffer-modi
fied of mark's buffer unaffected.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
delete-characters
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_delete-characters"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete-characters
\end_layout

\end_inset

delete-characters ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 delete-characters mark n 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This deletes n characters after the mark (or -n before if n is negative).
 If n characters after (or -n before) the mark do not exist, then this returns
 nil; otherwise, it returns t.
 If n is zero, and mark is in some buffer, then Hemlock leaves buffer-modified
 of mark's buffer unaffected.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
delete-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_delete-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete-region
\end_layout

\end_inset

delete-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 delete-region region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This deletes region.
 This is faster than delete-and-save-region (below) because no lines are
 copied.
 If region is empty and contained in some buffer's buffer-region, then Hemlock
 leaves buffer-modified of the buffer unaffected.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
delete-and-save-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_delete-and-save-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete-and-save-region
\end_layout

\end_inset

delete-and-save-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 delete-and-save-region region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This deletes region and returns a region containing the original region's
 text.
 If region is empty and contained in some buffer's buffer-region, then Hemlock
 leaves buffer-modified of the buffer unaffected.
 In this case, this returns a distinct empty region.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
filter-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_filter-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
filter-region
\end_layout

\end_inset

filter-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 filter-region function region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Destructively modifies region by replacing the text of each line with the
 result of the application of function to a string containing that text.
 Function must obey the following restrictions: 
\end_layout

\begin_layout Enumerate
 The argument may not be destructively modified.
\end_layout

\begin_layout Enumerate
 The return value may not contain newline characters.
\end_layout

\begin_layout Enumerate
 The return value may not be destructively modified after it is returned
 from function.
\end_layout

\begin_layout Standard
The strings are passed in order.
\end_layout

\begin_layout Standard
Using this function, a region could be uppercased by doing: 
\family typewriter
(filter-region #'string-upcase region)
\end_layout

\begin_layout Subsection
Text Predicates
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "TextPredicates"

\end_inset

\end_layout

\begin_layout Subsubsection
start-line-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_start-line-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
start-line-p
\end_layout

\end_inset

start-line-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 start-line-p mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns t if the mark points before the first character in a line, nil otherwise.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
end-line-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_end-line-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
end-line-p
\end_layout

\end_inset

end-line-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 end-line-p mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns t if the mark points after the last character in a line and before
 the newline, nil otherwise.
\end_layout

\begin_layout Standard

\family typewriter
empty-line-p
\family default
 mark [Function] Return t if the line which mark points to contains no character
s.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
blank-line-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_blank-line-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
blank-line-p
\end_layout

\end_inset

blank-line-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 blank-line-p line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns t if line contains only characters with a Whitespace attribute of
 1.
 See the Character Attributes chapter for discussion of character attributes.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
blank-before-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_blank-before-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
blank-before-p
\end_layout

\end_inset

blank-before-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 blank-before-p mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
blank-after-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_blank-after-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
blank-after-p
\end_layout

\end_inset

blank-after-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 blank-after-p mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These functions test if all the characters preceding or following mark on
 the line it is on have a Whitespace attribute of 1.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
same-line-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_same-line-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
same-line-p
\end_layout

\end_inset

same-line-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 same-line-p mark1 mark2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns t if mark1 and mark2 point to the same line, or nil otherwise; That
 is,
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
(same-line-p a b) &lt;==&gt; (eq (mark-line a) (mark-line b))
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mark<
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark_lt"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark<
\end_layout

\end_inset

mark< ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mark< mark1 mark2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mark<=
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark_lt__eq"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark<=
\end_layout

\end_inset

mark<= ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mark<= mark1 mark2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mark=
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark_eq"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark=
\end_layout

\end_inset

mark= ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mark= mark1 mark2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mark/=
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark__eq"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark/=
\end_layout

\end_inset

mark/= ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mark/= mark1 mark2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mark>=
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark_gt__eq"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark>=
\end_layout

\end_inset

mark>= ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mark>= mark1 mark2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mark>
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark_gt"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark>
\end_layout

\end_inset

mark> ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mark> mark1 mark2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These predicates test the relative ordering of two marks in a piece of text,
 that is a mark is mark> another if it points to a position after it.
 An error is signalled if the marks do not point into the same buffer, except
 that for such marks mark= is always false and mark/= is always true.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
line<
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line_lt"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line<
\end_layout

\end_inset

line< ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 line< line1 line2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
line<=
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line_lt__eq"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line<=
\end_layout

\end_inset

line<= ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 line<= line1 line2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
line>=
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line_gt__eq"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line>=
\end_layout

\end_inset

line>= ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 line>= line1 line2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
line>
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_line_gt"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
line>
\end_layout

\end_inset

line> ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 line> line1 line2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These predicates test the ordering of line1 and line2.
 An error is signalled if the lines are not in the same buffer.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
lines-related
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_lines-related"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
lines-related
\end_layout

\end_inset

lines-related ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 lines-related line1 line2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if line1 and line2 are in the same buffer, nil nil
 otherwise.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
first-line-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_first-line-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
first-line-p
\end_layout

\end_inset

first-line-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 first-line-p mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
last-line-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_last-line-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
last-line-p
\end_layout

\end_inset

last-line-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 last-line-p mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\family typewriter
first-line-p
\family default
 returns t if there is no line before the line mark is on, and nil otherwise.
 
\family typewriter
Last-line-p
\family default
 similarly tests tests whether there is no line after mark.
\end_layout

\begin_layout Subsection
Kill Ring
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "KillRing"

\end_inset

There is a global ring of regions deleted from buffers.
 Some commands save affected regions on the kill ring before performing
 modifications.
 You should consider making the command undoable, but this is a simple way
 of achieving a less satisfactory means for the user to recover.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
kill-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_kill-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
kill-region
\end_layout

\end_inset

kill-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 kill-region region current-type 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This kills region saving it in the kill ring.
 Current-type is either :kill-forward or :kill-backward.
 When the last-command-type is one of these, this adds region to the beginning
 or end, respectively, of the top of the kill ring.
 The result of calling this is undoable using the command Undo (see the
 Hemlock User's Manual).
 This sets last-command-type to current-type, and it interacts with kill-charact
ers.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
kill-characters
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_kill-characters"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
kill-characters
\end_layout

\end_inset

kill-characters ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 kill-characters mark count 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Character Deletion Threshold
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_character_deletion_threshold"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Character Deletion Threshold
\end_layout

\end_inset

Character Deletion Threshold ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Character Deletion Threshold (initial value 5) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
kill-characters kills count characters after mark if count is positive,
 otherwise before mark if count is negative.
 When count is greater than or equal to Character Deletion Threshold, the
 killed characters are saved on the kill ring.
 This may be called multiple times contiguously (that is, without last-command-t
ype being set) to accumulate an effective count for purposes of comparison
 with the threshold.
\end_layout

\begin_layout Standard
This sets last-command-type, and it interacts with kill-region.
 When this adds a new region to the kill ring, it sets last-command-type
 to :kill-forward (if count is positive) or :kill-backward (if count is
 negative).
 When last-command-type is :kill-forward or :kill-backward, this adds the
 killed characters to the beginning (if count is negative) or the end (if
 count is positive) of the top of the kill ring, and it sets last-command-type
 as if it added a new region to the kill ring.
 When the kill ring is unaffected, this sets last-command-type to :char-kill-for
ward or :char-kill-backward depending on whether count is positive or negative,
 respectively.
\end_layout

\begin_layout Standard
This returns mark if it deletes characters.
 If there are not count characters in the appropriate direction, this returns
 nil.
\end_layout

\begin_layout Subsection
Active Regions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ActiveRegions"

\end_inset

Every buffer has a mark stack and a mark known as the point
 where most text altering nominally occurs.
 Between the top of the mark stack, the current-mark, and the current-buffer's
 point, the current-point, is what is known as the current-region .
 Certain commands signal errors when the user tries to operate on the current-re
gion without its having been activated.
 If the user turns off this feature, then the current-region is effectively
 always active.
\end_layout

\begin_layout Standard
When writing a command that marks a region of text, the programmer should
 make sure to activate the region.
 This typically occurs naturally from the primitives that you use to mark
 regions, but sometimes you must explicitly activate the region.
 These commands should be written this way, so they do not require the user
 to separately mark an area and then activate it.
 Commands that modify regions do not have to worry about deactivating the
 region since modifying a buffer automatically deactivates the region.
 Commands that insert text often activate the region ephemerally; that is,
 the region is active for the immediately following command, allowing the
 user wants to delete the region inserted, fill it, or whatever.
\end_layout

\begin_layout Standard
Once a marking command makes the region active, it remains active until:
 
\end_layout

\begin_layout Itemize
 a command uses the region,
\end_layout

\begin_layout Itemize
 a command modifies the buffer,
\end_layout

\begin_layout Itemize
 a command changes the current window or buffer,
\end_layout

\begin_layout Itemize
 a command signals an editor-error,
\end_layout

\begin_layout Itemize
 or the user types C-g.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Active Regions Enabled
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_active_regions_enabled"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Active Regions Enabled
\end_layout

\end_inset

Active Regions Enabled ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Active Regions Enabled (initial value t) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
When this variable is non-nil, some primitives signal an editor-error if
 the region is not active.
 This may be set to nil for more traditional Emacs region semantics.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
*ephemerally-active-command-types*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_ephemerally-active-command-types"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*ephemerally-active-command-types*
\end_layout

\end_inset

*ephemerally-active-command-types* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 *ephemerally-active-command-types* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This is a list of command types, and its initial value is the list of :ephemeral
ly-active and :unkill.
 When the previous command's type is one of these, the current-region is
 active for the currently executing command only, regardless of whether
 it does something to deactivate the region.
 However, the current command may activate the region for future commands.
 :ephemerally-active is a default command type that may be used to ephemerally
 activate the region, and:unkill is the type used by two commands, Un-kill
 and Rotate Kill Ring (what users typically think of as C-y and M-y).
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
activate-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_activate-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
activate-region
\end_layout

\end_inset

activate-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 activate-region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This makes the current-region active.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
deactivate-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_deactivate-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
deactivate-region
\end_layout

\end_inset

deactivate-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 deactivate-region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
After invoking this the current-region is no longer active.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
region-active-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_region-active-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
region-active-p
\end_layout

\end_inset

region-active-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 region-active-p 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns whether the current-region is active, including ephemerally.
 This ignores Active Regions Enabled.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
check-region-active
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_check-region-active"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
check-region-active
\end_layout

\end_inset

check-region-active ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 check-region-active 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This signals an editor-error when active regions are enabled, and the current-re
gion is not active.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-region
\end_layout

\end_inset

current-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-region &optional error-if-not-active deactivate-region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This returns a region formed with current-mark and current-point, optionally
 signaling an editor-error if the current region is not active.
 Error-if-not-active defaults to t.
 Each call returns a distinct region object.
 Depending on deactivate-region (defaults to t), fetching the current region
 deactivates it.
 Hemlock primitives are free to modify text regardless of whether the region
 is active, so a command that checks for this can deactivate the region
 whenever it is convenient.
\end_layout

\begin_layout Subsection
Searching and Replacing
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "SearchingAndReplacing"

\end_inset

Before using any of these functions to do a character
 search, look at character attributes.
 They provide a facility similar to the syntax table in real Emacs.
 Syntax tables are a powerful, general, and efficient mechanism for assigning
 meanings to characters in various modes.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
new-search-pattern
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_new-search-pattern"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
new-search-pattern
\end_layout

\end_inset

new-search-pattern ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 new-search-pattern kind direction pattern &optional result-search-pattern
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns a search-pattern object which can be given to the find-pattern and
 replace-pattern functions.
 A search-pattern is a specification of a particular sort of search to do.
 direction is either :forward or :backward, indicating the direction to
 search in.
 kind specifies the kind of search pattern to make, and pattern is a thing
 which specifies what to search for.
 The interpretation of pattern depends on the kind of pattern being made.
 Currently defined kinds of search pattern are:
\end_layout

\begin_layout Description
:string-insensitive Does a case-insensitive string search for pattern 
\end_layout

\begin_layout Description
:string-sensitive Does a case-sensitive string search for pattern.
 
\end_layout

\begin_layout Description
:character Finds an occurrence of the character pattern.
 This is case sensitive.
 
\end_layout

\begin_layout Description
:not-character Find a character which is not the character pattern.
 
\end_layout

\begin_layout Description
:test Finds a character which satisfies the function pattern.
 This function may not be applied an any particular fashion, so it should
 depend only on what its argument is, and should have no side-effects.
 
\end_layout

\begin_layout Description
:test-not Similar to :test, except it finds a character that fails the test.
 
\end_layout

\begin_layout Description
:any Finds a character that is in the string pattern.
 
\end_layout

\begin_layout Description
:not-any Finds a character that is not in the string pattern.
 
\end_layout

\begin_layout Standard
\noindent
result-search-pattern, if supplied, is a search-pattern to destructively
 modify to produce the new pattern.
 Where reasonable this should be supplied, since some kinds of search patterns
 may involve large data structures.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
search-pattern-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_search-pattern-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
search-pattern-p
\end_layout

\end_inset

search-pattern-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 search-pattern-p search-pattern 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns t if search-pattern is a search-pattern object, otherwise nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
get-search-pattern
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_get-search-pattern"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get-search-pattern
\end_layout

\end_inset

get-search-pattern ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 get-search-pattern string direction 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
get-search-pattern interfaces to a default search string and pattern that
 search and replacing commands can use.
 These commands then share a default when prompting for what to search or
 replace, and save on consing a search pattern each time they execute.
 This uses Default Search Kind (see the Hemlock User's Manual) when updating
 the pattern object.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
*last-search-string*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_last-search-string"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*last-search-string*
\end_layout

\end_inset

*last-search-string* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 *last-search-string* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the last string searched for, useful when prompting.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
find-pattern
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_find-pattern"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
find-pattern
\end_layout

\end_inset

find-pattern ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 find-pattern mark search-pattern 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Find the next match of search-pattern starting at mark.
 If a match is found then mark is altered to point before the matched text
 and the number of characters matched is returned.
 If no match is found then nil is returned and mark is not modified.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
replace-pattern
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_replace-pattern"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
replace-pattern
\end_layout

\end_inset

replace-pattern ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 replace-pattern mark search-pattern replacement &optional n 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Replace n matches of search-pattern with the string replacement starting
 at mark.
 If n is nil (the default) then replace all matches.
 A mark pointing before the last replacement done is returned.
\end_layout

\begin_layout Section
The Current Environment
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingTheCurrentEnvironment"

\end_inset


\end_layout

\begin_layout Subsection
Different Scopes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "DifferentScopes"

\end_inset

In Hemlock the "current" values of variables, key bindings
 and character-attributes depend on the current buffer and the modes active
 in it.
 There are three possible scopes for Hemlock values:
\end_layout

\begin_layout Description
buffer local The value is present only if the buffer it is local to is the
 current buffer.
 
\end_layout

\begin_layout Description
mode local The value is present only when the mode it is local to is active
 in the current buffer.
 
\end_layout

\begin_layout Description
global The value is always present unless shadowed by a buffer or mode local
 value.
 
\end_layout

\begin_layout Subsection
Shadowing
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "Shadowing"

\end_inset

It is possible that there are different values for the same thing
 in in different scopes.
 For example, there be might a global binding for a given variable and also
 a local binding in the current buffer.
 Whenever there is a conflict, shadowing occurs, permitting only one of
 the values to be visible in the current environment.
\end_layout

\begin_layout Standard
The process of resolving such a conflict can be described as a search down
 a list of places where the value might be defined, returning the first
 value found.
 The order for the search is as follows: 
\end_layout

\begin_layout Enumerate
 Local values in the current buffer.
\end_layout

\begin_layout Enumerate
 Mode local values in the minor modes of the current buffer, in order from
 the highest precedence mode to the lowest precedence mode.
 The order of minor modes with equal precedences is undefined.
\end_layout

\begin_layout Enumerate
 Mode local values in the current buffer's major mode.
\end_layout

\begin_layout Enumerate
 Global values.
\end_layout

\begin_layout Section
Hemlock Variables
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingHemlockVariables"

\end_inset

Hemlock implements a system of variables
 separate from normal Lisp variables for the following reasons: 
\end_layout

\begin_layout Enumerate
 Hemlock has different scoping rules which are useful in an editor.
 Hemlock variables can be local to a buffer or a mode.
\end_layout

\begin_layout Enumerate
 Hemlock variables have hooks, lists of functions called when someone sets
 the variable.
 See variable-value for the arguments Hemlock passes to these hook functions.
\end_layout

\begin_layout Enumerate
 There is a database of variable names and documentation which makes it
 easier to find out what variables exist and what their values mean.
\end_layout

\begin_layout Subsection
Variable Names
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "VariableNames"

\end_inset

To the user, a variable name is a case insensitive string.
 This string is referred to as the string name of the variable.
 A string name is conventionally composed of words separated by spaces.
\end_layout

\begin_layout Standard
In Lisp code a variable name is a symbol.
 The name of this symbol is created by replacing any spaces in the string
 name with hyphens.
 This symbol name is always interned in the Hemlock package.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
*global-variable-names*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_global-variable-names"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*global-variable-names*
\end_layout

\end_inset

*global-variable-names* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 *global-variable-names* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This variable holds a string-table of the names of all the global Hemlock
 variables.
 The value of each entry is the symbol name of the variable.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
current-variable-tables
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-variable-tables"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-variable-tables
\end_layout

\end_inset

current-variable-tables ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-variable-tables 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns a list of variable tables currently established, globally,
 in the current buffer, and by the modes of the current-buffer.
 This list is suitable for use with prompt-for-variable.
\end_layout

\begin_layout Subsection
Variable Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "VariableFunctions"

\end_inset

In the following descriptions name is the symbol name of
 the variable.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
defhvar
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_defhvar"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
defhvar
\end_layout

\end_inset

defhvar ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 defhvar string-name documentation &key :mode :buffer :hooks :value 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function defines a Hemlock variable.
 Functions that take a variable name signal an error when the variable is
 undefined.
\end_layout

\begin_layout Description
string-name The string name of the variable to define.
 
\end_layout

\begin_layout Description
documentation The documentation string for the variable.
 
\end_layout

\begin_layout Description
:mode, :buffer If buffer is supplied, the variable is local to that buffer.
 If mode is supplied, it is local to that mode.
 If neither is supplied, it is global.
 
\end_layout

\begin_layout Description
:value This is the initial value for the variable, which defaults to nil.
 
\end_layout

\begin_layout Description
:hooks This is the initial list of functions to call when someone sets the
 variable's value.
 These functions execute before Hemlock establishes the new value.
 See variable-value for the arguments passed to the hook functions.
 
\end_layout

\begin_layout Standard
\noindent
If a variable with the same name already exists in the same place, then
 defhvar sets its hooks and value from hooks and value if the user supplies
 these keywords.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
variable-value
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_variable-value"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
variable-value
\end_layout

\end_inset

variable-value ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 variable-value name &optional kind where 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the value of a Hemlock variable in some place.
 The following values for kind are defined:
\end_layout

\begin_layout Description
:current Return the value present in the current environment, taking into
 consideration any mode or buffer local variables.
 This is the default.
 
\end_layout

\begin_layout Description
:global Return the global value.
 
\end_layout

\begin_layout Description
:mode Return the value in the mode named where.
 
\end_layout

\begin_layout Description
:buffer Return the value in the buffer where.
 
\end_layout

\begin_layout Standard
\noindent
When set with setf, Hemlock sets the value of the specified variable and
 invokes the functions in its hook list with name, kind, where, and the
 new value.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
variable-documentation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_variable-documentation"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
variable-documentation
\end_layout

\end_inset

variable-documentation ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 variable-documentation name &optional kind where 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
variable-hooks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_variable-hooks"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
variable-hooks
\end_layout

\end_inset

variable-hooks ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 variable-hooks name &optional kind where 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
variable-name
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_variable-name"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
variable-name
\end_layout

\end_inset

variable-name ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 variable-name name &optional kind where 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These function return the documentation, hooks and string name of a Hemlock
 variable.
 The kind and where arguments are the same as for variable-value.
 The documentation and hook list may be set using setf.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
string-to-variable
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_string-to-variable"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
string-to-variable
\end_layout

\end_inset

string-to-variable ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 string-to-variable string 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function converts a string into the corresponding variable symbol name.
 String need not be the name of an actual Hemlock variable.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
value
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_value"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
value
\end_layout

\end_inset

value ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 value name 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
setv
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_setv"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setv
\end_layout

\end_inset

setv ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 setv name new-value 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These macros get and set the current value of the Hemlock variable name.
 Name is not evaluated.
 There is a setf form for 
\family typewriter
value
\family default
.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
hlet
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_hlet"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
hlet
\end_layout

\end_inset

hlet ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 hlet ((var value)*)form* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This macro is very similar to let in effect; within its scope each of the
 Hemlock variables var have the respective values, but after the scope is
 exited by any means the binding is removed.
 This does not cause any hooks to be invoked.
 The value of the last form is returned.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
hemlock-bound-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_hemlock-bound-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
hemlock-bound-p
\end_layout

\end_inset

hemlock-bound-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 hemlock-bound-p name &optional kind where 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns t if name is defined as a Hemlock variable in the place specified
 by kind and where, or nil otherwise.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
delete-variable
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_delete-variable"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete-variable
\end_layout

\end_inset

delete-variable ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 delete-variable name &optional kind where 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Delete Variable Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_delete_variable_hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Delete Variable Hook
\end_layout

\end_inset

Delete Variable Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Delete Variable Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
delete-variable makes the Hemlock variable name no longer defined in the
 specified place.
 Kind and where have the same meanings as they do for variable-value, except
 that :current is not available, and the default for kind is :global
\end_layout

\begin_layout Standard
An error will be signaled if no such variable exists.
 The hook, Delete Variable Hook is invoked with the same arguments before
 the variable is deleted.
\end_layout

\begin_layout Subsection
Hooks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Hooks"

\end_inset

Hemlock actions such as setting variables, changing buffers, changing
 windows, turning modes on and off, etc., often have hooks associated with
 them.
 A hook is a list of functions called before the system performs the action.
 The manual describes the object specific hooks with the rest of the operations
 defined on these objects.
\end_layout

\begin_layout Standard
Often hooks are stored in Hemlock variables, Delete Buffer Hook and Set
 Window Hook for example.
 This leads to a minor point of confusion because these variables have hooks
 that the system executes when someone changes their values.
 These hook functions Hemlock invokes when someone sets a variable are an
 example of a hook stored in an object instead of a Hemlock variable.
 These are all hooks for editor activity, but Hemlock keeps them in different
 kinds of locations.
 This is why some of the routines in this section have a special interpretation
 of the hook place argument.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
add-hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_add-hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
add-hook
\end_layout

\end_inset

add-hook ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 add-hook place hook-fun 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
remove-hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_remove-hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
remove-hook
\end_layout

\end_inset

remove-hook ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 remove-hook place hook-fun 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These macros add or remove a hook function in some place.
 If hook-fun already exists in place, this call has no effect.
 If place is a symbol, then it is a Hemlock variable; otherwise, it is a
 generalized variable or storage location.
 Here are two examples:
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
(add-hook delete-buffer-hook 'remove-buffer-from-menu) (add-hook (variable-hooks
 'check-mail-interval) 'reschedule-mail-check)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
invoke-hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_invoke-hook"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
invoke-hook
\end_layout

\end_inset

invoke-hook ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 invoke-hook place &rest args 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This macro calls all the functions in place.
 If place is a symbol, then it is a Hemlock variable; otherwise, it is a
 generalized variable.
\end_layout

\begin_layout Section
Commands
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingCommands"

\end_inset

\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingCommandsIntroduction"

\end_inset

The way that the user tells Hemlock
 to do something is by invoking a command.
 Commands have three attributes:
\end_layout

\begin_layout Description
name A command's name provides a way to refer to it.
 Command names are usually capitalized words separated by spaces, such as
 Forward Word.
 
\end_layout

\begin_layout Description
documentation The documentation for a command is used by on-line help facilities.
 
\end_layout

\begin_layout Description
function A command is implemented by a Lisp function, which is callable
 from Lisp.
 
\end_layout

\begin_layout Subsubsection
Defining Commands
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "DefiningCommands"

\end_inset


DefiningCommands
\end_layout

\begin_layout Paragraph
*command-names*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_command-names"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*command-names*
\end_layout

\end_inset

*command-names* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 *command-names* 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Holds a string-table associating command names to command objects.
 Whenever a new command is defined it is entered in this table.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
defcommand
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_defcommand"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
defcommand
\end_layout

\end_inset

defcommand ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 defcommand command-name | (command-name function-name &key) lambda-list
 command-doc function-doc form* 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Defines a command named name.
 defcommand creates a function to implement the command from the lambda-list
 and forms supplied.
 The lambda-list must specify one required argument, see below, which by
 convention is typically named 
\family typewriter
p
\family default
.
 If the caller does not specify function-name, defcommand creates the command
 name by replacing all spaces with hyphens and appending "-command".
 Any keyword arguments are as for 
\family typewriter
make-command
\family default
.
 Command-doc becomes the command documentation for the command.
 Function-doc, if present, becomes the documentation for the function and
 should primarily describe issues involved in calling the command as a function,
 such as what any additional arguments are.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
make-command
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-command"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-command
\end_layout

\end_inset

make-command ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 make-command name documentation function &key :transparent-p 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Defines a new command named name, with command documentation documentation
 and function function.
 If :transparent-p is true, the command becomes transparent.
 The command in entered in the string-table *command-names*, with the command
 object as its value.
 Normally command implementors will use the defcommand macro, but this permits
 access to the command definition mechanism at a lower level, which is occasiona
lly useful.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
commandp
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_commandp"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
commandp
\end_layout

\end_inset

commandp ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 commandp command 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Returns t if command is a command object, otherwise nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
command-documentation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_command-documentation"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command-documentation
\end_layout

\end_inset

command-documentation ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 command-documentation command 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
command-function
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_command-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command-function
\end_layout

\end_inset

command-function ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 command-function command 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
command-name
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_command-name"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command-name
\end_layout

\end_inset

command-name ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 command-name command 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Returns the documentation, function, or name for command.
 These may be set with setf.
\end_layout

\begin_layout Subsubsection
Command Documentation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CommandDocumentation"

\end_inset

Command documentation is a description of what the command
 does when it is invoked as an extended command or from a key.
 Command documentation may be either a string or a function.
 If the documentation is a string then the first line should briefly summarize
 the command, with remaining lines filling the details.
 Example:
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
(defcommand "Forward Character" (p) "Move the point forward one character.
 With prefix argument move that many characters, with negative argument
 go backwards." .
 .
 .)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Command documentation may also be a function of one argument.
 The function is called with either :short or :full, indicating that the
 function should return a short documentation string or do something to
 document the command fully.
\end_layout

\begin_layout Subsection
The Command Interpreter
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CommandInterpreter"

\end_inset

The command interpreter is the functionality invoked by
 the event handler to process key-events from the keyboard and dispatch
 to different commands on the basis of what the user types.
 When the command interpreter executes a command, we say it invokes the
 command.
 The command interpreter also provides facilities for communication between
 contiguously running commands, such as a last command type register.
 It also takes care of resetting communication mechanisms, clearing the
 echo area, displaying partial keys typed slowly by the user, etc.
\end_layout

\begin_layout Subsubsection
Controlling The Command Interpreter
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ControllingTheCommandInterpreter"

\end_inset

\end_layout

\begin_layout Paragraph
Command Abort Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_command_abort_hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Command Abort Hook
\end_layout

\end_inset

Command Abort Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 Command Abort Hook 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
The command interpreter invokes the function in this variable whenever someone
 aborts a command (for example, if someone called editor-error).
\end_layout

\begin_layout Subsubsection
Editor Input
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "EditorInput"

\end_inset

The canonical representation of editor input is a key-event structure.
 Users can bind commands to keys, which are non-empty sequences of key-events.
 A key-event consists of an identifying token known as a keysym and a field
 of bits representing modifiers.
 Users define keysym names by supplying names that reflect the legends on
 their keyboard's keys.
 Users define modifier names similarly, but the system chooses the bit and
 mask for recognizing the modifier.
 You can use keysym and modifier names to textually specify key-events and
 Hemlock keys in a #k syntax.
 The following are some examples:
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
#k"C-u" #k"Control-u" #k"c-m-z" #k"control-x meta-d" #k"a" #k"A" #k"Linefeed"
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
This is convenient for use within code and in init files containing 
\family typewriter
bind-key
\family default
 calls.
\end_layout

\begin_layout Standard
The #k syntax is delimited by double quotes.
 Within the double quotes, spaces separate multiple key-events.
 A single key-event optionally starts with modifier names terminated by
 hyphens.
 Modifier names are alphabetic sequences of characters which the system
 uses case-insensitively.
 Following modifiers is a keysym name, which is case-insensitive if it consists
 of multiple characters, but if the name consists of only a single character,
 then it is case-sensitive.
\end_layout

\begin_layout Standard
You can escape special characters---hyphen, double quote, open angle bracket,
 close angle bracket, and space---with a backslash, and you can specify
 a backslash by using two contiguously.
 You can use angle brackets to enclose a keysym name with many special character
s in it.
 Between angle brackets appearing in a keysym name position, there are only
 two special characters, the closing angle bracket and backslash.
\end_layout

\begin_layout Standard
For more information on key-events see the Key-events section.
\end_layout

\begin_layout Subsubsection
Binding Commands to Keys
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "BindingCommandsToKeys"

\end_inset

The command interpreter determines which command to
 invoke on the basis of 
\emph on
key bindings
\emph default
.
 A key binding is an association between a command and a sequence of key-events.
 A sequence of key-events is called a key and is represented by a single
 key-event or a sequence (list or vector) of key-events.
\end_layout

\begin_layout Standard
Since key bindings may be local to a mode or buffer, the current environment
 determines the set of key bindings in effect at any given time.
 When the command interpreter tries to find the binding for a key, it first
 checks if there is a local binding in the current buffer, then if there
 is a binding in each of the minor modes and the major mode for the current
 buffer, and finally checks to see if there is a global binding.
 If no binding is found, then the command interpreter beeps or flashes the
 screen to indicate this.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
bind-key
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_bind-key"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bind-key
\end_layout

\end_inset

bind-key ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 bind-key name key &optional kind where 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function associates command name and key in some environment.
 Key is either a key-event or a sequence of key-events.
 There are three possible values of kind:
\end_layout

\begin_layout Description
:global The default, make a global key binding.
 
\end_layout

\begin_layout Description
:mode Make a mode specific key binding in the mode whose name is where.
 
\end_layout

\begin_layout Description
:buffer Make a binding which is local to buffer where.
 
\end_layout

\begin_layout Standard
\noindent
This processes key for key translations before establishing the binding.
\end_layout

\begin_layout Standard
If the key is some prefix of a key binding which already exists in the specified
 place, then the new one will override the old one, effectively deleting
 it.
\end_layout

\begin_layout Standard

\family typewriter
do-alpha-key-events
\family default
 is useful for setting up bindings in certain new modes.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
command-bindings
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_command-bindings"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command-bindings
\end_layout

\end_inset

command-bindings ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 command-bindings command 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a list of the places where command is bound.
 A place is specified as a list of the key (always a vector), the kind of
 binding, and where (either the mode or buffer to which the binding is local,
 or nil if it is a global).
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
delete-key-binding
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_delete-key-binding"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete-key-binding
\end_layout

\end_inset

delete-key-binding ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 delete-key-binding key &optional kind where 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function removes the binding of key in some place.
 Key is either a key-event or a sequence of key-events.
 kind is the kind of binding to delete, one of :global(the default), :mode
 or :buffer.
 If kind is :mode, where is the mode name, and if kind is :buffer, then
 where is the buffer.
\end_layout

\begin_layout Standard
This function signals an error if key is unbound.
\end_layout

\begin_layout Standard
This processes key for key translations before deleting the binding.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
get-command
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_get-command"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get-command
\end_layout

\end_inset

get-command ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 get-command key &optional kind where 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the command bound to key, returning nil if it is unbound.
 Key is either a key-event or a sequence of key-events.
 If key is an initial subsequence of some keys, then this returns the keyword
 :prefix.
 There are four cases of kind:
\end_layout

\begin_layout Description
:current Return the current binding of key using the current buffer's search
 list.
 If there are any transparent key bindings for key, then they are returned
 in a list as a second value.
 
\end_layout

\begin_layout Description
:global Return the global binding of key.
 This is the default.
 
\end_layout

\begin_layout Description
:mode Return the binding of key in the mode named where.
 
\end_layout

\begin_layout Description
:buffer Return the binding of key local to the buffer where.
 
\end_layout

\begin_layout Standard
\noindent
This processes key for key translations before looking for any binding.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
map-bindings
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_map-bindings"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
map-bindings
\end_layout

\end_inset

map-bindings ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 map-bindings function kind &optional where 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function maps over the key bindings in some place.
 For each binding, this passes function the key and the command bound to
 it.
 Kind and where are the same as in bind-key.
 The key is not guaranteed to remain valid after a given iteration.
\end_layout

\begin_layout Subsubsection
Key Translation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "KeyTranslation"

\end_inset

Key translation is a process that the command interpreter
 applies to keys before doing anything else.
 There are two kinds of key translations: substitution and bit-prefix.
 In either case, the command interpreter translates a key when a specified
 key-event sequence appears in a key.
\end_layout

\begin_layout Standard
In a substitution translation, the system replaces the matched subsequence
 with another key-event sequence.
 Key translation is not recursively applied to the substituted key-events.
\end_layout

\begin_layout Standard
In a bit-prefix translation, the system removes the matched subsequence
 and effectively sets the specified bits in the next key-event in the key.
\end_layout

\begin_layout Standard
While translating a key, if the system encounters an incomplete final subsequenc
e of key-events, it aborts the translation process.
 This happens when those last key-events form a prefix of some translation.
 It also happens when they translate to a bit-prefix, but there is no following
 key-event to which the system can apply the indicated modifier.
 If there is a binding for this partially untranslated key, then the command
 interpreter will invoke that command; otherwise, it will wait for the user
 to type more key-events.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
key-translation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_key-translation"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
key-translation
\end_layout

\end_inset

key-translation ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 key-translation key 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This form is setf-able and allows users to register key translations that
 the command interpreter will use as users type key-events.
\end_layout

\begin_layout Standard
This function returns the key translation for key, returning nil if there
 is none.
 Key is either a key-event or a sequence of key-events.
 If key is a prefix of a translation, then this returns :prefix.
\end_layout

\begin_layout Standard
A key translation is either a key or modifier specification.
 The bits translations have a list form: (:bits {bit-name}*).
\end_layout

\begin_layout Standard
Whenever key appears as a subsequence of a key argument to the binding manipulat
ion functions, that portion will be replaced with the translation.
\end_layout

\begin_layout Subsubsection
Transparent Key Bindings
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "TransparentKeyBindings"

\end_inset

Key bindings local to a mode may be transparent.
 A transparent key binding does not shadow less local key bindings, but
 rather indicates that the bound command should be invoked before the first
 normal key binding.
 Transparent key bindings are primarily useful for implementing minor modes
 such as auto fill and word abbreviation.
 There may be several transparent key bindings for a given key, in which
 case all of the transparent commands are invoked in the order they were
 found.
 If there no normal key binding for a key typed, then the command interpreter
 acts as though the key is unbound even if there are transparent key bindings.
\end_layout

\begin_layout Standard
The :transparent-p argument to defmode determines whether all the key bindings
 in a mode are transparent or not.
 In addition a particular command may be declared to be transparent by the
 :transparent-p argument to defcommand and make-command.
\end_layout

\begin_layout Subsection
Command Types
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CommandTypes"

\end_inset

In many editors the behavior of a command depends on the kind
 of command invoked before it.
 Hemlock provides a mechanism to support this known as 
\family typewriter
command type
\family default
.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
last-command-type
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_last-command-type"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
last-command-type
\end_layout

\end_inset

last-command-type ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 last-command-type 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This returns the command type of the last command invoked.
 If this is set with setf, the supplied value becomes the value of last-command-
type until the next command completes.
 If the previous command did not set last-command-type, then its value is
 nil.
 Normally a command type is a keyword.
 The command type is not cleared after a command is invoked due to a transparent
 key binding.
\end_layout

\begin_layout Subsection
Command Arguments
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CommandArguments"

\end_inset

There are three ways in which a command may be invoked:
 It may be bound to a key which has been typed, it may be invoked as an
 extended command, or it may be called as a Lisp function.
 Ideally commands should be written in such a way that they will behave
 sensibly no matter which way they are invoked.
 The functions which implement commands must obey certain conventions about
 argument passing if the command is to function properly.
\end_layout

\begin_layout Subsubsection
The Prefix Argument
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "PrefixArgument"

\end_inset

Whenever a command is invoked it is passed as its first argument
 what is known as the prefix argument.
 The prefix argument is always either an integer or nil.
 When a command uses this value it is usually as a repeat count, or some
 conceptually similar function.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
prefix-argument
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prefix-argument"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prefix-argument
\end_layout

\end_inset

prefix-argument ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 prefix-argument 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the current value of the prefix argument.
 When set with setf, the new value becomes the prefix argument for the next
 command.
 If the prefix argument is not set by the previous command then the prefix
 argument for a command is nil.
 The prefix argument is not cleared after a command is invoked due to a
 transparent key binding.
\end_layout

\begin_layout Subsubsection
Lisp Arguments
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "LispArguments"

\end_inset

It is often desirable to call commands from Lisp code, in which
 case arguments which would otherwise be prompted for are passed as optional
 arguments following the prefix argument.
 A command should prompt for any arguments not supplied.
\end_layout

\begin_layout Section
Modes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingModes"

\end_inset

A mode is a collection of Hemlock values which may
 be present in the current environment depending on the editing task at
 hand.
 An example of a typical mode is Lisp, for editing Lisp code.
\end_layout

\begin_layout Subsection
Mode Hooks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ModeHooks"

\end_inset

When a mode is added to or removed from a buffer, its mode hook
 is invoked.
 The hook functions take two arguments, the buffer involved and t if the
 mode is being added or nil if it is being removed.
 Mode hooks are typically used to make a mode do something additional to
 what it usually does.
 One might, for example, make a Text mode hook that turned on auto-fill
 mode when you entered.
\end_layout

\begin_layout Subsection
Major and Minor Modes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "MajorAndMinorModes"

\end_inset

There are two kinds of modes, major modes and minor modes.
 A buffer always has exactly one major mode, but it may have any number
 of minor modes.
 Major modes may have mode character attributes while minor modes may not.
\end_layout

\begin_layout Standard
A major mode is usually used to change the environment in some major way,
 such as to install special commands for editing some language.
 Minor modes generally change some small attribute of the environment, such
 as whether lines are automatically broken when they get too long.
 A minor mode should work regardless of what major mode and minor modes
 are in effect.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Default Modes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_default_modes"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Default Modes
\end_layout

\end_inset

Default Modes ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Default Modes (initial value '("Fundamental" "Save")) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This variable contains a list of mode names which are instantiated in a
 buffer when no other information is available.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
*mode-names*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_mode-names"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*mode-names*
\end_layout

\end_inset

*mode-names* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 *mode-names* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Holds a string-table of the names of all the modes.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Illegal
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "c_illegal"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Illegal
\end_layout

\end_inset

Illegal ---
\end_layout

\begin_layout Standard
Command
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Illegal 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This is a useful command to bind in modes that wish to shadow global bindings
 by making them effectively illegal.
 Also, although less likely, minor modes may shadow major mode bindings
 with this.
 This command calls editor-error.
\end_layout

\begin_layout Subsection
Mode Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ModeFunctions"

\end_inset

\end_layout

\begin_layout Subsubsection
defmode
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_defmode"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
defmode
\end_layout

\end_inset

defmode ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 defmode name &key :setup-function :cleanup-function :major-p :precedence
 :transparent-p :documentation 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function defines a new mode named name, and enters it in *mode-names*.
 If major-p is supplied and is not nil then the mode is a major mode; otherwise
 it is a minor mode.
\end_layout

\begin_layout Standard
Setup-function and cleanup-function are functions which are invoked with
 the buffer affected, after the mode is turned on, and before it is turned
 off, respectively.
 These functions typically are used to make buffer-local key or variable
 bindings and to remove them when the mode is turned off.
\end_layout

\begin_layout Standard
Precedence is only meaningful for a minor mode.
 The precedence of a minor mode determines the order in which it in a buffer's
 list of modes.
 When searching for values in the current environment, minor modes are searched
 in order, so the precedence of a minor mode determines which value is found
 when there are several definitions.
\end_layout

\begin_layout Standard
Transparent-p determines whether key bindings local to the defined mode
 are transparent.
 Transparent key bindings are invoked in addition to the first normal key
 binding found rather than shadowing less local key bindings.
\end_layout

\begin_layout Standard
Documentation is some introductory text about the mode.
 Commands such as Describe Mode use this.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mode-documentation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mode-documentation"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mode-documentation
\end_layout

\end_inset

mode-documentation ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mode-documentation name 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the documentation for the mode named name.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-major-mode
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-major-mode"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-major-mode
\end_layout

\end_inset

buffer-major-mode ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-major-mode buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Buffer Major Mode Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_buffer_major_mode_hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Buffer Major Mode Hook
\end_layout

\end_inset

Buffer Major Mode Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Buffer Major Mode Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
buffer-major-mode returns the name of buffer's major mode.
 The major mode may be changed with setf; then Buffer Major Mode Hook is
 invoked with buffer and the new mode.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-minor-mode
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-minor-mode"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-minor-mode
\end_layout

\end_inset

buffer-minor-mode ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-minor-mode buffer name 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Buffer Minor Mode Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_buffer_minor_mode_hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Buffer Minor Mode Hook
\end_layout

\end_inset

Buffer Minor Mode Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Buffer Minor Mode Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
buffer-minor-mode returns t if the minor mode name is active in buffer,
 nil otherwise.
 A minor mode may be turned on or off by using setf; then Buffer Minor Mode
 Hook is invoked with buffer, name and the new value.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mode-variables
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mode-variables"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mode-variables
\end_layout

\end_inset

mode-variables ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mode-variables name 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the string-table of mode local variables.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mode-major-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mode-major-p"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mode-major-p
\end_layout

\end_inset

mode-major-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mode-major-p name 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns t if name is the name of a major mode, or nil if it is the name
 of a minor mode.
 It is an error for name not to be the name of a mode.
\end_layout

\begin_layout Section
Character Attributes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingCharacterAttributes"

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingCharacterAttributesIntroduction"

\end_inset

Character attributes provide
 a global database of information about characters.
 This facility is similar to, but more general than, the syntax tables of
 other editors such as Emacs.
 For example, you should use character attributes for commands that need
 information regarding whether a character is whitespace or not.
 Use character attributes for these reasons: 
\end_layout

\begin_layout Enumerate
 If this information is all in one place, then it is easy the change the
 behavior of the editor by changing the syntax table, much easier than it
 would be if character constants were wired into commands.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Enumerate
 This centralization of information avoids needless duplication of effort.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Enumerate
 The syntax table primitives are probably faster than anything that can
 be written above the primitive level.
\end_layout

\begin_layout Standard
Note that an essential part of the character attribute scheme is that character
 attributes are global and are there for the user to change.
 Information about characters which is internal to some set of commands
 (and which the user should not know about) should not be maintained as
 a character attribute.
 For such uses various character searching abilities are provided by the
 function find-pattern.
 20).
\end_layout

\begin_layout Subsection
Character Attribute Names
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CharacterAttributeNames"

\end_inset

As for Hemlock variables, character attributes have
 a user visible string name, but are referred to in Lisp code as a symbol.
 The string name, which is typically composed of capitalized words separated
 by spaces, is translated into a keyword by replacing all spaces with hyphens
 and interning this string in the keyword package.
 The attribute named "Ada Syntax" would thus become :ada-syntax.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
*character-attribute-names*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_character-attribute-names"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*character-attribute-names*
\end_layout

\end_inset

*character-attribute-names* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 *character-attribute-names* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Whenever a character attribute is defined, its name is entered in this string-ta
ble, with the corresponding keyword as the value.
\end_layout

\begin_layout Subsection
Character Attribute Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CharacterAttributeFunctions"

\end_inset

\end_layout

\begin_layout Subsubsection
defattribute
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_defattribute"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
defattribute
\end_layout

\end_inset

defattribute ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 defattribute name documentation &optional type initial-value 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function defines a new character attribute with name, a string.
 Character attribute operations take attribute arguments as a keyword whose
 name is name uppercased with spaces replaced by hyphens.
\end_layout

\begin_layout Standard
Documentation describes the uses of the character attribute.
\end_layout

\begin_layout Standard
Type, which defaults to (mod 2), specifies what type the values of the character
 attribute are.
 Values of a character attribute may be of any type which may be specified
 to make-array.
 Initial-value (default 0) is the value which all characters will initially
 have for this attribute.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
character-attribute-name
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_character-attribute-name"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
character-attribute-name
\end_layout

\end_inset

character-attribute-name ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 character-attribute-name attribute 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
character-attribute-documentation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_character-attribute-documentation"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
character-attribute-documentation
\end_layout

\end_inset

character-attribute-documentation ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 character-attribute-documentation attribute 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These functions return the name or documentation for attribute.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
character-attribute
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_character-attribute"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
character-attribute
\end_layout

\end_inset

character-attribute ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 character-attribute attribute character 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Character Attribute Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_character_attribute_hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Character Attribute Hook
\end_layout

\end_inset

Character Attribute Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Character Attribute Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
character-attribute returns the value of attribute for character.
 This signals an error if attribute is undefined.
\end_layout

\begin_layout Standard
setf will set a character's attributes.
 This setf method invokes the functions in Character Attribute Hook on the
 attribute and character before it makes the change.
\end_layout

\begin_layout Standard
If character is nil, then the value of the attribute for the beginning or
 end of the buffer can be accessed or set.
 The buffer beginning and end thus become a sort of fictitious character,
 which simplifies the use of character attributes in many cases.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
character-attribute-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_character-attribute-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
character-attribute-p
\end_layout

\end_inset

character-attribute-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 character-attribute-p symbol 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if symbolis the name of a character attribute, nil
 otherwise.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
shadow-attribute
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_shadow-attribute"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
shadow-attribute
\end_layout

\end_inset

shadow-attribute ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 shadow-attribute attribute character value mode 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Shadow Attribute Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_shadow_attribute_hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Shadow Attribute Hook
\end_layout

\end_inset

Shadow Attribute Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Shadow Attribute Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function establishes value as the value of character's attribute attribute
 when in the mode mode.
 Mode must be the name of a major mode.
 Shadow Attribute Hook is invoked with the same arguments when this function
 is called.
 If the value for an attribute is set while the value is shadowed, then
 only the shadowed value is affected, not the global one.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
unshadow-attribute
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_unshadow-attribute"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
unshadow-attribute
\end_layout

\end_inset

unshadow-attribute ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 unshadow-attribute attribute character mode 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Unshadow Attribute Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_unshadow_attribute_hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Unshadow Attribute Hook
\end_layout

\end_inset

Unshadow Attribute Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Unshadow Attribute Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Make the value of attribute for character no longer be shadowed in mode.
 Unshadow Attribute Hook is invoked with the same arguments when this function
 is called.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
find-attribute
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_find-attribute"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
find-attribute
\end_layout

\end_inset

find-attribute ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 find-attribute mark attribute &optional test 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
reverse-find-attribute
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_reverse-find-attribute"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
reverse-find-attribute
\end_layout

\end_inset

reverse-find-attribute ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 reverse-find-attribute mark attribute &optional test 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These functions find the next (or previous) character with some value for
 the character attribute attribute starting at mark.
 They pass test one argument, the value of attribute for the character tested.
 If the test succeeds, then these routines modify mark to point before (after
 for reverse-find-attribute) the character which satisfied the test.
 If no characters satisfy the test, then these return nil, and mark remains
 unmodified.
 Test defaults to 
\family typewriter
#'not-zerop
\family default
.
 There is no guarantee that the test is applied in any particular fashion,
 so it should have no side effects and depend only on its argument.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
find-not-attribute
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_find-not-attribute"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
find-not-attribute
\end_layout

\end_inset

find-not-attribute ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 find-not-attribute mark attribute 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
reverse-find-not-attribute
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_reverse-find-not-attribute"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
reverse-find-not-attribute
\end_layout

\end_inset

reverse-find-not-attribute ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 reverse-find-not-attribute mark attribute 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These are equivalent to (find-attribute mark attribute #'zerop) and (reverse-fin
d-attribute mark attribute #'zerop), respectively.
\end_layout

\begin_layout Subsection
Character Attribute Hooks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CharacterAttributeHooks"

\end_inset

It is often useful to use the character attribute
 mechanism as an abstract interface to other information about characters
 which in fact is stored elsewhere.
 For example, some implementation of Hemlock might decide to define a Print
 Representation attribute which controls how a character is displayed on
 an output device.
\end_layout

\begin_layout Standard
To make this easy to do, each attribute has a list of hook functions which
 are invoked with the attribute, character and new value whenever the current
 value changes for any reason.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
character-attribute-hooks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_character-attribute-hooks"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
character-attribute-hooks
\end_layout

\end_inset

character-attribute-hooks ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 character-attribute-hooks attribute 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Return the current hook list for attribute.
 This may be set with setf.
 The add-hook and remove-hook macros should be used to manipulate these
 lists.
\end_layout

\begin_layout Subsection
System Defined Character Attributes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "SystemDefinedCharacterAttributes"

\end_inset

These are predefined in Hemlock:
\end_layout

\begin_layout Description
"Whitespace" A value of 1 indicates the character is whitespace.
 
\end_layout

\begin_layout Description
"Word Delimiter" A value of 1 indicates the character separates words (see
 the English Text Buffers section).
 
\end_layout

\begin_layout Description
"Space" This is like Whitespace, but it should not include Newline.
 Hemlock uses this primarily for handling indentation on a line.
 
\end_layout

\begin_layout Description
"Sentence Terminator" A value of 1 indicates these characters terminate
 sentences (see the English Text Buffers section).
 
\end_layout

\begin_layout Description
"Sentence Closing Char" A value of 1 indicates these delimiting characters,
 such as " or ), may follow a Sentence Terminator.
 
\end_layout

\begin_layout Description
"Paragraph Delimiter" A value of 1 indicates these characters delimit paragraphs
 when they begin a line (see the English Text Buffers section).
 
\end_layout

\begin_layout Description
"Page Delimiter" A value of 1 indicates this character separates logical
 pages when it begins a line.
 
\end_layout

\begin_layout Description
"Lisp Syntax" This uses symbol values from the following: 
\end_layout

\begin_layout Itemize
 nil These characters have no interesting properties.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 :space These characters act like whitespace and should not include Newline.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 :newline This is the Newline character.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 :open-paren This is ( character.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 :close-paren This is ) character.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 :prefix This is a character that is a part of any form it precedes for
 example, the single quote, '.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 :string-quote This is the character that quotes a string literal, ".
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 :char-quote This is the character that escapes a single character, 
\backslash
.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 :comment This is the character that makes a comment with the rest of the
 line,;.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 :constituent These characters are constitute symbol names.
\end_layout

\begin_layout Section
Controlling the Display
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingControllingTheDisplay"

\end_inset


\end_layout

\begin_layout Subsection
Views
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Views"

\end_inset

A 
\family typewriter
hemlock-view
\family default
 represents the GUI object(s) used to display the contents of a buffer.
 Conceptually it consists of a text buffer, a modeline for semi-permanent
 status info, an echo area for transient status info, and a text input area
 for reading prompted input.
 (Currently the last two are conflated, i.e.
 text input happens in the echo area).
\end_layout

\begin_layout Standard
The API for working with hemlock-views is not fully defined yet.
 If you need to work with views beyond what's listed here, you will probably
 need to get in the sources and find some internal functions to call.
\end_layout

\begin_layout Subsection
The Current View
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CurrentView"

\end_inset


\end_layout

\begin_layout Subsubsection
current-view
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-view"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-view
\end_layout

\end_inset

current-view ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 current-view 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
current-view returns the hemlock view which is the target of the currently
 executing command.
 This is usually the frontmost hemlock window in the current application.
\end_layout

\begin_layout Subsection
View Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ViewFunctions"

\end_inset

\end_layout

\begin_layout Subsubsection
hemlock-view-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_hemlock-view-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
hemlock-view-p
\end_layout

\end_inset

hemlock-view-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 hemlock-view-p object 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if object is a hemlock view, otherwise nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
hemlock-view-buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_hemlock-view-buffer"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
hemlock-view-buffer
\end_layout

\end_inset

hemlock-view-buffer ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 hemlock-view-buffer view 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the buffer which is displayed in the view.
\end_layout

\begin_layout Subsection
Cursor Positions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CursorPositions"

\end_inset


\end_layout

\begin_layout Subsubsection
mark-column
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-column"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-column
\end_layout

\end_inset

mark-column ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mark-column mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the X position at which mark would be displayed, supposing
 its line was displayed on an infinitely wide screen.
 This takes into consideration strange characters such as tabs.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
move-to-column
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_move-to-column"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
move-to-column
\end_layout

\end_inset

move-to-column ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 move-to-column mark column &optional line 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function is analogous to move-to-position, except that it moves mark
 to the position on line which corresponds to the specified column.
 If the line would not reach to the specified column, then nil is returned
 and mark is not modified.
 Note that since a character may be displayed on more than one column on
 the screen, several different values of column may cause mark to be moved
 to the same position.
\end_layout

\begin_layout Subsection
Redisplay
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Redisplay"

\end_inset

The display of the buffer contents on the screen is updated at
 the end of each command.
 The following function can be used to control the scroll position of the
 buffer in the view.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
set-scroll-position
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_set-scroll-position"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
set-scroll-position
\end_layout

\end_inset

set-scroll-position ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 set-scroll-position how &optional what 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Normally, after a command that changes the contents of the buffer or the
 selection (i.e.
 the active region), the event handler repositions the view so that the
 selection is visible, scrolling the buffer as necessary.
 Calling this function tells the system to not do that, and instead to position
 the buffer in a particular way.
 
\family typewriter
how
\family default
 can be one of the following:
\end_layout

\begin_layout Description
:center-selection This causes the selection (or the point) to be centered
 in the visible area.
 
\family typewriter
what
\family default
 is ignored.
 
\end_layout

\begin_layout Description
:page-up This causes the previous page of the buffer to be shown 
\family typewriter
what
\family default
 is ignored.
 
\end_layout

\begin_layout Description
:page-down This causes the next page of the buffer to be shown.
 
\family typewriter
what
\family default
 is ignored.
 
\end_layout

\begin_layout Description
:lines-up This causes 
\family typewriter
what
\family default
 previous lines to be scrolled in at the top.
 
\family typewriter
what
\family default
 must be an integer.
 
\end_layout

\begin_layout Description
:lines-down This causes 
\family typewriter
what
\family default
 next lines to be scrolled in at the bottom.
 
\family typewriter
what
\family default
 must be an integer.
 
\end_layout

\begin_layout Description
:line This causes the line containing 
\family typewriter
what
\family default
 to be scrolled to the top of the view.
 
\family typewriter
what
\family default
 must be a mark.
 
\end_layout

\begin_layout Section
Logical Key-Events
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingLogicalKeyEvents"

\end_inset


\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingLogicalKeyEventsIntroduction"

\end_inset

Some primitives such as prompt-for
-key and commands such as Emacs query replace read key-events directly from
 the keyboard instead of using the command interpreter.
 To encourage consistency between these commands and to make them portable
 and easy to customize, there is a mechanism for defininglogical key-events.
 A logical key-event is a keyword which stands for some set of key-events.
 The system globally interprets these key-events as indicators a particular
 action.
 For example, the :help logical key-event represents the set of key-events
 that request help in a given Hemlock implementation.
 This mapping is a many-to-many mapping, not one-to-one, so a given logical
 key-event may have multiple corresponding actual key-events.
 Also, any key-event may represent different logical key-events.
\end_layout

\begin_layout Subsection
Logical Key-Event Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "LogicalKeyEventFunctions"

\end_inset


\end_layout

\begin_layout Subsubsection
*logical-key-event-names*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_logical-key-event-names"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*logical-key-event-names*
\end_layout

\end_inset

*logical-key-event-names* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 *logical-key-event-names* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This variable holds a string-table mapping all logical key-event names to
 the keyword identifying the logical key-event.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
define-logical-key-event
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_define-logical-key-event"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
define-logical-key-event
\end_layout

\end_inset

define-logical-key-event ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 define-logical-key-event string-name documentation 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function defines a new logical key-event with name string-name.
 Logical key-event operations take logical key-events arguments as a keyword
 whose name is string-name uppercased with spaces replaced by hyphens.
\end_layout

\begin_layout Standard
Documentation describes the action indicated by the logical key-event.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
logical-key-event-key-events
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_logical-key-event-key-events"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
logical-key-event-key-events
\end_layout

\end_inset

logical-key-event-key-events ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 logical-key-event-key-events keyword 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the list of key-events representing the logical key-event
 keyword.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
logical-key-event-name
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_logical-key-event-name"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
logical-key-event-name
\end_layout

\end_inset

logical-key-event-name ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 logical-key-event-name keyword 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
logical-key-event-documentation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_logical-key-event-documentation"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
logical-key-event-documentation
\end_layout

\end_inset

logical-key-event-documentation ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 logical-key-event-documentation keyword 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These functions return the string name and documentation given to define-logical
-key-event for logical key-event keyword.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
logical-key-event-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_logical-key-event-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
logical-key-event-p
\end_layout

\end_inset

logical-key-event-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 logical-key-event-p key-event keyword 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if key-event is the logical key-event keyword.
 This is setf-able establishing or disestablishing key-events as particular
 logical key-events.
 It is a error for keyword to be an undefined logical key-event.
\end_layout

\begin_layout Subsection
System Defined Logical Key-Events
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "SystemDefinedLogicalKeyEvents"

\end_inset

There are many default logical key-events,
 some of which are used by functions documented in this manual.
 If a command wants to read a single key-event command that fits one of
 these descriptions then the key-event read should be compared to the correspond
ing logical key-event instead of explicitly mentioning the particular key-event
 in the code.
 In many cases you can use the command-case macro.
 It makes logical key-events easy to use and takes care of prompting and
 displaying help messages.
 
\end_layout

\begin_layout Itemize
 :abort Indicates the prompter should terminate its activity without performing
 any closing actions of convenience, for example.
\end_layout

\begin_layout Itemize
 :yes Indicates the prompter should take the action under consideration.
\end_layout

\begin_layout Itemize
 :no Indicates the prompter should NOT take the action under consideration.
\end_layout

\begin_layout Itemize
 :do-all Indicates the prompter should repeat the action under consideration
 as many times as possible.
\end_layout

\begin_layout Itemize
 :do-once Indicates the prompter should execute the action under consideration
 once and then exit.
\end_layout

\begin_layout Itemize
 :help Indicates the prompter should display some help information.
\end_layout

\begin_layout Itemize
 :confirm Indicates the prompter should take any input provided or use the
 default if the user entered nothing.
\end_layout

\begin_layout Itemize
 :quote Indicates the prompter should take the following key-event as itself
 without any sort of command interpretation.
\end_layout

\begin_layout Itemize
 :keep Indicates the prompter should preserve something.
\end_layout

\begin_layout Itemize
 :y Indicates a short positive response
\end_layout

\begin_layout Itemize
 :n Indicates a short negative response
\end_layout

\begin_layout Standard
Define a new logical key-event whenever: 
\end_layout

\begin_layout Enumerate
 The key-event concerned represents a general class of actions, and several
 commands may want to take a similar action of this type.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Enumerate
 The exact key-event a command implementor chooses may generate violent
 taste disputes among users, and then the users can trivially change the
 command in their init files.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Enumerate
 You are using 
\family typewriter
command-case
\family default
 which prevents implementors from specifying non-standard characters for
 dispatching in otherwise possibly portable code, and you can define and
 set the logical key-event in a site dependent file where you can mention
 implementation dependent characters.
\end_layout

\begin_layout Section
The Echo Area
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingEchoArea"

\end_inset

Hemlock provides a number of facilities for displaying
 information and prompting the user for it.
 Most of these work through a small area displayed at the bottom of the
 screen, called the Echo Area.
\end_layout

\begin_layout Subsection
Echo Area Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "EchoAreaFunctions"

\end_inset


\end_layout

\begin_layout Subsubsection
clear-echo-area
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_clear-echo-area"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
clear-echo-area
\end_layout

\end_inset

clear-echo-area ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 clear-echo-area 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Clears the echo area.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
message
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_message"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
message
\end_layout

\end_inset

message ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 message control-string &rest format-arguments 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
loud-message
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_loud-message"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
loud-message
\end_layout

\end_inset

loud-message ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 loud-message control-string &rest format-arguments 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Displays a message in the echo area, replacing previous contents if any.
 loud-message is like message, but it also beeps.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
beep
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_beep"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
beep
\end_layout

\end_inset

beep ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 beep 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Gets the user's attention, typically by making a sound.
\end_layout

\begin_layout Subsection
Prompting Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "PromptingFunctions"

\end_inset

Prompting functions can be used to obtain short one-line
 input from the user.
\end_layout

\begin_layout Standard
Cocoa note: Because of implementation restrictions, only one buffer at a
 time is allowed to read prompted input.
 If a prompting function is invoked while a prompting operation is already
 in effect in another buffer, the attempt fails, telling the user "Buffer
 xxx is already waiting for input".
\end_layout

\begin_layout Standard
Most of the prompting functions accept the following keyword arguments:
\end_layout

\begin_layout Description
:must-exist If :must-exist has a non-nil value then the user is prompted
 until a valid response is obtained.
 If :must-exist is nil then return as a string whatever is input.
 The default is t.
 
\end_layout

\begin_layout Description
:default If null input is given when the user is prompted then this value
 is returned.
 If no default is given then some input must be given before anything interestin
g will happen.
 
\end_layout

\begin_layout Description
:default-string If a :default is given then this is a string to be printed
 to indicate what the default is.
 The default is some representation of the value for :default, for example
 for a buffer it is the name of the buffer.
 
\end_layout

\begin_layout Description
:prompt This is the prompt string to display.
 
\end_layout

\begin_layout Description
:help This is similar to :prompt, except that it is displayed when the help
 command is typed during input.
 
\end_layout

\begin_layout Quote
This may also be a function.
 When called with no arguments, it should either return a string which is
 the help text or perform some action to help the user, returning nil.
\end_layout

\begin_layout Standard
\noindent

\end_layout

\begin_layout Subsubsection
prompt-for-buffer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-buffer"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-buffer
\end_layout

\end_inset

prompt-for-buffer ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-buffer &key :prompt :help :must-exist :default :default-string
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Prompts with completion for a buffer name and returns the corresponding
 buffer.
 If must-exist is nil, then it returns the input string if it is not a buffer
 name.
 This refuses to accept the empty string as input when :default and :default-str
ing are nil.
 :default-string may be used to supply a default buffer name when:default
 is nil, but when :must-exist is non-nil, it must name an already existing
 buffer.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-key-event
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-key-event"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-key-event
\end_layout

\end_inset

prompt-for-key-event ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-key-event &key :prompt :help 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function prompts for a key-event returning immediately when the user
 types the next key-event.
 command-case is more useful for most purposes.
 When appropriate, use logical key-events.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-key
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-key"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-key
\end_layout

\end_inset

prompt-for-key ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-key &key :prompt :help :must-exist :default :default-string
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function prompts for a key, a vector of key-events, suitable for passing
 to any of the functions that manipulate key bindings.
 If must-exist is true, then the key must be bound in the current environment,
 and the command currently bound is returned as the second value.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-file
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-file
\end_layout

\end_inset

prompt-for-file ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-file &key :prompt :help :must-exist :default :default-string
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function prompts for an acceptable filename.
 "Acceptable" means that it is a legal filename, and it exists if must-exist
 is non-nil.
 prompt-for-file returns a Common Lisp pathname.
 If the file exists as entered, then this returns it, otherwise it is merged
 with default as by merge-pathnames.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-integer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-integer"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-integer
\end_layout

\end_inset

prompt-for-integer ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-integer &key :prompt :help :must-exist :default :default-string
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function prompts for a possibly signed integer.
 If must-exist is nil, then prompt-for-integer returns the input as a string
 if it is not a valid integer.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-keyword
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-keyword"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-keyword
\end_layout

\end_inset

prompt-for-keyword ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-keyword string-tables &key :prompt :help :must-exist :default
 :default-string 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function prompts for a keyword with completion, using the string tables
 in the list string-tables.
 If must-exist is non-nil, then the result must be an unambiguous prefix
 of a string in one of the string-tables, and the returns the complete string
 even if only a prefix of the full string was typed.
 In addition, this returns the value of the corresponding entry in the string
 table as the second value.
\end_layout

\begin_layout Standard
If must-exist is nil, then this function returns the string exactly as entered.
 The difference between prompt-for-keyword with must-exist nil, and prompt-for-s
tring, is the user may complete the input using the Complete Parse and Complete
 Field commands.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-expression
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-expression"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-expression
\end_layout

\end_inset

prompt-for-expression ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-expression &key :prompt :help :must-exist :default :default-string
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function reads a Lisp expression.
 If must-exist is nil, and a read error occurs, then this returns the string
 typed.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-string
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-string"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-string
\end_layout

\end_inset

prompt-for-string ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-string &key :prompt :help :default :default-string 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function prompts for a string; this cannot fail.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-variable
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-variable"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-variable
\end_layout

\end_inset

prompt-for-variable ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-variable &key :prompt :help :must-exist :default :default-string
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function prompts for a variable name.
 If must-exist is non-nil, then the string must be a variable defined in
 the current environment, in which case the symbol name of the variable
 found is returned as the second value.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-y-or-n
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-y-or-n"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-y-or-n
\end_layout

\end_inset

prompt-for-y-or-n ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-y-or-n &key :prompt :help :must-exist :default :default-string
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This prompts for logical key events :Y or :N, returning t or nil without
 waiting for confirmation.
 When the user types a confirmation key, this returns default if it is supplied.
 If must-exist is nil, this returns whatever key-event the user first types;
 however, if the user types one of the above key-events, this returns t
 or nil.
 This is analogous to the Common Lisp function y-or-n-p.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
prompt-for-yes-or-no
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_prompt-for-yes-or-no"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
prompt-for-yes-or-no
\end_layout

\end_inset

prompt-for-yes-or-no ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 prompt-for-yes-or-no &key :prompt :help :must-exist :default :default-string
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function is to prompt-for-y-or-n as yes-or-no-p is to y-or-n-p.
 "Yes" or "No" must be typed out in full and confirmation must be given.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
command-case
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_command-case"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
command-case
\end_layout

\end_inset

command-case ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 command-case (key value*)((tag*) | tag help form*)* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This macro is analogous to the Common Lisp case macro.
 Commands such as Help use this to get a key-event, translate it to a character,
 and then to dispatch on the character to some case.
 In addition to character dispatching, this supports logical key-events
 by using the input key-event directly without translating it to a character.
 Since the description of this macro is rather complex, first consider the
 following example:
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
(defcommand "Save All Buffers" (p) "Give the User a chance to save each
 modified buffer." (dolist (b *buffer-list*) (select-buffer-command () b)
 (when (buffer-modified b) (command-case (:prompt "Save this buffer: [Y]
 " :help "Save buffer, or do something else:") ((:yes :confirm) "Save this
 buffer and go on to the next." (save-file-command () b)) (:no "Skip saving
 this buffer, and go on to the next.") ((:exit #) "Punt this silly loop."
 (return nil))))))
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
command-case prompts for a key-event and then executes the code in the first
 branch with a logical key-event or a character (called tags) matching the
 input.
 Each character must be a standard-character, one that satisfies the Common
 Lisp standard-char-p predicate, and the dispatching mechanism compares
 the input key-event to any character tags by mapping the key-event to a
 character with ext:key-event-char.
 If the tag is a logical key-event, then the search for an appropriate case
 compares the key-event read with the tag using logical-key-event-p.
\end_layout

\begin_layout Standard
All uses of command-case have two default cases, :help and :abort.
 You can override these easily by specifying your own branches that include
 these logical key-event tags.
 The :help branch displays in a pop-up window the a description of the valid
 responses using the variously specified help strings.
 The :abort branch signals an editor-error.
\end_layout

\begin_layout Standard
The key/value arguments control the prompting.
 The following are valid values:
\end_layout

\begin_layout Description
:help The default :help case displays this string in a pop-up window.
 In addition it formats a description of the valid input including each
 case's help string.
 
\end_layout

\begin_layout Description
:prompt This is the prompt used when reading the key-event.
 
\end_layout

\begin_layout Description
:bind This specifies a variable to which the prompting mechanism binds the
 input key-event.
 Any case may reference this variable.
 If you wish to know what character corresponds to the key-event, use key-event-
char.
 
\end_layout

\begin_layout Standard
\noindent
Instead of specifying a tag or list of tags, you may use t.
 This becomes the default branch, and its forms execute if no other branch
 is taken, including the default :help and :abort cases.
 This option has no helpstring, and the default :help case does not describe
 the default branch.
 Every command-case has a default branch; if none is specified, the macro
 includes one that beep's and reprompt's (see below).
\end_layout

\begin_layout Standard
Within the body of command-case, there is a defined reprompt macro.
 It causes the prompting mechanism and dispatching mechanism to immediately
 repeat without further execution in the current branch.
\end_layout

\begin_layout Subsection
Control of Parsing Behavior
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ControlOfParsingBehavior"

\end_inset


\end_layout

\begin_layout Subsubsection
Beep On Ambiguity
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_beep_on_ambiguity"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Beep On Ambiguity
\end_layout

\end_inset

Beep On Ambiguity ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Beep On Ambiguity (initial value t) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
If this variable is true, then an attempt to complete a parse which is ambiguous
 will result in a "beep".
\end_layout

\begin_layout Subsection
Defining New Prompting Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "DefiningNewPromptingFunctions"

\end_inset

Prompting functionality is implemented by the
 function parse-for-something in cooperation with commands defined in "Echo
 Area" mode on the buffer associated with the echo area.
 You can implement new prompting functions by invoking parse-for-something
 with appropriate arguments.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
parse-for-something
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_parse-for-something"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
parse-for-something
\end_layout

\end_inset

parse-for-something ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 parse-for-something &key 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function enters a mode reading input from the user and echoing it in
 the echo area, and returns a value when done.
 The input is managed by commands bound in "Echo Area" mode on the buffer
 associated with the echo area.
 The following keyword arguments are accepted:
\end_layout

\begin_layout Description

\family typewriter
:verification-function
\family default
 This is invoked by the Confirm Parse command.
 It does most of the work when parsing prompted input.
 Confirm Parse calls it with one argument, which is the string that the
 user typed so far.
 The function should return a list of values which are to be the result
 of the recursive edit, or nil indicating that the parse failed.
 In order to return zero values, a non-nil second value may be returned
 along with a nil first value.
 
\end_layout

\begin_layout Description

\family typewriter
:string-tables
\family default
 This is the list of string-tables, if any, that pertain to this parse.
 
\end_layout

\begin_layout Description

\family typewriter
:value-must-exist
\family default
 This is referred to by the verification function, and possibly some of
 the commands.
 
\end_layout

\begin_layout Description

\family typewriter
:default
\family default
 The string representing the default object when prompting the user.
 Confirm Parse supplies this to the parse verification function when the
 user input is empty.
 
\end_layout

\begin_layout Description

\family typewriter
:default-string
\family default
 When prompting the user, if :default is not specified, Hemlock displays
 this string as a representation of the default object; for example, when
 prompting for a buffer, this argument would be a default buffer name.
 
\end_layout

\begin_layout Description

\family typewriter
:type
\family default
 The kind of parse, e.g.
 :file, :keyword, :string.
 This tells the completion commands how to do completion, with :string disabling
 completion.
 
\end_layout

\begin_layout Description

\family typewriter
:prompt
\family default
 The prompt to display to the user.
 
\end_layout

\begin_layout Description

\family typewriter
:help
\family default
 The help string or function being used for the current parse.
 
\end_layout

\begin_layout Subsection
Some Echo Area Commands
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "SomeEchoAreaCommands"

\end_inset

These are some of the Echo Area commands that coordinate
 with the prompting routines.
 Hemlock binds other commands specific to the Echo Area, but they are uninterest
ing to mention here, such as deleting to the beginning of the line or deleting
 backwards a word.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Help On Parse
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "c_help_on_parse"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Help On Parse
\end_layout

\end_inset

Help On Parse ---
\end_layout

\begin_layout Standard
Command
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Help On Parse (bound to Home, C- in Echo Area mode) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Display the help text for the parse currently in progress.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Complete Keyword
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "c_complete_keyword"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Complete Keyword
\end_layout

\end_inset

Complete Keyword ---
\end_layout

\begin_layout Standard
Command
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Complete Keyword (bound to Escape in Echo Area mode) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This attempts to complete the current region.
 It signals an editor-error if the input is ambiguous or incorrect.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Complete Field
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "c_complete_field"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Complete Field
\end_layout

\end_inset

Complete Field ---
\end_layout

\begin_layout Standard
Command
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Complete Field (bound to Space in Echo Area mode) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Similar to 
\family typewriter
Complete Keyword
\family default
, but only attempts to complete up to and including the first character
 in the keyword with a non-zero :parse-field-separator attribute.
 If there is no field separator then attempt to complete the entire keyword.
 If it is not a keyword parse then just self-insert.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Confirm Parse
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "c_confirm_parse"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Confirm Parse
\end_layout

\end_inset

Confirm Parse ---
\end_layout

\begin_layout Standard
Command
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Confirm Parse (bound to Return in Echo Area mode) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Call the verification function with the current input.
 If it returns a non-nil value then that is returned as the value of the
 parse.
 A parse may return a nil value if the verification function returns a non-nil
 second value.
\end_layout

\begin_layout Section
Files
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingFiles"

\end_inset

This chapter discusses ways to read and write files
 at various levels---at marks, into regions, and into buffers.
 This also treats automatic mechanisms that affect the state of buffers
 in which files are read.
\end_layout

\begin_layout Subsection
File Options and Type Hooks
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "FileOptionsAndTypeHooks"

\end_inset

The user specifies file options with a special syntax
 on the first line of a file.
 If the first line contains the string "-*-", then Hemlock interprets the
 text between the first such occurrence and the second, which must be contained
 in one line , as a list of "option: value" pairs separated by semicolons.
 The following is a typical example:
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
;;; -*- Mode: Lisp, Editor; Package: Hemlock -*-
\end_layout

\begin_layout Standard
See the Hemlock User's Manual for more details and predefined options.
\end_layout

\begin_layout Standard
File type hooks are executed when Hemlock reads a file into a buffer based
 on the type of the pathname.
 When the user specifies a Mode file option that turns on a major mode,
 Hemlock ignores type hooks.
 This mechanism is mostly used as a simple means for turning on some appropriate
 default major mode.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
define-file-option
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_define-file-option"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
define-file-option
\end_layout

\end_inset

define-file-option ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 define-file-option name (buffer value) declaration* form* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This defines a new file option with the string name name.
 Buffer and value specify variable names for the buffer and the option value
 string, and forms are evaluated with these bound.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
define-file-type-hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_define-file-type-hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
define-file-type-hook
\end_layout

\end_inset

define-file-type-hook ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 define-file-type-hook type-list (buffer type) declaration* form* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This defines some code that process-file-options(below) executes when the
 file options fail to set a major mode.
 This associates each type, a string, in type-list with a routine that binds
 buffer to the buffer the file is in and type to the type of the pathname.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
process-file-options
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-file-options"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-file-options
\end_layout

\end_inset

process-file-options ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 process-file-options buffer &optional pathname 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This checks for file options in buffer and invokes handlers if there are
 any.
 Pathname defaults to buffer's pathname but may be nil.
 If there is no Mode file option that specifies a major mode, and pathname
 has a type, then this tries to invoke the appropriate file type hook.
 read-buffer-file calls this.
\end_layout

\begin_layout Subsection
Pathnames and Buffers
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "PathnamesAndBuffers"

\end_inset

There is no good way to uniquely identify buffer names
 and pathnames.
 However, Hemlock has one way of mapping pathnames to buffer names that
 should be used for consistency among customizations and primitives.
 Independent of this, Hemlock provides a means for consistently generating
 prompting defaults when asking the user for pathnames.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
pathname-to-buffer-name
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_pathname-to-buffer-name"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pathname-to-buffer-name
\end_layout

\end_inset

pathname-to-buffer-name ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 pathname-to-buffer-name pathname 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns a string of the form "file-namestring directory-namestring
".
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Pathname Defaults
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_pathname_defaults"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Pathname Defaults
\end_layout

\end_inset

Pathname Defaults ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Pathname Defaults (initial value (pathname "gazonk.del")) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Last Resort Pathname Defaults Function
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_last_resort_pathname_defaults_function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Last Resort Pathname Defaults Function
\end_layout

\end_inset

Last Resort Pathname Defaults Function ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Last Resort Pathname Defaults Function 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Last Resort Pathname Defaults
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_last_resort_pathname_defaults"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Last Resort Pathname Defaults
\end_layout

\end_inset

Last Resort Pathname Defaults ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Last Resort Pathname Defaults (initial value (pathname "gazonk")) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These variables control the computation of default pathnames when needed
 for promting the user.
 Pathname Defaults is a sticky default.
 See the Hemlock User's Manual for more details.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
buffer-default-pathname
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_buffer-default-pathname"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
buffer-default-pathname
\end_layout

\end_inset

buffer-default-pathname ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 buffer-default-pathname buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This returns Buffer Pathname if it is bound.
 If it is not bound, and buffer's name is composed solely of alphnumeric
 characters, then return a pathname formed from buffer's name.
 If buffer's name has other characters in it, then return the value of Last
 Resort Pathname Defaults Function called on buffer.
\end_layout

\begin_layout Subsection
File Groups
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "FileGroups"

\end_inset

Currently Hemlock doesn't have support for file groups.
\end_layout

\begin_layout Subsection
File Reading and Writing
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "FileReadingAndWriting"

\end_inset

Common Lisp pathnames are used by the file primitives.
 For probing, checking write dates, and so forth, all of the Common Lisp
 file functions are available.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
read-file
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_read-file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
read-file
\end_layout

\end_inset

read-file ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 read-file pathname mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This inserts the file named by pathname at mark.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
write-file
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_write-file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
write-file
\end_layout

\end_inset

write-file ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 write-file region pathname &key :keep-backup :append 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Keep Backup Files
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_keep_backup_files"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Keep Backup Files
\end_layout

\end_inset

Keep Backup Files ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Keep Backup Files (initial value nil) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function writes the contents of region to the file named by pathname.
 This writes region using a stream as if it were opened with :if-exists
 supplied as :rename-and-delete.
\end_layout

\begin_layout Standard
When keep-backup, which defaults to the value of Keep Backup Files, is non-nil,
 this opens the stream as if :if-exists were :rename.
 If append is non-nil, this writes the file as if it were opened with:if-exists
 supplied as :append.
\end_layout

\begin_layout Standard
This signals an error if both append and keep-backup are supplied as non-nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
write-buffer-file
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_write-buffer-file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
write-buffer-file
\end_layout

\end_inset

write-buffer-file ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 write-buffer-file buffer pathname 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Write File Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_write_file_hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Write File Hook
\end_layout

\end_inset

Write File Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Write File Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Add Newline at EOF on Writing File
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_add_newline_at_eof_on_writing_file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Add Newline at EOF on Writing File
\end_layout

\end_inset

Add Newline at EOF on Writing File ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Add Newline at EOF on Writing File (initial value :ask-user) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
write-buffer-file writes buffer to the file named by pathname including
 the following: 
\end_layout

\begin_layout Itemize
 It assumes pathname is somehow related to buffer's pathname: if the buffer's
 write date is not the same as pathname's, then this prompts the user for
 confirmation before overwriting the file.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It consults Add Newline at EOF on Writing File (see Hemlock User's Manual
 for possible values) and interacts with the user if necessary.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It sets Pathname Defaults, and after using write-file, marks buffer unmodified.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It updates Buffer's pathname and write date.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It renames the buffer according to the new pathname if possible.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It invokes Write File Hook.
\end_layout

\begin_layout Standard
Write File Hook is a list of functions that take the newly written buffer
 as an argument.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
read-buffer-file
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_read-buffer-file"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
read-buffer-file
\end_layout

\end_inset

read-buffer-file ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 read-buffer-file pathname buffer 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Read File Hook
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_read_file_hook"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Read File Hook
\end_layout

\end_inset

Read File Hook ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Read File Hook 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
read-buffer-file deletes buffer's region and uses read-file to read pathname
 into it, including the following: 
\end_layout

\begin_layout Itemize
 It sets buffer's write date to the file's write date if the file exists;
 otherwise, it messages that this is a new file and sets buffer's write
 date to nil.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It moves buffer's point to the beginning.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It sets buffer's unmodified status.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It sets buffer's pathname to the result of probing pathname if the file
 exists; otherwise, this function sets buffer's pathname to the result of
 merging pathname with default-directory.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It sets Pathname Defaults to the result of the previous item.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It processes the file options.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 It invokes Read File Hook.
\end_layout

\begin_layout Standard
Read File Hook is a list functions that take two arguments---the buffer
 read into and whether the file existed, t if so.
\end_layout

\begin_layout Section
Hemlock's Lisp Environment
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingHemlockSLispEnvironment"

\end_inset

This chapter is sort of a catch
 all for any functions and variables which concern Hemlock's interaction
 with the outside world.
\end_layout

\begin_layout Subsection
Entering and Leaving the Editor
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "EnteringAndLeavingTheEditor"

\end_inset


\end_layout

\begin_layout Subsubsection
ed
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_ed"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ed
\end_layout

\end_inset

ed ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 ed &optional x 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This a standard Common Lisp function.
 If x is supplied and is a string or pathname, the file specified by x is
 visited in a hemlock view (opening a new window if necessary, otherwise
 bringing an existing window with the file to the front), and the hemlock
 view object is the return value from the function.
\end_layout

\begin_layout Standard
If x is null, a new empty hemlock view is created and returned.
\end_layout

\begin_layout Standard
If x is a symbol or a setf function name, it attempts to edit the definition
 of the name.
 In this last case, the function returns without waiting for the operation
 to complete (for example, it might put up a non-modal dialog asking the
 user to select one of multiple definitions) and hence the return value
 is always NIL.
\end_layout

\begin_layout Subsection
Keyboard Input
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "KeyboardInput"

\end_inset


\end_layout

\begin_layout Subsubsection
*key-event-history*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_key-event-history"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*key-event-history*
\end_layout

\end_inset

*key-event-history* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 *key-event-history* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This is a Hemlock ring buffer that holds the last 60 key-events received.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
last-key-event-typed
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_last-key-event-typed"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
last-key-event-typed
\end_layout

\end_inset

last-key-event-typed ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 last-key-event-typed 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the last key-event the user typed to invoke the current
 command.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
last-char-typed
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_last-char-typed"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
last-char-typed
\end_layout

\end_inset

last-char-typed ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 last-char-typed 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the character corresponding to the last key event
 typed.
\end_layout

\begin_layout Subsection
Hemlock Streams
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockStreams"

\end_inset

It is possible to create streams which output to or get input
 from a buffer.
 This mechanism is quite powerful and permits easy interfacing of Hemlock
 to Lisp.
\end_layout

\begin_layout Standard
Note that operations on these streams operate directly on buffers, therefore
 they have the same restrictions as described here for interacting with
 buffers from outside of the GUI thread.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
make-hemlock-output-stream
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-hemlock-output-stream"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-hemlock-output-stream
\end_layout

\end_inset

make-hemlock-output-stream ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 make-hemlock-output-stream mark &optional buffered 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns a stream that inserts at mark all output directed
 to it.
 It works best if mark is a left-inserting mark.
 Buffered controls whether the stream is buffered or not, and its valid
 values are the following keywords:
\end_layout

\begin_layout Description
:none No buffering is done.
 This is the default.
 
\end_layout

\begin_layout Description
:line The buffer is flushed whenever a newline is written or when it is
 explicitly done with force-output.
 
\end_layout

\begin_layout Description
:full The stream is only brought up to date when it is explicitly done with
 force-output 
\end_layout

\begin_layout Standard
\noindent

\end_layout

\begin_layout Subsubsection
hemlock-output-stream-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_hemlock-output-stream-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
hemlock-output-stream-p
\end_layout

\end_inset

hemlock-output-stream-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 hemlock-output-stream-p object 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if object is a hemlock-output-stream object.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
make-hemlock-region-stream
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-hemlock-region-stream"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-hemlock-region-stream
\end_layout

\end_inset

make-hemlock-region-stream ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 make-hemlock-region-stream region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns a stream from which the text in region can be read.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
hemlock-region-stream-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_hemlock-region-stream-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
hemlock-region-stream-p
\end_layout

\end_inset

hemlock-region-stream-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 hemlock-region-stream-p object 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if object is a hemlock-region-stream object.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
with-input-from-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-input-from-region"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-input-from-region
\end_layout

\end_inset

with-input-from-region ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 with-input-from-region (var region) declaration* form* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
While evaluating forms, binds var to a stream which returns input from region.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
with-output-to-mark
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-output-to-mark"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-output-to-mark
\end_layout

\end_inset

with-output-to-mark ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 with-output-to-mark (var mark [buffered]) declaration* form* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
During the evaluation of the forms, binds var to a stream which inserts
 output at the permanent mark.
 Buffered has the same meaning as for make-hemlock-output-stream.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
with-pop-up-display
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-pop-up-display"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-pop-up-display
\end_layout

\end_inset

with-pop-up-display ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 with-pop-up-display (var &key height name) declaration* form* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This macro executes forms in a context with var bound to a stream.
 Hemlock collects output to this stream and tries to pop up a display of
 the appropriate height containing all the output.
 When height is supplied, Hemlock creates the pop-up display immediately,
 forcing output on line breaks.
 This is useful for displaying information of temporary interest.
\end_layout

\begin_layout Subsection
Interface to the Error System
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "InterfaceToTheErrorSystem"

\end_inset


Hemlock commands are executed from an event handler
 in the initial Cocoa thread.
 They are executed within a ccl::with-standard-abort-handling form, which
 means cl:abort, ccl:abort-break, ccl:throw-cancel will abort the current
 command only and exit the event handler in an orderly fashion.
\end_layout

\begin_layout Standard
In addition, for now, lisp errors during command execution dump a backtrace
 in the system console and are otherwise handled as if by 
\family typewriter
handle-lisp-errors
\family default
 below, which means it is not possible to debug errors at the point of the
 error.
 Once Clozure CL has better support for debugging errors in the initial
 Cocoa thread, better Hemlock error handling will be provided that will
 allow for some way to debug.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
editor-error
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_editor-error"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
editor-error
\end_layout

\end_inset

editor-error ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 editor-error &rest args 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function is called to report minor errors to the user.
 These are errors that a normal user could encounter in the course of editing,
 such as a search failing or an attempt to delete past the end of the buffer.
 This function simply aborts the current command.
 Any args specified are used to format an error message to be placed in
 the echo area.
 This function never returns.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
handle-lisp-errors
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_handle-lisp-errors"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
handle-lisp-errors
\end_layout

\end_inset

handle-lisp-errors ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 handle-lisp-errors form* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Within the body of this macro any Lisp errors that occur are handled by
 displaying an error message in a dialog and aborting the current command,
 leaving the error text in the echo area.
 This macro should be wrapped around code which may get an error due to
 some action of the user --- for example, evaluating code fragments on the
 behalf of and supplied by the user.
\end_layout

\begin_layout Subsection
Definition Editing
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "DefinitionEditing"

\end_inset

Hemlock provides commands for finding the definition of
 a function or variable and placing the user at the definition in a buffer.
 A function is provided to allow invoking this functionality outside of
 Hemlock.
 Note that this function is unusual in that it is it is safe to call outside
 of the command interpreter, and in fact it can be called from any thread.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
edit-definition
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_edit-definition"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
edit-definition
\end_layout

\end_inset

edit-definition ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 edit-definition name 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function tries to find the definition of 
\family typewriter
name
\family default
, create or activate the window containing it, and scroll the view to show
 the definition.
 If there are multiple definitions available, the user is given a choice
 of which one to use.
 This function may return before the operation is complete.
\end_layout

\begin_layout Subsection
Event Scheduling
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "EventScheduling"

\end_inset

No Event Scheduling functionality is provided at this time.
\end_layout

\begin_layout Subsection
Miscellaneous
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Miscellaneous"

\end_inset

Miscellaneous
\end_layout

\begin_layout Subsubsection

\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_in-lisp"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
in-lisp
\end_layout

\end_inset

in-lisp ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 in-lisp form* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This evaluates forms inside handle-lisp-errors.
 It also binds *package* to the package named by Current Package if it is
 non-nil.
 Use this when evaluating Lisp code on behalf of the user.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
do-alpha-chars
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_do-alpha-chars"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
do-alpha-chars
\end_layout

\end_inset

do-alpha-chars ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 do-alpha-chars (var kind [result]) form* 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This iterates over alphabetic characters in Common Lisp binding var to each
 character in order as specified under character relations in Common Lisp
 the Language.
 Kind is one of:lower, :upper, or :both.
 When the user supplies :both, lowercase characters are processed first.
\end_layout

\begin_layout Section
High-Level Text Primitives
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingHighLevelTextPrimitives"

\end_inset

This chapter discusses primitives
 that operate on higher level text forms than characters and words.
 For English text, there are functions that know about sentence and paragraph
 structures, and for Lisp sources, there are functions that understand this
 language.
 This chapter also describes mechanisms for organizing file sections into
 logical pages and for formatting text forms.
\end_layout

\begin_layout Subsection
Indenting Text
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "IndentingText"

\end_inset


\end_layout

\begin_layout Subsubsection
Indent Function
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_indent_function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Indent Function
\end_layout

\end_inset

Indent Function ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Indent Function (initial value tab-to-tab-stop) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
The value of this variable determines how indentation is done, and it is
 a function which is passed a mark as its argument.
 The function should indent the line that the mark points to.
 The function may move the mark around on the line.
 The mark will be :left-inserting.
 The default simply inserts a tab character at the mark.
 A function for Lisp mode probably moves the mark to the beginning of the
 line, deletes horizontal whitespace, and computes some appropriate indentation
 for Lisp code.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Indent with Tabs
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_indent_with_tabs"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Indent with Tabs
\end_layout

\end_inset

Indent with Tabs ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Indent with Tabs (initial value nil) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Spaces per Tab
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_spaces_per_tab"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Spaces per Tab
\end_layout

\end_inset

Spaces per Tab ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Spaces per Tab (initial value 8) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Indent with Tabs should be true if indenting should use tabs whenever possible.
 If nil, the default, it only uses spaces.
 Spaces per Tab defines the size of a tab.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
indent-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_indent-region"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
indent-region
\end_layout

\end_inset

indent-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 indent-region region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
indent-region-for-commands
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_indent-region-for-commands"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
indent-region-for-commands
\end_layout

\end_inset

indent-region-for-commands ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 indent-region-for-commands region 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
indent-region invokes the value of Indent Function on every line of region.
 indent-region-for-commands uses indent-region but first saves the region
 for the Undo command.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
delete-horizontal-space
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_delete-horizontal-space"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete-horizontal-space
\end_layout

\end_inset

delete-horizontal-space ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 delete-horizontal-space mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This deletes all characters on either side of mark with a Space attribute
 (see System Defined Character Attributes) of 1.
\end_layout

\begin_layout Subsection
Lisp Text Buffers
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "LispTextBuffers"

\end_inset

Hemlock bases its Lisp primitives on parsing a block of the
 buffer and annotating lines as to what kind of Lisp syntax occurs on the
 line or what kind of form a mark might be in (for example, string, comment,
 list, etc.).
 These do not work well if the block of parsed forms is exceeded when moving
 marks around these forms, but the block that gets parsed is somewhat programmab
le.
\end_layout

\begin_layout Standard
There is also a notion of a top level form which this documentation often
 uses synonymously with defun, meaning a Lisp form occurring in a source
 file delimited by parentheses with the opening parenthesis at the beginning
 of some line.
 The names of the functions include this inconsistency.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
pre-command-parse-check
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_pre-command-parse-check"

\end_inset

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pre-command-parse-check
\end_layout

\end_inset

pre-command-parse-check ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 pre-command-parse-check mark for-sure 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Parse Start Function
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_parse_start_function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Parse Start Function
\end_layout

\end_inset

Parse Start Function ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Parse Start Function (initial value start-of-parse-block) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Parse End Function
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_parse_end_function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Parse End Function
\end_layout

\end_inset

Parse End Function ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Parse End Function (initial value end-of-parse-block) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Minimum Lines Parsed
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_minimum_lines_parsed"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Minimum Lines Parsed
\end_layout

\end_inset

Minimum Lines Parsed ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Minimum Lines Parsed (initial value 50) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Maximum Lines Parsed
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_maximum_lines_parsed"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Maximum Lines Parsed
\end_layout

\end_inset

Maximum Lines Parsed ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Maximum Lines Parsed (initial value 500) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Defun Parse Goal
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_defun_parse_goal"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Defun Parse Goal
\end_layout

\end_inset

Defun Parse Goal ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Defun Parse Goal (initial value 2) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
pre-command-parse-check calls Parse Start Function and Parse End Function
 on mark to get two marks.
 It then parses all the lines between the marks including the complete lines
 they point into.
 When for-sure is non-nil, this parses the area regardless of any cached
 information about the lines.
 Every command that uses the following routines calls this before doing
 so.
\end_layout

\begin_layout Standard
The default values of the start and end variables use Minimum Lines Parsed,
 Maximum Lines Parsed, and Defun Parse Goal to determine how big a region
 to parse.
 These two functions always include at least the minimum number of lines
 before and after the mark passed to them.
 They try to include Defun Parse Goal number of top level forms before and
 after the mark passed them, but these functions never return marks that
 include more than the maximum number of lines before or after the mark
 passed to them.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
form-offset
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_form-offset"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
form-offset
\end_layout

\end_inset

form-offset ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 form-offset mark count 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This tries to move mark count forms forward if positive or -count forms
 backwards if negative.
 Mark is always moved.
 If there were enough forms in the appropriate direction, this returns mark,
 otherwise nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
top-level-offset
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_top-level-offset"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
top-level-offset
\end_layout

\end_inset

top-level-offset ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 top-level-offset mark count 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This tries to move mark count top level forms forward if positive or -count
 top level forms backwards if negative.
 If there were enough top level forms in the appropriate direction, this
 returns mark, otherwise nil.
 Mark is moved only if this is successful.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mark-top-level-form
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-top-level-form"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-top-level-form
\end_layout

\end_inset

mark-top-level-form ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mark-top-level-form mark1 mark2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This moves mark1 and mark2 to the beginning and end, respectively, of the
 current or next top level form.
 Mark1 is used as a reference to start looking.
 The marks may be altered even if unsuccessful.
 If successful, return mark2, else nil.
 Mark2 is left at the beginning of the line following the top level form
 if possible, but if the last line has text after the closing parenthesis,
 this leaves the mark immediately after the form.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
defun-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_defun-region"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
defun-region
\end_layout

\end_inset

defun-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 defun-region mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This returns a region around the current or next defun with respect to mark.
 Mark is not used to form the region.
 If there is no appropriate top level form, this signals an editor-error.
 This calls pre-command-parse-check first.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
inside-defun-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_inside-defun-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
inside-defun-p
\end_layout

\end_inset

inside-defun-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 inside-defun-p mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
start-defun-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_start-defun-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
start-defun-p
\end_layout

\end_inset

start-defun-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 start-defun-p mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These return, respectively, whether mark is inside a top level form or at
 the beginning of a line immediately before a character whose Lisp Syntax
 (see System Defined Character Attributes) value is :opening-paren.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
forward-up-list
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_forward-up-list"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
forward-up-list
\end_layout

\end_inset

forward-up-list ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 forward-up-list mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
backward-up-list
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_backward-up-list"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
backward-up-list
\end_layout

\end_inset

backward-up-list ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 backward-up-list mark 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Respectively, these move mark immediately past a character whose Lisp Syntax
 (see System Defined Character Attributes) value is :closing-paren or immediatel
y before a character whose Lisp Syntax value is :opening-paren.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
valid-spot
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_valid-spot"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
valid-spot
\end_layout

\end_inset

valid-spot ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 valid-spot mark forwardp 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This returns t or nil depending on whether the character indicated by mark
 is a valid spot.
 When forwardp is set, use the character after mark and vice versa.
 Valid spots exclude commented text, inside strings, and character quoting.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
defindent
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_defindent"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
defindent
\end_layout

\end_inset

defindent ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 defindent name count 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This defines the function with name to have count special arguments.
 indent-for-lisp, the value of Indent Function in Lisp mode, uses this to
 specially indent these arguments.
 For example, do has two, with-open-file has one, etc.
 There are many of these defined by the system including definitions for
 special Hemlock forms.
 Name is a simple-string, case insensitive and purely textual (that is,
 not read by the Lisp reader); therefore, "with-a-mumble" is distinct from
 "mumble:with-a-mumble".
\end_layout

\begin_layout Subsection
English Text Buffers
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "EnglishTextBuffers"

\end_inset

This section describes some routines that understand basic
 English language forms.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
word-offset
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_word-offset"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
word-offset
\end_layout

\end_inset

word-offset ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 word-offset mark count 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This moves mark count words forward (if positive) or backwards (if negative).
 If mark is in the middle of a word, that counts as one.
 If there were count (-count if negative) words in the appropriate direction,
 this returns mark, otherwise nil.
 This always moves mark.
 A word lies between two characters whose Word Delimiter attribute value
 is 1 (see System Defined Character Attributes).
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
sentence-offset
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_sentence-offset"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
sentence-offset
\end_layout

\end_inset

sentence-offset ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 sentence-offset mark count 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This moves mark count sentences forward (if positive) or backwards (if negative).
 If mark is in the middle of a sentence, that counts as one.
 If there were count (-count if negative) sentences in the appropriate direction
, this returns mark, otherwise nil.
 This always moves mark.
\end_layout

\begin_layout Standard
A sentence ends with a character whose Sentence Terminator attribute is
 1 followed by two spaces, a newline, or the end of the buffer.
 The terminating character is optionally followed by any number of characters
 whose Sentence Closing Char attribute is 1.
 A sentence begins after a previous sentence ends, at the beginning of a
 paragraph, or at the beginning of the buffer.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
paragraph-offset
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_paragraph-offset"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
paragraph-offset
\end_layout

\end_inset

paragraph-offset ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 paragraph-offset mark count &optional prefix 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Paragraph Delimiter Function
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_paragraph_delimiter_function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Paragraph Delimiter Function
\end_layout

\end_inset

Paragraph Delimiter Function ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Paragraph Delimiter Function (initial value ) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This moves mark count paragraphs forward (if positive) or backwards (if
 negative).
 If mark is in the middle of a paragraph, that counts as one.
 If there were count (-count if negative) paragraphs in the appropriate
 direction, this returns mark, otherwise nil.
 This only moves mark if there were enough paragraphs.
\end_layout

\begin_layout Standard
Paragraph Delimiter Function holds a function that takes a mark, typically
 at the beginning of a line, and returns whether or not the current line
 should break the paragraph.
 default-para-delim-function returns t if the next character, the first
 on the line, has a Paragraph Delimiter attribute value of 1.
 This is typically a space, for an indented paragraph, or a newline, for
 a block style.
 Some modes require a more complicated determinant; for example, Scribe
 modes adds some characters to the set and special cases certain formatting
 commands.
\end_layout

\begin_layout Standard
Prefix defaults to Fill Prefix, and the right prefix is necessary to correctly
 skip paragraphs.
 If prefix is non-nil, and a line begins with prefix, then the scanning
 process skips the prefix before invoking the Paragraph Delimiter Function.
 Note, when scanning for paragraph bounds, and prefix is non-nil, lines
 are potentially part of the paragraph regardless of whether they contain
 the prefix; only the result of invoking the delimiter function matters.
\end_layout

\begin_layout Standard
The programmer should be aware of an idiom for finding the end of the current
 paragraph.
 Assume paragraphp is the result of moving mark one paragraph, then the
 following correctly determines whether there actually is a current paragraph:
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
(or paragraphp (and (last-line-p mark) (end-line-p mark) (not (blank-line-p
 (mark-line mark)))))
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
In this example mark is at the end of the last paragraph in the buffer,
 and there is no last newline character in the buffer.
 paragraph-offset would have returned nil since it could not skip any paragraphs
 since mark was at the end of the current and last paragraph.
 However, you still have found a current paragraph on which to operate.
 mark-paragraph understands this problem.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
mark-paragraph
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_mark-paragraph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
mark-paragraph
\end_layout

\end_inset

mark-paragraph ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 mark-paragraph mark1 mark2 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This marks the next or current paragraph, setting mark1 to the beginning
 and mark2 to the end.
 This uses Fill Prefix.
 Mark1 is always on the first line of the paragraph, regardless of whether
 the previous line is blank.
 Mark2 is typically at the beginning of the line after the line the paragraph
 ends on, this returns mark2 on success.
 If this cannot find a paragraph, then the marks are left unmoved, and nil
 is returned.
\end_layout

\begin_layout Subsection
Logical Pages
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "LogicalPages"

\end_inset

Logical pages are not supported at this time.
\end_layout

\begin_layout Subsection
Filling
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Filling"

\end_inset

Filling is an operation on text that breaks long lines at word boundaries
 before a given column and merges shorter lines together in an attempt to
 make each line roughly the specified length.
 This is different from justification which tries to add whitespace in awkward
 places to make each line exactly the same length.
 Hemlock's filling optionally inserts a specified string at the beginning
 of each line.
 Also, it eliminates extra whitespace between lines and words, but it knows
 two spaces follow sentences.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Fill Column
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_fill_column"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Fill Column
\end_layout

\end_inset

Fill Column ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Fill Column (initial value 75) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
Fill Prefix
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "hv_fill_prefix"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Fill Prefix
\end_layout

\end_inset

Fill Prefix ---
\end_layout

\begin_layout Standard
Hemlock Variable
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 Fill Prefix (initial value nil) 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
These variables hold the default values of the prefix and column arguments
 to Hemlock's filling primitives.
 If Fill Prefix is nil, then there is no fill prefix.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
fill-region
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_fill-region"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fill-region
\end_layout

\end_inset

fill-region ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 fill-region region &optional prefix column 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This deletes any blank lines in region and fills it according to prefix
 and column.
 Prefix and column default to Fill Prefix and Fill Column.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
fill-region-by-paragraphs
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_fill-region-by-paragraphs"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fill-region-by-paragraphs
\end_layout

\end_inset

fill-region-by-paragraphs ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 fill-region-by-paragraphs region &optional prefix column 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This finds paragraphs within region and fills them with fill-region.
 This ignores blank lines between paragraphs.
 Prefix and column default to Fill Prefix and Fill Column.
\end_layout

\begin_layout Section
Utilities
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingUtilities"

\end_inset

This chapter describes a number of utilities
 for manipulating some types of objects Hemlock uses to record information.
 String-tables are used to store names of variables, commands, modes, and
 buffers.
 Ring lists can be used to provide a kill ring, recent command history,
 or other user-visible features.
\end_layout

\begin_layout Subsection
String-table Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "StringTableFunctions"

\end_inset

String tables are similar to Common Lisp hash tables
 in that they associate a value with an object.
 There are a few useful differences: in a string table the key is always
 a case insensitive string, and primitives are provided to facilitate keyword
 completion and recognition.
 Any type of string may be added to a string table, but the string table
 functions always return simple-string's.
\end_layout

\begin_layout Standard
A string entry in one of these tables may be thought of as being separated
 into fields or keywords.
 The interface provides keyword completion and recognition which is primarily
 used to implement some Echo Area commands.
 These routines perform a prefix match on a field-by-field basis allowing
 the ambiguous specification of earlier fields while going on to enter later
 fields.
 While string tables may use any string-char as a separator, the use of
 characters other than space may make the Echo Area commands fail or work
 unexpectedly.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
make-string-table
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-string-table"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-string-table
\end_layout

\end_inset

make-string-table ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 make-string-table 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function creates an empty string table that uses separator as the character
, which must be a string-char, that distinguishes fields.
 Initial-contents specifies an initial set of strings and their values in
 the form of a dotted a-list, for example:
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
'(("Global" .
 t) ("Mode" .
 t) ("Buffer" .
 t))
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
string-table-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_string-table-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
string-table-p
\end_layout

\end_inset

string-table-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 string-table-p string-table 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns t if string-table is a string-table object, otherwise
 nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
string-table-separator
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_string-table-separator"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
string-table-separator
\end_layout

\end_inset

string-table-separator ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 string-table-separator string-table 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns the separator character given to make-string-table.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
delete-string
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_delete-string"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
delete-string
\end_layout

\end_inset

delete-string ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 delete-string string table 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
clrstring
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_clrstring"

\end_inset



\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
clrstring
\end_layout

\end_inset

clrstring ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 clrstring table 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
delete-string removes any entry for string from the string-table table,
 returning t if there was an entry.
 clrstring removes all entries from table.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
getstring
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_getstring"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getstring
\end_layout

\end_inset

getstring ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 getstring string table 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function returns as multiple values, first the value corresponding
 to the string if it is found and nil if it isn't, and second t if it is
 found and nil if it isn't.
\end_layout

\begin_layout Standard
This may be set with setf to add a new entry or to store a new value for
 a string.
 It is an error to try to insert a string with more than one field separator
 character occurring contiguously.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
complete-string
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_complete-string"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
complete-string
\end_layout

\end_inset

complete-string ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 complete-string string tables 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This function completes string as far as possible over the list of tables,
 returning five values.
 It is an error for tables to have different separator characters.
 The five return values are as follows: 
\end_layout

\begin_layout Itemize
 The maximal completion of the string or nil if there is none.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Itemize
 An indication of the usefulness of the returned string:
\end_layout

\begin_layout Description
:none There is no completion of string.
 
\end_layout

\begin_layout Description
:complete The completion is a valid entry, but other valid completions exist
 too.
 This occurs when the supplied string is an entry as well as initial substring
 of another entry.
 
\end_layout

\begin_layout Description
:unique The completion is a valid entry and unique.
 
\end_layout

\begin_layout Description
:ambiguous The completion is invalid; get-string would return nil and nil
 if given the returned string.
 
\end_layout

\begin_layout Itemize
 The value of the string when the completion is :unique or :complete, otherwise
 nil.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 An index, or nil, into the completion returned, indicating where the addition
 of a single field to string ends.
 The command Complete Field uses this when the completion contains the addition
 to string of more than one field.
\end_layout

\begin_layout --Separator--
\noindent

\end_layout

\begin_layout Itemize
 An index to the separator following the first ambiguous field when the
 completion is :ambiguous or :complete, otherwise nil.
\end_layout

\begin_layout Standard
\noindent

\end_layout

\begin_layout Subsubsection
find-ambiguous
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_find-ambiguous"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
find-ambiguous
\end_layout

\end_inset

find-ambiguous ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 find-ambiguous string table 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
find-containing
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_find-containing"

\end_inset



\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
find-containing
\end_layout

\end_inset

find-containing ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 find-containing string table 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
find-ambiguous returns a list in alphabetical order of all the strings in
 table matching string.
 This considers an entry as matching if each field in string, taken in order,
 is an initial substring of the entry's fields; entry may have fields remaining.
\end_layout

\begin_layout Standard
find-containing is similar, but it ignores the order of the fields in string,
 returning all strings in table matching any permutation of the fields in
 string.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
do-strings
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_do-strings"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
do-strings
\end_layout

\end_inset

do-strings ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 do-strings (string-var value-var table result) declaration tag statement
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
This macro iterates over the strings in table in alphabetical order.
 On each iteration, it binds string-var to an entry's string and value-var
 to an entry's value.
\end_layout

\begin_layout Subsection
Ring Functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "RingFunctions"

\end_inset

There are various purposes in an editor for which a ring of
 values can be used, so Hemlock provides a general ring buffer type.
 It is used for maintaining a ring of killed regions, a ring of marks, or
 a ring of command strings which various modes and commands maintain as
 a history mechanism.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
make-ring
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-ring"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-ring
\end_layout

\end_inset

make-ring ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 make-ring length &optional delete-function 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Makes an empty ring object capable of holding up to length Lisp objects.
 Delete-function is a function that each object is passed to before it falls
 off the end.
 Length must be greater than zero.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
ringp
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_ringp"

\end_inset



\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ringp
\end_layout

\end_inset

ringp ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 ringp ring 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns t if ring is a ring object, otherwise nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
ring-length
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_ring-length"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ring-length
\end_layout

\end_inset

ring-length ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 ring-length ring 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns as multiple-values the number of elements which ring currently holds
 and the maximum number of elements which it may hold.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
ring-ref
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_ring-ref"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ring-ref
\end_layout

\end_inset

ring-ref ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 ring-ref ring index 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Returns the index'th item in the ring, where zero is the index of the most
 recently pushed.
 This may be set with setf.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
ring-push
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_ring-push"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ring-push
\end_layout

\end_inset

ring-push ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 ring-push object ring 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Pushes object into ring, possibly causing the oldest item to go away.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
ring-pop
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_ring-pop"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ring-pop
\end_layout

\end_inset

ring-pop ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 ring-pop ring 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Removes the most recently pushed object from ring and returns it.
 If the ring contains no elements then an error is signalled.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
rotate-ring
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_rotate-ring"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
rotate-ring
\end_layout

\end_inset

rotate-ring ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 rotate-ring ring offset 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
With a positive offset, rotates ring forward that many times.
 In a forward rotation the index of each element is reduced by one, except
 the one which initially had a zero index, which is made the last element.
 A negative offset rotates the ring the other way.
\end_layout

\begin_layout Subsection
Undoing commands
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "UndoingCommands"

\end_inset

No API to the undo facility is provided at this time.
\end_layout

\begin_layout Section
Miscellaneous
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "HemlockProgrammingMiscellaneous"

\end_inset

This chapter is somewhat of a catch-all for
 comments and features that don't fit well anywhere else.
\end_layout

\begin_layout Subsection
Key-events
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "KeyEvents"

\end_inset


\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "KeyEventsIntroduction"

\end_inset

The canonical representation of editor input is a key-event
 structure.
 Users can bind commands to keys, which are non-empty sequences of key-events.
 A key-event consists of an identifying token known as a keysym and a field
 of bits representing modifiers.
 Users define keysyms by supplying names that reflect the legends on their
 keyboard's keys.
 Users define modifier names similarly, but the system chooses the bit and
 mask for recognizing the modifier.
 You can use keysym and modifier names to textually specify key-events and
 Hemlock keys in a #k syntax.
 The following are some examples:
\end_layout

\begin_layout Standard
[firstnumber=1,]
\end_layout

\begin_layout Standard
#k"C-u" #k"Control-u" #k"c-m-z" #k"control-x meta-d" #k"a" #k"A" #k"Linefeed"
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
This is convenient for use within code and in init files containing bind-key
 calls.
\end_layout

\begin_layout Standard
The #k syntax is delimited by double quotes, but the system parses the contents
 rather than reading it as a Common Lisp string.
 Within the double quotes, spaces separate multiple key-events.
 A single key-event optionally starts with modifier names terminated by
 hyphens.
 Modifier names are alphabetic sequences of characters which the system
 uses case-insensitively.
 Following modifiers is a keysym name, which is case-insensitive if it consists
 of multiple characters, but if the name consists of only a single character,
 then it is case-sensitive.
\end_layout

\begin_layout Standard
You can escape special characters --- hyphen, double quote, open angle bracket,
 close angle bracket, and space --- with a backslash, and you can specify
 a backslash by using two contiguously.
 You can use angle brackets to enclose a keysym name with many special character
s in it.
 Between angle brackets appearing in a keysym name position, there are only
 two special characters, the closing angle bracket and backslash.
\end_layout

\begin_layout Subsubsection
Interface
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "KeyEventsInterface"

\end_inset


\end_layout

\begin_layout Paragraph
define-keysym
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_define-keysym"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
define-keysym
\end_layout

\end_inset

define-keysym ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 define-keysym keysym preferred-name &rest other-names 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function establishes a mapping from preferred-name to keysym for purposes
 of #k syntax.
 Other-names also map to keysym, but the system uses preferred-name when
 printing key-events.
 The names are case-insensitive simple-strings; however, if the string contains
 a single character, then it is used case-sensitively.
 Redefining a keysym or re-using names has undefined effects.
\end_layout

\begin_layout Standard
Keysym can be any object, but generally it is either an integer representing
 the window-system code for the event, or a keyword which allows the mapping
 of the keysym to its code to be defined separately.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
define-keysym-code
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_define-keysym-code"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
define-keysym-code
\end_layout

\end_inset

define-keysym-code ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 define-keysym-code keysym code 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
Defines the window-system code for the key event which in Hemlock is represented
 by keysym.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
define-mouse-keysym
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_define-mouse-keysym"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
define-mouse-keysym
\end_layout

\end_inset

define-mouse-keysym ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 define-mouse-keysym button keysym name shifted-bit event-key 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function defines keysym named name for key-events representing mouse
 click events.
 Shifted-bit is a defined modifier name that translate-mouse-key-event sets
 in the key-event it returns whenever the shift bit is set in an incoming
 event.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
name-keysym
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_name-keysym"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
name-keysym
\end_layout

\end_inset

name-keysym ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 name-keysym name 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the keysym named name.
 If name is unknown, this returns nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
keysym-names
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_keysym-names"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
keysym-names
\end_layout

\end_inset

keysym-names ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 keysym-names keysym 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the list of all names for keysym.
 If keysym is undefined, this returns nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
keysym-preferred-name
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_keysym-preferred-name"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
keysym-preferred-name
\end_layout

\end_inset

keysym-preferred-name ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 keysym-preferred-name keysym 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This returns the preferred name for keysym, how it is typically printed.
 If keysym is undefined, this returns nil.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
define-key-event-modifier
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_define-key-event-modifier"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
define-key-event-modifier
\end_layout

\end_inset

define-key-event-modifier ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 define-key-event-modifier long-name short-name 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This establishes long-name and short-name as modifier names for purposes
 of specifying key-events in #k syntax.
 The names are case-insensitive strings.
 If either name is already defined, this signals an error.
\end_layout

\begin_layout Standard
The system defines the following default modifiers (first the long name,
 then the short name): 
\end_layout

\begin_layout Itemize
 "Hyper", "H"
\end_layout

\begin_layout Itemize
 "Super", "S"
\end_layout

\begin_layout Itemize
 "Meta", "M"
\end_layout

\begin_layout Itemize
 "Control", "C"
\end_layout

\begin_layout Itemize
 "Shift", "Shift"
\end_layout

\begin_layout Itemize
 "Lock", "Lock"
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
*all-modifier-names*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_all-modifier-names"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*all-modifier-names*
\end_layout

\end_inset

*all-modifier-names* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 *all-modifier-names* 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This variable holds all the defined modifier names.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
make-key-event-bits
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-key-event-bits"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-key-event-bits
\end_layout

\end_inset

make-key-event-bits ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 make-key-event-bits &rest modifier-names 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns bits suitable for make-key-event from the supplied
 modifier-names.
 If any name is undefined, this signals an error.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
key-event-modifier-mask
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_key-event-modifier-mask"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
key-event-modifier-mask
\end_layout

\end_inset

key-event-modifier-mask ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 key-event-modifier-mask modifier-name 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a mask for modifier-name.
 This mask is suitable for use with key-event-bits.
 If modifier-name is undefined, this signals an error.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
key-event-bits-modifiers
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_key-event-bits-modifiers"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
key-event-bits-modifiers
\end_layout

\end_inset

key-event-bits-modifiers ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 key-event-bits-modifiers bits 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This returns a list of key-event modifier names, one for each modifier set
 in bits.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
make-key-event
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-key-event"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-key-event
\end_layout

\end_inset

make-key-event ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 make-key-event object bits 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns a key-event described by object with bits.
 Object is one of keysym, string, or key-event.
 When object is a key-event, this uses key-event-keysym.
 You can form bits with make-key-event-bits or key-event-modifier-mask.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
key-event-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_key-event-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
key-event-p
\end_layout

\end_inset

key-event-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 key-event-p object 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns whether object is a key-event.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
key-event-bits
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_key-event-bits"

\end_inset



\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
key-event-bits
\end_layout

\end_inset

key-event-bits ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 key-event-bits key-event 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the bits field of a key-event.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
key-event-keysym
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_key-event-keysym"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
key-event-keysym
\end_layout

\end_inset

key-event-keysym ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 key-event-keysym key-event 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the keysym field of a key-event.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
char-key-event
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_char-key-event"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
char-key-event
\end_layout

\end_inset

char-key-event ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 char-key-event character 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the key-event associated with character.
 You can associate a key-event with a character by setf-ing this form.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
key-event-char
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_key-event-char"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
key-event-char
\end_layout

\end_inset

key-event-char ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 key-event-char key-event 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns the character associated with key-event.
 You can associate a character with a key-event by setf'ing this form.
 The system defaultly translates key-events in some implementation dependent
 way for text insertion; for example, under an ASCII system, the key-event
 #k"C-h", as well as #k"backspace" would map to the Common Lisp character
 that causes a backspace.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
key-event-bit-p
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_key-event-bit-p"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
key-event-bit-p
\end_layout

\end_inset

key-event-bit-p ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 key-event-bit-p key-event bit-name 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This function returns whether key-event has the bit set named by bit-name.
 This signals an error if bit-name is undefined.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
do-alpha-key-events
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_do-alpha-key-events"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
do-alpha-key-events
\end_layout

\end_inset

do-alpha-key-events ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 do-alpha-key-events (var kind &optional result) form 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This macro evaluates each form with var bound to a key-event representing
 an alphabetic character.
 Kind is one of :lower, :upper, or :both, and this binds var to each key-event
 in order a-z A-Z.
 When :both is specified, this processes lowercase letters first.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Paragraph
pretty-key-string
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_pretty-key-string"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
pretty-key-string
\end_layout

\end_inset

pretty-key-string ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subparagraph*
Synopsis
\end_layout

\begin_layout Standard
 pretty-key-string key &optional stream long-names-p 
\end_layout

\begin_layout Subparagraph*
Description
\end_layout

\begin_layout Standard
This returns a string representing key, a key-event or vector of key-events,
 in a user-expected fashion.
 Long-names-p indicates whether modifiers should be described by their long
 or short name.
 
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset


\end_layout

\end_body
\end_document
