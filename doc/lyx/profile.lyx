#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble

% -----------------------------------------  
% Autogenerated LaTeX file from XML DocBook  
% -----------------------------------------  
%%<params>
%%</params>

\usepackage{ifthen}\newboolean{DBKIsBook}
\setboolean{DBKIsBook}{true}
\IfFileExists{ifxetex.sty}{%
    \usepackage{ifxetex}%
  }{%
    \newif\ifxetex
    \xetexfalse
  }
  \ifxetex
\usepackage{fontspec}\usepackage{xltxtra}\setmainfont{DejaVu Serif}
\setsansfont{DejaVu Sans}
\setmonofont{DejaVu Sans Mono}
\else
\fi
\usepackage{fancybox}\usepackage[hyperlink]{docbook}\renewcommand{\DBKreleaseinfo}{}


\title{Profiling}
\author{}

% ------------------
% Collaborators
% ------------------
\renewcommand{\DBKindexation}{
\begin{DBKindtable}
\DBKinditem{\writtenby}{}
\end{DBKindtable}
}
\makeindex
\makeglossary
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "%"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Profiling
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling"

\end_inset


\end_layout

\begin_layout Section
Using the Linux oprofile system-level profiler
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-Using-the-Linux-oprofile-system-level-profiler"

\end_inset


\family typewriter
oprofile
\family default
 is a system-level profiler that's available for most modern Linux distributions.
\end_layout

\begin_layout Standard
Use of oprofile and its companion programs isn't really documented here;
 what is described is a way of generating symbolic information that enables
 profiling summaries generated by the 
\family typewriter
opreport
\family default
 program to identify lisp functions meaningfully.
\end_layout

\begin_layout Subsection
Generating a lisp image for use with oprofile
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-oprofile-generating-a-lisp-image-for-use-with-oprofile"

\end_inset

Modern Linux uses the 'ELF" (Executable and Linking Format) object file
 format; the oprofile tools can associate symbolic names with addresses
 in a memory-mapped file if that file appears to be an ELF object file and
 if it contains ELF symbol information that describes those memory regions.
 So, the general idea is to make a lisp heap image that looks enough like
 an ELF shared library to fool the 
\family typewriter
oprofile
\family default
 tools (we don't actually load heap images via ELF dynamic linking technology,
 but we can make it look like we did.)
\end_layout

\begin_layout Subsection
Prerequisites
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-oprofile-prerequisites"

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
oprofile
\family default
 itself, which is almost certainly available via your distribution's package
 management system if not already preinstalled.
\end_layout

\begin_layout Itemize

\family typewriter
libelf
\family default
, which provides utilities for reading and writing ELF files (and is likewise
 likely preinstalled or readily installable.) Somewhat confusingly, there
 are two libelf implementations in widespread use on Linux, and different
 distributions refer to them by different names (they may be available as
 part of an 'elfutils' package.) The oprofile insterface was designed to
 work with a libelf implementation whose version number is currently around
 147; the other (incompatible) libelf implementation has a version number
 around 0.8.
 It may be necessary to install the corresponding development package (-dev
 or -devel, usuallly) in order to actually be able to use the libelf shared
 library.
\end_layout

\begin_layout Subsection
Generating ELF symbols for Lisp functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-oprofile-generating-elf-symbols-for-lisp-functions"

\end_inset

In order to create a lisp heap image which can be used for 
\family typewriter
oprofile
\family default
- based profiling, we need to: 
\end_layout

\begin_layout Enumerate
load any code that we want to profile
\end_layout

\begin_layout Enumerate
generate a file that contains ELF symbol information describing the names
 and addresses of all lisp functions.
\end_layout

\begin_deeper
\begin_layout Standard
This step involves doing (from within Clozure CL)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (require "ELF") 
\end_layout

\begin_layout Plain Layout

"ELF" 
\end_layout

\begin_layout Plain Layout

("ELF")
\end_layout

\begin_layout Plain Layout

? (ccl::write-elf-symbols-to-file "home:elf-symbols") 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The argument to CCL::WRITE-ELF-SYMBOLS-TO-FILE can be any writable pathname.
 The function will do whatever's necessary to nail lisp functions down in
 memory (so that they aren't moved by GC), then write an ELF object file
 to the indicated pathname.
 This typically takes a few seconds.
\end_layout

\end_deeper
\begin_layout Enumerate
Generate a lisp heap image in which the ELF symbols generated in the previous
 step are prepended.
\end_layout

\begin_deeper
\begin_layout Standard
The function CCL:SAVE-APPLICATION provides a :PREPEND-KERNEL argument, which
 is ordinarily used to save a standalone application in which the kernel
 and heap image occupy a single file.
 :PREPEND-KERNEL doesn't really care what it's prepending to the image,
 and we can just as easily ask it to prepend the ELF symbol file generated
 in the previous step.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (save-application "somewhere/image-for-profiling" :prepend-kernel "home:elf-sy
mbols")
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
If you then run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> ccl64 somewhere/image-for-profiling
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
any lisp code sampled by oprofile in that image will be identified "symbolically
" by 
\family typewriter
opreport
\family default
.
\end_layout

\end_deeper
\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-oprofile-example"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

;;; Define some lisp functions that we want to profile and save 
\end_layout

\begin_layout Plain Layout

;;; a profiling-enabled image.
  In this case, we just want to  
\end_layout

\begin_layout Plain Layout

;;; define the FACTORIAL funcion, to keep things simple.
 
\end_layout

\begin_layout Plain Layout

? (defun fact (n) (if (zerop n) 1 (* n (fact (1- n))))) 
\end_layout

\begin_layout Plain Layout

FACT 
\end_layout

\begin_layout Plain Layout

? (require "ELF") 
\end_layout

\begin_layout Plain Layout

"ELF" 
\end_layout

\begin_layout Plain Layout

("ELF") 
\end_layout

\begin_layout Plain Layout

? (ccl::write-elf-symbols-to-file "home:elf-symbols") 
\end_layout

\begin_layout Plain Layout

"home:elf-symbols" 
\end_layout

\begin_layout Plain Layout

? (save-application "home:profiled-ccl" :prepend-kernel "home:elf-symbols")
\end_layout

\begin_layout Plain Layout

;;; Setup oprofile with (mostly) default arguments.
  This example was 
\end_layout

\begin_layout Plain Layout

;;; run on a Fedora 8 system where an uncompressed 'vmlinux' kernel 
\end_layout

\begin_layout Plain Layout

;;; image isn't readily available.
\end_layout

\begin_layout Plain Layout

;;; Note that use of 'opcontrol' generally requires root access, e.g., 
\end_layout

\begin_layout Plain Layout

;;; 'sudo' or equivalent:
\end_layout

\begin_layout Plain Layout

[~] gb@rinpoche> sudo opcontrol --no-vmlinux --setup
\end_layout

\begin_layout Plain Layout

;;; Start the profiler
\end_layout

\begin_layout Plain Layout

[~] gb@rinpoche> sudo opcontrol --start 
\end_layout

\begin_layout Plain Layout

Using 2.6+ OProfile kernel interface.
 
\end_layout

\begin_layout Plain Layout

Using log file /var/lib/oprofile/samples/oprofiled.log 
\end_layout

\begin_layout Plain Layout

Daemon started.
 
\end_layout

\begin_layout Plain Layout

Profiler running.
\end_layout

\begin_layout Plain Layout

;;; Start CCL with the "profiled-ccl" image created above.
 
\end_layout

\begin_layout Plain Layout

;;; Invoke "(FACT 10000)"
\end_layout

\begin_layout Plain Layout

[~] gb@rinpoche> ccl64 profiled-ccl  
\end_layout

\begin_layout Plain Layout

Welcome to Clozure Common Lisp Version 1.2-r9198M-trunk  (LinuxX8664)! 
\end_layout

\begin_layout Plain Layout

? (null (fact 10000)) 
\end_layout

\begin_layout Plain Layout

NIL 
\end_layout

\begin_layout Plain Layout

? (quit)
\end_layout

\begin_layout Plain Layout

;;; We could stop the profiler (opcontrol --stop) here; instead, 
\end_layout

\begin_layout Plain Layout

;;; we simply flush profiling data to disk, where 'opreport' can 
\end_layout

\begin_layout Plain Layout

;;; find it.
 
\end_layout

\begin_layout Plain Layout

[~] gb@rinpoche> sudo opcontrol --dump
\end_layout

\begin_layout Plain Layout

;;; Ask opreport to show us where we were spending time in the 
\end_layout

\begin_layout Plain Layout

;;; 'profiled-ccl' image.
\end_layout

\begin_layout Plain Layout

[~] gb@rinpoche> opreport -l profiled-ccl | head 
\end_layout

\begin_layout Plain Layout

CPU: Core 2, speed 1596 MHz (estimated) 
\end_layout

\begin_layout Plain Layout

Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit
 mask of 0x00 (Unhalted core cycles) count 100000 
\end_layout

\begin_layout Plain Layout

samples  %        symbol name 
\end_layout

\begin_layout Plain Layout

6417 65.2466  <Compiled-function.(:INTERNAL.MULTIPLY-UNSIGNED-BIGNUM-AND-1-DIGIT-FI
XNUM.MULTIPLY-BIGNUM-AND-FIXNUM).(Non-Global)..0x30004002453F> 
\end_layout

\begin_layout Plain Layout

3211     32.6487  <Compiled-function.%MULTIPLY-AND-ADD4.0x300040000AAF> 
\end_layout

\begin_layout Plain Layout

17        0.1729  <Compiled-function.%%ONE-ARG-DCODE.0x3000401740AF> 
\end_layout

\begin_layout Plain Layout

11        0.1118  <Compiled-function.%UNLOCK-RECURSIVE-LOCK-OBJECT.0x30004007F7DF>
 
\end_layout

\begin_layout Plain Layout

10        0.1017  <Compiled-function.AUTO-FLUSH-INTERACTIVE-STREAMS.0x3000404ED6AF>
 
\end_layout

\begin_layout Plain Layout

7         0.0712  <Compiled-function.%NANOSLEEP.0x30004040385F> 
\end_layout

\begin_layout Plain Layout

7         0.0712  <Compiled-function.%ZERO-TRAILING-SIGN-DIGITS.0x300040030F3F>
 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Issues
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-oprofile-Issues"

\end_inset

CCL::WRITE-ELF-SYMBOLS-TO-FILE currently only works on x86-64; it certainly
 -could- be made to work on ppc32/ppc64 as well.
\end_layout

\begin_layout Standard
So far, no one has been able to make oprofile/opreport options that're supposed
 to generate call-stack info generate meaningful call-stack info.
\end_layout

\begin_layout Standard
As of a few months ago, there was an attempt to provide symbol info for
 oprofile/opreport "on the fly", e.g., for use in JIT compilation or other
 incremental compilation scenarios.
 That's obviously more nearly The Right Thing, but it might be awhile before
 that experimental code makes it into widespread use.
\end_layout

\begin_layout Section
Using Apple's CHUD metering tools
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-Using-Apples-CHUD-metering-tools"

\end_inset

Apple's CHUD package provides libraries, kernel extensions, and a set of
 graphical and command-line programs that can be used to measure many aspects
 of application and system performance.
\end_layout

\begin_layout Standard
One of these programs is the Shark application (often installed in "/Developer/A
pplications/Performance Tools/Shark.app"), which provides a graphical user
 interface for exploring and analyzing profiling results and provides tools
 for creating "sampling configurations" (see below), among other things.
 Use of Shark isn't really documented here (a Shark manual is available
 at "Developer/Documentation/CHUD/Shark/ SharkUserGuide.pdf"); what is described
 is a way of providing information about Lisp function names and addresses
 so that Shark can meaningly identify those functions in its output.
\end_layout

\begin_layout Subsection
Prerequisites
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-CHUD-prerequisites"

\end_inset

Apple's CHUD tools have been distributed with the last several XCode releases.
 One way to determine whether or not the tools are installed is to run:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> /usr/bin/shark -v 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
in a terminal or Emacs shell buffer.
 If that returns output like
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shark 4.7.3 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
then the CHUD package is installed.
 Output like
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shark: Command not found.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
strongly suggests that it isn't ...
\end_layout

\begin_layout Subsection
Generating a lisp image for use with Shark
\end_layout

\begin_layout Standard
Shark can only properly identify functions that're defined in a shared library
 that's loaded by the target application.
 (Any other functions will be identified by a hex address described as being
 in an "Unknown Library"; the hex address is generally somewhat near the
 actual function, but it's determined heuristically and isn't always accurate.)
\end_layout

\begin_layout Standard
For those reasons, it's desirable to load the code that you wish to profile
 in one lisp session, save a native (Mach-O library) image, and invoke Shark
 in a new session which uses that native image.
 (It may also be useful to load the CHUD-METERING module, which defines
 CHUD:METER and friends.
\end_layout

\begin_layout Subsection
Usage synopsis
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-CHUD-usage-synopsis"

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[src/ccl-dev] gb@antinomial> ccl64 
\end_layout

\begin_layout Plain Layout

Welcome to Clozure Common Lisp Version 1.7-dev-r14624M-trunk (DarwinX8664)!
 
\end_layout

\begin_layout Plain Layout

? (defun fact(n) (if (zerop n) 1 (* n (fact (1- n))))) 
\end_layout

\begin_layout Plain Layout

FACT 
\end_layout

\begin_layout Plain Layout

? (require "CHUD-METERING") 
\end_layout

\begin_layout Plain Layout

"CHUD-METERING" 
\end_layout

\begin_layout Plain Layout

("CHUD-METERING") 
\end_layout

\begin_layout Plain Layout

? (save-application "ccl:dx86cl64.dylib" :native t) 
\end_layout

\begin_layout Plain Layout

[src/ccl-dev] gb@antinomial> ccl64 -I dx86cl64.dylib 
\end_layout

\begin_layout Plain Layout

Welcome to Clozure Common Lisp Version 1.7-dev-r14624M-trunk (DarwinX8664)!
 
\end_layout

\begin_layout Plain Layout

? (chud:meter (dotimes (i 1000) (fact 1000))) 
\end_layout

\begin_layout Plain Layout

;;; Waiting for shark to process samples ...done.
 
\end_layout

\begin_layout Plain Layout

NIL
\end_layout

\end_inset


\end_layout

\begin_layout Standard
and, a few seconds after the result is returned, a file whose name is of
 the form "session_nnn.mshark" will open in Shark.app.
\end_layout

\begin_layout Standard
The fist time that CHUD:METER is used in a lisp session, it'll do a few
 things to prepare subsequent profiling sessions.
 Those things include: 
\end_layout

\begin_layout Itemize
creating a directory to store files that are related to using the CHUD tools
 in this lisp session.
 This directory is created in the user's home directory and has a name of
 the form:
\end_layout

\begin_deeper
\begin_layout Standard
profiling-session-<lisp-kernel>-<pid><mm>-<dd>-<yyyy>.<m>.<s> 
\end_layout

\end_deeper
\begin_layout Itemize
run the shark program ("/usr/bin/shark") and wait until it's ready to receive
 signals that control its operation.
\end_layout

\begin_layout Standard
This startup activity typically takes a few seconds; after it's been completed,
 subsequent use of CHUD:METER doesn't involve that overhead.
 (See the discussion of :RESET below.)
\end_layout

\begin_layout Standard
After any startup activity is complete, CHUD:METER arranges to send a "start
 profiling" signal to the running shark program, executes the form, sends
 a "stop profiling" signal to the shark program, and reads its diagnostic
 output, looking for the name of the ".mshark" file it produces.
 If it's able to find this filename, it arranges for "Shark.app" to open
 it.
\end_layout

\begin_layout Subsection
Profiling "configurations"
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-CHUD-profiling-configurations"

\end_inset

By default, a shark profiling session will: 
\end_layout

\begin_layout Itemize
use "time based" sampling, to periodically interrupt the lisp process and
 note the value of the program counter and at least a few levels of call
 history.
\end_layout

\begin_layout Itemize
do this sampling once every millisecond
\end_layout

\begin_layout Itemize
run for up to 30 seconds, unless told to stop earlier.
\end_layout

\begin_layout Standard
This is known as "the default configuration"; it's possible to use items
 on the "Config" menu in the Shark application to create alternate configuration
s which provide different kinds of profiling parameters and to save these
 configurations in files for subsequent reuse.
 (The set of things that CHUD knows how to monitor is large and interesting.)
\end_layout

\begin_layout Standard
You use alternate profiling configurations (created and "exported" via Shark.app)
 with CHUD:METER, but the interface is a little awkward.
\end_layout

\begin_layout Subsection
Reference
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Profiling-CHUD-Reference"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CHUD:*SHARK-CONFIG-FILE*
\family default
 [Variable]
\end_layout

\begin_layout Standard
When non-null, this should be the pathname of an alternate profiling configurati
on file created by the "Config Editor" in Shark.app.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
CHUD:METER
\family default
 form 
\family typewriter
&key
\family default
 (reset nil) (debug-output nil) [Macro]
\end_layout

\begin_layout Standard
Executes FORM (an arbitrary lisp form) and returns whatever result(s) it
 returns, with CHUD profiling enabled during the form's execution.
 Tries to determine the name of the session file (*.mshark) to which the
 shark program wrote profiling data and opens this file in the Shark application.
\end_layout

\begin_layout Standard
Arguments:
\end_layout

\begin_layout Description

\family typewriter
debug-output
\family default
 when non-nil, causes output generated by the shark program to be echoed
 to *TERMINAL-IO*.
 For debugging.
 
\end_layout

\begin_layout Description

\family typewriter
reset
\family default
 when non-nil, terminates any running instance of the shark program created
 by previous invocations of CHUD:METER in this lisp session, generates a
 new .spatch file (describing the names and addresses of lisp functions),
 and starts a new instance of the shark program; if CHUD:*SHARK-CONFIG-FILE*
 is non-NIL when this new instance is started, that instance is told to
 use the specified config file for profiling (in lieu of the default profiling
 configuration.) 
\end_layout

\begin_layout Subsection
Acknowledgement
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "Profiling-CHUD-Acknowledgments"

\end_inset

Both Dan Knapp and Hamilton Link have posted similar CHUD interfaces to
 openmcl-devel in the past; Hamilton's also reported bugs in the spatch
 mechanism to CHUD developers (and gotten those bugs fixed.) 
\end_layout

\end_body
\end_document
