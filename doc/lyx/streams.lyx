#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
% -----------------------------------------  
% Autogenerated LaTeX file from XML DocBook  
% -----------------------------------------  
%%<params>
%%</params>

\usepackage{ifthen}\newboolean{DBKIsBook}
\setboolean{DBKIsBook}{true}
\IfFileExists{ifxetex.sty}{%
    \usepackage{ifxetex}%
  }{%
    \newif\ifxetex
    \xetexfalse
  }
  \ifxetex
\usepackage{fontspec}\usepackage{xltxtra}\setmainfont{DejaVu Serif}
\setsansfont{DejaVu Sans}
\setmonofont{DejaVu Sans Mono}
\else
\fi
\usepackage{fancybox}\usepackage[hyperlink]{docbook}\renewcommand{\DBKreleaseinfo}{}


\title{Streams}
\author{}

% ------------------
% Collaborators
% ------------------
\renewcommand{\DBKindexation}{
\begin{DBKindtable}
\DBKinditem{\writtenby}{}
\end{DBKindtable}
}
\makeindex
\makeglossary
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "%"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Streams
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Streams"

\end_inset


\end_layout

\begin_layout Section
Stream Extensions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "CCL-Stream-Extensions"

\end_inset


\end_layout

\begin_layout Subsection
Stream External Format
\end_layout

\begin_layout Standard

\family typewriter
STREAM-EXTERNAL-FORMAT
\family default
 can be applied to (and may return a non-null result for) open streams that
 are not 
\family typewriter
FILE-STREAM
\family default
s.
\end_layout

\begin_layout Standard

\family typewriter
(SETF STREAM-EXTERNAL-FORMAT)
\family default
 can be used to change the external format of open streams created with
 
\family typewriter
 OPEN
\family default
 or 
\family typewriter
MAKE-SOCKET
\family default
.
\end_layout

\begin_layout Subsection
Additional keywords for OPEN and MAKE-SOCKET
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Additional-Open-Keywords"

\end_inset


\family typewriter
OPEN
\family default
 and 
\family typewriter
MAKE-SOCKET
\family default
 have each been extended to take the additional keyword arguments: 
\family typewriter
:CLASS
\family default
, 
\family typewriter
:SHARING
\family default
, and 
\family typewriter
:BASIC
\family default
.
\end_layout

\begin_layout Description

\family typewriter
:CLASS
\family default
 A symbol that names the desired class of the stream.
 The specified class must inherit from 
\family typewriter
FILE-STREAM
\family default
 for 
\family typewriter
OPEN
\family default
.
 
\end_layout

\begin_layout Description

\family typewriter
:SHARING
\family default
 
\begin_inset CommandInset label
LatexCommand label
name "Stream-SHARING"

\end_inset

Specifies how a stream can be used by multiple threads.
 The possible values are: 
\family typewriter
:PRIVATE
\family default
, 
\family typewriter
:LOCK
\family default
 and 
\family typewriter
:EXTERNAL
\family default
.
 
\family typewriter
:PRIVATE
\family default
 is the default.
 
\family typewriter
NIL
\family default
 is also accepted as a synonym for 
\family typewriter
:EXTERNAL
\family default
.
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
:PRIVATE
\family default
 Specifies that the stream can only be accessed by the thread that first
 tries to do I/O to it; that thread becomes the "owner" of the stream and
 is not necessarily the same thread as the one which created the stream.
 This is the default.
 (There was some discussion on openmcl-devel about the idea of "transferring
 ownership" of a stream; this has not yet been implemented.) Attempts to
 do I/O on a stream with :PRIVATE sharing from a thread other than the stream's
 owner yield an error.
 
\end_layout

\begin_layout Description

\family typewriter
:LOCK
\family default
 Specifies that all access to the stream require the calling thread to obtain
 a lock.
 There are separate "read" and "write" locks for IO streams.
 This makes it possible for instance, for one thread to read from such a
 stream while another thread writes to it.
 (see also [?] [?] [?]) 
\end_layout

\begin_layout Description

\family typewriter
:EXTERNAL
\family default
 Specifies that I/O primitives enforce no access protocol.
 This may be appropriate for some types of application which can control
 stream access via application-level protocols.
 Note that since even the act of reading from a stream changes its internal
 state (and simultaneous access from multiple threads can therefore lead
 to corruption of that state), some care must be taken in the design of
 such protocols.
 
\end_layout

\end_deeper
\begin_layout Description
\noindent

\family typewriter
:BASIC
\family default
 A boolean that indicates whether or not the stream is a Gray stream, i.e.
 whether or not the stream is an instance of 
\family typewriter
FUNDAMENTAL-STREAM
\family default
 or 
\family typewriter
CCL::BASIC-STREAM
\family default
(see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Basic-Versus-Fundamental-Streams"

\end_inset

).
 Defaults to 
\family typewriter
T
\family default
.
 
\end_layout

\begin_layout Subsection
Basic Versus Fundamental Streams
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "Basic-Versus-Fundamental-Streams"

\end_inset

Gray streams (see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Creating-Your-Own-Stream-Classes-with-Gray-Streams"

\end_inset

) all inherit from 
\family typewriter
FUNDAMENTAL-STREAM
\family default
 whereas basic streams inherit from 
\family typewriter
CCL::BASIC-STREAM
\family default
.
 The tradeoff between FUNDAMENTAL and BASIC streams is entirely between
 flexibility and performance, potential or actual.
 I/O primitives can recognize BASIC-STREAMs and exploit knowledge of implementat
ion details.
 FUNDAMENTAL stream classes can be subclassed and extended in a standard
 way (the Gray streams protocol).
\end_layout

\begin_layout Standard
For existing stream classes (FILE-STREAMs, SOCKETs, and the internal CCL::FD-STR
EAM classes used to implement file streams and sockets), a lot of code can
 be shared between the FUNDAMENTAL and BASIC implementations.
 The biggest difference should be that that code can be reached from I/O
 primitives like READ-CHAR without going through some steps that're there
 to support generality and extensibility, and skipping those steps when
 that support isn't needed can improve I/O performance.
\end_layout

\begin_layout Standard
The Gray stream method 
\family typewriter
STREAM-READ-CHAR
\family default
 should work on appropriate 
\family typewriter
BASIC-STREAM
\family default
s.
 (There may still be cases where such methods are undefined; such cases
 should be considered bugs.) It is not guaranteed that Gray stream methods
 would ever be called by I/O primitives to read a character from a 
\family typewriter
BASIC-STREAM
\family default
, though there are still cases where this happens.
\end_layout

\begin_layout Standard
A simple loop reading 2M characters from a text file runs about 10X faster
 when the file is opened the new defaults 
\family typewriter
(:SHARING :PRIVATE :BASIC T)
\family default
 than it had before these changes were made.
 That sounds good, until one realizes that the "equivalent" C loop can be
 about 10X faster still ...
\end_layout

\begin_layout Subsection
Stream Timeouts and Deadlines
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Stream-Timeouts-And-Deadlines"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-input-timeout
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-output-timeout
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-deadline
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
input-timeout
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
output-timeout
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
communication-deadline-expired
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A stream that is associated with a file descriptor has attributes and accessors:
 
\family typewriter
STREAM-INPUT-TIMEOUT
\family default
, 
\family typewriter
STREAM-OUTPUT-TIMEOUT
\family default
, and 
\family typewriter
STREAM-DEADLINE
\family default
.
 All three accessors have corresponding 
\family typewriter
SETF
\family default
 methods.
 
\family typewriter
STREAM-INPUT-TIMEOUT
\family default
 and 
\family typewriter
STREAM-OUTPUT-TIMEOUT
\family default
 are specified in seconds and can be any positive real number less than
 one million.
 When a timeout is set and the corresponding I/O operation takes longer
 than the specified interval, an error is signalled.
 The error is 
\family typewriter
INPUT-TIMEOUT
\family default
 for input and 
\family typewriter
OUTPUT-TIMEOUT
\family default
 for output.
 
\family typewriter
STREAM-DEADLINE
\family default
 specifies an absolute time in internal-time-units.
 If an I/O operation on the stream does not complete before the deadline
 then a 
\family typewriter
COMMUNICATION-DEADLINE-EXPIRED
\family default
 error is signalled.
 A deadline takes precedence over any input/output timeouts that may be
 set.
\end_layout

\begin_layout Subsection
Open File Streams
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Open-File-Streams"

\end_inset

Historically, Clozure CL and MCL maintained a list of open file streams
 in the value of 
\family typewriter
CCL:*OPEN-FILE-STREAMS*
\family default
.
 This functionality has been replaced with the thread-safe function: 
\family typewriter
CCL:OPEN-FILE-STREAMS
\family default
 and its two helper functions: 
\family typewriter
CCL:NOTE-OPEN-FILE-STREAM
\family default
 and 
\family typewriter
CCL:REMOVE-OPEN-FILE-STREAM
\family default
.
 Maintaining this list helps to ensure that streams get closed in an orderly
 manner when the lisp exits.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
OPEN-FILE-STREAMS
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_open-file-streams"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
open-file-streams
\end_layout

\end_inset

OPEN-FILE-STREAMS --- Returns the list of file streams that are currently
 open.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 open-file-streams => stream-list 
\end_layout

\begin_layout Paragraph*
Values
\end_layout

\begin_layout Description
stream-list A list of open file streams.
 This is a copy of an internal list so it may be destructively modified
 without ill effect.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
Returns a list of open file streams.
\end_layout

\begin_layout Paragraph*
See Also
\end_layout

\begin_layout Standard
NOTE-OPEN-FILE-STREAM, REMOVE-OPEN-FILE-STREAM 
\end_layout

\begin_layout Subsubsection
NOTE-OPEN-FILE-STREAM
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_note-open-file-stream"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
note-open-file-stream
\end_layout

\end_inset

NOTE-OPEN-FILE-STREAM --- Adds a file stream to the internal list of open
 file streams that is returned by 
\family typewriter
note-open-file-stream
\family default
.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 note-open-file-stream file-stream 
\end_layout

\begin_layout Paragraph*
Arguments
\end_layout

\begin_layout Description
file-stream A file stream.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
Adds a file stream to the internal list of open file streams that is returned
 by 
\family typewriter
open-file-streams
\family default
.
 This function is thread-safe.
 It will usually only be called from custom stream code when a file-stream
 is created.
\end_layout

\begin_layout Paragraph*
See Also
\end_layout

\begin_layout Standard
OPEN-FILE-STREAMS, REMOVE-OPEN-FILE-STREAM 
\end_layout

\begin_layout Subsubsection
REMOVE-OPEN-FILE-STREAM
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_remove-open-file-stream"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
remove-open-file-stream
\end_layout

\end_inset

REMOVE-OPEN-FILE-STREAM --- Removes file stream from the internal list of
 open file streams that is returned by 
\family typewriter
open-file-streams
\family default
.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
 remove-open-file-stream file-stream 
\end_layout

\begin_layout Paragraph*
Arguments
\end_layout

\begin_layout Description
file-stream A file stream.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
Remove file stream from the internal list of open file streams that is returned
 by 
\family typewriter
open-file-streams
\family default
.
 This function is thread-safe.
 It will usually only be called from custom stream code when a file-stream
 is closed.
\end_layout

\begin_layout Paragraph*
See Also
\end_layout

\begin_layout Standard
OPEN-FILE-STREAMS, NOTE-OPEN-FILE-STREAM 
\end_layout

\begin_layout Section
Creating Your Own Stream Classes with Gray Streams
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Creating-Your-Own-Stream-Classes-with-Gray-Streams"

\end_inset


\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Streams-Overview"

\end_inset

This sect1 is still being written and revised, because it is woefully incomplete.
 The dictionary section currently only lists a couple functions.
 Caveat lector.
\end_layout

\begin_layout Standard
Gray streams are an extension to Common Lisp.
 They were proposed for standardization by David Gray (the astute reader
 now understands their name) quite some years ago, but not accepted, because
 they had not been tried sufficiently to find conceptual problems with them.
\end_layout

\begin_layout Standard
They have since been implemented by quite a few modern Lisp implementations.
 However, they do indeed have some inadequacies, and each implementation
 has addressed these in different ways.
 The situation today is that it's difficult to even find out how to get
 started using Gray streams.
 This is why standards are important.
\end_layout

\begin_layout Standard
Here's a list of some classes which you might wish for your new stream class
 to inherit from:
\end_layout

\begin_layout Standard
fundamental-stream 
\end_layout

\begin_layout Standard
fundamental-input-stream 
\end_layout

\begin_layout Standard
fundamental-output-stream 
\end_layout

\begin_layout Standard
fundamental-character-stream 
\end_layout

\begin_layout Standard
fundamental-binary-stream 
\end_layout

\begin_layout Standard
fundamental-character-input-stream 
\end_layout

\begin_layout Standard
fundamental-character-output-stream 
\end_layout

\begin_layout Standard
fundamental-binary-input-stream 
\end_layout

\begin_layout Standard
fundamental-binary-output-stream 
\end_layout

\begin_layout Standard
ccl::buffered-stream-mixin 
\end_layout

\begin_layout Standard
ccl::buffered-input-stream-mixin 
\end_layout

\begin_layout Standard
ccl::buffered-output-stream-mixin 
\end_layout

\begin_layout Standard
ccl::buffered-io-stream-mixin 
\end_layout

\begin_layout Standard
ccl::buffered-character-input-stream-mixin 
\end_layout

\begin_layout Standard
ccl::buffered-character-output-stream-mixin 
\end_layout

\begin_layout Standard
ccl::buffered-character-io-stream-mixin 
\end_layout

\begin_layout Standard
ccl::buffered-binary-input-stream-mixin 
\end_layout

\begin_layout Standard
ccl::buffered-binary-output-stream-mixin 
\end_layout

\begin_layout Standard
ccl::buffered-binary-io-stream-mixin 
\end_layout

\begin_layout Standard
file-stream 
\end_layout

\begin_layout Standard
file-input-stream 
\end_layout

\begin_layout Standard
file-output-stream 
\end_layout

\begin_layout Standard
file-io-stream 
\end_layout

\begin_layout Standard
file-character-input-stream 
\end_layout

\begin_layout Standard
file-character-output-stream 
\end_layout

\begin_layout Standard
file-character-io-stream 
\end_layout

\begin_layout Standard
file-binary-input-stream 
\end_layout

\begin_layout Standard
file-binary-output-stream 
\end_layout

\begin_layout Standard
file-binary-io-stream 
\end_layout

\begin_layout Standard
ccl::fd-stream 
\end_layout

\begin_layout Standard
ccl::fd-input-stream 
\end_layout

\begin_layout Standard
ccl::fd-output-stream 
\end_layout

\begin_layout Standard
ccl::fd-io-stream 
\end_layout

\begin_layout Standard
ccl::fd-character-input-stream 
\end_layout

\begin_layout Standard
ccl::fd-character-output-stream 
\end_layout

\begin_layout Standard
ccl::fd-character-io-stream 
\end_layout

\begin_layout Standard
ccl::fd-binary-input-stream 
\end_layout

\begin_layout Standard
ccl::fd-binary-output-stream 
\end_layout

\begin_layout Standard
ccl::fd-binary-io-stream 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
All of these are defined in ccl/level-1/l1-streams.lisp, except for the ccl:file-
* ones, which are in ccl/level-1/l1-sysio.lisp.
\end_layout

\begin_layout Standard
According to the original Gray streams proposal, you should inherit from
 the most specific of the fundamental-* classes which applies.
 Using Clozure CL, though, if you want buffering for better performance,
 which, unless you know of some reason you wouldn't, you do, you should
 instead inherit from the appropriate ccl::buffered-* class The buffering
 you get this way is exactly the same as the buffering which is used on
 ordinary, non-Gray streams, and force-output will work properly on it.
\end_layout

\begin_layout Standard
Notice that -mixin suffix in the names of all the ccl::buffered-* classes?
 The suffix means that this class is not "complete" by itself; you still
 need to inherit from a fundamental-* stream, even if you also inherit from
 a *-mixin stream.
 You might consider making your own class like this.
 ....
 Except that they do inherit from the fundamental-* streams, that's weird.
\end_layout

\begin_layout Standard
If you want to be able to create an instance of your class with the :class
 argument to (open) and (with-open-file), you should make it inherit from
 one of the file-* classes.
 If you do this, it's not necessary to inherit from any of the other classes
 (though it won't hurt anything), since the file-* classes already do.
\end_layout

\begin_layout Standard
When you inherit from the file-* classes, you can use (call-next-method)
 in any of your methods to get the standard behavior.
 This is especially useful if you want to create a class which performs
 some simple filtering operation, such as changing everything to uppercase
 or to a different character encoding.
 If you do this, you will definitely need to specialize ccl::select-stream-class.
 Your method on ccl::stream-select-class should accept an instance of the
 class, but pay no attention to its contents, and return a symbol naming
 the class to actually be instantiated.
\end_layout

\begin_layout Standard
If you need to make your functionality generic across all the different
 types of stream, probably the best way to implement it is to make it a
 mixin, define classes with all the variants of input, output, io, character,
 and binary, which inherit both from your mixin and from the appropriate
 other class, then define a method on ccl::select-stream-class which chooses
 from among those classes.
\end_layout

\begin_layout Standard
Note that some of these classes are internal to the CCL package.
 If you try to inherit from those ones without the ccl:: prefix, you'll
 get an error which may confuse you, calling them "forward-referenced classes".
 That just means you used the wrong symbol, so add the prefix.
\end_layout

\begin_layout Standard
Here's a list of some generic functions which you might wish to specialize
 for your new stream class, and which ought to be documented at some point.
\end_layout

\begin_layout Standard
stream-direction stream => 
\end_layout

\begin_layout Standard
stream-device stream direction => 
\end_layout

\begin_layout Standard
stream-length stream 
\family typewriter
&optional
\family default
 new => 
\end_layout

\begin_layout Standard
stream-position stream 
\family typewriter
&optional
\family default
 new => 
\end_layout

\begin_layout Standard
streamp stream => boolean 
\end_layout

\begin_layout Standard
stream-write-char output-stream char => 
\end_layout

\begin_layout Standard
stream-write-entire-string output-stream string => 
\end_layout

\begin_layout Standard
stream-read-char input-stream => 
\end_layout

\begin_layout Standard
stream-unread-char input-stream char => 
\end_layout

\begin_layout Standard
stream-force-output output-stream => nil 
\end_layout

\begin_layout Standard
stream-maybe-force-output output-stream => nil
\end_layout

\begin_layout Standard
stream-finish-output output-stream => nil 
\end_layout

\begin_layout Standard
stream-clear-output output-stream => nil 
\end_layout

\begin_layout Standard
close stream 
\family typewriter
&key
\family default
 abort => boolean
\end_layout

\begin_layout Standard
stream-fresh-line stream => t 
\end_layout

\begin_layout Standard
stream-line-length stream => length 
\end_layout

\begin_layout Standard
interactive-stream-p stream => boolean 
\end_layout

\begin_layout Standard
stream-clear-input input-stream => nil 
\end_layout

\begin_layout Standard
stream-listen input-stream => boolean 
\end_layout

\begin_layout Standard
stream-filename stream => string 
\end_layout

\begin_layout Standard
ccl::select-stream-class instance in-p out-p char-p => class 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
The following functions are standard parts of Common Lisp, but behave in
 special ways with regard to Gray streams.
\end_layout

\begin_layout Standard
open-stream-p stream => generalized-boolean 
\end_layout

\begin_layout Standard
input-stream-p stream => generalized-boolean 
\end_layout

\begin_layout Standard
output-stream-p stream => generalized-boolean 
\end_layout

\begin_layout Standard
stream-element-type stream => 
\end_layout

\begin_layout Standard
stream-error-stream => 
\end_layout

\begin_layout Standard
open 
\end_layout

\begin_layout Standard
close 
\end_layout

\begin_layout Standard
with-open-file 
\end_layout

\begin_layout Standard
Specifically, (open) and (with-open-file) accept a new keyword argument,
 :class, which may be a symbol naming a class; the class itself; or an instance
 of it.
 The class so given must be a subtype of 'stream, and an instance of it
 with no particular contents will be passed to ccl::select-stream-class
 to determine what class to actually instantiate.
\end_layout

\begin_layout Standard
The following are standard, and do not behave specially with regard to Gray
 streams, but probably should.
\end_layout

\begin_layout Standard
stream-external-format 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Extending READ-SEQUENCE and WRITE-SEQUENCE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Extending-READ-SEQUENCE-and-WRITE-SEQUENCE"

\end_inset


\end_layout

\begin_layout Subsubsection
Overview
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "extending-read-write-overview"

\end_inset

The "Gray Streams" API is based on an informal proposal that was made before
 ANSI CL adopted the READ-SEQUENCE and WRITE-SEQUENCE functions; as such,
 there is no "standard" way for the author of a Gray stream class to improve
 the performance of these functions by exploiting knowledge of the stream's
 internals (e.g., the buffering mechanism it uses.)
\end_layout

\begin_layout Standard
In the absence of any such knowledge, READ-SEQUENCE and WRITE-SEQUENCE are
 effectively just convenient shorthand for a loop which calls READ-CHAR/READ-BYT
E/WRITE-CHAR/WRITE-BYTE as appropriate.
 The mechanism described below allows subclasses of FUNDAMENTAL-STREAM to
 define more specialized (and presumably more efficient) behavior.
\end_layout

\begin_layout Subsubsection
Notes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Notes"

\end_inset

READ-SEQUENCE and WRITE-SEQUENCE do a certain amount of sanity-checking
 and normalization of their arguments before dispatching to one of the methods
 above.
 If an individual method can't do anything particularly clever, CALL-NEXT-METHOD
 can be used to handle the general case.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Example"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(defclass my-string-input-stream (fundamental-character-input-stream)
\end_layout

\begin_layout Plain Layout

  ((string :initarg :string :accessor my-string-input-stream-string) 
\end_layout

\begin_layout Plain Layout

   (index :initform 0 :accessor my-string-input-stream-index) 
\end_layout

\begin_layout Plain Layout

   (length)))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

(defmethod stream-read-vector ((stream my-string-input-stream) vector start
 end)
\end_layout

\begin_layout Plain Layout

  (if (not (typep vector 'simple-base-string)) 
\end_layout

\begin_layout Plain Layout

   (call-next-method) 
\end_layout

\begin_layout Plain Layout

   (with-slots (string index length) stream
\end_layout

\begin_layout Plain Layout

   (do* ((outpos start (1+ outpos))) 
\end_layout

\begin_layout Plain Layout

        ((or (= outpos end) (= index length)) outpos)) 
\end_layout

\begin_layout Plain Layout

     (setf (schar vector outpos) (schar string index)) 
\end_layout

\begin_layout Plain Layout

     (incf index))))) 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Multibyte I/O
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Multibyte-I-O"

\end_inset

All heap-allocated objects in Clozure CL that cannot contain pointers to
 lisp objects are represented as 
\emph on
ivectors
\emph default
.
 Clozure CL provides low-level functions, and macros, to efficiently transfer
 data between buffered streams and ivectors.
 There's some overlap in functionality between the functions described here
 and the ANSI CL READ-SEQUENCE and WRITE-SEQUENCE functions.
\end_layout

\begin_layout Standard
As used here, the term "octet" means roughly the same thing as the term
 "8-bit byte".
 The functions described below transfer a specified sequence of octets between
 a buffered stream and an ivector, and don't really concern themselves with
 higher-level issues (like whether that octet sequence is within bounds
 or how it relates to the logical contents of the ivector.) For these reasons,
 these functions are generally less safe and more flexible than their ANSI
 counterparts.
\end_layout

\begin_layout Subsection
Gray Streams Dictionary
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Gray-Streams-Dictionary"

\end_inset


\end_layout

\begin_layout Subsubsection
CCL:STREAM-READ-LIST
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_stream-read-list"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-read-list
\end_layout

\end_inset

CCL:STREAM-READ-LIST ---
\end_layout

\begin_layout Standard
Generic Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
stream-read-list stream list count
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
stream a stream, presumably a fundamental-input-stream.
 
\end_layout

\begin_layout Description
list a list.
 When a STREAM-READ-LIST method is called by READ-SEQUENCE, this argument
 is guaranteed to be a proper list.
 
\end_layout

\begin_layout Description
count a non-negative integer.
 When a STREAM-READ-LIST method is called by READ-SEQUENCE, this argument
 is guaranteed not to be greater than the length of the list.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
Should try to read up to count elements from stream into the list list,
 returning the number of elements actually read (which may be less than
 count in case of a premature end-of-file.)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
CCL:STREAM-WRITE-LIST
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_stream-write-list"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-write-list
\end_layout

\end_inset

CCL:STREAM-WRITE-LIST ---
\end_layout

\begin_layout Standard
Generic Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
stream-write-list stream list count
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
stream a stream, presumably a fundamental-output-stream.
 
\end_layout

\begin_layout Description
list a list.
 When a STREAM-WRITE-LIST method is called by WRITE-SEQUENCE, this argument
 is guaranteed to be a proper list.
 
\end_layout

\begin_layout Description
count a non-negative integer.
 When a STREAM-WRITE-LIST method is called by WRITE-SEQUENCE, this argument
 is guaranteed not to be greater than the length of the list.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
should try to write the first count elements of list to stream.
 The return value of this method is ignored.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
CCL:STREAM-READ-VECTOR
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_stream-read-vector"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-read-vector
\end_layout

\end_inset

CCL:STREAM-READ-VECTOR ---
\end_layout

\begin_layout Standard
Generic Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
stream-read-vector stream vector start end
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
stream a stream, presumably a fundamental-input-stream 
\end_layout

\begin_layout Description
vector a vector.
 When a STREAM-READ-VECTOR method is called by READ-SEQUENCE, this argument
 is guaranteed to be a simple one-dimensional array.
 
\end_layout

\begin_layout Description
start a non-negative integer.
 When a STREAM-READ-VECTOR method is called by READ-SEQUENCE, this argument
 is guaranteed to be no greater than end and not greater than the length
 of vector.
 
\end_layout

\begin_layout Description
end a non-negative integer.
 When a STREAM-READ-VECTOR method is called by READ-SEQUENCE, this argument
 is guaranteed to be no less than end and not greater than the length of
 vector.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
should try to read successive elements from stream into vector, starting
 at element start (inclusive) and continuing through element end (exclusive.)
 Should return the index of the vector element beyond the last one stored
 into, which may be less than end in case of premature end-of-file.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
CCL:STREAM-WRITE-VECTOR
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_stream-write-vector"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-write-vector
\end_layout

\end_inset

CCL:STREAM-WRITE-VECTOR ---
\end_layout

\begin_layout Standard
Generic Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
stream-write-vector stream vector start end
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
stream a stream, presumably a fundamental-output-stream 
\end_layout

\begin_layout Description
vector a vector.
 When a STREAM-WRITE-VECTOR method is called by WRITE-SEQUENCE, this argument
 is guaranteed to be a simple one-dimensional array.
 
\end_layout

\begin_layout Description
start a non-negative integer.
 When a STREAM-WRITE-VECTOR method is called by WRITE-SEQUENCE, this argument
 is guaranteed to be no greater than end and not greater than the length
 of vector.
 
\end_layout

\begin_layout Description
end a non-negative integer.
 When a STREAM-WRITE-VECTOR method is called by WRITE-SEQUENCE, this argument
 is guaranteed to be no less than end and not greater than the length of
 vector.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
should try to write successive elements of vector to stream, starting at
 element start (inclusive) and continuing through element end (exclusive.)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
CCL::STREAM-DEVICE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_stream-device"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-device
\end_layout

\end_inset

CCL::STREAM-DEVICE --- Returns the OS file descriptor associated with a
 given lisp stream.
\end_layout

\begin_layout Standard
Generic Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
ccl::stream-device s direction
\end_layout

\begin_layout Paragraph*
Method Signatures
\end_layout

\begin_layout Standard
ccl::stream-device (s stream) direction => fd
\end_layout

\begin_layout Paragraph*
Arguments and Values
\end_layout

\begin_layout Description
s a stream.
 
\end_layout

\begin_layout Description
direction either :INPUT or :OUTPUT.
 
\end_layout

\begin_layout Description
fd a file descriptor, which is a non-negative integer used by the OS to
 refer to an open file, socket, or similar I/O connection.
 NIL if there is no file descriptor associated with 
\family typewriter
s
\family default
 in the direction given by 
\family typewriter
direction
\family default
.
 
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
\noindent
Returns the file descriptor associated with 
\family typewriter
s
\family default
 in the direction given by 
\family typewriter
direction
\family default
.
 It is necessary to specify 
\family typewriter
direction
\family default
 because the input and output file descriptors may be different; the most
 common case is when one of them has been redirected by the Unix shell.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
STREAM-READ-IVECTOR
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_stream-read-ivector"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-read-ivector
\end_layout

\end_inset

STREAM-READ-IVECTOR ---
\end_layout

\begin_layout Standard
Generic Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
stream-read-ivector stream ivector start-octet max-octets
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Reads up to max-octets octets from stream into ivector, storing them at
 start-octet.
 Returns the number of octets actually read.
\end_layout

\begin_layout Paragraph*
Arguments
\end_layout

\begin_layout Description
stream An input stream.
 The method defined on BUFFERED-INPUT-STREAMs requires that the size in
 octets of an instance of the stream's element type is 1.
 
\end_layout

\begin_layout Description
ivector Any ivector.
 
\end_layout

\begin_layout Description
start-octet A non-negative integer.
 
\end_layout

\begin_layout Description
max-octets A non-negative integer.
 The return value may be less than the value of this parameter if EOF was
 encountered.
 
\end_layout

\begin_layout Standard
\noindent

\end_layout

\begin_layout Subsubsection
STREAM-WRITE-IVECTOR
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_stream-write-ivector"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
stream-write-ivector
\end_layout

\end_inset

STREAM-WRITE-IVECTOR ---
\end_layout

\begin_layout Standard
Generic Function
\end_layout

\begin_layout Paragraph*
Synopsis
\end_layout

\begin_layout Standard
stream-write-ivector stream ivector start-octet max-octets
\end_layout

\begin_layout Paragraph*
Description
\end_layout

\begin_layout Standard
Writes max-octets octets to stream from ivector, starting at start-octet.
 Returns max-octets.
\end_layout

\begin_layout Paragraph*
Arguments
\end_layout

\begin_layout Description
stream An input stream.
 The method defined on BUFFERED-OUTPUT-STREAMs requires that the size in
 octets of an instance of the stream's element type is 1.
 
\end_layout

\begin_layout Description
ivector Any ivector 
\end_layout

\begin_layout Description
start-octet A non-negative integer.
 
\end_layout

\begin_layout Description
max-octet A non-negative integer.
 
\end_layout

\begin_layout Paragraph*
Examples
\end_layout

\begin_layout Standard
\noindent
[firstnumber=1,] ;;; Write the contents of a (SIMPLE-ARRAY(UNSIGNED-BYTE
 16) 3) ;;; to a character file stream.
 Read back the characters.
 (let* ((a (make-array 3 :element-type '(unsigned-byte 16) :initial-contents
 '(26725 27756 28449)))) (with-open-file (s "junk" :element-type 'character
 :direction :io :if-does-not-exist :create :if-exists :supersede) ;; Write
 six octets (three elements).
 (stream-write-ivector s a 0 6) ;; Rewind, then read a line (file-position
 s 0) (read-line s)))
\end_layout

\begin_layout Standard
;;; Write a vector of DOUBLE-FLOATs.
 Note that (to maintain ;;; alignment) there are 4 octets of padding before
 the 0th ;;; element of a (VECTOR DOUBLE-FLOAT) on 32-bit platforms.
 ;;; (Note that (= (- target::misc-dfloat-offset ;;; target::misc-data-offset)
 4)) (defun write-double-float-vector (stream vector &key (start 0) (end
 (length vector))) (check-type vector (vector double-float)) (let* ((start-octet
 (+ (* start 8) (- target::misc-dfloat-offset target::misc-data-offset)))
 (num-octets (* 8 (- end start)))) (stream-write-ivector stream vector start-oct
et num-octets))) 
\end_layout

\begin_layout Section
Lisp Standard Streams and OS Standard Streams
\end_layout

\begin_layout Standard
In normal interactive usage, the input and output sides of the bidirectional
 stream 
\family typewriter
*terminal-io*
\family default
 are hooked up to the the operating system's standard input and standard
 output.
 The lisp streams 
\family typewriter
*standard-input*
\family default
, 
\family typewriter
*standard-output*
\family default
, and 
\family typewriter
*error-output*
\family default
 are synonym streams for 
\family typewriter
*terminal-io*
\family default
.
\end_layout

\begin_layout Standard
In batch mode, this arrangement is modified slightly.
 The lisp streams 
\family typewriter
*standard-input*
\family default
, 
\family typewriter
*standard-output*
\family default
, and 
\family typewriter
*standard-error*
\family default
 correspond directly to the operating system's standard input, standard
 output, and standard error.
 If the lisp can determine that it has access to an operating system tty,
 then 
\family typewriter
*terminal-io*
\family default
 will be hooked up to that.
 Otherwise, the input and output streams of 
\family typewriter
*terminal-io*
\family default
 will correspond to the operating system's standard input and standard output.
 
\end_layout

\end_body
\end_document
