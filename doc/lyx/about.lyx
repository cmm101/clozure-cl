#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
About Clozure CL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "about-ccl"

\end_inset


\end_layout

\begin_layout Section
Introduction to Clozure CL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "introduction-to-ccl"

\end_inset

Clozure CL is a fast, mature, open source Common Lisp implementation that
 runs on Linux, Mac OS X, FreeBSD, and Windows.
 Clozure CL was forked from Macintosh Common Lisp (MCL) in 1998 and the
 development has been entirely separate since.
\end_layout

\begin_layout Standard
When it was forked from MCL in 1998, the new Lisp was named OpenMCL.
 Subsequently, Clozure renamed its Lisp to Clozure CL, partly because its
 ancestor MCL has been released as open source.
 Clozure thought it might be confusing for users if there were two independent
 open-source projects with such similar names.
 The new name also reflects Clozure CL's current status as the flagship
 product of Clozure Associates.
\end_layout

\begin_layout Standard
Furthermore, the new name refers to Clozure CL's ancestry: in its early
 years, MCL was known as Coral Common Lisp, or "CCL".
 For years the package that contains most of Clozure CL's implementation-specifi
c symbols has been named "CCL", an acronym that once stood for the name
 of the Lisp product.
 It seems fitting that "CCL" once again stands for the name of the product.
\end_layout

\begin_layout Standard
Some commands and source files may still refer to "OpenMCL" instead of Clozure
 CL.
\end_layout

\begin_layout Standard
Clozure CL compiles to native code and supports multithreading using native
 OS threads.
 It includes a foreign-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

function interface, and supports both Lisp code that calls external code,
 and external code that calls Lisp code.
 Clozure CL can create standalone executables on all supported platforms.
\end_layout

\begin_layout Standard
On Mac OS X, Clozure CL supports building GUI applications that use OS X's
 native Cocoa frameworks, and the OS X distributions include an IDE written
 with Cocoa, and distributed with complete sources.
\end_layout

\begin_layout Standard
On all supported platforms, Clozure CL can run as a command-line process,
 or as an inferior Emacs process using either SLIME or ILISP.
\end_layout

\begin_layout Standard
Features of Clozure CL include 
\end_layout

\begin_layout Itemize
Very fast compilation speed.
\end_layout

\begin_layout Itemize
A fast, precise, compacting, generational garbage collector written in hand-opti
mized C.
 The sizes of the generations are fully configurable.
 Typically, a generation can be collected in a millisecond on modern systems.
\end_layout

\begin_layout Itemize
Fast execution speed, competitive with other Common Lisp implementations
 on most benchmarks.
\end_layout

\begin_layout Itemize
Robust and stable.
 Customers report that their CPU-intensive, multi-threaded applications
 run for extended periods on Clozure CL without difficulty.
\end_layout

\begin_layout Itemize
Full native OS threads on all platforms.
 Threads are automatically distributed across multiple cores.
 The API includes support for shared memory, locking, and blocking for OS
 operations such as I/O.
\end_layout

\begin_layout Itemize
Full Unicode support.
\end_layout

\begin_layout Itemize
Full SLIME integration.
\end_layout

\begin_layout Itemize
An IDE on Mac OS X, fully integrated with the Macintosh window system and
 User Interface standards.
\end_layout

\begin_layout Itemize
Excellent debugging facilities.
 The names of all local variables are available in a backtrace.
\end_layout

\begin_layout Itemize
A complete, mature foreign function interface, including a powerful bridge
 to Objective-C and Cocoa on Mac OS X.
\end_layout

\begin_layout Itemize
Many extensions including: files mapped to Common Lisp vectors for fast
 file I/O; thread-local hash tables and streams to eliminate locking overhead;
 cons hashing support; and much more
\end_layout

\begin_layout Itemize
Very efficient use of memory
\end_layout

\begin_layout Standard
Although it's an open-source project, available free of charge under a liberal
 license, Clozure CL is also a fully-supported product of Clozure Associates.
 Clozure continues to extend, improve, and develop Clozure CL in response
 to customer and user needs, and offers full support and development services
 for Clozure CL.
\end_layout

\end_body
\end_document
