#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
% -----------------------------------------  
% Autogenerated LaTeX file from XML DocBook  
% -----------------------------------------  
%%<params>
%%</params>

\usepackage{ifthen}\newboolean{DBKIsBook}
\setboolean{DBKIsBook}{true}
\IfFileExists{ifxetex.sty}{%
    \usepackage{ifxetex}%
  }{%
    \newif\ifxetex
    \xetexfalse
  }
  \ifxetex
\usepackage{fontspec}\usepackage{xltxtra}\setmainfont{DejaVu Serif}
\setsansfont{DejaVu Sans}
\setmonofont{DejaVu Sans Mono}
\else
\fi
\usepackage{fancybox}\usepackage[hyperlink]{docbook}\renewcommand{\DBKreleaseinfo}{}


\title{The Clozure CL IDE}
\author{}

% ------------------
% Collaborators
% ------------------
\renewcommand{\DBKindexation}{
\begin{DBKindtable}
\DBKinditem{\writtenby}{}
\end{DBKindtable}
}
\makeindex
\makeglossary
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "%"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard

\end_layout

\begin_layout Chapter
The Clozure CL IDE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ccl-ide"

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ccl-ide-introduction"

\end_inset

Clozure CL ships with the complete source code for an integrated development
 environment written using Cocoa on Mac OS X.
 This chapter describes how to build and use that environment, referred
 to hereafter simply as "the IDE".
\end_layout

\begin_layout Standard
The IDE provides a programmable text editor, listener windows, an inspector
 for Lisp data structures, and a means of easily building a Cocoa application
 in Lisp.
 In addition, its source code provides an example of a fairly complex Cocoa
 application written in Lisp.
\end_layout

\begin_layout Standard
The current version of the IDE has seen the addition of numerous features
 and many bugfixes.
 Although it's by no means a finished product, we hope it will prove more
 useful than previous versions, and we plan additional work on the IDE for
 future releases.
\end_layout

\begin_layout Section
Building the IDE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "building-ccl-ide"

\end_inset

Building the Clozure CL IDE is now a very simple process.
 
\end_layout

\begin_layout Enumerate
In a shell session, cd to the ccl directory.
\end_layout

\begin_layout Enumerate
Run ccl from the shell.
 The easiest way to do this is generally to execute the ccl or ccl64 command.
\end_layout

\begin_layout Enumerate
Evaluate the form 
\family typewriter
(require :cocoa-application)
\end_layout

\begin_layout Standard
For example, assuming that the Clozure CL distribution is installed in "/usr/loc
al/ccl", the following sequence of shell interactions builds the IDE:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> ccl64
\end_layout

\begin_layout Plain Layout

Welcome to Clozure Common Lisp ...
 !
\end_layout

\begin_layout Plain Layout

? (require :cocoa-application)
\end_layout

\begin_layout Plain Layout

;;; there will be a pause of several seconds here as libraries are opened
 and as CCL's objc bridge initializes itself
\end_layout

\begin_layout Plain Layout

;Loading ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Clozure CL compiles and loads the various subsystems that make up the IDE,
 then constructs a Cocoa application bundle named "Clozure CL.app" and saves
 the Lisp image into it.
 Normally Clozure CL creates the application bundle in the root directory
 of the Clozure CL distribution.
\end_layout

\begin_layout Section
Running the IDE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "running-ccl-ide"

\end_inset

After it has been built, you can run the "Clozure CL.app" application normally,
 by double-clicking its icon.
 When launched, the IDE initially displays a single 
\emph on
listener window
\emph default
 that you can use to interact with Lisp.
 You can type Lisp expressions for evaluation at the prompt in the listener
 window.
 You can also use 
\emph on
Hemlock
\emph default
 editing commands to edit the text of expressions in the listener window.
\end_layout

\begin_layout Section
IDE Features
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ccl-ide-features"

\end_inset


\end_layout

\begin_layout Subsection
Editor Windows
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ide-editor-windows"

\end_inset

You can open an editor window either by choosing Open from the File menu
 and then selecting a text file, or by choosing New from the File menu.
 You can also evaluate the expression 
\family typewriter
(ed)
\family default
 in the listener window; in that case Clozure CL creates a new window as
 if you had chosen New from the File menu.
\end_layout

\begin_layout Standard
Editor windows implement 
\emph on
Hemlock
\emph default
 editing commands.
 You can use all the editing and customization features of Hemlock within
 any editor window (including listener windows).
\end_layout

\begin_layout Subsection
The Lisp Menu
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ide-lisp-menu"

\end_inset

The Lisp menu provides several commands for interacting with the running
 Lisp session, in addition to the ways you can interact with it by evaluating
 expressions.
 You can evaluate a selected range of text in any editing buffer.
 You can compile and load the contents of editor windows (please note that
 in the current version, Clozure CL compiles and loads the contents of the
 file associated with an editor window; that means that if you try to load
 or compile a window that has not been saved to a file, the result is an
 error).
\end_layout

\begin_layout Standard
You can interrupt computations, trigger breaks, and select restarts from
 the Lisp menu.
 You can also display a backtrace or open the Inspector window.
\end_layout

\begin_layout Subsubsection
Checking for Updates
\end_layout

\begin_layout Standard
At the bottom of the Lisp menu is an item entitled "Check for Updates".
 If your copy of Clozure CL came from the Clozure Subversion server (which
 is the preferred source), and if your internet connection is working, then
 you can select this menu item to check for updates to your copy of Clozure
 CL.
\end_layout

\begin_layout Standard
When you select "Check for Updates", Clozure CL uses the svn program to
 query the Clozure Subversion repository and determine whether new updates
 to Clozure CL are available.
 (This means that on Mac OS X versions earlier than 10.5, you must ensure
 that the Subversion client software is installed before using the "Check
 for Updates" feature.
 See the wikiHow page on installing Subversion for more information.) If
 updates are available, Clozure CL automatically downloads and installs
 them.
 After a successful download, Clozure CL rebuilds itself, and then rebuilds
 the IDE on the newly-rebuilt Lisp.
 Once this process is finished, you should quit the running IDE and start
 the newly built one (which will be in the same place that the old one was).
\end_layout

\begin_layout Standard
Normally, Clozure CL can install updates and rebuild itself without any
 problems.
 Occasionally, an unforeseen problem (such as a network outage, or a hardware
 failure) might interrupt the self-rebuilding process, and leave your copy
 of Clozure CL unusable.
 If you are expecting to update your copy of Clozure CL frequently, it might
 be prudent to keep a backup copy of your working environment ready in case
 of such situtations.
 You can also always obtain a full, fresh copy of Clozure CL from Clozure's
 repository..
\end_layout

\begin_layout Subsection
The Tools Menu
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ide-tools-menu"

\end_inset

The tools menu provides access to the Apropos and Processes windows.
 The Apropos window searches the running Lisp image for symbols that match
 any text you enter.
 You can use the Apropos window to quickly find function names and other
 useful symbols.
 The Processes window lists all threads running in the current Lisp session.
 If you double-click a process entry, Clozure CL opens an Inspector window
 on that process.
\end_layout

\begin_layout Subsection
The Inspector Window
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ide-inspector-window"

\end_inset

The Inspector window displays information about a Lisp value.
 The information displayed varies from the very simple, in the case of a
 simple data value such as a character, to the complex, in the case of structure
d data such as lists or CLOS objects.
 The left-hand column of the window's display shows the names of the object's
 attributes; the righthand column shows the values associated with those
 attributes.
 You can inspect the values in the righthand column by double-clicking them.
\end_layout

\begin_layout Standard
Inspecting a value in the righthand column changes the Inspector window
 to display the double-clicked object.
 You can quickly navigate the fields of structured data this way, inspecting
 objects and the objects that they refer to.
 Navigation buttons at the top left of the window enable you to retrace
 your steps, backing up to return to previously-viewed objects, and going
 forward again to objects you navigated into previously.
\end_layout

\begin_layout Standard
You can change the contents of a structured object by evaluating expressions
 in a listener window.
 The refresh button (marked with a curved arrow) updates the display of
 the Inspector window, enabling you to quickly see the results of changing
 a data structure.
\end_layout

\begin_layout Section
IDE Sources
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ide-source-code"

\end_inset

Clozure CL builds the IDE from sources in the "objc-bridge" and "cocoa-ide"
 directories in the Clozure CL distribution.
 The IDE as a whole is a relatively complicated application, and is probably
 not the best place to look when you are first trying to understand how
 to build Cocoa applications.
 For that, you might benefit more from the examples in the "examples/cocoa/"
 directory.
 Once you are familiar with those examples, though, and have some experience
 building your own application features using Cocoa and the Objective-C
 bridge, you might browse through the IDE sources to see how it implements
 its features.
\end_layout

\begin_layout Standard
The search path for Clozure CL's 
\family typewriter
REQUIRE
\family default
 feature includes the "objc-bridge" and "cocoa-ide" directories.
 You can load features defined in these directories by using 
\family typewriter
REQUIRE
\family default
.
 For example, if you want to use the Cocoa features of Clozure CL from a
 terminal session (or from an Emacs session using SLIME or ILISP), you can
 evaluate 
\family typewriter
(require :cocoa)
\family default
.
\end_layout

\begin_layout Section
The Application Builder
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "application-builder"

\end_inset

 One important feature of the IDE currently has no Cocoa user interface:
 the application builder.
 The application builder constructs a Cocoa 
\emph on
application bundle
\emph default
 that runs a Lisp image when double-clicked.
 You can use the application builder to create Cocoa applications in Lisp.
 These applications are exactly like Cocoa applications created with XCode
 and Objective-C, except that they are written in Lisp.
\end_layout

\begin_layout Standard
To make the application builder available, evaluate the expression 
\family typewriter
(require :build-application)
\family default
.
 Clozure CL loads the required subsystems, if necessary.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\end_layout

\end_inset

 
\family typewriter
\series bold
BUILD-APPLICATION
\family default
 
\family typewriter
&key
\family default
 (
\family typewriter
\size small
\emph on
name
\family default
\emph default
 
\family typewriter
\emph on
"MyApplication"
\family default
\emph default
) (
\family typewriter
\emph on
type-string
\family default
\emph default
 
\family typewriter
\emph on
"APPL"
\family default
\emph default
) (
\family typewriter
\emph on
creator-string
\family default
\emph default
 
\family typewriter
\emph on
"OMCL"
\family default
\emph default
) (
\family typewriter
\emph on
directory
\family default
\emph default
 
\family typewriter
\emph on
(current-directory)
\family default
\emph default
) (
\family typewriter
\emph on
copy-ide-resources
\family default
\emph default
 
\family typewriter
\emph on
t
\family default
\emph default
) (
\family typewriter
\emph on
info-plist
\family default
\emph default
 
\family typewriter
\emph on
NIL
\family default
\emph default
) (
\family typewriter
\emph on
nibfiles
\family default
\emph default
 
\family typewriter
\emph on
NIL
\family default
\emph default
) (
\family typewriter
\emph on
main-nib-name
\family default
\emph default
 
\family typewriter
\emph on
NIL
\family default
\emph default
) (
\family typewriter
\emph on
application-class
\family default
\emph default
 
\family typewriter
\emph on
'GUI::COCOA-APPLICATION
\family default
\emph default
) (
\family typewriter
\emph on
toplevel-function
\family default
\emph default
 
\family typewriter
\emph on
NIL
\family default
\emph default
) [Function]
\end_layout

\begin_layout Standard
The 
\family typewriter
build-application
\family default
 function constructs an application bundle, populates it with the files
 needed to satisfy Mac OS X that the bundle is a launchable application,
 and saves an executable Lisp image to the proper subdirectory of the bundle.
 Assuming that the saved Lisp image contains correct code, a user can subsequent
ly launch the resulting Cocoa application by double-clicking its icon in
 the Finder, and the saved Lisp environment runs.
\end_layout

\begin_layout Standard
The keyword arguments control various aspects of application bundle as 
\family typewriter
BUILD-APPLICATION
\family default
 builds it.
\end_layout

\begin_layout Description

\family typewriter
name
\family default
 Specifies the application name of the bundle.
 
\family typewriter
BUILD-APPLICATION
\family default
 creates an application bundle whose name is given by this parameter, with
 the extension ".app" appended.
 For example, using the default value for this parameter results in a bundle
 named "MyApplication.app".
 
\end_layout

\begin_layout Description

\family typewriter
type-string
\family default
 Specifies type of bundle to create.
 You should normally never need to change the default value, which Mac OS
 X uses to identify application bundles.
 
\end_layout

\begin_layout Description

\family typewriter
creator-string
\family default
 Specifies the 
\emph on
creator code
\emph default
, which uniquely identifies the application under Mac OS X.
 The default creator code is that of Clozure CL.
 For more information about reserving and assigning creator codes, see Apple's
 developer page on the topic.
 
\end_layout

\begin_layout Description

\family typewriter
directory
\family default
 The directory in which 
\family typewriter
BUILD-APPLICATION
\family default
 creates the application bundle.
 By default, it creates the bundle in the current working directory.
 Unless you use 
\family typewriter
CURRENT-DIRECTORY
\family default
 to set the working directory, the bundle may be created in some unexpected
 place, so it's safest to specify a full pathname for this argument.
 A typical value might be 
\family typewriter
"/Users/foo/Desktop/"
\family default
 (assuming, of course, that your username is "foo").
 
\end_layout

\begin_layout Description

\family typewriter
copy-ide-resources
\family default
 Whether to copy the resource files from the IDE's application bundle.
 By default, 
\family typewriter
BUILD-APPLICATION
\family default
 copies nibfiles and other resources from the IDE to the newly-created applicati
on bundle.
 This option is often useful when you are developing a new application,
 because it enables your built application to have a fully-functional user
 interface even before you have finished designing one.
 By default, the application uses the application menu and other UI elements
 of the IDE until you specify otherwise.
 Once your application's UI is fully implemented, you may choose to pass
 
\family typewriter
NIL
\family default
 for the value of this parameter, in which case the IDE resources are not
 copied into your application bundle.
 
\end_layout

\begin_layout Description

\family typewriter
info-plist
\family default
 A user-supplied NSDictionary object that defines the contents of the Info.plist
 file to be written to the application bundle.
 The default value is 
\family typewriter
NIL
\family default
, which specifies that the Info.plist from the IDE is to be used if 
\family typewriter
\size small
\emph on
copy-ide-resources
\family default
\emph default
 is true, and a new dictionary created with default values is to be used
 otherwise.
 You can create a suitable NSDictionary object using the function 
\family typewriter
make-info-dict
\family default
.
 For details on the parameters to this function, see its definition in "ccl/coco
a-ide/builder-utilities.lisp".
 
\end_layout

\begin_layout Description

\family typewriter
nibfiles
\family default
 A list of pathnames, where each pathname identifies a 
\emph on
nibfile
\emph default
 created with Apple's 
\emph on
InterfaceBuilder
\emph default
 application.
 
\family typewriter
BUILD-APPLICATION
\family default
 copies each nibfile into the appropriate place in the application bundle,
 enabling the application to load user-interface elements from them as-needed.
 It is safest to provide full pathnames to the nibfiles in the list.
 Each nibfile must be in ".nib" format, not ".xib" format, in order that the
 application can load it.
 
\end_layout

\begin_layout Description

\family typewriter
main-nib-name
\family default
 The name of the 
\emph on
nibfile
\emph default
 to load initially when launching.
 The user-interface defined in this nibfile becomes the application's main
 interface.
 You must supply the name of a suitable nibfile for this parameter, or the
 resulting application uses the Clozure CL user interface.
 
\end_layout

\begin_layout Description

\family typewriter
application-class
\family default
 The name of the application's CLOS class.
 The default value is the class provided by Clozure CL for graphical application
s.
 Supply the name of your application class if you implement one.
 If not, Clozure CL uses the default class.
 
\end_layout

\begin_layout Description

\family typewriter
toplevel-function
\family default
 The toplevel function that runs when the application launches.
 Normally the default value, which is Clozure CL's toplevel, works well,
 but in some cases you may wish to customize the behavior of the application's
 toplevel.
 The best source of information about writing your own toplevel is the Clozure
 CL source code, especially the implementations of 
\family typewriter
TOPLEVEL-FUNCTION
\family default
 in "ccl/level-1/l1-application.lisp" 
\end_layout

\begin_layout Standard
\noindent

\family typewriter
BUILD-APPLICATION
\family default
 creates a folder named "
\family typewriter
\size small
\emph on
name
\family default
\emph default
.app" in the directory 
\family typewriter
\emph on
directory
\family default
\emph default
.
 Inside that folder, it creates the "Contents" folder that Mac OS X application
 bundles are expected to contain, and populates it with the "MacOS" and
 "Resources" folders, and the "Info.plist" and "PkgInfo" files that must
 be present in a working application bundle.
 It takes the contents of the "Info.plist" and "PkgInfo" files from the parameter
s to 
\family typewriter
BUILD-APPLICATION
\family default
.
 If 
\family typewriter
\emph on
copy-ide-resources
\family default
\emph default
 is true then it copies the contents of the "Resources" folder from the
 "Resources" folder of the running IDE.
\end_layout

\begin_layout Standard
The work needed to produce a running Cocoa application is very minimal.
 In fact, if you supply 
\family typewriter
BUILD-APPLICATION
\family default
 with a valid nibfile and pathnames, it builds a running Cocoa application
 that displays your UI.
 It doesn't need you to write any code at all to do this.
 Of course, the resulting application doesn't do anything apart from displaying
 the UI defined in the nibfile.
 If you want your UI to accomplish anything, you need to write the code
 to handle its events.
 But the path to a running application with your UI in it is very short
 indeed.
\end_layout

\begin_layout Standard
Please note that 
\family typewriter
BUILD-APPLICATION
\family default
 is a work in progress.
 It can easily build a working Cocoa application, but it still has limitations
 that may in some cases prove inconvenient.
 For example, in the current version it provides no easy way to specify
 an application delegate different from the default.
 If you find the current limitations of 
\family typewriter
BUILD-APPLICATION
\family default
 too restrictive, and want to try extending it for your use, you can find
 the source code for it in "ccl/cocoa-ide/build-application.lisp".
 You can see the default values used to populate the "Info.plist" file in
 "ccl/cocoa-ide/builder-utilities.lisp".
\end_layout

\begin_layout Standard
For more information on how to use 
\family typewriter
BUILD-APPLICATION
\family default
, see the Currency Converter example in "ccl/examples/cocoa/currency-converter/".
\end_layout

\begin_layout Subsection
Running the Application Builder From the Command Line
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "running-the-application-builder-from-command-line"

\end_inset

It's possible to automate use of the application builder by running a call
 to 
\family typewriter
CCL:BUILD-APPLICATION
\family default
 from the terminal command line.
 For example, the following command, entered at a shell prompt in Mac OS
 X's Terminal window, builds a working copy of the Clozure CL environment
 called "Foo.app":
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ccl -b -e "(require :cocoa)" -e "(require :build-application)" -e "(ccl::build-a
pplication :name 
\backslash
"Foo
\backslash
")"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can use the same method to automate building your Lisp/Cocoa applications.
 Clozure CL handles each Lisp expressions passed with a 
\family typewriter
-e
\family default
 argument in order, so you can simply evaluate a sequence of Lisp expressions
 as in the above example to build your application, ending with a call to
 
\family typewriter
CCL:BUILD-APPLICATION
\family default
.
 The call to 
\family typewriter
CCL:BUILD-APPLICATION
\family default
 can process all the same arguments as if you evaluated it in a Listener
 window in the Clozure CL IDE.
\end_layout

\begin_layout Standard
Building a substantial Cocoa application (rather than just reproducing the
 Lisp environment using defaults, as is done in the above example) is likely
 to involve a relatively complicated sequence of loading source files and
 perhaps evaluating Lisp forms.
 You might be best served to place your command line in a shell script that
 you can more easily edit and test.
\end_layout

\begin_layout Standard
One potentially complicated issue concerns loading all your Lisp source
 files in the right order.
 You might consider using ASDF to define and load a system that includes
 all the parts of your application before calling 
\family typewriter
CCL:BUILD-APPLICATION
\family default
.
 ASDF is a "another system-definition facility", a sort of 
\family typewriter
make
\family default
 for Lisp, and is included in the Clozure CL distribution.
 You can read more about ASDF at the ASDF home page.
\end_layout

\begin_layout Standard
Alternatively, you could use the standard features of Common Lisp to load
 your application's files in the proper order.
 
\end_layout

\end_body
\end_document
