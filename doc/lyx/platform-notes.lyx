#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
% -----------------------------------------  
% Autogenerated LaTeX file from XML DocBook  
% -----------------------------------------  
%%<params>
%%</params>

\usepackage{ifthen}\newboolean{DBKIsBook}
\setboolean{DBKIsBook}{true}
\IfFileExists{ifxetex.sty}{%
    \usepackage{ifxetex}%
  }{%
    \newif\ifxetex
    \xetexfalse
  }
  \ifxetex
\usepackage{fontspec}\usepackage{xltxtra}\setmainfont{DejaVu Serif}
\setsansfont{DejaVu Sans}
\setmonofont{DejaVu Sans Mono}
\else
\fi
\usepackage{fancybox}\usepackage[hyperlink]{docbook}\renewcommand{\DBKreleaseinfo}{}


\title{Platform-{}specific notes}
\author{}

% ------------------
% Collaborators
% ------------------
\renewcommand{\DBKindexation}{
\begin{DBKindtable}
\DBKinditem{\writtenby}{}
\end{DBKindtable}
}
\makeindex
\makeglossary
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "%"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Platform-specific notes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Platform-specific-notes"

\end_inset


\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Platform-specific-overview"

\end_inset

The documentation and whatever experience you may have in using Clozure
 CL under Linux should also apply to using it under Darwin/MacOS X and FreeBSD.
 There are some differences between the platforms, and these differences
 are sometimes exposed in the implementation.
\end_layout

\begin_layout Subsection
Differences Between 32-bit and 64-bit implementations
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "differences-between-32-bit-and-64-bit-implementations"

\end_inset

Fixnums on 32-bit systems are 30 bits long, and are in the range -536870912
 through 536870911.
 Fixnums on 64-bit systems are 61 bits long, and are in the range -1152921504606
846976 through 1152921504606846975.
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "Tagging-scheme"

\end_inset

)
\end_layout

\begin_layout Standard
Since we have much larger fixnums on 64-bit systems, 
\family typewriter
INTERNAL-TIME-UNITS-PER-SECOND
\family default
 is 1000000 on 64-bit systems but remains 1000 on 32-bit systems.
 This enables much finer grained timing on 64-bit systems.
\end_layout

\begin_layout Subsection
File-system case
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "File-system-case"

\end_inset

Darwin and MacOS X use HFS+ file systems by default; HFS+ file systems are
 usually case-insensitive.
 Most of Clozure CL's filesystem and pathname code assumes that the underlying
 filesystem is case-sensitive; this assumption extends to functions like
 EQUAL, which assumes that #p"FOO" and #p"foo" denote different, un-EQUAL
 filenames.
 Since Darwin/MacOS X can also use UFS and NFS filesystems, the opposite
 assumption would be no more correct than the one that's currently made.
\end_layout

\begin_layout Standard
Whatever the best solution to this problem turns out to be, there are some
 practical considerations.
 Doing:
\end_layout

\begin_layout Standard
[firstnumber=1,] 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (save-application "DPPCCL")
\end_layout

\end_inset

on 32-bit DarwinPPC has the unfortunate side-effect of trying to overwrite
 the Darwin Clozure CL kernel, "dppccl", on a case-insensitive filesystem.
\end_layout

\begin_layout Standard
To work around this, the Darwin Clozure CL kernel expects the default heap
 image file name to be the kernel's own filename with the string ".image"
 appended, so the idiom would be:
\end_layout

\begin_layout Standard
[firstnumber=1,] 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (save-application "dppccl.image")
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection
Line Termination Characters
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Line-Termination-Characters"

\end_inset

MacOSX effectively supports two distinct line-termination conventions.
 Programs in its Darwin substrate follow the Unix convention of recognizing
 #
\backslash
LineFeed as a line terminator; traditional MacOS programs use #
\backslash
Return for this purpose.
 Many modern GUI programs try to support several different line-termination
 conventions (on the theory that the user shouldn't be too concerned about
 what conventions are used an that it probably doesn't matter.
 Sometimes this is true, other times ...
 not so much.
\end_layout

\begin_layout Standard
Clozure CL follows the Unix convention on both Darwin and LinuxPPC, but
 offers some support for reading and writing files that use other conventions
 (including traditional MacOS conventions) as well.
\end_layout

\begin_layout Standard
This support (and anything like it) is by nature heuristic: it can successfully
 hide the distinction between newline conventions much of the time, but
 could mistakenly change the meaning of otherwise correct programs (typically
 when files contain both #
\backslash
Return and #
\backslash
Linefeed characters or when files contain mixtures of text and binary data.)
 Because of this concern, the default settings of some of the variables
 that control newline translation and interpretation are somewhat conservative.
\end_layout

\begin_layout Standard
Although the issue of multiple newline conventions primarily affects MacOSX
 users, the functionality described here is available under LinuxPPC as
 well (and may occasionally be useful there.)
\end_layout

\begin_layout Standard
None of this addresses issues related to the third newline convention ("CRLF")
 in widespread use (since that convention isn't native to any platform on
 which Clozure CL currently runs).
 If Clozure CL is ever ported to such a platform, that issue might be revisited.
\end_layout

\begin_layout Standard
Note that some MacOS programs (including some versions of commercial MCL)
 may use HFS file type information to recognize TEXT and other file types
 and so may fail to recognize files created with Clozure CL or other Darwin
 applications (regardless of line termination issues.)
\end_layout

\begin_layout Standard
Unless otherwise noted, the symbols mentioned in this documentation are
 exported from the CCL package.
\end_layout

\begin_layout Subsection
Single-precision trig & transcendental functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Single-precision-trig---transcendental-functions"

\end_inset

Despite what Darwin's man pages say, early versions of its math library
 (up to and including at least OSX 10.2 (Jaguar) don't implement single-precision
 variants of the transcendental and trig functions (#_sinf, #_atanf, etc.)
 Clozure CL worked around this by coercing single-precision args to double-preci
sion, calling the double-precision version of the math library function,
 and coercing the result back to a SINGLE-FLOAT.
 These steps can introduce rounding errors (and potentially overflow conditions)
 that might not be present or as severe if true 32-bit variants were available.
\end_layout

\begin_layout Subsection
Shared libraries
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Shared-libraries"

\end_inset

Darwin/MacOS X distinguishes between "shared libraries" and "bundles" or
 "extensions"; Linux and FreeBSD don't.
 In Darwin, "shared libraries" have the file type "dylib" : the expectation
 is that this class of file is linked against when executable files are
 created and loaded by the OS when the executable is launched.
 The latter class - "bundles/extensions" - are expected to be loaded into
 and unloaded from a running application, via a mechanism like the one used
 by Clozure CL's OPEN-SHARED-LIBRARY function.
\end_layout

\begin_layout Section
Unix/Posix/Darwin Features
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Unix-Posix-Darwin-Features"

\end_inset

Clozure CL has several convenience functions which allow you to make Posix
 (portable Unix) calls without having to use the foreign-function interface.
 Each of these corresponds directly to a single Posix function call, as
 it might be made in C.
 There is no attempt to make these calls correspond to Lisp idioms, such
 as 
\family typewriter
setf
\family default
.
 This means that their behavior is simple and predictable.
\end_layout

\begin_layout Standard
For working with environment variables, there are CCL::GETENV and CCL::SETENV.
\end_layout

\begin_layout Standard
For working with user and group IDs, there are CCL::GETUID, CCL::SETUID,
 and CCL::SETGID.
 To find the home directory of an arbitrary user, as set in the user database
 (/etc/passwd), there is CCL::GET-USER-HOME-DIR.
\end_layout

\begin_layout Standard
For process IDs, there is CCL::GETPID.
\end_layout

\begin_layout Standard
For the 
\family typewriter
system()
\family default
 function, there is CCL::OS-COMMAND.
 Ordinarily, it is better - both more efficient and more predictable - to
 use the features described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "Running-Other-Programs-as-Subprocesses"

\end_inset

.
 However, sometimes you may want to specifically ask the shell to invoke
 a command for you.
\end_layout

\begin_layout Section
Cocoa Programming in Clozure CL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Cocoa-Programming-in-CCL"

\end_inset

Cocoa is one of Apple's APIs for GUI programming; for most purposes, development
 is considerably faster with Cocoa than with the alternatives.
 You should have a little familiarity with it, to better understand this
 section.
\end_layout

\begin_layout Standard
A small sample Cocoa program can be invoked by evaluating (REQUIRE 'TINY)
 and then (CCL::TINY-SETUP).
 This program provides a simple example of using several of the bridge's
 capabilities.
\end_layout

\begin_layout Standard
The Tiny demo creates Cocoa objects dynamically, at runtime, which is always
 an option.
 However, for large applications, it is usually more convenient to create
 your objects with Apple Interface Builder, and store them in .nib files
 to be loaded when needed.
 Both approaches can be freely mixed in a single program.
\end_layout

\begin_layout Subsection
The Command Line and the Window System
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "The-Command-Line-and-the-Window-System"

\end_inset

Clozure CL is ordinarily a command-line application (it doesn't have a connectio
n to the OSX Window server, doesn't have its own menubar or dock icon, etc.)
 By opening some libraries and jumping through some hoops, it's able to
 sort of transform itself into a full-fledged GUI application (while retaining
 its original TTY-based listener.) The general idea is that this hybrid environme
nt can be used to test and protoype UI ideas and the resulting application
 can eventually be fully transformed into a bundled, double-clickable applicatio
n.
 This is to some degree possible, but there needs to be a bit more infrastructur
e in place before many people would find it easy.
\end_layout

\begin_layout Standard
Cocoa applications use the NSLog function to write informational/warning/error
 messages to the application's standard output stream.
 When launched by the Finder, a GUI application's standard output is diverted
 to a logging facility that can be monitored with the Console application
 (found in /Applications/Utilities/Console.app).
 In the hybrid environment, the application's standard output stream is
 usually the initial listener's standard output stream.
 With two different buffered stream mechanisms trying to write to the same
 underlying Unix file descriptor, it's not uncommon to see NSLog output
 mixed with lisp output on the initial listener.
\end_layout

\begin_layout Subsection
Writing (and reading) Cocoa code
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Writing--and-reading--Cocoa-code"

\end_inset

The syntax of the constructs used to define Cocoa classes and methods has
 changed a bit (it was never documented outside of the source code and never
 too well documented at all), largely as the result of functionality offered
 by Randall Beer's bridge; the 
\begin_inset Quotes grd
\end_inset

standard name-mapping conventions” referenced below are described in his
 CocoaBridgeDoc.txt file, as are the constructs used to invoke (
\begin_inset Quotes grd
\end_inset

send messages to”) Cocoa methods.
\end_layout

\begin_layout Standard
All of the symbols described below are currently internal to the CCL package.
\end_layout

\begin_layout Standard
CCL::@CLASS 
\end_layout

\begin_layout Standard
CCL::@SELECTOR 
\end_layout

\begin_layout Standard
CCL::DEFINE-OBJC-METHOD 
\end_layout

\begin_layout Standard
CCL::DEFINE-OBJC-CLASS-METHOD 
\end_layout

\begin_layout Subsection
The Application Kit and Multiple Threads
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "The-Application-Kit-and-Multiple-Threads"

\end_inset

The Cocoa API is broken into several pieces.
 The Application Kit, affectionately called AppKit, is the one which deals
 with window management, drawing, and handling events.
 AppKit really wants all these things to be done by a "distinguished thread".
 creation, and drawing to take place on a distinguished thread.
\end_layout

\begin_layout Standard
Apple has published some guidelines which discuss these issues in some detail;
 see the Apple Multithreading Documentation, and in particular the guidelines
 on Using the Application Kit from Multiple Threads.
 The upshot is that there can sometimes be unexpected behavior when objects
 are created in threads other than the distinguished event thread; eg, the
 event thread sometimes starts performing operations on objects that haven't
 been fully initialized.
\end_layout

\begin_layout Standard
It's certainly more convenient to do certain types of exploratory programming
 by typing things into a listener or evaluating a 
\begin_inset Quotes grd
\end_inset

defun” in an Emacs buffer; it may sometimes be necessary to be aware of
 this issue while doing so.
\end_layout

\begin_layout Standard
Each thread in the Cocoa runtime system is expected to maintain a current
 
\begin_inset Quotes grd
\end_inset

autorelease pool” (an instance of the NSAutoreleasePool class); newly created
 objects are often added to the current autorelease pool (via the -autorelease
 method), and periodically the current autorelease pool is sent a 
\begin_inset Quotes grd
\end_inset

-release” message, which causes it to send 
\begin_inset Quotes grd
\end_inset

-release” messages to all of the objects that have been added to it.
\end_layout

\begin_layout Standard
If the current thread doesn't have a current autorelease pool, the attempt
 to autorelease any object will result in a severe-looking warning being
 written via NSLog.
 The event thread maintains an autorelease pool (it releases the current
 pool after each event is processed and creates a new one for the next event),
 so code that only runs in that thread should never provoke any of these
 severe-looking NSLog messages.
\end_layout

\begin_layout Standard
To try to suppress these messages (and still participate in the Cocoa memory
 management scheme), each listener thread (the initial listener and any
 created via the 
\begin_inset Quotes grd
\end_inset

New Listener” command in the IDE) is given a default autorelease pool; there
 are REPL colon-commands for manipulating the current listener's 
\begin_inset Quotes grd
\end_inset

toplevel autorelease pool”.
\end_layout

\begin_layout Standard
In the current scheme, every time that Cocoa calls lisp code, a lisp error
 handler is established which maps any lisp conditions to ObjC exceptions
 and arranges that this exception is raised when the callback to lisp returns.
 Whenever lisp code invokes a Cocoa method, it does so with an ObjC exception
 handler in place; this handler maps ObjC exceptions to lisp conditions
 and signals those conditions.
\end_layout

\begin_layout Standard
Any unhandled lisp error or ObjC exception that occurs during the execution
 of the distinguished event thread's event loop causes a message to be NSLog'ed
 and the event loop to (try to) continue execution.
 Any error that occurs in other threads is handled at the point of the outermost
 Cocoa method invocation.
 (Note that the error is not necessarily 
\begin_inset Quotes grd
\end_inset

handled” in the dynamic context in which it occurs.)
\end_layout

\begin_layout Standard
Both of these behaviors could possibly be improved; both of them seem to
 be substantial improvements over previous behaviors (where, for instance,
 a misspelled message name typically terminated the application.)
\end_layout

\begin_layout Subsection
Acknowledgement
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Acknowledgement--2-"

\end_inset

The Cocoa bridge was originally developed, and generously contributed by,
 Randall Beer.
\end_layout

\begin_layout Section
Building an Application Bundle
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Building-an-Application-Bundle"

\end_inset

You may have noticed that (require "COCOA") takes a long time to load.
 It is possible to avoid this by saving a Lisp heap image which has everything
 already loaded.
 There is an example file which allows you to do this, "ccl/examples/cocoa-appli
cation.lisp", by producing a double-clickable application which runs your
 program.
 First, load your own program.
 Then, do:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (require "COCOA-APPLICATION")
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
When it finishes, you should be able to double-click the Clozure CL icon
 in the ccl directory, to quickly start your program.
\end_layout

\begin_layout Standard
The OS may have already decided that Clozure CL.app isn't a valid executable
 bundle, and therefore won't let you double-click it.
 If this happens to you, to force it to reconsider, just update the last-modifie
d time of the bundle.
 In Terminal:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> touch Clozure CL.app
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
When an image which had contained ObjC classes (which are also CLOS classes)
 is re-launched, those classes are "revived": all preexisting classes have
 their addresses updated destructively, so that existing subclass/superclass/met
aclass relationships are maintained.
 It's not possible (and may never be) to preserve foreign instances across
 SAVE-APPLICATION.
 (It may be the case that NSArchiver and NSCoder and related classes offer
 some approximation of that.)
\end_layout

\begin_layout Section
Recommended Reading
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Recommended-Reading"

\end_inset


\end_layout

\begin_layout Description
Mac OS X - Cocoa ,  Cocoa Core Competencies  ,  Cocoa Fundamentals Guide
   These are top-level pages pertaining to Cocoa in Apple's Mac OS X Developer
 Library.
 If you are unfamiliar with Cocoa, these links are good places to start.
 
\end_layout

\begin_layout Description
The Objective-C Programming Language  ,  Objective-C Runtime Programming
 Guide   These provide a conceptual overview and programming guide to Objective-
C the language and runtime, respectively.
 
\end_layout

\begin_layout Description
Objective-C Runtime Reference   This is one of the two most important Cocoa
 references; it covers all of the basics, except for GUI programming.
 This is a reference, not a tutorial.
 
\end_layout

\begin_layout Description
Application Kit Framework Reference  This is the other very important Cocoa
 reference; it covers GUI programming with Cocoa / Application Kit Framework
 in considerable depth.
 This is a reference, not a tutorial.
 
\end_layout

\begin_layout Description
Mac OS X Developer Library  This is the top page for Mac OS X developer
 documentation.
 Go here to find the documentation on any other Mac OS X API.
 Also go here if you need general guidance about OS X, Carbon, Cocoa, Core
 Foundation, or Objective-C.
 
\end_layout

\begin_layout Description
Resources for Apple Developers  This is the top page for all Apple developer
 documentation.
 
\end_layout

\begin_layout Section
Operating-System Dictionary
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset label
LatexCommand label
name "Operating-System-Dictionary"

\end_inset


\end_layout

\begin_layout Subsection
CCL::GETENV
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_getenv"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getenv
\end_layout

\end_inset

CCL::GETENV ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
getenv name => value
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
name a string which is the name of an existing environment variable; case-sensit
ive 
\end_layout

\begin_layout Description
value if there is an environment variable named 
\family typewriter
name
\family default
, its value, as a string; if there is not, NIL 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Looks up the value of the environment variable named by 
\family typewriter
name
\family default
, in the OS environment.
\end_layout

\begin_layout Subsection
CCL::SETENV
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_setenv"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setenv
\end_layout

\end_inset

CCL::SETENV ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
setenv name value => errno
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
name a string which is the name of a new or existing environment variable;
 case-sensitive 
\end_layout

\begin_layout Description
value a string, to be the new value of the environment variable named by
 
\family typewriter
name
\family default
 
\end_layout

\begin_layout Description
errno zero if the function call completes successfully; otherwise, a platform-de
pendent integer which describes the problem 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Sets the value of the environment variable named by 
\family typewriter
name
\family default
, in the OS environment.
 If there is no such environment variable, creates it.
\end_layout

\begin_layout Subsection
CCL::CURRENT-DIRECTORY-NAME
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_current-directory-name"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
current-directory-name
\end_layout

\end_inset

CCL::CURRENT-DIRECTORY-NAME ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
current-directory-name => path
\end_layout

\begin_layout Subsubsection*
Values
\end_layout

\begin_layout Description
path a string, an absolute pathname in Posix format - with directory components
 separated by slashes 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Looks up the current working directory of the Clozure CL process; unless
 it has been changed, this is the directory Clozure CL was started in.
\end_layout

\begin_layout Subsection
CCL::GETUID
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_getuid"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getuid
\end_layout

\end_inset

CCL::GETUID ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
getuid => uid
\end_layout

\begin_layout Subsubsection*
Values
\end_layout

\begin_layout Description
uid a non-negative integer, identifying a specific user account as defined
 in the OS user database 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Returns the ("real") user ID of the current user.
\end_layout

\begin_layout Subsection
CCL::SETUID
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_setuid"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setuid
\end_layout

\end_inset

CCL::SETUID ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
setuid uid => errno
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
uid a non-negative integer, identifying a specific user account as defined
 in the OS user database 
\end_layout

\begin_layout Description
errno zero if the function call completes successfully; otherwise, a platform-de
pendent integer which describes the problem 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Attempts to change the current user ID (both "real" and "effective"); fails
 unless the Clozure CL process has super-user privileges or the ID given
 is that of the current user.
\end_layout

\begin_layout Subsection
CCL::SETGID
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_setgid"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
setgid
\end_layout

\end_inset

CCL::SETGID ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
setgid gid => errno
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
gid a non-negative integer, identifying a specific group as defined in the
 OS user database 
\end_layout

\begin_layout Description
errno zero if the function call completes successfully; otherwise, a platform-de
pendent integer which describes the problem 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Attempts to change the current group ID (both "real" and "effective"); fails
 unless the Clozure CL process has super-user privileges or the ID given
 is that of a group to which the current user belongs.
\end_layout

\begin_layout Subsection
CCL::GETPID
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_getpid"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
getpid
\end_layout

\end_inset

CCL::GETPID ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
getpid => pid
\end_layout

\begin_layout Subsubsection*
Values
\end_layout

\begin_layout Description
pid a non-negative integer, identifying an OS process 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Returns the ID of the Clozure CL OS process.
\end_layout

\begin_layout Subsection
CCL::GET-USER-HOME-DIR
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_get-user-home-dir"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
get-user-home-dir
\end_layout

\end_inset

CCL::GET-USER-HOME-DIR ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
get-user-home-dir uid => path
\end_layout

\begin_layout Subsubsection*
Values
\end_layout

\begin_layout Description
uid a non-negative integer, identifying a specific user account as defined
 in the OS user database 
\end_layout

\begin_layout Description
path a string, an absolute pathname in Posix format - with directory components
 separated by slashes; or NIL 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Looks up and returns the defined home directory of the user identified by
 
\family typewriter
uid
\family default
.
 This value comes from the OS user database, not from the 
\family typewriter
$HOME
\family default
 environment variable.
 Returns NIL if there is no user with the ID 
\family typewriter
uid
\family default
.
\end_layout

\begin_layout Subsection
CCL::OS-COMMAND
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_os-command"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
os-command
\end_layout

\end_inset

CCL::OS-COMMAND ---
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
os-command command-line => exit-code
\end_layout

\begin_layout Subsubsection*
Values
\end_layout

\begin_layout Description
command-line a string, obeying all the whitespace and escaping conventions
 required by the user's default system shell 
\end_layout

\begin_layout Description
exit-code a non-negative integer, returned as the exit code of a subprocess;
 zero indicates success 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Invokes the Posix function 
\family typewriter
system()
\family default
, which invokes the user's default system shell (such as sh or tcsh) as
 a new process, and has that shell execute 
\family typewriter
command-line
\family default
.
\end_layout

\begin_layout Standard
If the shell was able to find the command specified in 
\family typewriter
command-line
\family default
, then 
\family typewriter
exit-code
\family default
 is the exit code of that command.
 If not, it is the exit code of the shell itself.
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard
By convention, an exit code of 0 indicates success.
 There are also other conventions; unfortunately, they are OS-specific,
 and the portable macros to decode their meaning are implemented by the
 system headers as C preprocessor macros.
 This means that there is no good, automated way to make them available
 to Lisp.
\end_layout

\begin_layout Subsection
CCL::@CLASS
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_class"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
"@class
\end_layout

\end_inset

CCL::@CLASS ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
@class class-name
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
class-name a string which denotes an existing class name, or a symbol which
 can be mapped to such a string via the standard name-mapping conventions
 for class names 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Used to refer to a known ObjC class by name.
 (Via the use LOAD-TIME-VALUE, the results of a class-name -> class lookup
 are cached.)
\end_layout

\begin_layout Standard

\family typewriter
@class
\family default
 is obsolete as of late 2004, because find-class now works on ObjC classes.
 It is described here only because some old code still uses it.
\end_layout

\begin_layout Subsection
CCL::@SELECTOR
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_selector"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
"@selector
\end_layout

\end_inset

CCL::@SELECTOR ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
@selector string
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
string a string constant, used to canonically refer to an ObjC method selector
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Used to refer to an ObjC method selector (method name).
 Uses LOAD-TIME-VALUE to cache the result of a string -> selector lookup.
\end_layout

\begin_layout Subsection
objc:defmethod
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_objc-defmethod"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
objc:defmethod
\end_layout

\end_inset

objc:defmethod ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
objc:defmethod name-and-result-type ((receiver-arg-and-class) &rest other-args)
 &body body
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
name-and-result-type either an Objective-C message name, for methods that
 return a value of type 
\family typewriter
:ID
\family default
, or a list containing an Objective-C message name and a foreign type specifier
 for methods with a different foreign result type.
 
\end_layout

\begin_layout Description
receiver-arg-and-class a two-element list whose first element is a variable
 name and whose second element is the Lisp name of an Objective-C class
 or metaclass.
 The receiver variable name can be any bindable lisp variable name, but
 
\family typewriter
SELF
\family default
 might be a reasonable choice.
 The receiver variable is declared to be "unsettable"; i.e., it is an error
 to try to change the value of the receiver in the body of the method definition.
 
\end_layout

\begin_layout Description
other-args either variable names (denoting parameters of type 
\family typewriter
:ID
\family default
) or 2-element lists whose first element is a variable name and whose second
 element is a foreign type specifier.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Defines an Objective-C-callable method which implements the specified message
 selector for instances of the existing named Objective-C class.
\end_layout

\begin_layout Standard
For a detailed description of the features and restrictions of the 
\family typewriter
OBJC:DEFMETHOD
\family default
 macro, see the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "Using-objc-defmethod"

\end_inset

.
\end_layout

\begin_layout Subsection
CCL::DEFINE-OBJC-METHOD
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_define-objc-method"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
define-objc-method
\end_layout

\end_inset

CCL::DEFINE-OBJC-METHOD ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
define-objc-method (selector class-name) &body body
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
selector either a string which represents the name of the selector or a
 list which describes the method's return type, selector components, and
 argument types (see below.) If the first form is used, then the first form
 in the body must be a list which describes the selector's argument types
 and return value type, as per DEFCALLBACK.
 
\end_layout

\begin_layout Description
class-name either a string which names an existing ObjC class name or a
 list symbol which can map to such a string via the standard name-mapping
 conventions for class names.
 (Note that the "canonical" lisp class name is such a symbol) 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Defines an ObjC-callable method which implements the specified message selector
 for instances of the existing ObjC class class-name.
\end_layout

\begin_layout Subsection
CCL::DEFINE-OBJC-CLASS-METHOD
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_define-objc-class-method"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
define-objc-class-method
\end_layout

\end_inset

CCL::DEFINE-OBJC-CLASS-METHOD ---
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
define-objc-class-method (selector class-name) &body body
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Standard
As per DEFINE-OBJC-METHOD
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
Like DEFINE-OBJC-METHOD, only used to define methods on the 
\emph on
class
\emph default
 named by class-name and on its subclasses.
\end_layout

\begin_layout Standard
For both DEFINE-OBJC-METHOD and DEFINE-OBJC-CLASS-METHOD, the "selector"
 argument can be a list whose first element is a foreign type specifier
 for the method's return value type and whose subsequent elements are either:
 
\end_layout

\begin_layout Itemize
a non-keyword symbol, which can be mapped to a selector string for a parameterle
ss method according to the standard name-mapping conventions for method
 selectors.
\end_layout

\begin_layout Itemize
a list of alternating keywords and variable/type specifiers, where the set
 of keywords can be mapped to a selector string for a parameterized method
 according to the standard name-mapping conventions for method selectors
 and each variable/type-specifier is either a variable name (denoting a
 value of type :ID) or a list whose CAR is a variable name and whose CADR
 is the corresponding argument's foreign type specifier.
\end_layout

\begin_layout Subsection
CCL:*ALTERNATE-LINE-TERMINATOR*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_alternate-line-terminator"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*alternate-line-terminator*
\end_layout

\end_inset

CCL:*ALTERNATE-LINE-TERMINATOR* ---
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
This variable is currently only used by the standard reader macro function
 for #
\backslash
; (single-line comments); that function reads successive characters until
 EOF, a #
\backslash
NewLine is read, or a character EQL to the value of *alternate-line-terminator*
 is read.
 In Clozure CL for Darwin, the value of this variable is initially #
\backslash
Return ; in Clozure CL for other OSes, it's initially NIL.
\end_layout

\begin_layout Standard
Their default treatment by the #
\backslash
; reader macro is the primary way in which #
\backslash
Return and #
\backslash
Linefeed differ syntactically; by extending the #
\backslash
; reader macro to (conditionally) treat #
\backslash
Return as a comment-terminator, that distinction is eliminated.
 This seems to make LOAD and COMPILE-FILE insensitive to line-termination
 issues in many cases.
 It could fail in the (hopefully rare) case where a LF-terminated (Unix)
 text file contains embedded #
\backslash
Return characters, and this mechanism isn't adequate to handle cases where
 newlines are embedded in string constants or other tokens (and presumably
 should be translated from an external convention to the external one) :
 it doesn't change what READ-CHAR or READ-LINE "see", and that may be necessary
 to handle some more complicated cases.
\end_layout

\begin_layout Subsection
CCL::NS-LISP-STRING
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "c_ns-lisp-string"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ns-lisp-string
\end_layout

\end_inset

CCL::NS-LISP-STRING ---
\end_layout

\begin_layout Standard
Class
\end_layout

\begin_layout Subsubsection*
Superclasses
\end_layout

\begin_layout Standard
NS:NS-STRING
\end_layout

\begin_layout Subsubsection*
Initargs
\end_layout

\begin_layout Description
:string a Lisp string which is to be the content of the newly-created ns-lisp-st
ring.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
This class implements the interface of an NSString, which means that it
 can be passed to any Cocoa or Core Foundation function which expects one.
\end_layout

\begin_layout Standard
The string itself is stored on the Lisp heap, which means that its memory
 management is automatic.
 However, the ns-lisp-string object itself is a foreign object (that is,
 it has an objc metaclass), and resides on the foreign heap.
 Therefore, it is necessary to explicitly free it, by sending a dealloc
 message.
\end_layout

\begin_layout Subsubsection*
Examples
\end_layout

\begin_layout Standard
You can create an ns-lisp-string with 
\family typewriter
make-instance
\family default
, just like any normal Lisp class:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (defvar *the-string* (make-instance 'ccl::ns-lisp-string :string "Hello,
 Cocoa.")) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you are done with the string, you must explicitly deallocate it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (ccl::send *the-string* 'dealloc)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You may wish to use an 
\family typewriter
unwind-protect
\family default
 form to ensure that this happens:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(let (*the-string*) 
\end_layout

\begin_layout Plain Layout

  (unwind-protect 
\end_layout

\begin_layout Plain Layout

      (progn 
\end_layout

\begin_layout Plain Layout

        (setq *the-string* (make-instance 'ccl::ns-lisp-string :string "Hello,
 Cocoa.")) 
\end_layout

\begin_layout Plain Layout

        (format t "&The string is ~D characters long.
 (ccl::send *the-string* 'length))) 
\end_layout

\begin_layout Plain Layout

    (when *the-string* 
\end_layout

\begin_layout Plain Layout

      (ccl::send *the-string* 'dealloc)))) 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard
Currently, ns-lisp-string is defined in the file ccl/examples/cocoa-backtrace.lis
p, which is a rather awkward place.
 It was probably not originally meant as a public utility at all.
 It would be good if it were moved someplace else.
 Use at your own risk.
 
\end_layout

\end_body
\end_document
