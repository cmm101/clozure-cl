#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
% -----------------------------------------  
% Autogenerated LaTeX file from XML DocBook  
% -----------------------------------------  
%%<params>
%%</params>

\usepackage{ifthen}\newboolean{DBKIsBook}
\setboolean{DBKIsBook}{true}
\IfFileExists{ifxetex.sty}{%
    \usepackage{ifxetex}%
  }{%
    \newif\ifxetex
    \xetexfalse
  }
  \ifxetex
\usepackage{fontspec}\usepackage{xltxtra}\setmainfont{DejaVu Serif}
\setsansfont{DejaVu Sans}
\setmonofont{DejaVu Sans Mono}
\else
\fi
\usepackage{fancybox}\usepackage[hyperlink]{docbook}\renewcommand{\DBKreleaseinfo}{}


\title{Programming with Threads}
\author{}

% ------------------
% Collaborators
% ------------------
\renewcommand{\DBKindexation}{
\begin{DBKindtable}
\DBKinditem{\writtenby}{}
\end{DBKindtable}
}
\makeindex
\makeglossary
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "%"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Programming with Threads
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Programming-with-Threads"

\end_inset


\end_layout

\begin_layout Section
Threads Overview
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Threads-overview"

\end_inset

Clozure CL provides facilities which enable multiple threads of execution
 (
\emph on
threads
\emph default
, sometimes called 
\emph on
lightweight processes
\emph default
 or just 
\emph on
processes
\emph default
, though the latter term shouldn't be confused with the OS's notion of a
 process) within a lisp session.
 This document describes those facilities and issues related to multithreaded
 programming in Clozure CL.
\end_layout

\begin_layout Standard
Wherever possible, I'll try to use the term "thread" to denote a lisp thread,
 even though many of the functions in the API have the word "process" in
 their name.
 A 
\emph on
lisp-process
\emph default
 is a lisp object (of type CCL:PROCESS) which is used to control and communicate
 with an underlying 
\emph on
native thread
\emph default
.
 Sometimes, the distinction between these two (quite different) objects
 can be blurred; other times, it's important to maintain.
\end_layout

\begin_layout Standard
Lisp threads share the same address space, but maintain their own execution
 context (stacks and registers) and their own dynamic binding context.
\end_layout

\begin_layout Standard
Traditionally, Clozure CL's threads have been 
\emph on
cooperatively scheduled
\emph default
: through a combination of compiler and runtime support, the currently executing
 lisp thread arranged to be interrupted at certain discrete points in its
 execution (typically on entry to a function and at the beginning of any
 looping construct).
 This interrupt occurred several dozen times per second; in response, a
 handler function might observe that the current thread had used up its
 time slice and another function (
\emph on
the lisp scheduler
\emph default
) would be called to find some other thread that was in a runnable state,
 suspend execution of the current thread, and resume execution of the newly
 executed thread.
 The process of switching contexts between the outgoing and incoming threads
 happened in some mixture of Lisp and assembly language code; as far as
 the OS was concerned, there was one native thread running in the Lisp image
 and its stack pointer and other registers just happened to change from
 time to time.
\end_layout

\begin_layout Standard
Under Clozure CL's cooperative scheduling model, it was possible (via the
 use of the CCL:WITHOUT-INTERRUPTS construct) to defer handling of the periodic
 interrupt that invoked the lisp scheduler; it was not uncommon to use WITHOUT-I
NTERRUPTS to gain safe, exclusive access to global data structures.
 In some code (including much of Clozure CL itself) this idiom was very
 common: it was (justifiably) believed to be an efficient way of inhibiting
 the execution of other threads for a short period of time.
\end_layout

\begin_layout Standard
The timer interrupt that drove the cooperative scheduler was only able to
 (pseudo-)preempt lisp code: if any thread called a blocking OS I/O function,
 no other thread could be scheduled until that thread resumed execution
 of lisp code.
 Lisp library functions were generally attuned to this constraint, and did
 a complicated mixture of polling and "timed blocking" in an attempt to
 work around it.
 Needless to say, this code is complicated and less efficient than it might
 be; it meant that the lisp was a little busier than it should have been
 when it was "doing nothing" (waiting for I/O to be possible.)
\end_layout

\begin_layout Standard
For a variety of reasons - better utilization of CPU resources on single
 and multiprocessor systems and better integration with the OS in general
 - threads in Clozure CL 0.14 and later are 
\emph on
preemptively scheduled.
 
\emph default
In this model, lisp threads are native threads and all scheduling decisions
 involving them are made by the OS kernel.
 (Those decisions might involve scheduling multiple lisp threads simultaneously
 on multiple processors on SMP systems.) This change has a number of subtle
 effects: 
\end_layout

\begin_layout Itemize
it is possible for two (or more) lisp threads to be executing simultaneously,
 possibly trying to access and/or modify the same data structures.
 Such access really should have been coordinated through the use of synchronizat
ion objects regardless of the scheduling modeling effect; preemptively scheduled
 threads increase the chance of things going wrong at the wrong time and
 do not offer lightweight alternatives to the use of those synchronization
 objects.
\end_layout

\begin_layout Itemize
even on a single-processor system, a context switch can happen on any instructio
n boundary.
 Since (in general) other threads might allocate memory, this means that
 a GC can effectively take place at any instruction boundary.
 That's mostly an issue for the compiler and runtime system to be aware
 of, but it means that certain practices(such as trying to pass the address
 of a lisp object to foreign code)that were always discouraged are now discourag
ed ...
 vehemently.
\end_layout

\begin_layout Itemize
there is no simple and efficient way to "inhibit the scheduler"or otherwise
 gain exclusive access to the entire CPU.
\end_layout

\begin_layout Itemize
There are a variety of simple and efficient ways to synchronize access to
 particular data structures.
\end_layout

\begin_layout Standard
As a broad generalization: code that's been aggressively tuned to the constraint
s of the cooperative scheduler may need to be redesigned to work well with
 the preemptive scheduler (and code written to run under Clozure CL's interface
 to the native scheduler may be less portable to other CL implementations,
 many of which offer a cooperative scheduler and an API similar to Clozure
 CL (< 0.14) 's.) At the same time, there's a large overlap in functionality
 in the two scheduling models, and it'll hopefully be possible to write
 interesting and useful MP code that's largely independent of the underlying
 scheduling details.
\end_layout

\begin_layout Standard
The keyword :OPENMCL-NATIVE-THREADS is on *FEATURES* in 0.14 and later and
 can be used for conditionalization where required.
\end_layout

\begin_layout Section
(Intentionally) Missing Functionality
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Intentionally--Missing-Functionality"

\end_inset

Much of the functionality described above is similar to that provided by
 Clozure CL's cooperative scheduler, some other parts of which make no sense
 in a native threads implementation.
 
\end_layout

\begin_layout Itemize
PROCESS-RUN-REASONS and PROCESS-ARREST-REASONS were SETFable process attributes;
 each was just a list of arbitrary tokens.
 A thread was eligible for scheduling (roughly equivalent to being "enabled")
 if its arrest-reasons list was empty and its run-reasons list was not.
 I don't think that it's appropriate to encourage a programming style in
 which otherwise runnable threads are enabled and disabled on a regular
 basis (it's preferable for threads to wait for some sort of synchronization
 event to occur if they can't occupy their time productively.)
\end_layout

\begin_layout Itemize
There were a number of primitives for maintaining process queues;that's
 now the OS's job.
\end_layout

\begin_layout Itemize
Cooperative threads were based on coroutining primitives associated with
 objects of type STACK-GROUP.
 STACK-GROUPs no longerexist.
\end_layout

\begin_layout Section
Implementation Decisions and Open Questions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Implementation-Decisions-and-Open-Questions"

\end_inset


\end_layout

\begin_layout Subsection
Thread Stack Sizes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Thread-Stack-Sizes"

\end_inset

When you use MAKE-PROCESS to create a thread, you can specify a stack size.
 Clozure CL does not impose a limit on the stack size you choose, but there
 is some evidence that choosing a stack size larger than the operating system's
 limit can cause excessive paging activity, at least on some operating systems.
\end_layout

\begin_layout Standard
The maximum stack size is operating-system-dependent.
 You can use shell commands to determine what it is on your platform.
 In bash, use "ulimit -s -H" to find the limit; in tcsh, use "limit -h s".
\end_layout

\begin_layout Standard
This issue does not affect programs that create threads using the default
 stack size, which you can do either by specifying no value for the :stack-size
 argument to MAKE-PROCESS, or by specifying the value CCL::*default-control-stac
k-size*.
\end_layout

\begin_layout Standard
If your program creates threads with a specified stack size, and that size
 is larger than the OS-specified limit, you may want to consider reducing
 the stack size in order to avoid possible excessive paging activity.
\end_layout

\begin_layout Subsection
As of August 2003:
\end_layout

\begin_layout Itemize
It's not clear that exposing PROCESS-SUSPEND/PROCESS-RESUME is a good idea:
 it's not clear that they offer ways to win, and it's clear that they offer
 ways to lose.
\end_layout

\begin_layout Itemize
It has traditionally been possible to reset and enable a process that's
 "exhausted" .
 (As used here, the term "exhausted" means that the process's initial function
 has run and returned and the underlying native thread has been deallocated.)
 One of the principal uses of PROCESS-RESET is to "recycle" threads; enabling
 an exhausted process involves creating a new native thread (and stacks
 and synchronization objects and ...),and this is the sort of overhead that
 such a recycling scheme is seeking to avoid.
 It might be worth trying to tighten things up and declare that it's an
 error to apply PROCESS-ENABLE to an exhausted thread (and to make PROCESS-ENABL
E detect this error.)
\end_layout

\begin_layout Itemize
When native threads that aren't created by Clozure CL first call into lisp,
 a "foreign process" is created, and that process is given its own set of
 initial bindings and set up to look mostly like a process that had been
 created by MAKE-PROCESS.
 The life cycle of a foreign process is certainly different from that of
 a lisp-created one: it doesn't make sense to reset/preset/enable a foreign
 process, and attempts to perform these operations should be detected and
 treated as errors.
\end_layout

\begin_layout Section
Porting Code from the Old Thread Model
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Porting-Code-from-the-Old-Thread-Model"

\end_inset

Older versions of Clozure CL used what are often called "user-mode threads",
 a less versatile threading model which does not require specific support
 from the operating system.
 This section discusses how to port code which was written for that mode.
\end_layout

\begin_layout Standard
It's hard to give step-by-step instructions; there are certainly a few things
 that one should look at carefully: 
\end_layout

\begin_layout Itemize
It's wise to be suspicious of most uses of WITHOUT-INTERRUPTS; there may
 be exceptions, but WITHOUT-INTERRUPTS is often used as shorthand for WITH-APPRO
PRIATE-LOCKING.
 Determining what type of locking is appropriate and writing the code to
 implement it is likely to be straightforward and simple most of the time.
\end_layout

\begin_layout Itemize
I've only seen one case where a process's "run reasons" were used to communicate
 information as well as to control execution; I don't think that this is
 a common idiom, but may be mistaken about that.
\end_layout

\begin_layout Itemize
It's certainly possible that programs written for cooperatively scheduled
 lisps that have run reliably for a long time have done so by accident:
 resource-contention issues tend to be timing-sensitive, and decoupling
 thread scheduling from lisp program execution affects timing.
 I know that there is or was code in both Clozure CL and commercial MCL
 that was written under the explicit assumption that certain sequences of
 open-coded operations were uninterruptable; it's certainly possible that
 the same assumptions have been made (explicitly or otherwise) by application
 developers.
\end_layout

\begin_layout Section
Background Terminal Input
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Background-Terminal-Input"

\end_inset


\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "backgrount-ti-overview"

\end_inset

Unless and until Clozure CL provides alternatives (via window streams, telnet
 streams, or some other mechanism) all lisp processes share a common *TERMINAL-I
O* stream (and therefore share *DEBUG-IO*, *QUERY-IO*, and other standard
 and internal interactive streams.)
\end_layout

\begin_layout Standard
It's anticipated that most lisp processes other than the "Initial" process
 run mostly in the background.
 If a background process writes to the output side of *TERMINAL-IO*, that
 may be a little messy and a little confusing to the user, but it shouldn't
 really be catastrophic.
 All I/O to Clozure CL's buffered streams goes thru a locking mechanism
 that prevents the worst kinds of resource-contention problems.
\end_layout

\begin_layout Standard
Although the problems associated with terminal output from multiple processes
 may be mostly cosmetic, the question of which process receives input from
 the terminal is likely to be a great deal more important.
 The stream locking mechanisms can make a confusing situation even worse:
 competing processes may "steal" terminal input from each other unless locks
 are held longer than they otherwise need to be, and locks can be held longer
 than they need to be (as when a process is merely waiting for input to
 become available on an underlying file descriptor).
\end_layout

\begin_layout Standard
Even if background processes rarely need to intentionally read input from
 the terminal, they may still need to do so in response to errors or other
 unanticipated situations.
 There are tradeoffs involved in any solution to this problem.
 The protocol described below allows background processes which follow it
 to reliably prompt for and receive terminal input.
 Background processes which attempt to receive terminal input without following
 this protocol will likely hang indefinitely while attempting to do so.
 That's certainly a harsh tradeoff, but since attempts to read terminal
 input without following this protocol only worked some of the time anyway,
 it doesn't seem to be an unreasonable one.
\end_layout

\begin_layout Standard
In the solution described here (and introduced in Clozure CL 0.9), the internal
 stream used to provide terminal input is always locked by some process
 (the "owning" process.) The initial process (the process that typically
 runs the read-eval-print loop) owns that stream when it's first created.
 By using the macro WITH-TERMINAL-INPUT, background processes can temporarily
 obtain ownership of the terminal and relinquish ownership to the previous
 owner when they're done with it.
\end_layout

\begin_layout Standard
In Clozure CL, BREAK, ERROR, CERROR, Y-OR-N-P, YES-OR-NO-P, and CCL:GET-STRING-
 FROM-USER are all defined in terms of WITH-TERMINAL-INPUT, as are the :TTY
 user-interfaces to STEP and INSPECT.
\end_layout

\begin_layout Subsection
An example
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "background-terminal-example"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Welcome to Clozure CL Version (Beta: linux) 0.9! 
\end_layout

\begin_layout Plain Layout

? (process-run-function "sleeper" #'(lambda () (sleep 5) (break "broken")))
 
\end_layout

\begin_layout Plain Layout

#<PROCESS sleeper(1) [Enabled] #x3063B33E>
\end_layout

\begin_layout Plain Layout

? 
\end_layout

\begin_layout Plain Layout

;;
\end_layout

\begin_layout Plain Layout

;; Process sleeper(1) needs access to terminal input.
 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example was run under ILISP; ILISP often gets confused if one tries
 to enter input and "point" doesn't follow a prompt.
 Entering a "simple" expression at this point gets it back in synch; that's
 otherwise not relevant to this example.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

() 
\end_layout

\begin_layout Plain Layout

NIL 
\end_layout

\begin_layout Plain Layout

? (:y 1) 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

;; process sleeper(1) now controls terminal input 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

> Break in process sleeper(1): broken 
\end_layout

\begin_layout Plain Layout

> While executing: #<Anonymous Function #x3063B276> 
\end_layout

\begin_layout Plain Layout

> Type :GO to continue, :POP to abort.
 
\end_layout

\begin_layout Plain Layout

> If continued: Return from BREAK.
 Type :? for other options.
 
\end_layout

\begin_layout Plain Layout

1 > :b 
\end_layout

\begin_layout Plain Layout

(30C38E30) : 0 "Anonymous Function #x3063B276" 52 
\end_layout

\begin_layout Plain Layout

(30C38E40) : 1 "Anonymous Function #x304984A6" 376 
\end_layout

\begin_layout Plain Layout

(30C38E90) : 2 "RUN-PROCESS-INITIAL-FORM" 340 
\end_layout

\begin_layout Plain Layout

(30C38EE0) : 3 "
\end_layout

\begin_layout Plain Layout

1 > :pop 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

;; control of terminal input restored to process Initial(0) 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

? 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
A more elaborate example.
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "A-more-elaborate-example"

\end_inset

If a background process ("A") needs access to the terminal input stream
 and that stream is owned by another background process ("B"), process "A"
 announces that fact, then waits until the initial process regains control.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Welcome to Clozure CL Version (Beta: linux) 0.9! ?
\end_layout

\begin_layout Plain Layout

? (process-run-function "sleep-60" #'(lambda () (sleep 60) (break "Huh?")))
 
\end_layout

\begin_layout Plain Layout

#<PROCESS sleep-60(1) [Enabled] #x3063BF26>
\end_layout

\begin_layout Plain Layout

? (process-run-function "sleep-5" #'(lambda () (sleep 5) (break "quicker")))
 
\end_layout

\begin_layout Plain Layout

#<PROCESS sleep-5(2) [Enabled] #x3063D0A6>
\end_layout

\begin_layout Plain Layout

? 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

;; Process sleep-5(2) needs access to terminal input.
 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

() 
\end_layout

\begin_layout Plain Layout

NIL0.
\end_layout

\begin_layout Plain Layout

? (:y 2) 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

;; process sleep-5(2) now controls terminal input 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

> Break in process sleep-5(2): quicker 
\end_layout

\begin_layout Plain Layout

> While executing: #x3063CFDE> 
\end_layout

\begin_layout Plain Layout

> Type :GO to continue, :POP to abort.
 
\end_layout

\begin_layout Plain Layout

> If continued: Return from BREAK.
 Type :? for other options.
 
\end_layout

\begin_layout Plain Layout

1 > 
\end_layout

\begin_layout Plain Layout

;; Process sleep-60(1) will need terminal access when 
\end_layout

\begin_layout Plain Layout

;; the initial process regains control of it.
 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

() 
\end_layout

\begin_layout Plain Layout

NIL 
\end_layout

\begin_layout Plain Layout

1 > :pop 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

;; Process sleep-60(1) needs access to terminal input.
 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

;; control of terminal input restored to process Initial(0) ;;
\end_layout

\begin_layout Plain Layout

? (:y 1) 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

;; process sleep-60(1) now controls terminal input 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

> Break in process sleep-60(1): Huh? 
\end_layout

\begin_layout Plain Layout

> While executing: #x3063BE5E> 
\end_layout

\begin_layout Plain Layout

> Type :GO to continue, :POP to abort.
 
\end_layout

\begin_layout Plain Layout

> If continued: Return from BREAK.
 Type :? for other options.
 
\end_layout

\begin_layout Plain Layout

1 > :pop 
\end_layout

\begin_layout Plain Layout

;; 
\end_layout

\begin_layout Plain Layout

;; control of terminal input restored to process Initial(0) 
\end_layout

\begin_layout Plain Layout

;;
\end_layout

\begin_layout Plain Layout

? 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Summary
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Summary"

\end_inset

This scheme is certainly not bulletproof: imaginative use of PROCESS-INTERRUPT
 and similar functions might be able to defeat it and deadlock the lisp,
 and any scenario where several background processes are clamoring for access
 to the shared terminal input stream at the same time is likely to be confusing
 and chaotic.
 (An alternate scheme, where the input focus was magically granted to whatever
 thread the user was thinking about, was considered and rejected due to
 technical limitations.)
\end_layout

\begin_layout Standard
The longer-term fix would probably involve using network or window-system
 streams to give each process unique instances of *TERMINAL-IO*.
\end_layout

\begin_layout Standard
Existing code that attempts to read from *TERMINAL-IO* from a background
 process will need to be changed to use WITH-TERMINAL-INPUT.
 Since that code was probably not working reliably in previous versions
 of Clozure CL, this requirement doesn't seem to be too onerous.
\end_layout

\begin_layout Standard
Note that WITH-TERMINAL-INPUT both requests ownership of the terminal input
 stream and promises to restore that ownership to the initial process when
 it's done with it.
 An ad hoc use of READ or READ-CHAR doesn't make this promise; this is the
 rationale for the restriction on the :Y command.
\end_layout

\begin_layout Section
The Threads which Clozure CL Uses for Its Own Purposes
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "The-Threads-which-CCL-Uses-for-Its-Own-Purposes"

\end_inset

In the "tty world", Clozure CL starts out with 2 lisp-level threads:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? :proc 
\end_layout

\begin_layout Plain Layout

1 : -> listener [Active] 
\end_layout

\begin_layout Plain Layout

0 : Initial [Active] 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you look at a running Clozure CL with a debugging tool, such as GDB,
 or Apple's Thread Viewer.app, you'll see an additional kernel-level thread
 on Darwin; this is used by the Mach exception-handling mechanism.
\end_layout

\begin_layout Standard
The initial thread, conveniently named "initial", is the one that was created
 by the operating system when it launched Clozure CL.
 It maps the heap image into memory, does some Lisp-level initialization,
 and, when the Cocoa IDE isn't being used, creates the thread "listener",
 which runs the top-level loop that reads input, evaluates it, and prints
 the result.
\end_layout

\begin_layout Standard
After the listener thread is created, the initial thread does "housekeeping":
 it sits in a loop, sleeping most of the time and waking up occasionally
 to do "periodic tasks".
 These tasks include forcing output on specified interactive streams, checking
 for and handling control-C interrupts, etc.
 Currently, those tasks also include polling for the exit status of external
 processes and handling some kinds of I/O to and from those processes.
\end_layout

\begin_layout Standard
In this environment, the initial thread does these "housekeeping" activities
 as necessary, until 
\family typewriter
ccl:quit
\family default
 is called; 
\family typewriter
quit
\family default
ting interrupts the initial thread, which then ends all other threads in
 as orderly a fashion as possible and calls the C function 
\family typewriter
#_exit
\family default
.
\end_layout

\begin_layout Standard
The short-term plan is to handle each external-process in a dedicated thread;
 the worst-case behavior of the current scheme can involve busy-waiting
 and excessive CPU utilization while waiting for an external process to
 terminate in some cases.
\end_layout

\begin_layout Standard
The Cocoa features use more threads.
 Adding a Cocoa listener creates two threads:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? :proc 
\end_layout

\begin_layout Plain Layout

3 : -> Listener [Active] 
\end_layout

\begin_layout Plain Layout

2 : housekeeping [Active] 
\end_layout

\begin_layout Plain Layout

1 : listener [Active] 
\end_layout

\begin_layout Plain Layout

0 : Initial [Active] 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Cocoa event loop has to run in the initial thread; when the event loop
 starts up, it creates a new thread to do the "housekeeping" tasks which
 the initial thread would do in the terminal-only mode.
 The initial thread then becomes the one to receive all Cocoa events from
 the window server; it's the only thread which can.
\end_layout

\begin_layout Standard
It also creates one "Listener" (capital-L) thread for each listener window,
 with a lifetime that lasts as long as the thread does.
 So, if you open a second listener, you'll see five threads all together:
\end_layout

\begin_layout Standard
[firstnumber=1,] 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? :proc 
\end_layout

\begin_layout Plain Layout

4 : -> Listener-2 [Active] 
\end_layout

\begin_layout Plain Layout

3 : Listener [Active] 
\end_layout

\begin_layout Plain Layout

2 : housekeeping [Active] 
\end_layout

\begin_layout Plain Layout

1 : listener [Active] 
\end_layout

\begin_layout Plain Layout

0 : Initial [Active] 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unix signals, such as SIGINT (control-C), invoke a handler installed by
 the Lisp kernel.
 Although the OS doesn't make any specific guarantee about which thread
 will receive the signal, in practice, it seems to be the initial thread.
 The handler just sets a flag and returns; the housekeeping thread (which
 may be the initial thread, if Cocoa's not being used) will check for the
 flag and take whatever action is appropriate to the signal.
\end_layout

\begin_layout Standard
In the case of SIGINT, the action is to enter a break loop, by calling on
 the thread being interrupted.
 When there's more than one Lisp listener active, it's not always clear
 what thread that should be, since it really depends on the user's intentions,
 which there's no way to divine programmatically.
 To make its best guess, the handler first checks whether the value of 
\family typewriter
ccl:*interactive-abort-process*
\family default
 is a thread, and, if so, uses it.
 If that fails, it chooses the thread which currently "owns" the default
 terminal input stream; see .
\end_layout

\begin_layout Standard
In the bleeding-edge version of the Cocoa support which is based on Hemlock,
 an Emacs-like editor, each editor window has a dedicated thread associated
 with it.
 When a keypress event comes in which affects that specific window the initial
 thread sends it to the window's dedicated thread.
 The dedicated thread is responsible for trying to interpret keypresses
 as Hemlock commands, applying those commands to the active buffer; it repeats
 this in a loop, until the window closes.
 The initial thread handles all other events, such as mouse clicks and drags.
\end_layout

\begin_layout Standard
This thread-per-window scheme makes many things simpler, including the process
 of entering a "recursive command loop" in commands like "Incremental Search
 Forward", etc.
 (It might be possible to handle all Hemlock commands in the Cocoa event
 thread, but these "recursive command loops" would have to maintain a lot
 of context/state information; threads are a straightforward way of maintaining
 that information.)
\end_layout

\begin_layout Standard
Currently (August 2004), when a dedicated thread needs to alter the contents
 of the buffer or the selection, it does so by invoking methods in the initial
 thread, for synchronization purposes, but this is probably overkill and
 will likely be replaced by a more efficient scheme in the future.
\end_layout

\begin_layout Standard
The per-window thread could probably take more responsibility for drawing
 and handling the screen than it currently does; -something- needs to be
 done to buffer screen updates a bit better in some cases: you don't need
 to see everything that happens during something like indentation; you do
 need to see the results...
\end_layout

\begin_layout Standard
When Hemlock is being used, listener windows are editor windows, so in addition
 to each "Listener" thread, you should also see a thread which handles Hemlock
 command processing.
\end_layout

\begin_layout Standard
The Cocoa runtime may make additional threads in certain special situations;
 these threads usually don't run lisp code, and rarely if ever run much
 of it.
\end_layout

\begin_layout Section
Threads Dictionary
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Threads-Dictionary"

\end_inset


\end_layout

\begin_layout Subsection
ALL-PROCESSES
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_all-processes"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
all-processes
\end_layout

\end_inset

ALL-PROCESSES --- Obtain a fresh list of all known Lisp threads.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
 all-processes => result 
\end_layout

\begin_layout Subsubsection*
Values
\end_layout

\begin_layout Description
result a list of all lisp processes (threads) known to Clozure CL.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Returns a list of all lisp processes (threads) known to Clozure CL as of
 the precise instant it's called.
 It's safe to traverse this list and to modify the cons cells that comprise
 that list (it's freshly consed.) Since other threads can create and kill
 threads at any time, there's generally no way to get an "accurate" list
 of all threads, and (generally) no sense in which such a list can be accurate.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
*CURRENT-PROCESS* 
\end_layout

\begin_layout Subsection
MAKE-PROCESS
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-process"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-process
\end_layout

\end_inset

MAKE-PROCESS --- Creates and returns a new process.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
make-process name &key persistent priority class initargs stack-size vstack-size
 tstack-size initial-bindings use-standard-initial-bindings => process 
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
name a string, used to identify the process.
 
\end_layout

\begin_layout Description
persistent if true, requests that information about the process be retained
 by SAVE-APPLICATION so that an equivalent process can be restarted when
 a saved image is run.
 The default is nil.
 
\end_layout

\begin_layout Description
priority ignored.
 It shouldn't be ignored of course, but there are complications on some
 platforms.
 The default is 0.
 
\end_layout

\begin_layout Description
class the class of process object to create; should be a subclass of CCL:PROCESS.
 The default is CCL:PROCESS.
 
\end_layout

\begin_layout Description
initargs Any additional initargs to pass to MAKE-INSTANCE.
 The default is ().
 
\end_layout

\begin_layout Description
stack-size the size, in bytes, of the newly-created process's control stack;
 used for foreign function calls and to save function return address context.
 The default is CCL:*DEFAULT-CONTROL-STACK-SIZE*.
 
\end_layout

\begin_layout Description
vstack-size the size, in bytes, of the newly-created process's value stack;
 used for lisp function arguments, local variables, and other stack-allocated
 lisp objects.
 The default is CCL:*DEFAULT-VALUE-STACK-SIZE*.
 
\end_layout

\begin_layout Description
tstack-size the size, in bytes, of the newly-created process's temp stack;
 used for the allocation of dynamic-extent objects.
 The default is CCL:*DEFAULT-TEMP-STACK-SIZE*.
 
\end_layout

\begin_layout Description
use-standard-initial-bindings when true, the global "standard initial bindings"
 are put into effect in the new thread before.
 See DEF-STANDARD-INITIAL-BINDING.
 "standard" initial bindings are put into effect before any bindings specified
 by :initial-bindings are.
 The default is t.
 
\series bold
This option is deprecated: the correct behavior of many Clozure CL components
 depends on thread-local bindings of many special variables being in effect.

\series default
 
\end_layout

\begin_layout Description
initial-bindings an alist of (
\family typewriter
symbol
\family default
 .
 
\family typewriter
valueform
\family default
) pairs, which can be used to initialize special variable bindings in the
 new thread.
 Each 
\family typewriter
valueform
\family default
 is used to compute the value of a new binding of 
\family typewriter
symbol
\family default
 in the execution environment of the newly-created thread.
 The default is nil.
 
\end_layout

\begin_layout Description
process the newly-created process.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Creates and returns a new lisp process (thread) with the specified attributes.
 
\family typewriter
process
\family default
 will not begin execution immediately; it will need to be 
\emph on
preset
\emph default
 (given an initial function to run, as by PROCESS-PRESET) and 
\emph on
enabled
\emph default
 (allowed to execute, as by PROCESS-ENABLE) before it's able to actually
 do anything.
\end_layout

\begin_layout Standard
If 
\family typewriter
valueform
\family default
 is a function, it is called, with no arguments, in the execution environment
 of the newly-created thread; the primary value it returns is used for the
 binding of the corresponding 
\family typewriter
symbol
\family default
.
\end_layout

\begin_layout Standard
Otherwise, 
\family typewriter
valueform
\family default
 is evaluated in the execution environment of the newly-created thread,
 and the resulting value is used.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-PRESET, PROCESS-ENABLE, PROCESS-RUN-FUNCTION 
\end_layout

\begin_layout Subsection
PROCESS-SUSPEND
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-suspend"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-suspend
\end_layout

\end_inset

PROCESS-SUSPEND --- Suspends a specified process.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-suspend process => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
result T if 
\family typewriter
process
\family default
 had been runnable and is now suspended; NIL otherwise.
 That is, T if 
\family typewriter
process
\family default
's PROCESS-SUSPEND-COUNT transitioned from 0 to 1.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Suspends 
\family typewriter
process
\family default
, preventing it from running, and stopping it if it was already running.
 This is a fairly expensive operation, because it involves a few calls to
 the OS.
 It also risks creating deadlock if used improperly, for instance, if the
 process being suspended owns a lock or other resource which another process
 will wait for.
\end_layout

\begin_layout Standard
Each call to 
\family typewriter
process-suspend
\family default
 must be reversed by a matching call to PROCESS-RESUME before 
\family typewriter
process
\family default
 is able to run.
 What 
\family typewriter
process-suspend
\family default
 actually does is increment the PROCESS-SUSPEND-COUNT of 
\family typewriter
process
\family default
.
\end_layout

\begin_layout Standard
A process can't suspend itself, though this once worked and this documentation
 has claimed that it did.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-RESUME, PROCESS-SUSPEND-COUNT 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard

\family typewriter
process-suspend
\family default
 was previously called 
\family typewriter
process-disable
\family default
.
 PROCESS-ENABLE now names a function for which there is no obvious inverse,
 so 
\family typewriter
process-disable
\family default
 is no longer defined.
\end_layout

\begin_layout Subsection
PROCESS-RESUME
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-resume"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
process-resume
\end_layout

\end_inset

PROCESS-RESUME --- Resumes a specified process which had previously been
 suspended by process-suspend.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-resume process => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
result T if 
\family typewriter
process
\family default
 had been suspended and is now runnable; NIL otherwise.
 That is, T if 
\family typewriter
process
\family default
's PROCESS-SUSPEND-COUNT transitioned from to 0.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Undoes the effect of a previous call to PROCESS-SUSPEND; if all such calls
 are undone, makes the process runnable.
 Has no effect if the process is not suspended.
 What 
\family typewriter
process-resume
\family default
 actually does is decrement the PROCESS-SUSPEND-COUNT of 
\family typewriter
process
\family default
, to a minimum of 0.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-SUSPEND, PROCESS-SUSPEND-COUNT 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard
This was previously called PROCESS-ENABLE; PROCESS-ENABLE now does something
 slightly different.
\end_layout

\begin_layout Subsection
PROCESS-SUSPEND-COUNT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-suspend-count"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
process-suspend-count
\end_layout

\end_inset

PROCESS-SUSPEND-COUNT --- Returns the number of currently-pending suspensions
 applicable to a given process.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-suspend-count process => result 
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
result The number of "outstanding" PROCESS-SUSPEND calls on 
\family typewriter
process
\family default
, or NIL if 
\family typewriter
process
\family default
 has expired.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
An "outstanding" PROCESS-SUSPEND call is one which has not yet been reversed
 by a call to PROCESS-RESUME.
 A process expires when its initial function returns, although it may later
 be reset.
\end_layout

\begin_layout Standard
A process is 
\emph on
runnable
\emph default
 when it has a 
\family typewriter
process-suspend-count
\family default
 of 0, has been preset as by PROCESS-PRESET, and has been enabled as by
 PROCESS-ENABLE.
 Newly-created processes have a 
\family typewriter
process-suspend-count
\family default
 of 0.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-SUSPEND, PROCESS-RESUME 
\end_layout

\begin_layout Subsection
PROCESS-PRESET
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-preset"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-preset
\end_layout

\end_inset

PROCESS-PRESET --- Sets the initial function and arguments of a specified
 process.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-preset process function &rest args => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
function a function, designated by itself or by a symbol which names it.
 
\end_layout

\begin_layout Description
args a list of values, appropriate as arguments to 
\family typewriter
function
\family default
.
 
\end_layout

\begin_layout Description
result undefined.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Typically used to initialize a newly-created or newly-reset process, setting
 things up so that when 
\family typewriter
process
\family default
 becomes enabled, it will begin execution by applying 
\family typewriter
function
\family default
 to 
\family typewriter
args
\family default
.
 
\family typewriter
process-preset
\family default
 does not enable 
\family typewriter
process
\family default
, although a process must be 
\family typewriter
process-preset
\family default
 before it can be enabled.
 Processes are normally enabled by PROCESS-ENABLE.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-PROCESS, PROCESS-ENABLE, PROCESS-RUN-FUNCTION 
\end_layout

\begin_layout Subsection
PROCESS-ENABLE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-enable"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-enable
\end_layout

\end_inset

PROCESS-ENABLE --- Begins executing the initial function of a specified
 process.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-enable process &optional timeout 
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
timeout a time interval in seconds.
 May be any non-negative real number the 
\family typewriter
floor
\family default
 of which fits in 32 bits.
 The default is 1.
 
\end_layout

\begin_layout Description
result undefined.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Tries to begin the execution of 
\family typewriter
process
\family default
.
 An error is signaled if 
\family typewriter
process
\family default
 has never been PROCESS-PRESET.
 Otherwise, 
\family typewriter
process
\family default
 invokes its initial function.
\end_layout

\begin_layout Standard

\family typewriter
process-enable
\family default
 attempts to synchronize with 
\family typewriter
process
\family default
, which is presumed to be reset or in the act of resetting itself.
 If this attempt is not successful within the time interval specified by
 
\family typewriter
timeout
\family default
, a continuable error is signaled, which offers the opportunity to continue
 waiting.
\end_layout

\begin_layout Standard
A process cannot meaningfully attempt to enable itself.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-PROCESS, PROCESS-PRESET, PROCESS-RUN-FUNCTION 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard
It would be nice to have more discussion of what it means to synchronize
 with the process.
\end_layout

\begin_layout Subsection
PROCESS-RUN-FUNCTION
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-run-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-run-function
\end_layout

\end_inset

PROCESS-RUN-FUNCTION --- Creates a process, presets it, and enables it.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-run-function process-specifier function &rest args => process
\end_layout

\begin_layout Description
process-specifier 
\family typewriter
name
\family default
 | (
\family typewriter
&key
\family default
 
\family typewriter
name
\family default
 
\family typewriter
persistent
\family default
 
\family typewriter
priority
\family default
 
\family typewriter
class
\family default
 
\family typewriter
initargs
\family default
 
\family typewriter
stack-size
\family default
 
\family typewriter
vstack-size
\family default
 
\family typewriter
tstack-size
\family default
) 
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
name a string, used to identify the process.
 Passed to 
\family typewriter
make-process
\family default
.
 
\end_layout

\begin_layout Description
function a function, designated by itself or by a symbol which names it.
 Passed to 
\family typewriter
preset-process
\family default
.
 
\end_layout

\begin_layout Description
persistent a boolean, passed to 
\family typewriter
make-process
\family default
.
 
\end_layout

\begin_layout Description
priority ignored.
 
\end_layout

\begin_layout Description
class a subclass of CCL:PROCESS.
 Passed to 
\family typewriter
make-process
\family default
.
 
\end_layout

\begin_layout Description
initargs a list of any additional initargs to pass to 
\family typewriter
make-process
\family default
.
 
\end_layout

\begin_layout Description
stack-size a size, in bytes.
 Passed to 
\family typewriter
make-process
\family default
.
 
\end_layout

\begin_layout Description
vstack-size a size, in bytes.
 Passed to 
\family typewriter
make-process
\family default
.
 
\end_layout

\begin_layout Description
tstack-size a size, in bytes.
 Passed to 
\family typewriter
make-process
\family default
.
 
\end_layout

\begin_layout Description
process the newly-created process.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Creates a lisp process (thread) via MAKE-PROCESS, presets it via PROCESS-PRESET,
 and enables it via PROCESS-ENABLE.
 This means that 
\family typewriter
process
\family default
 will immediately begin to execute.
 
\family typewriter
process-run-function
\family default
 is the simplest way to create and run a process.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-PROCESS, PROCESS-PRESET, PROCESS-ENABLE 
\end_layout

\begin_layout Subsection
PROCESS-INTERRUPT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-interrupt"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-interrupt
\end_layout

\end_inset

PROCESS-INTERRUPT --- Arranges for the target process to invoke a specified
 function at some point in the near future, and then return to what it was
 doing.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-interrupt process function &rest args => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
function a function.
 
\end_layout

\begin_layout Description
args a list of values, appropriate as arguments to 
\family typewriter
function
\family default
.
 
\end_layout

\begin_layout Description
result the result of applying 
\family typewriter
function
\family default
 to 
\family typewriter
args
\family default
 if 
\family typewriter
process
\family default
 is the 
\family typewriter
current-process
\family default
, otherwise NIL.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Arranges for 
\family typewriter
process
\family default
 to apply 
\family typewriter
function
\family default
 to 
\family typewriter
args
\family default
 at some point in the near future (interrupting whatever 
\family typewriter
process
\family default
 was doing.) If 
\family typewriter
function
\family default
 returns normally, 
\family typewriter
process
\family default
 resumes execution at the point at which it was interrupted.
\end_layout

\begin_layout Standard

\family typewriter
process
\family default
 must be in an enabled state in order to respond to a 
\family typewriter
process-interrupt
\family default
 request.
 It's perfectly legal for a process to call 
\family typewriter
process-interrupt
\family default
 on itself.
\end_layout

\begin_layout Standard

\family typewriter
process-interrupt
\family default
 uses asynchronous POSIX signals to interrupt threads.
 If the thread being interrupted is executing lisp code, it can respond
 to the interrupt almost immediately (as soon as it has finished pseudo-atomic
 operations like consing and stack-frame initialization.)
\end_layout

\begin_layout Standard
If the interrupted thread is blocking in a system call, that system call
 is aborted by the signal and the interrupt is handled on return.
\end_layout

\begin_layout Standard
It is still difficult to reliably interrupt arbitrary foreign code (that
 may be stateful or otherwise non-reentrant); the interrupt request is handled
 when such foreign code returns to or enters lisp.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
WITHOUT-INTERRUPTS 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard
It would probably be better for 
\family typewriter
result
\family default
 to always be NIL, since the present behavior is inconsistent.
\end_layout

\begin_layout Standard

\family typewriter
Process-interrupt
\family default
 works by sending signals between threads, via the C function 
\family typewriter
#_pthread_signal
\family default
.
 It could be argued that it should be done in one of several possible other
 ways under Darwin, to make it practical to asynchronously interrupt things
 which make heavy use of the Mach nanokernel.
\end_layout

\begin_layout Subsection
*CURRENT-PROCESS*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_current-process"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
*current-process*
\end_layout

\end_inset

*CURRENT-PROCESS* --- Bound in each process, to that process itself.
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Subsubsection*
Value Type
\end_layout

\begin_layout Standard
A lisp process (thread).
\end_layout

\begin_layout Subsubsection*
Initial Value
\end_layout

\begin_layout Standard
Bound separately in each process, to that process itself.
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
Used when lisp code needs to find out what process it is executing in.
 Shouldn't be set by user code.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
ALL-PROCESSES 
\end_layout

\begin_layout Subsection
PROCESS-RESET
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-reset"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-reset
\end_layout

\end_inset

PROCESS-RESET --- Causes a specified process to cleanly exit from any ongoing
 computation.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-reset process &optional kill-option => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
kill-option an internal argument, must be nil.
 
\end_layout

\begin_layout Description
result undefined.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Causes 
\family typewriter
process
\family default
 to cleanly exit from any ongoing computation and enter a state where it
 can be PROCESS-PRESET.
 This is implemented by signaling a condition of type PROCESS-RESET; user-define
d condition handlers should generally refrain from attempting to handle
 conditions of this type.
\end_layout

\begin_layout Standard
The 
\family typewriter
kill-option
\family default
 argument is for internal use only and should not be specified by user code
\end_layout

\begin_layout Standard
A process can meaningfully reset itself.
\end_layout

\begin_layout Standard
There is in general no way to know precisely when 
\family typewriter
process
\family default
 has completed the act of resetting or killing itself; a process which has
 either entered the limbo of the reset state or exited has few ways of communica
ting either fact.
 PROCESS-ENABLE can reliably determine when a process has entered the "limbo
 of the reset state", but can't predict how long the clean exit from ongoing
 computation might take: that depends on the behavior of 
\family typewriter
unwind-protect
\family default
 cleanup forms, and of the OS scheduler.
\end_layout

\begin_layout Standard
Resetting a process other than *CURRENT-PROCESS* involves the use of PROCESS-INT
ERRUPT.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-KILL, PROCESS-ABORT 
\end_layout

\begin_layout Subsection
PROCESS-RESET-AND-ENABLE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-reset-and-enable"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-reset-and-enable
\end_layout

\end_inset

PROCESS-RESET-AND-ENABLE --- Reset and enable the specified process, which
 may not be the current process.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-reset-and-enable process => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread), which may not be the current process.
 
\end_layout

\begin_layout Description
result undefined.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Equivalent to calling (process-reset process) and (process-enable process).
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-RESET, PROCESS-ENABLE 
\end_layout

\begin_layout Subsection
PROCESS-KILL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-kill"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-kill
\end_layout

\end_inset

PROCESS-KILL --- Causes a specified process to cleanly exit from any ongoing
 computation, and then exit.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-kill process => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
result undefined.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Causes 
\family typewriter
process
\family default
 to cleanly exit from any ongoing computation, and then exit.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-RESET, PROCESS-ABORT 
\end_layout

\begin_layout Subsection
PROCESS-ABORT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-abort"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
process-abort
\end_layout

\end_inset

PROCESS-ABORT --- Causes a specified process to process an abort condition,
 as if it had invoked 
\family typewriter
abort
\family default
.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-abort process &optional condition => NIL
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
condition a lisp condition.
 The default is NIL.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Entirely equivalent to calling (PROCESS-INTERRUPT 
\family typewriter
process
\family default
 (
\family typewriter
lambda
\family default
 () (
\family typewriter
abort
\family default
 
\family typewriter
condition
\family default
))).
 Causes 
\family typewriter
process
\family default
 to transfer control to the applicable handler or restart for 
\family typewriter
abort
\family default
.
\end_layout

\begin_layout Standard
If 
\family typewriter
condition
\family default
 is non-NIL, 
\family typewriter
process-abort
\family default
 does not consider any handlers which are explicitly bound to conditions
 other than 
\family typewriter
condition
\family default
.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-RESET, PROCESS-KILL 
\end_layout

\begin_layout Subsection
*TICKS-PER-SECOND*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_ticks-per-second"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
*ticks-per-second*
\end_layout

\end_inset

*TICKS-PER-SECOND* --- Bound to the clock resolution of the OS scheduler.
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Subsubsection*
Value Type
\end_layout

\begin_layout Standard
A positive integer.
\end_layout

\begin_layout Subsubsection*
Initial Value
\end_layout

\begin_layout Standard
The clock resolution of the OS scheduler.
 Currently, both LinuxPPC and DarwinPPC yield an initial value of 100.
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
This value is ordinarily of marginal interest at best, but, for backward
 compatibility, some functions accept timeout values expressed in "ticks".
 This value gives the number of ticks per second.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-WAIT-WITH-TIMEOUT 
\end_layout

\begin_layout Subsection
PROCESS-WHOSTATE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-whostate"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-whostate
\end_layout

\end_inset

PROCESS-WHOSTATE --- Returns a string which describes the status of a specified
 process.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-whostate process => whostate
\end_layout

\begin_layout Description
process a lisp process (thread).
 
\end_layout

\begin_layout Description
whostate a string which describes the "state" of 
\family typewriter
process
\family default
.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
This information is primarily for the benefit of debugging tools.
 
\family typewriter
whostate
\family default
 is a terse report on what 
\family typewriter
process
\family default
 is doing, or not doing, and why.
\end_layout

\begin_layout Standard
If the process is currently waiting in a call to PROCESS-WAIT or PROCESS-WAIT-WI
TH-TIMEOUT, its 
\family typewriter
process-whostate
\family default
 will be the value which was passed to that function as 
\family typewriter
whostate
\family default
.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-WAIT, PROCESS-WAIT-WITH-TIMEOUT, WITH-TERMINAL-INPUT 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard
This should arguably be SETFable, but doesn't seem to ever have been.
\end_layout

\begin_layout Subsection
PROCESS-ALLOW-SCHEDULE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-allow-schedule"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-allow-schedule
\end_layout

\end_inset

PROCESS-ALLOW-SCHEDULE --- Used for cooperative multitasking; probably never
 necessary.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-allow-schedule
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
Advises the OS scheduler that the current thread has nothing useful to do
 and that it should try to find some other thread to schedule in its place.
 There's almost always a better alternative, such as waiting for some specific
 event to occur.
 For example, you could use a lock or semaphore.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-LOCK, MAKE-READ-WRITE-LOCK, MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, PROCESS-OUT
PUT-WAIT, WITH-TERMINAL-INPUT 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard
This is a holdover from the days of cooperative multitasking.
 All modern general-purpose operating systems use preemptive multitasking.
\end_layout

\begin_layout Subsection
PROCESS-WAIT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-wait"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-wait
\end_layout

\end_inset

PROCESS-WAIT --- Causes the current lisp process (thread) to wait for a
 given predicate to return true.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-wait whostate function &rest args => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
whostate a string, which will be the value of PROCESS-WHOSTATE while the
 process is waiting.
 
\end_layout

\begin_layout Description
function a function, designated by itself or by a symbol which names it.
 
\end_layout

\begin_layout Description
args a list of values, appropriate as arguments to 
\family typewriter
function
\family default
.
 
\end_layout

\begin_layout Description
result NIL.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Causes the current lisp process (thread) to repeatedly apply 
\family typewriter
function
\family default
 to 
\family typewriter
args
\family default
 until the call returns a true result, then returns NIL.
 After each failed call, yields the CPU as if by PROCESS-ALLOW-SCHEDULE.
\end_layout

\begin_layout Standard
As with PROCESS-ALLOW-SCHEDULE, it's almost always more efficient to wait
 for some specific event to occur; this isn't exactly busy-waiting, but
 the OS scheduler can do a better job of scheduling if it's given the relevant
 information.
 For example, you could use a lock or semaphore.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-WHOSTATE, PROCESS-WAIT-WITH-TIMEOUT, MAKE-LOCK, MAKE-READ-WRITE-LOCK,
 MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT
 
\end_layout

\begin_layout Subsection
PROCESS-WAIT-WITH-TIMEOUT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-wait-with-timeout"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-wait-with-timeout
\end_layout

\end_inset

PROCESS-WAIT-WITH-TIMEOUT --- Causes the current thread to wait for a given
 predicate to return true, or for a timeout to expire.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-wait-with-timeout whostate ticks function args => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
whostate a string, which will be the value of PROCESS-WHOSTATE while the
 process is waiting.
 
\end_layout

\begin_layout Description
ticks either a positive integer expressing a duration in "ticks" (see *TICKS-PER
-SECOND*), or NIL.
 
\end_layout

\begin_layout Description
function a function, designated by itself or by a symbol which names it.
 
\end_layout

\begin_layout Description
args a list of values, appropriate as arguments to 
\family typewriter
function
\family default
.
 
\end_layout

\begin_layout Description
result T if 
\family typewriter
process-wait-with-timeout
\family default
 returned because its 
\family typewriter
function
\family default
 returned true, or NIL if it returned because the duration 
\family typewriter
ticks
\family default
 has been exceeded.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
If 
\family typewriter
ticks
\family default
 is NIL, behaves exactly like PROCESS-WAIT, except for returning T.
 Otherwise, 
\family typewriter
function
\family default
 will be tested repeatedly, in the same kind of test/yield loop as in PROCESS-WA
IT until either 
\family typewriter
function
\family default
 returns true, or the duration 
\family typewriter
ticks
\family default
 has been exceeded.
\end_layout

\begin_layout Standard
Having already read the descriptions of PROCESS-ALLOW-SCHEDULE and PROCESS-WAIT,
 the astute reader has no doubt anticipated the observation that better
 alternatives should be used whenever possible.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
*TICKS-PER-SECOND*, PROCESS-WHOSTATE, PROCESS-WAIT, MAKE-LOCK, MAKE-READ-WRITE-L
OCK, MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPU
T 
\end_layout

\begin_layout Subsection
WITHOUT-INTERRUPTS
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_without-interrupts"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
without-interrupts
\end_layout

\end_inset

WITHOUT-INTERRUPTS --- Evaluates its body in an environment in which process-int
errupt requests are deferred.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
without-interrupts &body body => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
body an implicit progn.
 
\end_layout

\begin_layout Description
result the primary value returned by 
\family typewriter
body
\family default
.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Executes 
\family typewriter
body
\family default
 in an environment in which PROCESS-INTERRUPT requests are deferred.
 As noted in the description of PROCESS-INTERRUPT, this has nothing to do
 with the scheduling of other threads; it may be necessary to inhibit PROCESS-IN
TERRUPT handling when (for instance) modifying some data structure (for
 which the current thread holds an appropriate lock) in some manner that's
 not reentrant.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
PROCESS-INTERRUPT 
\end_layout

\begin_layout Subsection
WITH-INTERRUPTS-ENABLED
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-interrupts-enabled"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-interrupts-enabled
\end_layout

\end_inset

WITH-INTERRUPTS-ENABLED --- Evaluates its body in an environment in which
 process-interrupt requests have immediate effect.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
with-interrupts-enabled &body body => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
body an implicit progn.
 
\end_layout

\begin_layout Description
result the primary value returned by 
\family typewriter
body
\family default
.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Executes 
\family typewriter
body
\family default
 in an environment in which PROCESS-INTERRUPT requests have immediate effect.
\end_layout

\begin_layout Subsection
MAKE-LOCK
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-lock"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-lock
\end_layout

\end_inset

MAKE-LOCK --- Creates and returns a lock object, which can be used for synchroni
zation between threads.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
make-lock &optional name => lock
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
name any lisp object; saved as part of 
\family typewriter
lock
\family default
.
 Typically a string or symbol which may appear in the PROCESS-WHOSTATEs
 of threads which are waiting for 
\family typewriter
lock
\family default
.
 
\end_layout

\begin_layout Description
lock a newly-allocated object of type CCL:LOCK.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Creates and returns a lock object, which can be used to synchronize access
 to some shared resource.
 
\family typewriter
lock
\family default
 is initially in a "free" state; a lock can also be "owned" by a thread.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
WITH-LOCK-GRABBED, GRAB-LOCK, RELEASE-LOCK, TRY-LOCK, MAKE-READ-WRITE-LOCK,
 MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT
 
\end_layout

\begin_layout Subsection
WITH-LOCK-GRABBED
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-lock-grabbed"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-lock-grabbed
\end_layout

\end_inset

WITH-LOCK-GRABBED --- Waits until a given lock can be obtained, then evaluates
 its body with the lock held.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
with-lock-grabbed (lock) &body body
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
lock an object of type CCL:LOCK.
 
\end_layout

\begin_layout Description
body an implicit progn.
 
\end_layout

\begin_layout Description
result the primary value returned by 
\family typewriter
body
\family default
.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Waits until 
\family typewriter
lock
\family default
 is either free or owned by the calling thread, then executes 
\family typewriter
body
\family default
 with the lock owned by the calling thread.
 If 
\family typewriter
lock
\family default
 was free when 
\family typewriter
with-lock-grabbed
\family default
 was called, it is restored to a free state after 
\family typewriter
body
\family default
 is executed.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-LOCK, GRAB-LOCK, RELEASE-LOCK, TRY-LOCK, MAKE-READ-WRITE-LOCK, MAKE-SEMAPHO
RE, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT 
\end_layout

\begin_layout Subsection
GRAB-LOCK
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_grab-lock"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
grab-lock
\end_layout

\end_inset

GRAB-LOCK --- Waits until a given lock can be obtained, then obtains it.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
grab-lock lock
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
lock an object of type CCL:LOCK.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Blocks until 
\family typewriter
lock
\family default
 is owned by the calling thread.
\end_layout

\begin_layout Standard
The macro WITH-LOCK-GRABBED 
\emph on
could
\emph default
 be defined in terms of 
\family typewriter
grab-lock
\family default
 and RELEASE-LOCK, but it is actually implemented at a slightly lower level.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-LOCK, WITH-LOCK-GRABBED, RELEASE-LOCK, TRY-LOCK, MAKE-READ-WRITE-LOCK,
 MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT
 
\end_layout

\begin_layout Subsection
RELEASE-LOCK
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_release-lock"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
release-lock
\end_layout

\end_inset

RELEASE-LOCK --- Relinquishes ownership of a given lock.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
release-lock lock
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
lock an object of type CCL:LOCK.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Signals an error of type CCL:LOCK-NOT-OWNER if 
\family typewriter
lock
\family default
 is not already owned by the calling thread; otherwise, undoes the effect
 of one previous GRAB-LOCK.
 If this means that 
\family typewriter
release-lock
\family default
 has now been called on 
\family typewriter
lock
\family default
 the same number of times as GRAB-LOCK has, 
\family typewriter
lock
\family default
 becomes free.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-LOCK, WITH-LOCK-GRABBED, GRAB-LOCK, TRY-LOCK, MAKE-READ-WRITE-LOCK,
 MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT
 
\end_layout

\begin_layout Subsection
TRY-LOCK
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_try-lock"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
try-lock
\end_layout

\end_inset

TRY-LOCK --- Obtains the given lock, but only if it is not necessary to
 wait for it.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
try-lock lock => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
lock an object of type CCL:LOCK.
 
\end_layout

\begin_layout Description
result T if 
\family typewriter
lock
\family default
 has been obtained, or NIL if it has not.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Tests whether 
\family typewriter
lock
\family default
 can be obtained without blocking - that is, either 
\family typewriter
lock
\family default
 is already free, or it is already owned by *CURRENT-PROCESS*.
 If it can, causes it to be owned by the calling lisp process (thread) and
 returns T.
 Otherwise, the lock is already owned by another thread and cannot be obtained
 without blocking; NIL is returned in this case.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-LOCK, WITH-LOCK-GRABBED, GRAB-LOCK, RELEASE-LOCK, MAKE-READ-WRITE-LOCK,
 MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT
 
\end_layout

\begin_layout Subsection
MAKE-READ-WRITE-LOCK
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-read-write-lock"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
make-read-write-lock
\end_layout

\end_inset

MAKE-READ-WRITE-LOCK --- Creates and returns a read-write lock, which can
 be used for synchronization between threads.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
make-read-write-lock => read-write-lock
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
read-write-lock a newly-allocated object of type CCL:READ-WRITE-LOCK.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Creates and returns an object of type CCL::READ-WRITE-LOCK.
 A read-write lock may, at any given time, belong to any number of lisp
 processes (threads) which act as "readers"; or, it may belong to at most
 one process which acts as a "writer".
 A read-write lock may never be held by a reader at the same time as a writer.
 Initially, 
\family typewriter
read-write-lock
\family default
 has no readers and no writers.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
WITH-READ-LOCK, WITH-WRITE-LOCK, MAKE-LOCK, MAKE-SEMAPHORE, PROCESS-INPUT-WAIT,
 PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard
There probably should be some way to atomically "promote" a reader, making
 it a writer without releasing the lock, which could otherwise cause delay.
\end_layout

\begin_layout Subsection
WITH-READ-LOCK
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-read-lock"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-read-lock
\end_layout

\end_inset

WITH-READ-LOCK --- Waits until a given lock is available for read-only access,
 then evaluates its body with the lock held.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
with-read-lock (read-write-lock) &body body => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
read-write-lock an object of type CCL:READ-WRITE-LOCK.
 
\end_layout

\begin_layout Description
body an implicit progn.
 
\end_layout

\begin_layout Description
result the primary value returned by 
\family typewriter
body
\family default
.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Waits until 
\family typewriter
read-write-lock
\family default
 has no writer, ensures that *CURRENT-PROCESS* is a reader of it, then executes
 
\family typewriter
body
\family default
.
\end_layout

\begin_layout Standard
After executing 
\family typewriter
body
\family default
, if *CURRENT-PROCESS* was not a reader of 
\family typewriter
read-write-lock
\family default
 before 
\family typewriter
with-read-lock
\family default
 was called, the lock is released.
 If it was already a reader, it remains one.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-READ-WRITE-LOCK, WITH-WRITE-LOCK, MAKE-LOCK, MAKE-SEMAPHORE, PROCESS-INPUT-
WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT 
\end_layout

\begin_layout Subsection
WITH-WRITE-LOCK
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-write-lock"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-write-lock
\end_layout

\end_inset

WITH-WRITE-LOCK --- Waits until the given lock is available for write access,
 then executes its body with the lock held.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
with-write-lock (read-write-lock) &body body
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
read-write-lock an object of type CCL:READ-WRITE-LOCK.
 
\end_layout

\begin_layout Description
body an implicit progn.
 
\end_layout

\begin_layout Description
result the primary value returned by 
\family typewriter
body
\family default
.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Waits until 
\family typewriter
read-write-lock
\family default
 has no readers and no writer other than *CURRENT-PROCESS*, then ensures
 that *CURRENT-PROCESS* is the writer of it.
 With the lock held, executes 
\family typewriter
body
\family default
.
\end_layout

\begin_layout Standard
After executing 
\family typewriter
body
\family default
, if *CURRENT-PROCESS* was not the writer of 
\family typewriter
read-write-lock
\family default
 before 
\family typewriter
with-write-lock
\family default
 was called, the lock is released.
 If it was already the writer, it remains the writer.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-READ-WRITE-LOCK, WITH-READ-LOCK, MAKE-LOCK, MAKE-SEMAPHORE, PROCESS-INPUT-W
AIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT 
\end_layout

\begin_layout Subsection
MAKE-SEMAPHORE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_make-semaphore"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
make-semaphore
\end_layout

\end_inset

MAKE-SEMAPHORE --- Creates and returns a semaphore, which can be used for
 synchronization between threads.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
make-semaphore => semaphore
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
semaphore a newly-allocated object of type CCL:SEMAPHORE.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Creates and returns an object of type CCL:SEMAPHORE.
 A semaphore has an associated "count" which may be incremented and decremented
 atomically; incrementing it represents sending a signal, and decrementing
 it represents handling that signal.
 
\family typewriter
semaphore
\family default
 has an initial count of 0.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
SIGNAL-SEMAPHORE, WAIT-ON-SEMAPHORE, TIMED-WAIT-ON-SEMAPHORE, MAKE-LOCK,
 MAKE-READ-WRITE-LOCK, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-IN
PUT 
\end_layout

\begin_layout Subsection
SIGNAL-SEMAPHORE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_signal-semaphore"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
signal-semaphore
\end_layout

\end_inset

SIGNAL-SEMAPHORE --- Atomically increments the count of a given semaphore.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
signal-semaphore semaphore => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
semaphore an object of type CCL:SEMAPHORE.
 
\end_layout

\begin_layout Description
result an integer representing an error identifier which was returned by
 the underlying OS call.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Atomically increments 
\family typewriter
semaphore
\family default
's "count" by 1; this may enable a waiting thread to resume execution.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-SEMAPHORE, WAIT-ON-SEMAPHORE, TIMED-WAIT-ON-SEMAPHORE, MAKE-LOCK, MAKE-READ
-WRITE-LOCK, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT
 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard

\family typewriter
result
\family default
 should probably be interpreted and acted on by 
\family typewriter
signal-semaphore
\family default
, because it is not likely to be meaningful to a lisp program, and the most
 common cause of failure is a type error.
\end_layout

\begin_layout Subsection
WAIT-ON-SEMAPHORE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_wait-on-semaphore"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
wait-on-semaphore
\end_layout

\end_inset

WAIT-ON-SEMAPHORE --- Waits until the given semaphore has a positive count
 which can be atomically decremented.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
wait-on-semaphore semaphore => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
semaphore an object of type CCL:SEMAPHORE.
 
\end_layout

\begin_layout Description
result an integer representing an error identifier which was returned by
 the underlying OS call.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Waits until 
\family typewriter
semaphore
\family default
 has a positive count that can be atomically decremented; this will succeed
 exactly once for each corresponding call to SIGNAL-SEMAPHORE.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-SEMAPHORE, SIGNAL-SEMAPHORE, TIMED-WAIT-ON-SEMAPHORE, MAKE-LOCK, MAKE-READ-
WRITE-LOCK, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT
 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard

\family typewriter
result
\family default
 should probably be interpreted and acted on by 
\family typewriter
wait-on-semaphore
\family default
, because it is not likely to be meaningful to a lisp program, and the most
 common cause of failure is a type error.
\end_layout

\begin_layout Subsection
TIMED-WAIT-ON-SEMAPHORE
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_timed-wait-on-semaphore"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
timed-wait-on-semaphore
\end_layout

\end_inset

TIMED-WAIT-ON-SEMAPHORE --- Waits until the given semaphore has a positive
 count which can be atomically decremented, or until a timeout expires.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
timed-wait-on-semaphore semaphore timeout => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
semaphore An object of type CCL:SEMAPHORE.
 
\end_layout

\begin_layout Description
timeout a time interval in seconds.
 May be any non-negative real number the 
\family typewriter
floor
\family default
 of which fits in 32 bits.
 The default is 1.
 
\end_layout

\begin_layout Description
result T if 
\family typewriter
timed-wait-on-semaphore
\family default
 returned because it was able to decrement the count of 
\family typewriter
semaphore
\family default
; NIL if it returned because the duration 
\family typewriter
timeout
\family default
 has been exceeded.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Waits until 
\family typewriter
semaphore
\family default
 has a positive count that can be atomically decremented, or until the duration
 
\family typewriter
timeout
\family default
 has elapsed.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-SEMAPHORE, WAIT-ON-SEMAPHORE, MAKE-LOCK, MAKE-READ-WRITE-LOCK, PROCESS-INPU
T-WAIT, PROCESS-OUTPUT-WAIT, WITH-TERMINAL-INPUT 
\end_layout

\begin_layout Subsection
PROCESS-INPUT-WAIT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-input-wait"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-input-wait
\end_layout

\end_inset

PROCESS-INPUT-WAIT --- Waits until input is available on a given file-descriptor.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-input-wait fd &optional timeout
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
fd a file descriptor, which is a non-negative integer used by the OS to
 refer to an open file, socket, or similar I/O connection.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "f_stream-device"

\end_inset

.
 
\end_layout

\begin_layout Description
timeout either NIL or a time interval in milliseconds.
 Must be a non-negative integer.
 The default is NIL.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Wait until input is available on 
\family typewriter
fd
\family default
.
 This uses the 
\family typewriter
select()
\family default
 system call, and is generally a fairly efficient way of blocking while
 waiting for input.
 More accurately, 
\family typewriter
process-input-wait
\family default
 waits until it's possible to read from fd without blocking, or until 
\family typewriter
timeout
\family default
, if it is not NIL, has been exceeded.
\end_layout

\begin_layout Standard
Note that it's possible to read without blocking if the file is at its end
 - although, of course, the read will return zero bytes.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-LOCK, MAKE-READ-WRITE-LOCK, MAKE-SEMAPHORE, PROCESS-OUTPUT-WAIT, WITH-TERMI
NAL-INPUT 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard

\family typewriter
process-input-wait
\family default
 has a timeout parameter, and PROCESS-OUTPUT-WAIT does not.
 This inconsistency should probably be corrected.
\end_layout

\begin_layout Subsection
PROCESS-OUTPUT-WAIT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_process-output-wait"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
process-output-wait
\end_layout

\end_inset

PROCESS-OUTPUT-WAIT --- Waits until output is possible on a given file descripto
r.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
process-output-wait fd &optional timeout
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
fd a file descriptor, which is a non-negative integer used by the OS to
 refer to an open file, socket, or similar I/O connection.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "f_stream-device"

\end_inset

.
 
\end_layout

\begin_layout Description
timeout either NIL or a time interval in milliseconds.
 Must be a non-negative integer.
 The default is NIL.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Wait until output is possible on 
\family typewriter
fd
\family default
 or until 
\family typewriter
timeout
\family default
, if it is not NIL, has been exceeded.
 This uses the 
\family typewriter
select()
\family default
 system call, and is generally a fairly efficient way of blocking while
 waiting to output.
\end_layout

\begin_layout Standard
If 
\family typewriter
process-output-wait
\family default
 is called on a network socket which has not yet established a connection,
 it will wait until the connection is established.
 This is an important use, often overlooked.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
MAKE-LOCK, MAKE-READ-WRITE-LOCK, MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, WITH-TERMIN
AL-INPUT 
\end_layout

\begin_layout Subsubsection*
Notes
\end_layout

\begin_layout Standard
PROCESS-INPUT-WAIT has a timeout parameter, and 
\family typewriter
process-output-wait
\family default
 does not.
 This inconsistency should probably be corrected.
\end_layout

\begin_layout Subsection
WITH-TERMINAL-INPUT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "m_with-terminal-input"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
with-terminal-input
\end_layout

\end_inset

WITH-TERMINAL-INPUT --- Executes its body in an environment with exclusive
 read access to the terminal.
\end_layout

\begin_layout Standard
Macro
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
with-terminal-input &body body => result
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
body an implicit progn.
 
\end_layout

\begin_layout Description
result the primary value returned by 
\family typewriter
body
\family default
.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Requests exclusive read access to the standard terminal stream, 
\family typewriter
*terminal-io*
\family default
.
 Executes 
\family typewriter
body
\family default
 in an environment with that access.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
*REQUEST-TERMINAL-INPUT-VIA-BREAK*, :Y, MAKE-LOCK, MAKE-READ-WRITE-LOCK,
 MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT 
\end_layout

\begin_layout Subsection
*REQUEST-TERMINAL-INPUT-VIA-BREAK*
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "v_request-terminal-input-via-break"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
request-terminal-input-via-break
\end_layout

\end_inset

*REQUEST-TERMINAL-INPUT-VIA-BREAK* --- Controls how attempts to obtain ownership
 of terminal input are made.
\end_layout

\begin_layout Standard
Variable
\end_layout

\begin_layout Subsubsection*
Value Type
\end_layout

\begin_layout Standard
A boolean.
\end_layout

\begin_layout Subsubsection*
Initial Value
\end_layout

\begin_layout Standard
NIL.
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
Controls how attempts to obtain ownership of terminal input are made.
 When NIL, a message is printed on *TERMINAL-IO*; it's expected that the
 user will later yield control of the terminal via the :Y toplevel command.
 When T, a BREAK condition is signaled in the owning process; continuing
 from the break loop will yield the terminal to the requesting process (unless
 the :Y command was already used to do so in the break loop.)
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
WITH-TERMINAL-INPUT, :Y, MAKE-LOCK, MAKE-READ-WRITE-LOCK, MAKE-SEMAPHORE,
 PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT 
\end_layout

\begin_layout Subsection
:Y
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "cmd_y"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
:y
\end_layout

\end_inset

:Y --- Yields control of terminal input to a specified lisp process (thread).
\end_layout

\begin_layout Standard
Toplevel Command
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
(:y p)
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
p a lisp process (thread), designated either by an integer which matches
 its 
\family typewriter
process-serial-number
\family default
, or by a string which is 
\family typewriter
equal
\family default
 to its 
\family typewriter
process-name
\family default
.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
:Y is a toplevel command, not a function.
 As such, it can only be used interactively, and only from the initial process.
\end_layout

\begin_layout Standard
The command yields control of terminal input to the process 
\family typewriter
p
\family default
, which must have used WITH-TERMINAL-INPUT to request access to the terminal
 input stream.
\end_layout

\begin_layout Subsubsection*
See Also
\end_layout

\begin_layout Standard
WITH-TERMINAL-INPUT, *REQUEST-TERMINAL-INPUT-VIA-BREAK*, MAKE-LOCK, MAKE-READ-WR
ITE-LOCK, MAKE-SEMAPHORE, PROCESS-INPUT-WAIT, PROCESS-OUTPUT-WAIT 
\end_layout

\begin_layout Subsection
JOIN-PROCESS
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "f_join-process"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
join-process
\end_layout

\end_inset

JOIN-PROCESS --- Waits for a specified process to complete and returns the
 values that that process's initial function returned.
\end_layout

\begin_layout Standard
Function
\end_layout

\begin_layout Subsubsection*
Synopsis
\end_layout

\begin_layout Standard
join-process process &optional default => values
\end_layout

\begin_layout Subsubsection*
Arguments and Values
\end_layout

\begin_layout Description
process a process, typically created by PROCESS-RUN-FUNCTION or by MAKE-PROCESS
 
\end_layout

\begin_layout Description
default A default value to be returned if the specified process doesn't
 exit normally.
 
\end_layout

\begin_layout Description
values The values returned by the specified process's initial function if
 that function returns, or the value of the default argument, otherwise.
 
\end_layout

\begin_layout Subsubsection*
Description
\end_layout

\begin_layout Standard
\noindent
Waits for the specified process to terminate.
 If the process terminates "normally" (if its initial function returns),
 returns the values that that initial function returnes.
 If the process does not terminate normally (e.g., if it's terminated via
 PROCESS-KILL and a default argument is provided, returns the value of that
 default argument.
 If the process doesn't terminate normally and no default argument is provided,
 signals an error.
\end_layout

\begin_layout Standard
A process can't successfully join itself, and only one process can successfully
 receive notification of another process's termination.
 
\end_layout

\end_body
\end_document
