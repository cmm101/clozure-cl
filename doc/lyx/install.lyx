#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble

\def\input@path{{/usr/local/src/ccl/doc/src//}}

% -----------------------------------------  
% Autogenerated LaTeX file from XML DocBook  
% -----------------------------------------  
%%<params>
%%</params>

\usepackage{ifthen}\newboolean{DBKIsBook}
\setboolean{DBKIsBook}{true}
\IfFileExists{ifxetex.sty}{%
    \usepackage{ifxetex}%
  }{%
    \newif\ifxetex
    \xetexfalse
  }
  \ifxetex
\usepackage{fontspec}\usepackage{xltxtra}\setmainfont{DejaVu Serif}
\setsansfont{DejaVu Sans}
\setmonofont{DejaVu Sans Mono}
\else
\fi
\usepackage{fancybox}\usepackage[hyperlink]{docbook}\renewcommand{\DBKreleaseinfo}{}


\title{Obtaining, Installing, and Running Clozure CL}
\author{}

% ------------------
% Collaborators
% ------------------
\renewcommand{\DBKindexation}{
\begin{DBKindtable}
\DBKinditem{\writtenby}{}
\end{DBKindtable}
}
\makeindex
\makeglossary
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "%"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Obtaining, Installing, and Running Clozure CL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "installing"

\end_inset


\end_layout

\begin_layout Section
Releases and System Requirements
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "releases"

\end_inset

As of this writing, Clozure CL 1.7 is the latest release; it was made in
 August 2011.
 For up-to-date information about releases, please see 
\begin_inset Flex Flex:URL
status open

\begin_layout Plain Layout

http://ccl.clozure.com/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Clozure CL 1.7 runs on the following platforms: 
\end_layout

\begin_layout Itemize
Linux (x86, x86-64, ppc32, ppc64, armv7)
\end_layout

\begin_layout Itemize
Mac OS X 10.5 and later (x86, x86-64)
\end_layout

\begin_layout Itemize
FreeBSD 6.x and later (x86, x86-64)
\end_layout

\begin_layout Itemize
Solaris (x86, x86-64)
\end_layout

\begin_layout Itemize
Microsoft Windows XP and later (x86, x86-64)
\end_layout

\begin_layout Subsection
32-vs 64-bit versions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "ports32vs64"

\end_inset

Naturally, 64-bit versions of Clozure CL require 64-bit processors, for
 example, a G5 or Core 2.
 Some early Intel-based Macintoshes used processors that don't support 64-bit
 operation, so the 64-bit Clozure CL will not run on them, although the
 32-bit Clozure CL will.
\end_layout

\begin_layout Subsection
32-bit x86 versions require SSE2
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "x86sse2"

\end_inset

The 32-bit x86 versions of Clozure CL depend on the presence of the SSE2
 instructions.
 Most x86 processors manufactured and sold in the last several years support
 SSE2 (all Apple Intel-based Macs do, for instance), but there are some
 exceptions.
 The 
\begin_inset CommandInset href
LatexCommand href
name "Wikipedia article on SSE2"
target "http://en.wikipedia.org/wiki/SSE2"

\end_inset

 lists processor models that support SSE2 (and also mentions some of the
 more notable exceptions).
\end_layout

\begin_layout Subsection
LinuxPPC
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "linuxppc"

\end_inset

Clozure CL requires version 2.2.13 (or later) of the Linux kernel and version
 2.1.3 (or later) of the GNU C library (glibc) at a bare minimum.
\end_layout

\begin_layout Subsection
Linux x86
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "linuxx86"

\end_inset

Because of the nature of Linux distributions, it's difficult to give precise
 version number requirements.
 In general, a "fairly modern" (no more than 2 or three years old) kernel
 and C library are more likely to work well than older versions.
\end_layout

\begin_layout Subsection
Linux ARM v7
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "linuxarm"

\end_inset

The Linux ARM port is relatively new and is still a work-in-progress.
 Clozure CL needs some features (such as hardware floating-point, locking
 and memory-serialization primitives) that are only found in chips that
 implement architecture version 7 (ARMv7); technically, it needs the ARMv7
 "application profile", which is sometimes called ARMv7a.
 In practice, 
\emph on
most
\emph default
 ARM consumer devices released in the last few years implement ARMv7, but
 there are exceptions, and it is not practical to enumerate all of the ARM
 devices that CCL should run on.
\end_layout

\begin_layout Standard
In addition to hardware issues, Clozure CL expects Linux to run in little-endian
 mode and expects software to follow "soft float" calling conventions.
 The latter has to do with how C functions accept floating-point arguments
 and return floating-point values.
\end_layout

\begin_layout Subsection
FreeBSD x86
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "freebsdx86"

\end_inset

Clozure CL should run on FreeBSD 6.x and 7.x.
 FreeBSD 7 users will need to install the "compat6x" package in order to
 use the distributed Clozure CL kernel, which is built on a FreeBSD 6.x system.
\end_layout

\begin_layout Subsection
Mac OS X x86
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "macosx"

\end_inset

Clozure CL 1.7 runs on Mac OS X (x86) versions 10.5 and later, including 10.7
 (Lion),
\end_layout

\begin_layout Standard
Clozure CL 1.6 runs on Mac OS X PPC as well as x86 processors.
\end_layout

\begin_layout Subsection
Microsoft Windows
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "windows"

\end_inset

For Clozure CL versions prior to 1.7, the 32-bit executable does not run
 under 64-bit Windows.
\end_layout

\begin_layout Section
Obtaining Clozure CL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "obtaining-ccl"

\end_inset

There are three ways to obtain Clozure CL.
 For Mac OS X, there are disk images that can be used to install Clozure
 CL in the usual Macintosh way.
 For other OSes, Subversion is the best way to obtain Clozure CL.
 Mac OS X users can also use Subversion if they prefer.
 Tarballs are available for those who prefer them, but if you have Subversion
 installed, it is simpler and more flexible to use Subversion than tarballs.
\end_layout

\begin_layout Standard
There are three popular ways to use Clozure CL: as a stand-alone double-clickabl
e application (Mac OS X only), as a command-line application, or with Emacs
 and SLIME.
\end_layout

\begin_layout Standard
The following sections describe these options.
\end_layout

\begin_layout Subsection
The Mac Way
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "obtaining-the-mac-way"

\end_inset

If you are using Mac OS X then you can install and use Clozure CL in the
 usual Macintosh way.
 Download and mount a disk image, then drag the ccl folder to the Applications
 folder or wherever you wish.
 After that you can double-click the Clozure CL application found inside
 the ccl directory.
 The disk images for version 1.7 are available at 
\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout

ftp://clozure.com/pub/release/1.7/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So that Clozure CL can locate its source code, and for other reasons explained
 in [?], you keep the Clozure CL application in the 
\family typewriter
ccl
\family default
 directory.
 If you use a shell, you can set the value of the 
\family typewriter
CCL_DEFAULT_DIRECTORY
\family default
 environment variable to explicitly indicate the location of the 
\family typewriter
ccl
\family default
 directory.
 If you choose to do that, then the 
\family typewriter
ccl
\family default
 directory and the Clozure CL application can each be in any location you
 find convenient.
\end_layout

\begin_layout Subsection
Tarballs
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "obtaining-via-tarballs"

\end_inset

Tarball distributions of Clozure CL release version 1.7 are available at
 
\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout

ftp://clozure.com/pub/release/1.7/
\end_layout

\end_inset

.
 Download and extract one on your local disk.
 Then edit the Clozure CL shell script to set the value of 
\family typewriter
CCL_DEFAULT_DIRECTORY
\family default
 and start up the appropriate Clozure CL kernel.
 See Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "The-ccl-Shell-Script"

\end_inset

 for more information about the Clozure CL shell scripts.
\end_layout

\begin_layout Subsection
Getting Clozure CL with Subversion
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "obtaining-via-svn"

\end_inset

It is very easy to download and configure Clozure CL to obtain sources from
 the Subversion repository.
 This is the preferred way to get either the latest, or a specific version
 of Clozure CL, unless you prefer the Mac Way.
 Subversion is a source code control system that is in wide use.
 Many OSes come with Subversion pre-installed.
 A complete, buildable and runnable set of Clozure CL sources and binaries
 can be retrieved with a single Subversion command.
 
\end_layout

\begin_layout Standard
\begin_inset Foot
status open

\begin_layout Plain Layout
Unless stated otherwise, examples in this chapter are given for Mac OS X
 in particular or Unix-based host environments in general.
\end_layout

\begin_layout Plain Layout
For Windows, special care must be taken to install a working development
 environment.
 For more information see the Clozure CL Wiki at URL: 
\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout

http://trac.clozure.com/ccl/wiki/WindowsNotes
\end_layout

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Checking Subversion Installation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Checking-Subversion-Installation"

\end_inset

Make sure that Subversion is installed on your system.
 Bring up a command line shell and type:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> svn 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If Subversion is installed, you will see something like:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Type 'svn help' for usage.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If Subversion is not installed, you will see something like:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

-bash: svn: command not found
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If Subversion is not installed, you'll need to figure out how to install
 it on your OS.
 You can find information about obtaining and installing Subversion at the
 
\begin_inset CommandInset href
LatexCommand href
name "Subversion web page"
target "http://subversion.tigris.org"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Downloading Clozure CL Using Subversion
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Downloading-CCL"

\end_inset

Before you download Clozure CL you should consider: Do you want to run the
 most recent source code, or the current stable release version? If you
 don't know how to answer this question, then you probably want the release
 version.
\end_layout

\begin_layout Paragraph
Downloading the Trunk
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Downloading-CCL-Trunk"

\end_inset

Day-to-day development of Clozure CL takes place in an area of the Subversion
 repository known as "the trunk".
 At most times, the trunk is perfectly usable, but occasionally it can be
 unstable or totally broken.
 If you wish to live on the bleeding edge, download sources from the trunk.
\end_layout

\begin_layout Standard
For example, the following command will fetch a copy of the trunk for Mac
 OS X (Darwin) with x86 processors (both 32- and 64-bit versions):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

svn co http://svn.clozure.com/publicsvn/openmcl/trunk/darwinx86/ccl
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To get a trunk Clozure CL for another platform, replace "darwinx86" with
 one of the following names (all versions include both 32- and 64-bit binaries):
 
\end_layout

\begin_layout Itemize
darwinx86
\end_layout

\begin_layout Itemize
linuxx86
\end_layout

\begin_layout Itemize
freebsdx86
\end_layout

\begin_layout Itemize
solarisx86
\end_layout

\begin_layout Itemize
windows
\end_layout

\begin_layout Itemize
linuxppc
\end_layout

\begin_layout Itemize
linuxarm
\end_layout

\begin_layout Paragraph
Downloading a Release Version
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Downloading-CCL-Release"

\end_inset

Release versions of Clozure CL are intended to be stable.
 While bugs will be fixed in the release branches, enhancements and new
 features will go into the trunk.
 If you wish to run the stable release, the following command will fetch
 a copy of the release version 1.7 for Mac OS X (Darwin) with x86 processors
 (both 32- and 64-bit versions):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

svn co http://svn.clozure.com/publicsvn/openmcl/release/1.7/darwinx86/ccl
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To get the release version of Clozure CL for another platform, replace "darwinx8
6" with one of the following names: 
\end_layout

\begin_layout Itemize
darwinx86
\end_layout

\begin_layout Itemize
linuxx86
\end_layout

\begin_layout Itemize
freebsdx86
\end_layout

\begin_layout Itemize
solarisx86
\end_layout

\begin_layout Itemize
windows
\end_layout

\begin_layout Itemize
linuxppc
\end_layout

\begin_layout Itemize
linuxarm
\end_layout

\begin_layout Standard
These distributions contain complete sources and binaries.
 They use Subversion's "externals" features to share common sources; the
 majority of source code is the same across all versions.
\end_layout

\begin_layout Subsection
Rebuilding Clozure CL From Sources
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Rebuilding-CCL-From-Sources"

\end_inset

This section explains how to peform a "full rebuild" of Clozure CL from
 a source distribution.
\end_layout

\begin_layout Standard
After downloading Clozure CL sources, you should rebuild Clozure CL as described
 here.
 At the start of a full rebuild, object files in the 
\family typewriter
ccl
\family default
 directory are deleted, which causes the build script to recompile the runtime
 kernel (C code) and high-level sources (Lisp), then save a new heap image.
 Doing a full rebuild helps to ensure that your local installation will
 run properly for your host OS environment.
\end_layout

\begin_layout Standard
In an interactive shell, a command sequence like the following will rebuild
 Clozure CL in place:
\end_layout

\begin_layout Standard

\series bold
\shape italic
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> cd /path/to/installed/ccl 
\end_layout

\begin_layout Plain Layout

shell:ccl> ./kernel-filename --no-init 
\end_layout

\begin_layout Plain Layout

Welcome to Clozure Common Lisp Version [...]! 
\end_layout

\begin_layout Plain Layout

? (rebuild-ccl :full t)
\end_layout

\begin_layout Plain Layout

<...lots of compilation output...> 
\end_layout

\begin_layout Plain Layout

? (quit) 
\end_layout

\begin_layout Plain Layout

shell:ccl> 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Replace 
\family typewriter
\size small
\emph on
/path/to/installed/ccl
\family default
\emph default
 with the path of the 
\family typewriter
ccl
\family default
 directory that you downloaded.
\end_layout

\begin_layout Standard
Replace 
\family typewriter
\size small
\emph on
kernel-filename
\family default
\emph default
 with the filename of the Lisp kernel program.
 To find the filename of a Lisp kernel image for your particular platform,
 see [?].
\end_layout

\begin_layout Standard
Specifying the 
\family typewriter
-\SpecialChar \-
no-init
\family default
 option ensures that personal initializations do not interfere with rebuilding
 Clozure CL.
\end_layout

\begin_layout Standard
The rest of this section covers the following topics in brief: 
\end_layout

\begin_layout Itemize
\begin_inset CommandInset ref
LatexCommand ref
reference "Rebuilding-CCL-Requirements"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset ref
LatexCommand ref
reference "When-Rebuild-CCL"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset ref
LatexCommand ref
reference "Rebuild-CCL-Overview"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset ref
LatexCommand ref
reference "Rebuild-Process-Steps-Summary"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Foot
status open

\begin_layout Plain Layout
This section does 
\emph on
not
\emph default
 provide comprehensive documentation on the build process.
 Please refer to 
\begin_inset CommandInset ref
LatexCommand ref
reference "building-ccl-from-source"

\end_inset

 for more information.
 Those more detailed instructions are used mainly by developers who maintain,
 customize, and/or port Clozure CL.
 If you are customizing Clozure CL, or if you run into some exceptional
 situation, you may need to perform the individual build steps.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Software Requirements for Building Clozure CL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Rebuilding-CCL-Requirements"

\end_inset

In order to build Clozure CL you must have a working system and development
 environment.
 There are different requirements and setup procedures for each platform,
 but the main requirement is to have a C compiler and a few other utilities:
 GNU 
\family typewriter
gcc
\family default
 or 
\family typewriter
cc
\family default
 with 
\family typewriter
ld
\family default
 and 
\family typewriter
as
\family default
; 
\family typewriter
make
\family default
; and 
\family typewriter
m4
\family default
.
 Please refer to 
\begin_inset CommandInset ref
LatexCommand ref
reference "Kernel-build-prerequisites"

\end_inset

for details.
 
\end_layout

\begin_layout Standard
\begin_inset Foot
status open

\begin_layout Plain Layout
If you don't have the prerequisite C compiler toolchain installed, 
\family typewriter
rebuild-ccl
\family default
 will not work.
 See 
\begin_inset CommandInset ref
LatexCommand ref
reference "Kernel-build-prerequisites"

\end_inset

 for additional details.
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Most distributions of Linux have all or most of the required development
 tools either pre-installed or readily available.
 On Debian-based Linux you can download and install the essential build
 tools using the package manager.
 For example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

apt-get install build-essential
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(You may need to install C header files separately.)
\end_layout

\begin_layout Standard
For Mac OS X, Xcode 4 is available from the App Store.
\end_layout

\begin_layout Standard
For Windows, install Cygwin and the MinGW toolchain for the 32- or 64-bit
 OS.
 More information about installing Clozure CL on Windows is available in
 the Clozure CL Wiki at URL: 
\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout

http://trac.clozure.com/ccl/wiki/WindowsNotes
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
When to Rebuild Clozure CL From Sources
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "When-Rebuild-CCL"

\end_inset

The most common scenario that requires a full rebuild is the standard installati
on after downloading the source tree.
 Users and application developers (who otherwise have no special build requireme
nts) will generally need to run the full rebuild process just once for any
 given installation on a particular host system.
\end_layout

\begin_layout Standard
Another common scenario is installing a patch update: You can use Subversion
 (
\family typewriter
svn update
\family default
) to download a more recent set of source files.
 (Be sure to download sources from the same path and branch in the source
 repository.) Then run a full rebuild to create new kernel and heap images.
 If you are running Clozure CL from the trunk, you may need to update sources
 and run the full rebuild more often.
\end_layout

\begin_layout Standard
Another reason to do a full rebuild is to ensure that Clozure CL will run
 properly in the host OS environment.
 This may be necessary, for example, when the target OS version is not identical
 to the one where the pre-built kernel was generated.
 The Lisp kernel uses some functionality defined in standard platform-provided
 libraries.
 On some platforms, applications (such as the Lisp kernel) are built in
 such a way as to depend on the specific versions of these libraries that
 were present at build time, and may not run on systems that have older
 or newer versions of these libraries.
 If you're affected by this, the simplest workaround is to build the Lisp
 kernel on the machine(s) that you intend to run it on and use that locally-buil
t kernel instead of one distributed via Subversion.
\end_layout

\begin_layout Subsubsection
Rebuilding Clozure CL Using REBUILD-CCL
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Rebuild-CCL-Overview"

\end_inset

Once the checkout is complete, and provided that you have a working development
 setup, you can build Clozure CL by running the Lisp kernel (an OS-native
 executable program) and running 
\family typewriter
REBUILD-CCL
\family default
 in Lisp.
\end_layout

\begin_layout Standard
For example, to build a 64-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

bit Clozure CL on Mac OS X: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> ./dx86cl64 --no-init Welcome to Clozure Common Lisp Version 1.7 (DarwinX866
4)! 
\end_layout

\begin_layout Plain Layout

? (rebuild-ccl :full t) 
\end_layout

\begin_layout Plain Layout

;Rebuilding Clozure Common Lisp using Version 1.7 (DarwinX8664) 
\end_layout

\begin_layout Plain Layout

;Building lisp-kernel ...
 
\end_layout

\begin_layout Plain Layout

;Kernel built successfully.
 
\end_layout

\begin_layout Plain Layout

;Compiling <...> 
\end_layout

\begin_layout Plain Layout

;Loading <...>
\end_layout

\begin_layout Plain Layout

<...lots of compilation output...>
\end_layout

\begin_layout Plain Layout

;Wrote bootstrapping image: #P"/Users/joe/ccl/x86-boot64.image" 
\end_layout

\begin_layout Plain Layout

;Wrote heap image: #P"/Users/joe/ccl/dx86cl64.image" 
\end_layout

\begin_layout Plain Layout

NIL 
\end_layout

\begin_layout Plain Layout

? (quit) 
\end_layout

\begin_layout Plain Layout

shell>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the build fails for any reason, the kernel and/or heap image files may
 be missing or corrupted.
 To recover, delete the image files and update the source directory from
 Subversion.
 For example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> rm dx86cl* 
\end_layout

\begin_layout Plain Layout

joe:ccl> svn update 
\end_layout

\begin_layout Plain Layout

<...
 lots of Subversion output...> 
\end_layout

\begin_layout Plain Layout

joe:ccl> ./dx86cl64 --no-init Welcome to Clozure Common Lisp Version 1.7 (DarwinX8
664)! 
\end_layout

\begin_layout Plain Layout

? (rebuild-ccl :full t) 
\end_layout

\begin_layout Plain Layout

<...
 lots of compilation output...> 
\end_layout

\begin_layout Plain Layout

? (quit) 
\end_layout

\begin_layout Plain Layout

joe:ccl>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once the full rebuild is completed, you can run the new Lisp kernel from
 the command shell.
 However, running the OS- and processor-specific executable directly is
 not recommended for day-to-day use.
 Clozure CL includes the 
\family typewriter
ccl
\family default
 and 
\family typewriter
ccl64
\family default
 command shell scripts.
 For details on configuring a shell script for your environment, see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "The-ccl-Shell-Script"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Summary of the Build Process Steps
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Rebuild-Process-Steps-Summary"

\end_inset

Should the build fail, your first concern should be to confirm that all
 requirements are in place: the C compiler, utilities, and OS header files;
 source files for the trunk or release branch you want to build; and the
 Lisp kernel and heap image files.
 For assistance with trouble-shooting, here is an outline of the full build
 process, with links to the more detailed instructions in [?].
 
\end_layout

\begin_layout Itemize
Build the Lisp kernel (
\begin_inset CommandInset ref
LatexCommand ref
reference "Building-the-kernel"

\end_inset

)
\end_layout

\begin_layout Itemize
Build the heap image (
\begin_inset CommandInset ref
LatexCommand ref
reference "Building-the-heap-image"

\end_inset

) 
\end_layout

\begin_deeper
\begin_layout Itemize
Create a bootstrapping heap image (
\begin_inset CommandInset ref
LatexCommand ref
reference "Generating-a-bootstrapping-image"

\end_inset

)
\end_layout

\begin_layout Itemize
Compile Lisp code to generate fasl files (
\begin_inset CommandInset ref
LatexCommand ref
reference "Generating-fasl-files"

\end_inset

4)
\end_layout

\begin_layout Itemize
Build a full image from bootstrapping image (
\begin_inset CommandInset ref
LatexCommand ref
reference "Building-a-full-image-from-a-bootstrapping-image"

\end_inset

) 
\end_layout

\begin_deeper
\begin_layout Itemize
Run new kernel with new bootstrapping image
\end_layout

\begin_layout Itemize
Load Lisp code
\end_layout

\begin_layout Itemize
Save a new full heap image
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Command Line Set Up
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "command-line-setup"

\end_inset

Sometimes it's convenient to use Clozure CL from a Unix shell command line.
 This is especially true when using Clozure CL as a way to run Common Lisp
 utilities.
\end_layout

\begin_layout Subsection
The ccl Shell Script
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "The-ccl-Shell-Script"

\end_inset

Clozure CL needs to be able to find the 
\family typewriter
ccl
\family default
 directory in order to support features such as 
\family typewriter
require
\family default
 and 
\family typewriter
provide
\family default
, access to foreign interface information (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "The-Interface-Database"

\end_inset

) and the Lisp build process (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "building-ccl-from-source"

\end_inset

).
 Specifically, it needs to set up logical pathname translations for the
 
\family typewriter
"ccl:"
\family default
 logical host.
 If this logical host isn't defined (or isn't defined correctly), some things
 might work, some things might not, and it'll generally be hard to invoke
 and use Clozure CL productively.
\end_layout

\begin_layout Standard
Clozure CL uses the value of the environment variable 
\family typewriter
CCL_DEFAULT_DIRECTORY
\family default
 to determine the filesystem location of the 
\family typewriter
ccl
\family default
 directory; the ccl shell script is intended to provide a way to invoke
 Clozure CL with that environment variable set correctly.
\end_layout

\begin_layout Standard
There are two versions of the shell script: 
\family typewriter
"ccl/scripts/ccl"
\family default
 is used to invoke 32-bit implementations of Clozure CL and 
\family typewriter
"ccl/scripts/ccl64"
\family default
 is used to invoke 64-bit implementations.
 Install one script or the other or both as needed.
\end_layout

\begin_layout Standard
To use the script: 
\end_layout

\begin_layout Enumerate
Copy the script to a directory that is on your 
\family typewriter
PATH
\family default
.
 This is often 
\family typewriter
/usr/local/bin
\family default
 or 
\family typewriter
~/bin
\family default
.
 It is better to do this than to add 
\family typewriter
ccl/scripts
\family default
 to your 
\family typewriter
PATH
\family default
, because the script needs to be edited, and editing it in-place means that
 Subversion sees the script as modified..
\end_layout

\begin_layout Enumerate
Edit the definition of 
\family typewriter
CCL_DEFAULT_DIRECTORY
\family default
 near the beginning of the shell script so that it refers to your 
\family typewriter
ccl
\family default
 directory.
 Alternately, set the value of the 
\family typewriter
CCL_DEFAULT_DIRECTORY
\family default
 environment variable wherever you usually set per-user environment variables,
 in your 
\family typewriter
.cshrc
\family default
, 
\family typewriter
.tcshrc
\family default
, 
\family typewriter
.bashrc
\family default
, 
\family typewriter
.bash_profile
\family default
, or 
\family typewriter
.MacOSX/environment.plist
\family default
 script, or system-wide in 
\family typewriter
/etc/profile
\family default
 or 
\family typewriter
/etc/bashrc
\family default
.
 When the ccl script runs, if the process environment contains a definition
 of 
\family typewriter
CCL_DEFAULT_DIRECTORY
\family default
, the ccl script will not override it.
\end_layout

\begin_layout Enumerate
Ensure that the shell script is executable, for example:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ chmod +x ~/bin/ccl64
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This command grants execute permission to the named script.
 If you are using a 32-bit platform, substitute "ccl" in place of "ccl64".
\end_layout

\begin_layout Standard
The above command won't work if you are not the owner of the installed copy
 of Clozure CL.
 In that case, you can use the "sudo" command like this:
\end_layout

\begin_layout Standard

\family typewriter
$ sudo chmod +x\SpecialChar \-
 /usr/local/bin/ccl64
\end_layout

\begin_layout Standard
Give your password when prompted.
\end_layout

\begin_layout Standard
If the "sudo" command doesn't work, then you are not an administrator on
 the system you're using, and you don't have the appropriate "sudo" permissions.
 In that case you'll need to get help from the system's administrator.
 
\end_layout

\end_deeper
\begin_layout Standard
Note that most people won't need both 
\family typewriter
ccl
\family default
 and 
\family typewriter
ccl64
\family default
 scripts.
 You only need both if you sometimes run 32-bit Clozure CL and sometimes
 run 64-bit Clozure CL.
 You can rename the script that you use to whatever you want.
 For example, if you are on a 64-bit system, and you only use Clozure CL
 in 64-bit mode, then you can rename 
\family typewriter
ccl64
\family default
 to 
\family typewriter
ccl
\family default
 so that you only need to type "
\family typewriter
ccl
\family default
" to run it.
\end_layout

\begin_layout Standard
Once this is done, it should be possible to invoke Clozure CL by typing
 
\family typewriter
ccl
\family default
 or 
\family typewriter
ccl64
\family default
 at a shell prompt:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> ccl 
\end_layout

\begin_layout Plain Layout

Welcome to Clozure Common Lisp Version 1.7 (DarwinX8632)! 
\end_layout

\begin_layout Plain Layout

?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The ccl shell script passes all of its arguments to the Clozure CL kernel.
 See Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Command-Line-Options"

\end_inset

 for more information about command-line arguments.
\end_layout

\begin_layout Standard
Assuming the shell script is configured and invoked properly, Clozure CL
 should be able to initialize the 
\family typewriter
"ccl:"
\family default
 logical host so that its translations refer to the 
\family typewriter
"ccl"
\family default
 directory.
 To test this, you can call 
\family typewriter
probe-file
\family default
 in Clozure CL's read-eval-print loop:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (probe-file "ccl:level-1;level-1.lisp") 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This should return the physical pathname of the file, e.g.
 #P"/Users/joe/mylispstuff/ccl/level-1/level-1.lisp"
\end_layout

\begin_layout Section
Personal Customization with the Init File
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Personal-Customization-with-the-Init-File"

\end_inset

By default Clozure CL tries to load the file 
\family typewriter
"home:ccl-init.lisp"
\family default
 or the compiled 
\family typewriter
"home:ccl-init.fasl"
\family default
 upon starting up.
 Clozure CL does this by executing 
\family typewriter
(load "home:ccl-init")
\family default
.
 If it's unable to load the file (for example because the file doesn't exist),
 Clozure CL doesn't signal an error or warning, it just completes its startup
 normally.
\end_layout

\begin_layout Standard
On Unix systems, if 
\family typewriter
"ccl-init.lisp"
\family default
 is not present, Clozure CL will look for 
\family typewriter
".ccl-init.lisp"
\family default
 (post 1.2 versions only).
\end_layout

\begin_layout Standard
The 
\family typewriter
"home:"
\family default
 prefix to the filename is a Common Lisp logical host, which Clozure CL
 initializes to refer to your home directory.
 Clozure CL therefore looks for either of the files 
\family typewriter
~/ccl-init.lisp
\family default
 or 
\family typewriter
~/ccl-init.fasl
\family default
.
\end_layout

\begin_layout Standard
Because the init file is loaded the same way as normal Lisp code is, you
 can put anything you want in it.
 For example, you can change the working directory, and load packages that
 you use frequently.
\end_layout

\begin_layout Standard
To suppress the loading of this init-file, invoke Clozure CL with the 
\family typewriter
--no-init
\family default
 option.
\end_layout

\begin_layout Section
Command Line Options
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Command-Line-Options"

\end_inset

When using Clozure CL from the command line, the following options may be
 used to modify its behavior.
 The exact set of Clozure CL command-line arguments may vary per platform
 and slowly changes over time.
 The current set of command line options may be retrieved by using the 
\family typewriter
--help
\family default
 option.
 
\end_layout

\begin_layout Itemize

\family typewriter
-h
\family default
 (or 
\family typewriter
\SpecialChar \-
\SpecialChar \-
help
\family default
).
 Provides a definitive (if somewhat terse) summary of the command line options
 accepted by the Clozure CL implementation and then exits.
\end_layout

\begin_layout Itemize

\family typewriter
\SpecialChar \-
V
\family default
 (or 
\family typewriter
--version
\family default
).
 Prints the version of Clozure CL then exits.
 The version string is the same value that is returned by 
\family typewriter
LISP-IMPLEMENTATION\SpecialChar \-
VERSION
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
\SpecialChar \-
K
\family default
 
\family typewriter
\size small
\emph on
character-encoding-name
\family default
\emph default
 (or 
\family typewriter
--terminal-encoding
\family default
 
\family typewriter
\emph on
character-encoding-name
\family default
\emph default
).
 Specifies the character encoding to use for 
\family typewriter
*TERMINAL-IO*
\family default
 (see [?]).
 Specifically, the 
\family typewriter
\emph on
character-encoding-name
\family default
\emph default
 string is uppercased and interned in the KEYWORD package.
 If an encoding named by that keyword exists, 
\family typewriter
CCL:*TERMINAL-CHARACTER-ENCODING-NAME*
\family default
 is set to the name of that encoding.
 
\family typewriter
CCL:*TERMINAL-CHARACTER-ENCODING-NAME*
\family default
 defaults to 
\family typewriter
NIL
\family default
, which is a synonym for 
\family typewriter
:ISO-8859-1
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> ccl -K utf-8
\end_layout

\end_inset


\end_layout

\begin_layout Standard
has the effect of making the standard CL streams use 
\family typewriter
:UTF-8
\family default
 as their character encoding.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
\SpecialChar \-
n
\family default
 (or 
\family typewriter
--no-init
\family default
).
 If this option is given, the init file is not loaded.
 This is useful if Clozure CL is being invoked by a shell script that should
 not be affected by whatever customizations a user might have in place.
\end_layout

\begin_layout Itemize

\family typewriter
\SpecialChar \-
e
\family default
 
\family typewriter
\size small
\emph on
form
\family default
\emph default
 (or 
\family typewriter
--eval
\family default
 
\family typewriter
\emph on
form
\family default
\emph default
).
 An expression is read (via 
\family typewriter
READ\SpecialChar \-
FROM-STRING
\family default
) from the string 
\family typewriter
\emph on
form
\family default
\emph default
 and evaluated.
 If 
\family typewriter
\emph on
form
\family default
\emph default
 contains shell metacharacters, it may be necessary to escape or quote them
 to prevent the shell from interpreting them.
\end_layout

\begin_layout Itemize

\family typewriter
-l
\family default
 
\family typewriter
\size small
\emph on
path
\family default
\emph default
 (or 
\family typewriter
--load
\family default
 
\family typewriter
\emph on
path
\family default
\emph default
).
 Loads file specified by 
\family typewriter
\emph on
path
\family default
\emph default
.
\end_layout

\begin_layout Itemize

\family typewriter
-T
\family default
 
\family typewriter
\size small
\emph on
n
\family default
\emph default
 (or 
\family typewriter
--set-lisp-heap-gc-threshold
\family default
 
\family typewriter
\emph on
n
\family default
\emph default
).
 Sets the Lisp gc threshold to 
\family typewriter
\emph on
n
\family default
\emph default
.
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "f_set-lisp-heap-gc-threshold"

\end_inset

)
\end_layout

\begin_layout Itemize

\family typewriter
\SpecialChar \-
Q
\family default
 (or 
\family typewriter
--quiet
\family default
).
 Suppresses printing of heralds and prompts when the 
\family typewriter
--batch
\family default
 command line option is specified.
\end_layout

\begin_layout Itemize

\family typewriter
\SpecialChar \-
R
\family default
 
\family typewriter
\size small
\emph on
n
\family default
\emph default
 (or 
\family typewriter
--heap\SpecialChar \-
reserve
\family default
).
 Reserves 
\family typewriter
\emph on
n
\family default
\emph default
 bytes for heap expansion.
 The default is
\family typewriter
 549755813888
\family default
.
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "Heap-space-allocation"

\end_inset

)
\end_layout

\begin_layout Itemize

\family typewriter
-S
\family default
 
\family typewriter
\size small
\emph on
n
\family default
\emph default
 (or 
\family typewriter
--stack-size
\family default
 
\family typewriter
\emph on
n
\family default
\emph default
).
 Sets the size of the initial control stack to 
\family typewriter
\emph on
n
\family default
\emph default
.
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "Thread-Stack-Sizes"

\end_inset

)
\end_layout

\begin_layout Itemize

\family typewriter
\SpecialChar \-
Z
\family default
 
\family typewriter
\size small
\emph on
n
\family default
\emph default
 (or 
\family typewriter
--thread-stack-size
\family default
 
\family typewriter
\emph on
n
\family default
\emph default
).
 Sets the size of the first thread's stack to 
\family typewriter
\emph on
n
\family default
\emph default
.
 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "Thread-Stack-Sizes"

\end_inset

)
\end_layout

\begin_layout Itemize

\family typewriter
-b
\family default
 (or 
\family typewriter
--batch
\family default
).
 Execute in "batch mode".
 End-of-file from 
\family typewriter
*STANDARD-INPUT*
\family default
 causes Clozure CL to exit, as do attempts to enter a break loop.
\end_layout

\begin_layout Itemize

\family typewriter
\SpecialChar \-
I
\family default
 
\family typewriter
\size small
\emph on
image-name
\family default
\emph default
 (or 
\family typewriter
--image-name
\family default
 
\family typewriter
\emph on
image-name
\family default
\emph default
).
 Specifies the image name for the kernel to load.
 Defaults to the kernel name with ".image" appended.
\end_layout

\begin_layout Standard
The 
\family typewriter
--load
\family default
 and 
\family typewriter
--eval
\family default
 options can each be provided multiple times.
 They're executed in the order specified on the command line, after the
 init file (if there is one) is loaded and before the toplevel read-eval-print
 loop is entered.
\end_layout

\begin_layout Standard
Finally, any arguments following the pseudo-argument 
\family typewriter
--
\family default
 are not processed, and are made available to Lisp as the value of 
\family typewriter
CCL:*UNPROCESSED-COMMAND-LINE-ARGUMENTS*
\family default
.
\end_layout

\begin_layout Section
Using Clozure CL with GNU Emacs and SLIME
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Using-CCL-with-GNU-Emacs-and-SLIME"

\end_inset

SLIME (see 
\begin_inset CommandInset href
LatexCommand href
name "the SLIME web page"
target "http://common-lisp.net/project/slime"

\end_inset

) is an Emacs mode for interacting with Common Lisp systems.
 Clozure CL is well-supported by SLIME.
\end_layout

\begin_layout Standard
See the 
\begin_inset CommandInset href
LatexCommand href
name "InstallingSlime"
target "http://trac.clozure.com"

\end_inset

 topic on the Clozure CL wiki for some tips on how to get SLIME running
 with Clozure CL.
\end_layout

\begin_layout Section
Example Programs
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Example-Programs"

\end_inset

A number (ok, a 
\emph on
small
\emph default
 number), of example programs are distributed in the "ccl:examples;" directory
 of the source distribution.
 See the README-OPENMCL-EXAMPLES text file in that directory for information
 about prerequisites and usage.
\end_layout

\begin_layout Standard
Some of the example programs are derived from C examples in textbooks, etc.;
 in those cases, the original author and work are cited in the source code.
\end_layout

\begin_layout Standard
Unless the original author or contributor claims other rights, you're free
 to incorporate any of this example code or derivative thereof in any of
 your own works without restriction.
 In doing so, you agree that the code was provided "as is", and that no
 other party is legally or otherwise responsible for any consequences of
 your decision to use it.
\end_layout

\begin_layout Standard
If you've developed Clozure CL examples that you'd like to see added to
 the distribution, please send mail to the Clozure CL mailing lists.
 Any such contributions would be welcome and appreciated (as would bug fixes
 and improvements to the existing examples.)
\end_layout

\end_body
\end_document
