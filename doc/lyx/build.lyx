#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble

\def\input@path{{/usr/local/src/ccl/doc/src//}}

% -----------------------------------------  
% Autogenerated LaTeX file from XML DocBook  
% -----------------------------------------  
%%<params>
%%</params>

\usepackage{ifthen}\newboolean{DBKIsBook}
\setboolean{DBKIsBook}{true}
\IfFileExists{ifxetex.sty}{%
    \usepackage{ifxetex}%
  }{%
    \newif\ifxetex
    \xetexfalse
  }
  \ifxetex
\usepackage{fontspec}\usepackage{xltxtra}\setmainfont{DejaVu Serif}
\setsansfont{DejaVu Sans}
\setmonofont{DejaVu Sans Mono}
\else
\fi
\usepackage{fancybox}\usepackage[hyperlink]{docbook}\renewcommand{\DBKreleaseinfo}{}


\title{Building Clozure CL from its Source Code}
\author{}

% ------------------
% Collaborators
% ------------------
\renewcommand{\DBKindexation}{
\begin{DBKindtable}
\DBKinditem{\writtenby}{}
\end{DBKindtable}
}
\makeindex
\makeglossary
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "%"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Building Clozure CL from its Source Code
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "building-ccl-from-source"

\end_inset

Clozure CL, like many other Lisp implementations, consists of a kernel and
 a heap image.
 The kernel is an ordinary C program, and is built with a C compiler.
 It provides very basic and fundamental facilities, such as memory management,
 garbage collection, and bootstrapping.
 All the higher-level features are written in Lisp, and compiled into the
 heap image.
 Both parts are needed to have a working Lisp implementation; neither the
 kernel nor the heap image can stand alone.
\end_layout

\begin_layout Standard
You may already know that, when you have a C compiler which is written in
 C, you need a working C compiler to build the compiler.
 Similarly, the Clozure CL heap image includes a Lisp compiler, which is
 written in Lisp.
 You therefore need a working Lisp compiler in order to build the Lisp heap
 image.
\end_layout

\begin_layout Standard
Where will you get a working Lisp compiler? No worries; you can use a precompile
d copy of a (slightly older and compatible) version of Clozure CL.
 This section explains how to do all this.
\end_layout

\begin_layout Standard
In principle it should be possible to use another implementation of Common
 Lisp as the host compiler, rather than an older Clozure CL; this would
 be a challenging and experimental way to build, and is not described here.
\end_layout

\begin_layout Section
Building Definitions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "building-definitions"

\end_inset

The following terms are used in subsequent sections; it may be helpful to
 refer to these definitions.
\end_layout

\begin_layout Standard
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
fasl files
\end_layout

\end_inset

 are the object files produced by 
\family typewriter
compile-file
\family default
.
 fasl files store the machine code associated with function definitions
 and the external representation of other lisp objects in a compact, machine-rea
dable form.
 fasl is short for 
\begin_inset Quotes grd
\end_inset


\family typewriter
FAS
\family default
t 
\family typewriter
L
\family default
oading‚Äù.
 Clozure CL uses different pathname types (extensions) to name fasl files
 on different platforms; see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Platform-specific-filename-conventions"

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
lisp kernel
\end_layout

\end_inset

 is a C program with a fair amount of platform-specific assembly language
 code.
 Its basic job is to map a lisp heap image into memory, transfer control
 to some compiled lisp code that the image contains, handle any exceptions
 that occur during the execution of that lisp code, and provide various
 other forms of runtime support for that code.
 Clozure CL uses different filenames to name the lisp kernel files on different
 platforms; see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Platform-specific-filename-conventions"

\end_inset

.
\end_layout

\begin_layout Standard
A 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
heap image
\end_layout

\end_inset

 is a file that can be quickly mapped into a process's address space.
 Conceptually, it's not too different from an executable file or shared
 library in the OS's native format (ELF or Mach-O/dyld format); for historical
 reasons, Clozure CL's own heap images are in their own (fairly simple)
 format.
 The term 
\family typewriter
full heap image
\family default
 refers to a heap image file that contains all of the code and data that
 comprise Clozure CL.
 Clozure CL uses different filenames to name the standard full heap image
 files on different platforms; see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "platform-specific-filename-conventions"

\end_inset

.
\end_layout

\begin_layout Standard
A 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
bootstrapping image
\end_layout

\end_inset

 is a minimal heap image used in the process of building Clozure CL itself.
 The bootstrapping image contains just enough code to load the rest of Clozure
 CL from fasl files.
 It may help to think of the bootstrapping image as the egg and the full
 heap image as the chicken.
 Clozure CL uses different filenames to name the standard bootstrapping
 image files on different platforms; see Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "platform-specific-filename-conventions"

\end_inset

 .
\end_layout

\begin_layout Standard
Each supported platform (and possibly a few as-yet-unsupported ones) has
 a uniquely named subdirectory of 
\family typewriter
ccl/lisp-kernel/
\family default
; each such 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
kernel build directory
\end_layout

\end_inset

 contains a Makefile and may contain some auxiliary files (linker scripts,
 etc.) that are used to build the lisp kernel on a particular platform.The
 platform-specific name of the kernel build directory is described in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "platform-specific-filename-conventions-1"

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "platform-specific-filename-conventions-1"

\end_inset

.
\end_layout

\begin_layout Subsection
Platform-specific filename conventions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "platform-specific-filename-conventions"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Platform
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
kernel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
full-image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
boot-image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
FASL extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
kernel build directory
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DarwinPPC32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dppccl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dppccl.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ppc-boot.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.dfsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
darwinppc
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LinuxPPC32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ppccl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ppccl.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ppc-boot
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.pfsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
linuxppc
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DarwinPPC64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dppccl64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dppccl64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ppc-boot64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.d64fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
darwinppc64
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LinuxPPC64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ppccl64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ppccl64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ppc-boot64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.p64fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
linuxppc64
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LinuxX8664
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lx86cl64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lx86cl64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x86-boot64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.lx64fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
linuxx8664
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LinuxX8632
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lx86cl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lx86cl.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x86-boot32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.lx32fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
linuxx8632
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DarwinX8664
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dx86cl64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dx86cl64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x86-boot64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.dx64fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
darwinx8664
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DarwinX8632
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dx86cl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dx86cl.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x86-boot32.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.dx32fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
darwin8632
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FreeBSDX8664
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fx86cl64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fx86cl64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fx86-boot64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.fx64fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
freebsdx8664
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FreeBSDX8632
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fx86cl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fx86cl.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fx86-boot32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.fx32fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
freebsdx8632
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SolarixX64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sx86cl64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sx86cl64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sx86-boot64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.sx64fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
solarisx64
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SolarisX86
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sx86cl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sx86cl.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sx86-boot32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.sx32fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
solarisx32
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Win64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wx86cl64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wx86cl64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wx86-boot64.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.wx64fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
win64
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Win32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wx86cl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wx86cl.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wx86-boot32.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.wx32fsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
win32
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LinuxARM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
armcl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
armcl.image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
arm-boot
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.afsl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
linuxarm
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Setting Up to Build
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Setting-Up-to-Build"

\end_inset

At a given time, there are generally two versions of Clozure CL that you
 might want to use (and therefore might want to build from source): 
\end_layout

\begin_layout Itemize
The released version
\end_layout

\begin_layout Itemize
The development version, called the "trunk", which may contain both interesting
 new features and interesting new bugs
\end_layout

\begin_layout Standard
All versions are available for download from svn.clozure.com via the Subversion
 source control system.
\end_layout

\begin_layout Standard
For example, to get a released version (1.7 in this example), use a command
 like:
\end_layout

\begin_layout Standard

\series bold
\shape italic
\emph on
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

svn co http://svn.clozure.com/publicsvn/openmcl/release/1.7/xxx/ccl
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To get the trunk version, use:
\end_layout

\begin_layout Standard

\series bold
\shape italic
\emph on
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

svn co http://svn.clozure.com/publicsvn/openmcl/trunk/xxx/ccl
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Change the 
\family typewriter
\emph on
xxx
\family default
\emph default
 to one of the following names: 
\family typewriter
darwinx86
\family default
, 
\family typewriter
linuxx86
\family default
, 
\family typewriter
freebsdx86
\family default
, 
\family typewriter
solarisx86
\family default
, 
\family typewriter
windows
\family default
, 
\family typewriter
linuxppc
\family default
, or 
\family typewriter
darwinppc
\family default
.
\end_layout

\begin_layout Standard
Tarball distributions of released versions are also available for download
 via ftp from: 
\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout

ftp://clozure.com/pub/release/
\end_layout

\end_inset

.
 For additional information about availability of source and distributions
 see the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
href{http://trac.clozure.com/ccl/}{
\end_layout

\end_inset

Clozure CL Trac
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Subversion client programs are pre-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

installed on Mac OS X 10.5 and later and are typically either pre-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

installed or readily available on Linux and FreeBSD platforms.
 The 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
href{http://subversion.tigris.org}{
\end_layout

\end_inset

Subversion web page
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 contains links to Subversion client programs for many platforms.
 Users of Mac OS X 10.4 or later can also install Subversion clients via
 Fink or MacPorts.
 On Debian Linux (and on related Linux distros such as Ubuntu) run 
\family typewriter
apt-get install subversion
\family default
 or equivalent in the command-
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

line or interactive package manager.
\end_layout

\begin_layout Section
Kernel Build Prerequisites
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Kernel-build-prerequisites"

\end_inset

The Clozure CL kernel can be built with the following widely available tools:
 
\end_layout

\begin_layout Itemize
cc or gcc ‚Äî the GNU C compiler
\end_layout

\begin_layout Itemize
ld ‚Äî the GNU linker
\end_layout

\begin_layout Itemize
m4 or gm4 ‚Äî the GNU m4 macro processor
\end_layout

\begin_layout Itemize
as ‚Äî the GNU assembler (version 2.10.1 or later)
\end_layout

\begin_layout Itemize
make ‚Äî either GNU make or, on FreeBSD, the default BSD make program
\end_layout

\begin_layout Standard
In general, the more recent the versions of those tools, the better; some
 versions of gcc 3.x on Linux have difficulty compiling some of the kernel
 source code correctly (so gcc 4.0 should be used, if possible.) On Mac OS
 X, the versions of the tools distributed with Xcode should work fine; on
 Linux, the versions of the tools installed with the OS (or available through
 its package management system) should work fine if they're "recent enough".
 On FreeBSD, the installed version of the 
\family typewriter
m4
\family default
 program doesn't support some features that the kernel build process depends
 on; the GNU version of the m4 macroprocessor (called 
\family typewriter
gm4
\family default
 on FreeBSD) should be installed.
 
\end_layout

\begin_layout Standard
In order to build the lisp kernel on Mac OS X 10.6 Snow Leopard, you must
 install the optional 10.4 support when installing Xcode.
 
\end_layout

\begin_layout Section
Building Everything
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Building-Everything"

\end_inset

You now have everything you need.
 Start up Clozure CL with the 
\family typewriter
n
\family default
 or 
\family typewriter
-noinit
\family default
 option to avoid potential interference from code in your init file, and
 evaluate the following form to bring your Lisp system up to date.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (ccl:rebuild-ccl :full t)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That call to the function 
\family typewriter
rebuildccl
\family default
 performs the following steps: 
\end_layout

\begin_layout Itemize
Deletes all fasl files and other object files in the 
\family typewriter
ccl
\family default
 directory tree
\end_layout

\begin_layout Itemize
Runs an external process that does a 
\family typewriter
make
\family default
 in the current platform's kernel build directory to create a new kernel.
 This step can only work if the C compiler and related tools are installed;
 see Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Kernel-build-prerequisites"

\end_inset

.
\end_layout

\begin_layout Itemize
Does 
\family typewriter
(compileccl t)
\family default
 in the running lisp, to produce a set of fasl files from the 
\begin_inset Quotes grd
\end_inset

higher level‚Äù lisp sources.
\end_layout

\begin_layout Itemize
Does 
\family typewriter
(xloadlevel0 :force)
\family default
 in the running lisp, to compile the lisp sources in the 
\begin_inset Quotes grd
\end_inset

ccl:level-0;‚Äù directory into fasl files and then create a bootstrapping
 image from those fasl files.
\end_layout

\begin_layout Itemize
Runs another external process, which causes the newly compiled lisp kernel
 to load the new bootstrapping image.
 The bootstrapping image then loads the 
\begin_inset Quotes grd
\end_inset

higher level‚Äù fasl files and a new copy of the platform's full heap image
 is then saved.
\end_layout

\begin_layout Standard
If all goes well, it'll all happen without user intervention and with some
 simple progress messages.
 If anything goes wrong during execution of either of the external processes,
 the process output is displayed as part of a lisp error message.
\end_layout

\begin_layout Standard

\family typewriter
rebuildccl
\family default
 is essentially just a short cut for running all the individual steps involved
 in rebuilding the system.
 You can also execute these steps individually, as described below.
\end_layout

\begin_layout Section
Building the Kernel
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Building-the-kernel"

\end_inset

The Lisp kernel is the executable that you run to use Lisp.
 It doesn't actually contain the entire Lisp implementation; rather, it
 loads a heap image which contains the specifics‚Äîthe "library", as it might
 be called if this was a C program.
 The kernel also provides runtime support to the heap image, such as garbage
 collection, memory allocation, exception handling, and the OS interface.
\end_layout

\begin_layout Standard
The Lisp kernel file has different names on different platforms.
 See Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "Platform-specific-filename-conventions"

\end_inset

.
 On all platforms the lisp kernel sources reside in 
\family typewriter
ccl/lispkernel
\family default
.
\end_layout

\begin_layout Standard
This section gives directions on how to rebuild the Lisp kernel from its
 source code.
 Most Clozure CL users will rarely have to do this.
 You probably will only need to do it if you are attempting to port Clozure
 CL to a new architecture or extend or enhance its kernel in some way.
 As mentioned above, this step happens automatically when you do
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (rebuild-ccl :full t)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Using "make" to build the lisp kernel
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "kernel-build-command"

\end_inset

With those tools in place, do:
\series bold
\shape italic

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> cd ccl/lisp-kernel/PLATFORM
\end_layout

\begin_layout Plain Layout

shell> make 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That'll assemble several assembly language source files, compile several
 C source files, and link ../../
\family typewriter
\size small
\emph on
the kernel
\family default
\emph default
.
\end_layout

\begin_layout Section
Building the Heap Image
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Building-the-heap-image"

\end_inset

The initial heap image is loaded by the Lisp kernel, and provides most of
 the language implementation The heap image captures the entire state of
 a running Lisp (except for external resources, such as open files and TCP
 sockets).
 After it is loaded, the contents of the new Lisp process's memory are exactly
 the same as those of the old Lisp process when the image was created.
\end_layout

\begin_layout Standard
The heap image is how we get around the fact that we can't run Lisp code
 until we have a working Lisp implementation, and we can't make our Lisp
 implementation work until we can run Lisp code.
 Since the heap image already contains a fully-
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset

working implementation, all we need to do is load it into memory and start
 using it.
\end_layout

\begin_layout Standard
If you're building a new version of Clozure CL, you need to build a new
 heap image.
\end_layout

\begin_layout Standard
(You might also wish to build a heap image if you have a large program that
 is very complicated or time-consuming to load, so that you will be able
 to load it once, save an image, and thenceforth never have to load it again.
 At any time, a heap image capturing the entire memory state of a running
 Lisp can be created by calling the function 
\family typewriter
ccl:save-application
\family default
.)
\end_layout

\begin_layout Subsection
Development cycle
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Development-cycle"

\end_inset

Creating a new Clozure CL full heap image consists of the following steps:
 
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset

Using your existing Clozure CL, create a bootstrapping image
\end_layout

\begin_layout Enumerate
Using your existing Clozure CL, recompile your updated Clozure CL sources
\end_layout

\begin_layout Enumerate
Invoke Clozure CL with the bootstrapping image you just created (rather
 than with the existing full heap image).
\end_layout

\begin_layout Standard
When you invoke Clozure CL with the bootstrapping image, it starts up, loads
 all of the Clozure CL fasl files, and saves out a new full heap image.
 Voila.
 You've created a new heap image.
\end_layout

\begin_layout Standard
A few points worth noting: 
\end_layout

\begin_layout Itemize
There's a circular dependency between the full heap image and the bootstrapping
 image, in that each is used to build the other.
\end_layout

\begin_layout Itemize
There are some minor implementation differences, but the environment in
 effect after the bootstrapping image has loaded its fasl files is essentially
 equivalent to the environment provided by the full heap image; the latter
 loads a lot faster and is easier to distribute, of course.
\end_layout

\begin_layout Itemize
If the full heap image doesn't work (because of an OS compatibilty problem
 or other bug), it's very likely that the bootstrapping image will suffer
 the same problems.
\end_layout

\begin_layout Standard
Given a bootstrapping image and a set of up-to-date fasl files, the development
 cycle usually involves editing lisp sources (or updating those sources
 via 
\family typewriter
svn update
\family default
), recompiling modified files, and using the bootstrapping image to produce
 a new heap image.
\end_layout

\begin_layout Subsection
Generating a bootstrapping image
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Generating-a-bootstrapping-image"

\end_inset

The bootstrapping image isn't provided in Clozure CL distributions.
 It can be built from the source code provided in distributions (using a
 lisp image and kernel provided in those distributions) using the procedure
 described below.
\end_layout

\begin_layout Standard
The bootstrapping image is built by invoking a special utility inside a
 running Clozure CL heap image to load files contained in the 
\family typewriter
ccl/level-0
\family default
 directory.
 The bootstrapping image loads several dozen fasl files.
 After it's done so, it saves a heap image via 
\family typewriter
save-application
\family default
.
 This process is called "cross-{}dumping".
\end_layout

\begin_layout Standard
Given a source distribution, a lisp kernel, and a heap image, one can produce
 a bootstrapping image by first invoking Clozure CL from the shell:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> ccl Welcome to Clozure CL ....
 !
\end_layout

\begin_layout Plain Layout

?
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
then calling 
\family typewriter
ccl:xload-level-0
\family default
 at the lisp prompt:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (ccl:xload-level-0)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function compiles the lisp sources in the 
\family typewriter
ccl/level-0
\family default
 directory if they're newer than the corresponding fasl files and then loads
 the resulting fasl files into a simulated lisp heap contained in data structure
s inside the running lisp.
 That simulated heap image is then written to disk.
\end_layout

\begin_layout Standard

\family typewriter
xload-level-0
\family default
 should be called whenever your existing boot image is out-of-date with
 respect to the source files in 
\family typewriter
ccl:level-0;
\family default
 .
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (ccl:xload-level-0 :force) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
forces recompilation of the level-0 sources.
\end_layout

\begin_layout Subsection
Generating fasl files
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Generating-fasl-files"

\end_inset

Calling:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (ccl:compile-ccl) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
at the lisp prompt compiles any fasl files that are out-of-date with respect
 to the corresponding lisp sources; 
\family typewriter
(ccl:compile-ccl t)
\family default
 forces recompilation.
 
\family typewriter
ccl:compile-ccl
\family default
 reloads newly-compiled versions of some files; 
\family typewriter
ccl:xcompile-ccl
\family default
 is analogous, but skips this reloading step.
\end_layout

\begin_layout Standard
Unless there are bootstrapping considerations involved, it usually doesn't
 matter whether these files are reloaded after they're recompiled.
\end_layout

\begin_layout Standard
Calling 
\family typewriter
compile-ccl
\family default
 or 
\family typewriter
xcompile-ccl
\family default
 in an environment where fasl files don't yet exist may produce warnings
 to that effect whenever files are 
\family typewriter
require
\family default
d during compilation; those warnings can be safely ignored.
 Depending on the maturity of the Clozure CL release, calling 
\family typewriter
compile-ccl
\family default
 or 
\family typewriter
xcompile-ccl
\family default
 may also produce several warnings about undefined functions, etc.
 They should be cleaned up at some point.
\end_layout

\begin_layout Subsection
Building a full image from a bootstrapping image
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "Building-a-full-image-from-a-bootstrapping-image"

\end_inset

To build a full image from a bootstrapping image, just invoke the kernel
 with the bootstrapping image as an argument
\end_layout

\begin_layout Standard

\series bold
\shape italic
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

shell> cd ccl
\end_layout

\begin_layout Plain Layout

shell ./KERNEL --image-name <i>BOOTIMAGE</i> --no-init 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Where 
\family typewriter
\size small
KERNEL
\family default
 and 
\family typewriter
BOOTIMAGE
\family default
 are the names of the kernel and boot image appropriate to the platform
 you are running on.
 See Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "platform-specific-filename-conventions"

\end_inset


\end_layout

\begin_layout Standard
That should load a few dozen fasl files (printing a message as each file
 is loaded.) If all of these files successfully load, the lisp will print
 a prompt.
 You should be able to do essentially everything in that environment that
 you can in the environment provided by a "real" heap image.
 If you're confident that things loaded OK, you can save that image:
\end_layout

\begin_layout Standard

\series bold
\shape italic
\emph on
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

? (ccl:save-application "imagename") ; Overwriting the existing heap image
\end_layout

\end_inset


\emph default
 
\series default
\shape default
Where 
\family typewriter
\size small
\emph on
imagename
\family default
\emph default
 is the name of the full heap image for your platform.
 See Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "platform-specific-filename-conventions"

\end_inset

.
\end_layout

\begin_layout Standard
If things go wrong in the early stages of the loading sequence, errors are
 often difficult to debug; until a fair amount of code (CLOS, the CL condition
 system, streams, the reader, the read-eval-print loop) is loaded, it's
 generally not possible for the lisp to report an error.
 Errors that occur during these early stages ("the cold load") sometimes
 cause the lisp kernel debugger (see ) to be invoked; it's primitive, but
 can sometimes help one to get oriented.
 
\end_layout

\end_body
\end_document
