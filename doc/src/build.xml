<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"[
<!ENTITY rest "<varname>&amp;rest</varname>">
<!ENTITY key "<varname>&amp;key</varname>">
<!ENTITY optional "<varname>&amp;optional</varname>">
<!ENTITY body "<varname>&amp;body</varname>">
<!ENTITY aux "<varname>&amp;aux</varname>">
<!ENTITY allow-other-keys "<varname>&amp;allow-other-keys</varname>">
<!ENTITY CCL "<literal>CCL</literal>">
]>
  <chapter><title>Building &CCL; from its Source Code</title>

    <para>&CCL;, like many other Lisp implementations, consists of a
    kernel and a heap image.  The kernel is an ordinary C program, and
    is built with a C compiler.  It provides very basic and
    fundamental facilities, such as memory management, garbage
    collection, and bootstrapping.  All the higher-level features are
    written in Lisp, and compiled into the heap image.  Both parts are
    needed to have a working Lisp implementation; neither the kernel
    nor the heap image can stand on their own.</para>

    <para>You may already know that, when you have a C compiler which
    is written in C, to build the compiler, you need to already have a
    C compiler available.  The heap image includes a Lisp compiler,
    which is written in Lisp.  Therefore, you need a working Lisp
    compiler in order to build the heap image!</para>
    
    <para>Where will you get a working Lisp compiler?  No worries; you
    can use a precompiled copy of a (slightly older and compatible)
    version of &CCL;.  For help, read on.</para>

    <para>In principle it would be possible to use another Lisp as the
    host compiler, rather than an old &CCL;; this would be a
    challenging and experimental way to build, and is not described
    here.</para>

    <sect1 id="building-definitions"><title>building definitions</title>
      <para>The following terms are used in subsequent sections; it
      may be helpful to refer to these definitions.</para>

      <para><indexterm><primary>fasl files</primary></indexterm> are
      the object files produced by<literal>compile-file</literal>.
      fasl files store the machine codeassociated with function
      definitions and the external representationof other lisp objects
      in a compact, machine-readable form. fasl is short for
      &ldquo;<literal>FAS</literal>t
      <literal>L</literal>oading&rdquo;.&CCL; uses different
      pathname types (extensions) to name faslfiles on different
      platforms; see <xref
      linkend="Platform-specific-filename-conventions"/> </para>

      <para>The <indexterm><primary>lisp kernel</primary></indexterm> is
      a C program (with a fair amount ofplatform-specific assembly
      language code as well.)  Its basic job isto map a lisp heap
      image into memory, transfer control to somecompiled lisp code
      that the image contains, handle any exceptionsthat occur during
      the execution of that lisp code, and provide variousother forms
      of runtime support for that code.&CCL; uses different
      filenames to name the lisp kernel fileson different platforms;
      see FIXTHIS.</para>

      <para>A <indexterm><primary>heap image</primary></indexterm> is
      a file that can be quickly mapped into aprocess's address space.
      Conceptually, it's not too different from anexecutable file or
      shared library in the OS's native format (ELF orMach-O/dyld
      format); for historical reasons, &CCL;'s own heap images are in
      their own (fairly simple) format.The term <literal>full heap
      image</literal> refers to a heap image file thatcontains all of
      the code and data that comprise &CCL;.&CCL; uses different
      filenames to name the standard full heapimage files on different
      platforms; see FIXTHIS .</para>

      <para>A <indexterm><primary>bootstrapping
      image</primary></indexterm> is a minimal heap image used in
      the process of building &CCL; itself.  The bootstrapping image
      containsjust enough code to load the rest of &CCL; from fasl
      files.  It mayhelp to think of the bootstrapping image as the
      egg and the full heapimage as the chicken...&CCL; uses
      different filenames to name the standardbootstrapping image
      files on different platforms; see FIXTHIS .</para>

      <para>Each supported platform (and possibly a few
      as-yet-unsupported ones) has a uniquely named subdirectory of
      <literal>ccl/lisp-kernel/</literal>; each such
      <indexterm><primary>kernel build directory</primary></indexterm>
      contains a Makefile and may contain some auxiliary files (linker
      scripts, etc.) that are used to build the lispkernel on a
      particular platform.The platform-specific name of the kernel
      build directory is described in FIXTHIS.</para>

      <sect2 id="filename_conventions">
       <title>Platform-specific filename conventions</title>
       <table id ="Platform-specific-filename-conventions">
	 <title>Platform-specific filename conventions</title>
	 <tgroup cols="6">
	   <thead>
            <row>
                <entry>Platform</entry>
                <entry>kernel</entry>
                <entry>full-image</entry>
                <entry>boot-image</entry>
                <entry>fasl extension</entry>
                <entry>kernel-build directory</entry>
	    </row>
	   </thead>
	   <tbody>
	     <row>
	       <entry>DarwinPPC32</entry>
                <entry>dppccl</entry>
                <entry>dppccl.image</entry>
                <entry>ppc-boot.image</entry>
                <entry>.dfsl</entry>
                <entry>darwinppc</entry>
	     </row>
	     <row>
	       <entry>LinuxPPC32</entry>
                <entry>ppccl</entry>
		<entry>PPCCL</entry>
                <entry>ppc-boot</entry>
                <entry>.pfsl</entry>
                <entry>linuxppc</entry>
	     </row>
	     <row>
	       <entry>DarwinPPC64</entry>
	       <entry>dppccl64</entry>
	       <entry>dppccl64.image</entry>
	       <entry>ppc-boot64.image</entry>
	       <entry>.d64fsl</entry>
	       <entry>darwinppc64</entry>
             </row>
              <row>
		<entry>LinuxPPC64</entry>
                <entry>ppccl64</entry>
                <entry>PPCCL64</entry>
                <entry>ppc-boot64</entry>
                <entry>.p64fsl</entry>
                <entry>linuxppc64</entry>
              </row>
	      <row>
		<entry>LinuxX8664</entry>
                <entry>lx86cl64</entry>
                <entry>LX86CL64</entry>
                <entry>x86-boot64</entry>
                <entry>.lx64fsl</entry>
                <entry>linuxx8664</entry>
              </row>
	      <row>
		<entry>DarwinX8664</entry>
		<entry>dx86cl64</entry>
                <entry>dx86cl64.image</entry>
                <entry>x86-boot64.image</entry>
                <entry>.dx64fsl</entry>
                <entry>darwinx8664</entry>
              </row>
	      <row>
		<entry>FreeBSDX8664</entry>
                <entry>fx86cl64</entry>
                <entry>FX86CL64</entry>
                <entry>fx86-boot64</entry>
                <entry>.fx64fsl</entry>
                <entry>freebsdx8664</entry>
              </row>
	   </tbody>
	 </tgroup>
       </table>
      </sect2>
    </sect1>

    <sect1 id="Setting-Up-to-Build">
      <title>Setting Up to Build</title>
      <para>There are currently three versions of &CCL; that you
      might want to use (and therefore might want to build from
      source):</para>
      <itemizedlist>
        <listitem><para>Version 1.0 - the more stable version</para></listitem>
        <listitem><para>Version 1.1 - the more recent version, which
        runs on more platforms (including x86-64 platforms) and
        supports Unicode</para></listitem>
	<listitem><para>Version 1.2 - supports (at least) all of the
	features and platforms as 1.1, but is distributed and updated
	differently</para></listitem>
      </itemizedlist>
      <para>All versions are available for download from the &CCL;
      website in the form of archives that contain everything you need
      to work with &CCL;, including the complete sources, a full
      heap image, and the foreign-function interface database.</para>
      <para>Version 1.0 archives are named
      <literal>openmcl-</literal><replaceable>platform</replaceable><literal>-all-1.0.tar.gz</literal>,
      where <replaceable>platform</replaceable> is either
      <literal>darwinppc</literal>, <literal>darwinppc64</literal>, or
      <literal>linuxppc</literal>.  Because version 1.0 is no longer
      undergoing active development, you won't ever need to update
      these sources.</para>
      <para>Version 1.1 archives are named
      <literal>openmcl-</literal><replaceable>platform</replaceable><literal>-snapshot-</literal><replaceable>yymmdd</replaceable><literal>.tar.gz</literal>,
      where <replaceable>platform</replaceable> is either
      <literal>darwinppc</literal>, <literal>darwinx8664</literal>,
      <literal>linuxppc</literal>, <literal>linuxx8664</literal>, or
      <literal>freebsdx8664</literal>, and where
      <replaceable>yymmdd</replaceable> is the year, month, and day
      the snapshot was released.</para>
      <para>Because version 1.1 is undergoing active development,
      there may be times when you want to get sources that are more
      recent than the most recent snapshot and use them to build
      yourself a new bleeding-edge &CCL;.  In that case, you should
      download and install the latest snapshot, and then update your
      sources via CVS.  At that point you can rebuild and you'll have
      the latest and greatest &CCL;.  The snapshot has CVS
      working-copy information in it, so all you need to do to update
      is</para>
      <programlisting>
$ cd ccl
$ cvs login             # password is "cvs"
                        # this step only needs to be done once,
                        # that'll store the trivially encrypted
                        # password in ~/.cvspas
$ cvs update
      </programlisting>
      <para>Unless you tell it to, cvs won't delete ("prune") empty
      directories or create new ones when the repository changes.
      It's generally a good habit to use</para>
      <programlisting>
$ cvs update -d -P      # create dirs as needed, prune empty ones
      </programlisting>
      <para>Version 1.2 archives follow naming conventions that are
      similar to those used by 1.0 (though more platforms are supported.)
      However, rather than containing CVS working-copy information, the
      1.2 (and, presumably, later) archives contain metainformation used
      by the Subversion (svn) source-code control system.</para>
      <para>Subversion client programs are pre-installed on OSX 10.5 and
      later and are typically either pre-installed or readily available
      on Linux and FreeBSD platforms.  The <ulink url="http://subversion.tigris.org">Subversion web page</ulink> contains links to subversion client programs
      for many platforms; users of OSX versions 10.4 and earlier can also
      install Subversion clients via Fink or MacPorts.</para>
      
    </sect1>

    <sect1 id="Building-Everything">
      <title>Building Everything</title>
      <para>Given that you now have everything you need, do the
      following in a running &CCL; to bring your Lisp system
      completely up to date.</para>
      <programlisting>
? (ccl:rebuild-ccl :full t)
      </programlisting>
      <para>That call to the function <literal>rebuild-ccl</literal>
      will perform the following steps:</para>
      <itemizedlist>
        <listitem>
	  <para>Deletes all fasl files and other object files in the
	  <literal>ccl</literal>directory tree</para>
	</listitem>
        <listitem>
	  <para>Runs an external process which does a
	  <literal>make</literal> in the currentplatform's kernel
	  build directory to create a new kernel</para>
	</listitem>
        <listitem>
	  <para>Does <literal>(compile-ccl t)</literal> in the running
	  lisp, to produce aset of fasl files from the &ldquo;higher
	  level&rdquo; lisp sources.</para>
	</listitem>
        <listitem>
	  <para>Does <literal>(xload-level-0 :force)</literal> in the
	  running lisp, to compile thelisp sources in the
	  &ldquo;ccl:level-0;&rdquo; directory into fasl files and
	  then createa bootstrapping image from those fasl
	  files.</para>
	</listitem>
        <listitem>
	  <para>Runs another external process, which causes the newly
	  compiled lispkernel to load the new bootstrapping image.
	  The bootsrtrapping image then loadsthe &ldquo;higher
	  level&rdquo; fasl files and a new copy of the platform's
	  full heap imageis then saved.</para>
	</listitem>
      </itemizedlist>
      <para>If all goes well, it'll all happen without user
      intervention and with some simple progress messages.  If
      anything goes wrong during execution of either of the external
      processes, the process output is displayed as part of a lisp
      error message.</para>
      <para><literal>rebuild-ccl</literal> is essentially just a short
      cut for running all the individual steps involved in rebuilding
      the system.  You can also execute these steps individually, as
      described below.</para>
    </sect1>

    <sect1 id="Building-the-kernel">
      <title>Building the kernel</title>
      <para>The Lisp kernel is the executable which you run to use
      Lisp.  It doesn't actually contain the entire Lisp
      implementation; rather, it loads a heap image which contains the
      specifics - the "library", as it might be called if this was a C
      program.  The kernel also provides runtime support to the heap
      image, such as garbage collection, memory allocation, exception
      handling, and the OS interface.</para>

      <para>The Lisp kernel file has different names on different
      platforms. See FIXTHIS . On all platforms the lisp kernel sources reside
      in <literal>ccl/lisp-kernel</literal>.</para>

      <para>This section gives directions on how to rebuild the Lisp
      kernel from its source code.  Most &CCL; users will rarely
      have to do this.  You probably will only need to do it if you are
      attempting to port &CCL; to a new architecture or extend or enhance
      its kernel in some way.  As mentioned above, this step happens
      automatically when you do
      <programlisting>
? (rebuild-ccl :full t)
      </programlisting>
      </para>


      <sect2 id="Kernel-build-prerequisites">
        <title>Kernel build prerequisites</title>
	<para>The &CCL; kernel can be bult with the following widely
	available tools:</para>
        <itemizedlist>
          <listitem><para>cc or gcc- the GNU C compiler</para></listitem>
          <listitem><para>ld - the GNU linker</para></listitem>
          <listitem><para>m4 or gm4- the GNU m4 macro processor</para></listitem>
          <listitem><para>as - the GNU assembler (version 2.10.1 or later)</para></listitem>
	  <listitem><para>make - either GNU make or, on FreeBSD, the default BSD make program</para></listitem>
	</itemizedlist>
	<para> In general, the more recent the versions of those
	tools, the better; some versions of gcc 3.x on Linux have
	difficulty compiling some of the kernel source code correctly
	(so gcc 4.0 should be used, if possible.)  On OSX, the
	versions of the tools distributed with XCode should work fine;
	on Linux, the versions of the tools installed with the OS (or
	available through its package management system) should work
	fine if they're "recent enough".  On FreeBSD, the installed
	version of the <literal>m4</literal> program doesn't support
	some features that the kernel build process depends on; the
	GNU version of the m4 macroprocessor (called
	<literal>gm4</literal> on FreeBSD) should be installed

	</para>
      </sect2>
      <sect2 id="kernel-build-command">
	<title>Using "make" to build the lisp kernel</title>
        <para>With those tools in place, do:
        <programlisting>
shell> cd ccl/lisp-kernel/<replaceable>PLATFORM</replaceable>
shell> make
	</programlisting>
	</para>
        <para>That'll assemble several assembly language source files,
        compile several C source files, and link
        ../../<replaceable>the kernel</replaceable>.
	</para>
      </sect2>
    </sect1>
    <sect1 id="Building-the-heap-image">
      <title>Building the heap image</title>
      <para>The initial heap image is loaded by the Lisp kernel, and
      provides most all of the language implementation The heap image
      captures the entire state of a running Lisp (except for external
      resources, such as open files and TCP sockets).  After it is
      loaded, the contents of the new Lisp process's memory are
      exactly the same as those of the old Lisp process when the image
      was created.</para>
      <para>The heap image is how we get around the fact that we can't
      run Lisp code until we have a working Lisp implementation, and
      we can't make our Lisp implementation work until we can run Lisp
      code.  Since the heap image already contains a fully-working
      implementation, all we need to do is load it into memory and
      start using it.</para>
      <para>If you're building a new version of &CCL;, you need to
      build a new heap image.</para>
      <para>(You might also wish to build a heap image if you have a
      large program which it is very complicated or time-consuming to
      load, so that you will be able to load it once, save an image,
      and thenceforth never have to load it again. At any time, a heap
      image capturing the entire memory state of a running Lisp can be
      created by calling the function
      <literal>ccl:save-application</literal>.)</para>

      <sect2 id="Development-cycle">
	<title>Development cycle</title>
        <para>Creating a new &CCL; full heap image consists of the
        following steps:</para>
        <orderedlist>
          <listitem><para>Using your existing &CCL;, create a
          bootstrapping image</para></listitem>
          <listitem><para>Using your existing &CCL;, recompile your
          updated &CCL; sources</para></listitem>
          <listitem><para>Invoke &CCL; with the bootstrapping image
          you just created (rather than with the existing full heap
          image).</para></listitem>
	</orderedlist>
	<para>When you invoke &CCL; with the bootstrapping image, it
	will start up, load al of the &CCL; fasl files, and save out
	a new full heap image.  Voila.  You've created a new heap
	image.</para>
        <para>A few points worth noting:</para>
	<itemizedlist>
          <listitem>
	    <para>There's a circular dependency between the full heap
	    image and thebootstrapping image, in that each is used to
	    build the other.</para>
	  </listitem>
          <listitem>
	    <para>There are some minor implementation
	    differences, but the environment in effect after the
	    bootstrapping image has loaded its fasl files is essentially
	    equivalent to the environment provided by the full heap
	    image; the latter loads a lot faster and is easier to
	    distribute, of course.</para>
	  </listitem>
          <listitem>
	    <para>If the full heap image doesn't work (because
	    of an OScompatibilty problem or other bug), it's very likely
	    that thebootstrapping image will suffer the same
	    problems.</para>
	  </listitem>
	</itemizedlist>
        <para>Given a bootstrapping image and a set of up-to-date fasl
        files, the development cycle usually involves editing lisp
        sources (or updating those sources via cvs update),
        recompiling modified files, and using the bootstrapping image
        to produce a new heap image.</para>
      </sect2>

      <sect2 id="Generating-a-bootstrapping-image">
        <title>Generating a bootstrapping image</title>
        <para>The bootstrapping image isn't provided in &CCL;
        distributions. It can be built from the source code provided
        in distributions (using a lisp image and kernel provided in
        those distributions) using the procedure described
        below.</para>

        <para>The bootstrapping image is built by invoking a special
        utility inside a running &CCL; heap image to load files
        contained in the <literal>ccl/level-0</literal> directory. The
        bootstrapping image loads several dozen fasl files.  After
        it's done so, it saves a heap image via
        <literal>save-application</literal>. This process is called
        "cross-dumping".</para>

        <para>Given a source distribution, a lisp kernel, and aheap
        image, one can produce a bootstapping image by first invoking
        &CCL; from the shell:</para>
        <programlisting>
shell&gt; openmcl
Welcome to &CCL; .... !
?
	</programlisting>
	<para>then calling <literal>ccl:xload-level-0</literal> at the
	lisp prompt</para>
	<programlisting>
? (ccl:xload-level-0)
	</programlisting>
        <para>This will compile the lisp sources in the ccl/level-0
        directory if they're newer than the corresponding fasl files
        and will then load the resulting fasl files into a simulated
        lisp heap contained inside data structures inside the running
        lisp. That simulated heap image is then written to
        disk.</para>
        <para><literal>xload-level-0</literal> should be called
        whenever your existing boot image is out-of-date with respect
        to the source files in <literal>ccl:level-0;</literal>
        :</para>
        <programlisting>
? (ccl:xload-level-0 :force)
</programlisting>
        <para>will force recompilation of the level-0 sources.</para>
      </sect2>

      <sect2 id="Generating-fasl-files">
        <title>Generating fasl files</title>
	<para> Calling:</para>
        <programlisting>
? (ccl:compile-ccl)
	</programlisting>
	<para>at the lisp prompt will compile any fasl files that are
	out-of-date with respect to the corresponding lisp sources;
	<literal>(ccl:compile-ccl t)</literal> will force
	recompilation. <literal>ccl:compile-ccl</literal> will reload
	newly-compiled versions of some files;
	<literal>ccl:xcompile-ccl</literal> is analogous, but skips
	this reloading step.</para>
        <para>Unless there are bootstrapping considerations involved,
        it usually doesn't matter whether these files reloaded after
        they're recompiled.</para>
        <para>Calling <literal>compile-ccl</literal> or
        <literal>xcompile-ccl</literal> in an environment where fasl
        files don't yet exist may produce warnings to that effect
        whenever files are <literal>require</literal>d during
        compilation; those warnings can be safely ignored. Depending
        on the maturity of the &CCL; release, calling
        <literal>compile-ccl</literal> or
        <literal>xcompile-ccl</literal> may also produce several
        warnings about undefined functions, etc. They should be
        cleaned up at some point.</para>
      </sect2>

      <sect2 id="Building-a-full-image-from-a-bootstrapping-image">
	<title>Building a full image from a bootstrapping image</title>
	<para>To build a full image from a bootstrapping image, just
	invoke the kernel with the bootstrapping image is an
	argument</para>
        <programlisting>
$ cd ccl                        # wherever your ccl directory is
$ ./KERNEL BOOT_IMAGE
	</programlisting>
        <para>Where <replaceable>KERNEL</replaceable> and
        <replaceable>BOOT_IMAGE</replaceable> are the names of
        the kernel and boot image appropriate to the platform you are
        running on.  See FIXTHIS</para>
        <para>That should load a few dozen fasl files (printing a
        message as each file is loaded.) If all of these files
        successfully load, the lisp will print a prompt. You should be
        able to do essentially everything in that environment that you
        can in the environment provided by a "real" heap image. If
        you're confident that things loaded OK, you can save that
        image.</para>
        <programlisting>
? (ccl:save-application "<replaceable>image_name</replaceable>") ; Overwiting the existing heap image
	</programlisting>
	<para>Where <replaceable>image_name</replaceable> is the name
        of the full heap image for your platform. See FIXTHIS.</para>
        <para>If things go wrong in the early stages of the loading
        sequence, errors are often difficult to debug; until a fair
        amount of code (CLOS, the CL condition system, streams, the
        reader, the read-eval-print loop) is loaded, it's generally
        not possible for the lisp to report an error.  Errors that
        occur during these early stages ("the cold load") sometimes
        cause the lisp kernel debugger (see ) to be invoked; it's
        primitive, but can sometimes help one to get oriented.</para>
      </sect2>
    </sect1>
  </chapter>
